{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventdata\n */\nimport { extend } from 'lodash-es';\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\n\nvar DomEventData = /*#__PURE__*/function () {\n  /**\n   * @param {module:engine/view/view~View} view The instance of the view controller.\n   * @param {Event} domEvent The DOM event.\n   * @param {Object} [additionalData] Additional properties that the instance should contain.\n   */\n  function DomEventData(view, domEvent, additionalData) {\n    _classCallCheck(this, DomEventData);\n\n    /**\n     * Instance of the view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n     */\n    this.view = view;\n    /**\n     * The instance of the document.\n     *\n     * @readonly\n     * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n     */\n\n    this.document = view.document;\n    /**\n     * The DOM event.\n     *\n     * @readonly\n     * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n     */\n\n    this.domEvent = domEvent;\n    /**\n     * The DOM target.\n     *\n     * @readonly\n     * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n     */\n\n    this.domTarget = domEvent.target;\n    extend(this, additionalData);\n  }\n  /**\n   * The tree view element representing the target.\n   *\n   * @readonly\n   * @type module:engine/view/element~Element\n   */\n\n\n  _createClass(DomEventData, [{\n    key: \"preventDefault\",\n\n    /**\n     * Prevents the native's event default action.\n     */\n    value: function preventDefault() {\n      this.domEvent.preventDefault();\n    }\n    /**\n     * Stops native event propagation.\n     */\n\n  }, {\n    key: \"stopPropagation\",\n    value: function stopPropagation() {\n      this.domEvent.stopPropagation();\n    }\n  }, {\n    key: \"target\",\n    get: function get() {\n      return this.view.domConverter.mapDomToView(this.domTarget);\n    }\n  }]);\n\n  return DomEventData;\n}();\n\nexport { DomEventData as default };","map":null,"metadata":{},"sourceType":"module"}