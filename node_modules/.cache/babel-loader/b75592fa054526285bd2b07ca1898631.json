{"ast":null,"code":"import _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/documentselection\n */\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport Selection from './selection';\nimport LiveRange from './liverange';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nvar storePrefix = 'selection:';\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\n\nvar DocumentSelection = /*#__PURE__*/function () {\n  /**\n   * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n   *\n   * @param {module:engine/model/document~Document} doc Document which owns this selection.\n   */\n  function DocumentSelection(doc) {\n    _classCallCheck(this, DocumentSelection);\n\n    /**\n     * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\n     *\n     * @protected\n     */\n    this._selection = new LiveSelection(doc);\n\n    this._selection.delegate('change:range').to(this);\n\n    this._selection.delegate('change:attribute').to(this);\n\n    this._selection.delegate('change:marker').to(this);\n  }\n  /**\n   * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n   * collapsed.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  _createClass(DocumentSelection, [{\n    key: \"getRanges\",\n\n    /**\n     * Returns an iterable that iterates over copies of selection ranges.\n     *\n     * @returns {Iterable.<module:engine/model/range~Range>}\n     */\n    value: function getRanges() {\n      return this._selection.getRanges();\n    }\n    /**\n     * Returns the first position in the selection.\n     * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     *\n     * @returns {module:engine/model/position~Position|null}\n     */\n\n  }, {\n    key: \"getFirstPosition\",\n    value: function getFirstPosition() {\n      return this._selection.getFirstPosition();\n    }\n    /**\n     * Returns the last position in the selection.\n     * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n     * any other position in the selection.\n     *\n     * Returns `null` if there are no ranges in selection.\n     *\n     * @returns {module:engine/model/position~Position|null}\n     */\n\n  }, {\n    key: \"getLastPosition\",\n    value: function getLastPosition() {\n      return this._selection.getLastPosition();\n    }\n    /**\n     * Returns a copy of the first range in the selection.\n     * First range is the one which {@link module:engine/model/range~Range#start start} position\n     * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n     * (not to confuse with the first range added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     *\n     * @returns {module:engine/model/range~Range|null}\n     */\n\n  }, {\n    key: \"getFirstRange\",\n    value: function getFirstRange() {\n      return this._selection.getFirstRange();\n    }\n    /**\n     * Returns a copy of the last range in the selection.\n     * Last range is the one which {@link module:engine/model/range~Range#end end} position\n     * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n     * recently added to the selection).\n     *\n     * Returns `null` if there are no ranges in selection.\n     *\n     * @returns {module:engine/model/range~Range|null}\n     */\n\n  }, {\n    key: \"getLastRange\",\n    value: function getLastRange() {\n      return this._selection.getLastRange();\n    }\n    /**\n     * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n     *\n     * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n     *\n     * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n     * but will not return blocks nested in other blocks.\n     *\n     * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n     *\n     *\t\t<paragraph>[a</paragraph>\n     *\t\t<blockQuote>\n     *\t\t\t<paragraph>b</paragraph>\n     *\t\t</blockQuote>\n     *\t\t<paragraph>c]d</paragraph>\n     *\n     * In this case the paragraph will also be returned, despite the collapsed selection:\n     *\n     *\t\t<paragraph>[]a</paragraph>\n     *\n     * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n     *\n     *\t\t[<blockA></blockA>\n     *\t\t<blockB>\n     *\t\t\t<blockC></blockC>\n     *\t\t\t<blockD></blockD>\n     *\t\t</blockB>\n     *\t\t<blockE></blockE>]\n     *\n     * If the selection is inside a block all the inner blocks (A & B) are returned:\n     *\n     * \t\t<block>\n     *\t\t\t<blockA>[a</blockA>\n     * \t\t\t<blockB>b]</blockB>\n     * \t\t</block>\n     *\n     * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n     * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n     *\n     *\t\t<paragraph>[a</paragraph>\n     *\t\t<paragraph>b</paragraph>\n     *\t\t<paragraph>]c</paragraph> // this block will not be returned\n     *\n     * @returns {Iterable.<module:engine/model/element~Element>}\n     */\n\n  }, {\n    key: \"getSelectedBlocks\",\n    value: function getSelectedBlocks() {\n      return this._selection.getSelectedBlocks();\n    }\n    /**\n     * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n     * one range in the selection, and that range contains exactly one element.\n     * Returns `null` if there is no selected element.\n     *\n     * @returns {module:engine/model/element~Element|null}\n     */\n\n  }, {\n    key: \"getSelectedElement\",\n    value: function getSelectedElement() {\n      return this._selection.getSelectedElement();\n    }\n    /**\n     * Checks whether the selection contains the entire content of the given element. This means that selection must start\n     * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n     * touching the element's end.\n     *\n     * By default, this method will check whether the entire content of the selection's current root is selected.\n     * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n     *\n     * @param {module:engine/model/element~Element} [element=this.anchor.root]\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"containsEntireContent\",\n    value: function containsEntireContent(element) {\n      return this._selection.containsEntireContent(element);\n    }\n    /**\n     * Unbinds all events previously bound by document selection.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._selection.destroy();\n    }\n    /**\n     * Returns iterable that iterates over this selection's attribute keys.\n     *\n     * @returns {Iterable.<String>}\n     */\n\n  }, {\n    key: \"getAttributeKeys\",\n    value: function getAttributeKeys() {\n      return this._selection.getAttributeKeys();\n    }\n    /**\n     * Returns iterable that iterates over this selection's attributes.\n     *\n     * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n     * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n     *\n     * @returns {Iterable.<*>}\n     */\n\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this._selection.getAttributes();\n    }\n    /**\n     * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n     *\n     * @param {String} key Key of attribute to look for.\n     * @returns {*} Attribute value or `undefined`.\n     */\n\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(key) {\n      return this._selection.getAttribute(key);\n    }\n    /**\n     * Checks if the selection has an attribute for given key.\n     *\n     * @param {String} key Key of attribute to check.\n     * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n     */\n\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(key) {\n      return this._selection.hasAttribute(key);\n    }\n    /**\n     * Refreshes selection attributes and markers according to the current position in the model.\n     */\n\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this._selection._updateMarkers();\n\n      this._selection._updateAttributes(false);\n    }\n    /**\n     * Registers a marker group prefix or a marker name to be collected in the\n     * {@link ~DocumentSelection#markers selection markers collection}.\n     *\n     * See also {@link module:engine/model/markercollection~MarkerCollection#getMarkersGroup `MarkerCollection#getMarkersGroup()`}.\n     *\n     * @param {String} prefixOrName The marker group prefix or marker name.\n     */\n\n  }, {\n    key: \"observeMarkers\",\n    value: function observeMarkers(prefixOrName) {\n      this._selection.observeMarkers(prefixOrName);\n    }\n    /**\n     * Checks whether this object is of the given type.\n     *\n     *\t\tselection.is( 'selection' ); // -> true\n     *\t\tselection.is( 'documentSelection' ); // -> true\n     *\t\tselection.is( 'model:selection' ); // -> true\n     *\t\tselection.is( 'model:documentSelection' ); // -> true\n     *\n     *\t\tselection.is( 'view:selection' ); // -> false\n     *\t\tselection.is( 'element' ); // -> false\n     *\t\tselection.is( 'node' ); // -> false\n     *\n     * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n     *\n     * @param {String} type\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"is\",\n    value: function is(type) {\n      return type === 'selection' || type == 'model:selection' || type == 'documentSelection' || type == 'model:documentSelection';\n    }\n    /**\n     * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n     * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n     *\n     * The location can be specified in the same form as\n     * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n     *\n     * @see module:engine/model/writer~Writer#setSelectionFocus\n     * @protected\n     * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n     * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n     * first parameter is a {@link module:engine/model/item~Item model item}.\n     */\n\n  }, {\n    key: \"_setFocus\",\n    value: function _setFocus(itemOrPosition, offset) {\n      this._selection.setFocus(itemOrPosition, offset);\n    }\n    /**\n     * Sets this selection's ranges and direction to the specified location based on the given\n     * {@link module:engine/model/selection~Selectable selectable}.\n     * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n     *\n     * @see module:engine/model/writer~Writer#setSelection\n     * @protected\n     * @param {module:engine/model/selection~Selectable} selectable\n     * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n     * @param {Object} [options]\n     * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n     */\n\n  }, {\n    key: \"_setTo\",\n    value: function _setTo(selectable, placeOrOffset, options) {\n      this._selection.setTo(selectable, placeOrOffset, options);\n    }\n    /**\n     * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n     * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n     *\n     * @see module:engine/model/writer~Writer#setSelectionAttribute\n     * @protected\n     * @param {String} key Key of the attribute to set.\n     * @param {*} value Attribute value.\n     */\n\n  }, {\n    key: \"_setAttribute\",\n    value: function _setAttribute(key, value) {\n      this._selection.setAttribute(key, value);\n    }\n    /**\n     * Removes an attribute with given key from the selection.\n     * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n     * event with removed attribute key.\n     * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n     *\n     * @see module:engine/model/writer~Writer#removeSelectionAttribute\n     * @protected\n     * @param {String} key Key of the attribute to remove.\n     */\n\n  }, {\n    key: \"_removeAttribute\",\n    value: function _removeAttribute(key) {\n      this._selection.removeAttribute(key);\n    }\n    /**\n     * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n     *\n     * @protected\n     * @returns {Iterable.<*>}\n     */\n\n  }, {\n    key: \"_getStoredAttributes\",\n    value: function _getStoredAttributes() {\n      return this._selection._getStoredAttributes();\n    }\n    /**\n     * Temporarily changes the gravity of the selection from the left to the right.\n     *\n     * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n     * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n     * This method allows to temporarily override this behavior by forcing the gravity to the right.\n     *\n     * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n     * of the process.\n     *\n     * @see module:engine/model/writer~Writer#overrideSelectionGravity\n     * @protected\n     * @returns {String} The unique id which allows restoring the gravity.\n     */\n\n  }, {\n    key: \"_overrideGravity\",\n    value: function _overrideGravity() {\n      return this._selection.overrideGravity();\n    }\n    /**\n     * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n     *\n     * Restoring the gravity is only possible using the unique identifier returned by\n     * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n     * the same number of times it was overridden.\n     *\n     * @see module:engine/model/writer~Writer#restoreSelectionGravity\n     * @protected\n     * @param {String} uid The unique id returned by {@link #_overrideGravity}.\n     */\n\n  }, {\n    key: \"_restoreGravity\",\n    value: function _restoreGravity(uid) {\n      this._selection.restoreGravity(uid);\n    }\n    /**\n     * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n     *\n     * @protected\n     * @param {String} key Attribute key to convert.\n     * @returns {String} Converted attribute key, applicable for selection store.\n     */\n\n  }, {\n    key: \"isCollapsed\",\n    get: function get() {\n      return this._selection.isCollapsed;\n    }\n    /**\n     * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n     * Together with {@link #focus} they define the direction of selection, which is important\n     * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n     * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n     *\n     * Is set to `null` if there are no ranges in selection.\n     *\n     * @see #focus\n     * @readonly\n     * @type {module:engine/model/position~Position|null}\n     */\n\n  }, {\n    key: \"anchor\",\n    get: function get() {\n      return this._selection.anchor;\n    }\n    /**\n     * Selection focus. Focus is a position where the selection ends.\n     *\n     * Is set to `null` if there are no ranges in selection.\n     *\n     * @see #anchor\n     * @readonly\n     * @type {module:engine/model/position~Position|null}\n     */\n\n  }, {\n    key: \"focus\",\n    get: function get() {\n      return this._selection.focus;\n    }\n    /**\n     * Returns number of ranges in selection.\n     *\n     * @readonly\n     * @type {Number}\n     */\n\n  }, {\n    key: \"rangeCount\",\n    get: function get() {\n      return this._selection.rangeCount;\n    }\n    /**\n     * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n     * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n\n  }, {\n    key: \"hasOwnRange\",\n    get: function get() {\n      return this._selection.hasOwnRange;\n    }\n    /**\n     * Specifies whether the {@link #focus}\n     * precedes {@link #anchor}.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n\n  }, {\n    key: \"isBackward\",\n    get: function get() {\n      return this._selection.isBackward;\n    }\n    /**\n     * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n     *\n     * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n     *\n     * @readonly\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isGravityOverridden\",\n    get: function get() {\n      return this._selection.isGravityOverridden;\n    }\n    /**\n     * A collection of selection {@link module:engine/model/markercollection~Marker markers}.\n     * Marker is a selection marker when selection range is inside the marker range.\n     *\n     * **Note**: Only markers from {@link ~DocumentSelection#observeMarkers observed markers groups} are collected.\n     *\n     * @readonly\n     * @type {module:utils/collection~Collection}\n     */\n\n  }, {\n    key: \"markers\",\n    get: function get() {\n      return this._selection.markers;\n    }\n    /**\n     * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"_ranges\",\n    get: function get() {\n      return this._selection._ranges;\n    }\n  }], [{\n    key: \"_getStoreAttributeKey\",\n    value: function _getStoreAttributeKey(key) {\n      return storePrefix + key;\n    }\n    /**\n     * Checks whether the given attribute key is an attribute stored on an element.\n     *\n     * @protected\n     * @param {String} key\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"_isStoreAttributeKey\",\n    value: function _isStoreAttributeKey(key) {\n      return key.startsWith(storePrefix);\n    }\n  }]);\n\n  return DocumentSelection;\n}();\n\nexport { DocumentSelection as default };\nmix(DocumentSelection, EmitterMixin);\n/**\n * Fired when selection range(s) changed.\n *\n * @event change:range\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed because the structure of the model has been changed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n */\n\n/**\n * Fired when selection attribute changed.\n *\n * @event change:attribute\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed in the model and its attributes were refreshed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n */\n\n/**\n * Fired when selection marker(s) changed.\n *\n * @event change:marker\n * @param {Boolean} directChange This is always set to `false` in case of `change:marker` event as there is no possibility\n * to change markers directly through {@link module:engine/model/documentselection~DocumentSelection} API.\n * See also {@link module:engine/model/documentselection~DocumentSelection#event:change:range} and\n * {@link module:engine/model/documentselection~DocumentSelection#event:change:attribute}.\n * @param {Array.<module:engine/model/markercollection~Marker>} oldMarkers Markers in which the selection was before the change.\n */\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n//\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n//\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n// present in the selection,\n// * ranges added to this selection updates automatically when the document changes,\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\n//\n// @extends module:engine/model/selection~Selection\n//\n\nvar LiveSelection = /*#__PURE__*/function (_Selection) {\n  _inherits(LiveSelection, _Selection);\n\n  // Creates an empty live selection for given {@link module:engine/model/document~Document}.\n  // @param {module:engine/model/document~Document} doc Document which owns this selection.\n  function LiveSelection(doc) {\n    var _this;\n\n    _classCallCheck(this, LiveSelection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LiveSelection).call(this)); // List of selection markers.\n    // Marker is a selection marker when selection range is inside the marker range.\n    //\n    // @type {module:utils/collection~Collection}\n\n    _this.markers = new Collection({\n      idProperty: 'name'\n    }); // Document which owns this selection.\n    //\n    // @protected\n    // @member {module:engine/model/model~Model}\n\n    _this._model = doc.model; // Document which owns this selection.\n    //\n    // @protected\n    // @member {module:engine/model/document~Document}\n\n    _this._document = doc; // Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n    // last time. Possible values of priority are: `'low'` and `'normal'`.\n    //\n    // Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n    // attributes API are set with `'normal'` priority.\n    //\n    // @private\n    // @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\n\n    _this._attributePriority = new Map(); // Position to which the selection should be set if the last selection range was moved to the graveyard.\n    // @private\n    // @member {module:engine/model/position~Position} module:engine/model/liveselection~LiveSelection#_selectionRestorePosition\n\n    _this._selectionRestorePosition = null; // Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n    // @private\n    // @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\n\n    _this._hasChangedRange = false; // Each overriding gravity adds an UID to the set and each removal removes it.\n    // Gravity is overridden when there's at least one UID in the set.\n    // Gravity is restored when the set is empty.\n    // This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n    // @private\n    // @type {Set}\n\n    _this._overriddenGravityRegister = new Set(); // Prefixes of marker names that should affect `LiveSelection#markers` collection.\n    // @private\n    // @type {Set}\n\n    _this._observedMarkers = new Set(); // Ensure selection is correct after each operation.\n\n    _this.listenTo(_this._model, 'applyOperation', function (evt, args) {\n      var operation = args[0];\n\n      if (!operation.isDocumentOperation || operation.type == 'marker' || operation.type == 'rename' || operation.type == 'noop') {\n        return;\n      } // Fix selection if the last range was removed from it and we have a position to which we can restore the selection.\n\n\n      if (_this._ranges.length == 0 && _this._selectionRestorePosition) {\n        _this._fixGraveyardSelection(_this._selectionRestorePosition);\n      } // \"Forget\" the restore position even if it was not \"used\".\n\n\n      _this._selectionRestorePosition = null;\n\n      if (_this._hasChangedRange) {\n        _this._hasChangedRange = false;\n\n        _this.fire('change:range', {\n          directChange: false\n        });\n      }\n    }, {\n      priority: 'lowest'\n    }); // Ensure selection is correct and up to date after each range change.\n\n\n    _this.on('change:range', function () {\n      var _iterator = _createForOfIteratorHelper(_this.getRanges()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var range = _step.value;\n\n          if (!_this._document._validateSelectionRange(range)) {\n            /**\n             * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n             * starts or ends at incorrect position.\n             *\n             * @error document-selection-wrong-position\n             * @param {module:engine/model/range~Range} range\n             */\n            throw new CKEditorError('document-selection-wrong-position', _assertThisInitialized(_assertThisInitialized(_this)), {\n              range: range\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }); // Update markers data stored by the selection after each marker change.\n    // This handles only marker changes done through marker operations (not model tree changes).\n\n\n    _this.listenTo(_this._model.markers, 'update', function (evt, marker, oldRange, newRange) {\n      _this._updateMarker(marker, newRange);\n    }); // Ensure selection is up to date after each change block.\n\n\n    _this.listenTo(_this._document, 'change', function (evt, batch) {\n      clearAttributesStoredInElement(_this._model, batch);\n    });\n\n    return _this;\n  }\n\n  _createClass(LiveSelection, [{\n    key: \"destroy\",\n    // Unbinds all events previously bound by live selection.\n    value: function destroy() {\n      for (var i = 0; i < this._ranges.length; i++) {\n        this._ranges[i].detach();\n      }\n\n      this.stopListening();\n    }\n  }, {\n    key: \"getRanges\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function getRanges() {\n      return _regeneratorRuntime.wrap(function getRanges$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this._ranges.length) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.delegateYield(_get(_getPrototypeOf(LiveSelection.prototype), \"getRanges\", this).call(this), \"t0\", 2);\n\n            case 2:\n              _context.next = 6;\n              break;\n\n            case 4:\n              _context.next = 6;\n              return this._document._getDefaultRange();\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, getRanges, this);\n    })\n  }, {\n    key: \"getFirstRange\",\n    value: function getFirstRange() {\n      return _get(_getPrototypeOf(LiveSelection.prototype), \"getFirstRange\", this).call(this) || this._document._getDefaultRange();\n    }\n  }, {\n    key: \"getLastRange\",\n    value: function getLastRange() {\n      return _get(_getPrototypeOf(LiveSelection.prototype), \"getLastRange\", this).call(this) || this._document._getDefaultRange();\n    }\n  }, {\n    key: \"setTo\",\n    value: function setTo(selectable, optionsOrPlaceOrOffset, options) {\n      _get(_getPrototypeOf(LiveSelection.prototype), \"setTo\", this).call(this, selectable, optionsOrPlaceOrOffset, options);\n\n      this._updateAttributes(true);\n\n      this._updateMarkers();\n    }\n  }, {\n    key: \"setFocus\",\n    value: function setFocus(itemOrPosition, offset) {\n      _get(_getPrototypeOf(LiveSelection.prototype), \"setFocus\", this).call(this, itemOrPosition, offset);\n\n      this._updateAttributes(true);\n\n      this._updateMarkers();\n    }\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(key, value) {\n      if (this._setAttribute(key, value)) {\n        // Fire event with exact data.\n        var attributeKeys = [key];\n        this.fire('change:attribute', {\n          attributeKeys: attributeKeys,\n          directChange: true\n        });\n      }\n    }\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute(key) {\n      if (this._removeAttribute(key)) {\n        // Fire event with exact data.\n        var attributeKeys = [key];\n        this.fire('change:attribute', {\n          attributeKeys: attributeKeys,\n          directChange: true\n        });\n      }\n    }\n  }, {\n    key: \"overrideGravity\",\n    value: function overrideGravity() {\n      var overrideUid = uid(); // Remember that another overriding has been requested. It will need to be removed\n      // before the gravity is to be restored.\n\n      this._overriddenGravityRegister.add(overrideUid);\n\n      if (this._overriddenGravityRegister.size === 1) {\n        this._updateAttributes(true);\n      }\n\n      return overrideUid;\n    }\n  }, {\n    key: \"restoreGravity\",\n    value: function restoreGravity(uid) {\n      if (!this._overriddenGravityRegister.has(uid)) {\n        /**\n         * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n         * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n         *\n         * @error document-selection-gravity-wrong-restore\n         * @param {String} uid The unique identifier returned by\n         * {@link module:engine/model/documentselection~DocumentSelection#_overrideGravity}.\n         */\n        throw new CKEditorError('document-selection-gravity-wrong-restore', this, {\n          uid: uid\n        });\n      }\n\n      this._overriddenGravityRegister.delete(uid); // Restore gravity only when all overriding have been restored.\n\n\n      if (!this.isGravityOverridden) {\n        this._updateAttributes(true);\n      }\n    }\n  }, {\n    key: \"observeMarkers\",\n    value: function observeMarkers(prefixOrName) {\n      this._observedMarkers.add(prefixOrName);\n\n      this._updateMarkers();\n    }\n  }, {\n    key: \"_popRange\",\n    value: function _popRange() {\n      this._ranges.pop().detach();\n    }\n  }, {\n    key: \"_pushRange\",\n    value: function _pushRange(range) {\n      var liveRange = this._prepareRange(range); // `undefined` is returned when given `range` is in graveyard root.\n\n\n      if (liveRange) {\n        this._ranges.push(liveRange);\n      }\n    } // Prepares given range to be added to selection. Checks if it is correct,\n    // converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n    // and sets listeners listening to the range's change event.\n    //\n    // @private\n    // @param {module:engine/model/range~Range} range\n\n  }, {\n    key: \"_prepareRange\",\n    value: function _prepareRange(range) {\n      var _this2 = this;\n\n      this._checkRange(range);\n\n      if (range.root == this._document.graveyard) {\n        // @if CK_DEBUG // console.warn( 'Trying to add a Range that is in the graveyard root. Range rejected.' );\n        return;\n      }\n\n      var liveRange = LiveRange.fromRange(range); // If selection range is moved to the graveyard remove it from the selection object.\n      // Also, save some data that can be used to restore selection later, on `Model#applyOperation` event.\n\n      liveRange.on('change:range', function (evt, oldRange, data) {\n        _this2._hasChangedRange = true;\n\n        if (liveRange.root == _this2._document.graveyard) {\n          _this2._selectionRestorePosition = data.deletionPosition;\n\n          var index = _this2._ranges.indexOf(liveRange);\n\n          _this2._ranges.splice(index, 1);\n\n          liveRange.detach();\n        }\n      });\n      return liveRange;\n    }\n  }, {\n    key: \"_updateMarkers\",\n    value: function _updateMarkers() {\n      if (!this._observedMarkers.size) {\n        return;\n      }\n\n      var markers = [];\n      var changed = false;\n\n      var _iterator2 = _createForOfIteratorHelper(this._model.markers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _marker2 = _step2.value;\n\n          var markerGroup = _marker2.name.split(':', 1)[0];\n\n          if (!this._observedMarkers.has(markerGroup)) {\n            continue;\n          }\n\n          var markerRange = _marker2.getRange();\n\n          var _iterator3 = _createForOfIteratorHelper(this.getRanges()),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var selectionRange = _step3.value;\n\n              if (markerRange.containsRange(selectionRange, !selectionRange.isCollapsed)) {\n                markers.push(_marker2);\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var oldMarkers = Array.from(this.markers);\n\n      for (var _i = 0, _markers = markers; _i < _markers.length; _i++) {\n        var marker = _markers[_i];\n\n        if (!this.markers.has(marker)) {\n          this.markers.add(marker);\n          changed = true;\n        }\n      }\n\n      for (var _i2 = 0, _Array$from = Array.from(this.markers); _i2 < _Array$from.length; _i2++) {\n        var _marker = _Array$from[_i2];\n\n        if (!markers.includes(_marker)) {\n          this.markers.remove(_marker);\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        this.fire('change:marker', {\n          oldMarkers: oldMarkers,\n          directChange: false\n        });\n      }\n    }\n  }, {\n    key: \"_updateMarker\",\n    value: function _updateMarker(marker, markerRange) {\n      var markerGroup = marker.name.split(':', 1)[0];\n\n      if (!this._observedMarkers.has(markerGroup)) {\n        return;\n      }\n\n      var changed = false;\n      var oldMarkers = Array.from(this.markers);\n      var hasMarker = this.markers.has(marker);\n\n      if (!markerRange) {\n        if (hasMarker) {\n          this.markers.remove(marker);\n          changed = true;\n        }\n      } else {\n        var contained = false;\n\n        var _iterator4 = _createForOfIteratorHelper(this.getRanges()),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var selectionRange = _step4.value;\n\n            if (markerRange.containsRange(selectionRange, !selectionRange.isCollapsed)) {\n              contained = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        if (contained && !hasMarker) {\n          this.markers.add(marker);\n          changed = true;\n        } else if (!contained && hasMarker) {\n          this.markers.remove(marker);\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        this.fire('change:marker', {\n          oldMarkers: oldMarkers,\n          directChange: false\n        });\n      }\n    } // Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n    //\n    // @protected\n    // @param {Boolean} clearAll\n    // @fires change:attribute\n\n  }, {\n    key: \"_updateAttributes\",\n    value: function _updateAttributes(clearAll) {\n      var newAttributes = toMap(this._getSurroundingAttributes());\n      var oldAttributes = toMap(this.getAttributes());\n\n      if (clearAll) {\n        // If `clearAll` remove all attributes and reset priorities.\n        this._attributePriority = new Map();\n        this._attrs = new Map();\n      } else {\n        // If not, remove only attributes added with `low` priority.\n        var _iterator5 = _createForOfIteratorHelper(this._attributePriority),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _step5$value = _slicedToArray(_step5.value, 2),\n                key = _step5$value[0],\n                priority = _step5$value[1];\n\n            if (priority == 'low') {\n              this._attrs.delete(key);\n\n              this._attributePriority.delete(key);\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n\n      this._setAttributesTo(newAttributes); // Let's evaluate which attributes really changed.\n\n\n      var changed = []; // First, loop through all attributes that are set on selection right now.\n      // Check which of them are different than old attributes.\n\n      var _iterator6 = _createForOfIteratorHelper(this.getAttributes()),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              newKey = _step6$value[0],\n              newValue = _step6$value[1];\n\n          if (!oldAttributes.has(newKey) || oldAttributes.get(newKey) !== newValue) {\n            changed.push(newKey);\n          }\n        } // Then, check which of old attributes got removed.\n\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(oldAttributes),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 1),\n              oldKey = _step7$value[0];\n\n          if (!this.hasAttribute(oldKey)) {\n            changed.push(oldKey);\n          }\n        } // Fire event with exact data (fire only if anything changed).\n\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      if (changed.length > 0) {\n        this.fire('change:attribute', {\n          attributeKeys: changed,\n          directChange: false\n        });\n      }\n    } // Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n    // parameter).\n    //\n    // @private\n    // @param {String} key Attribute key.\n    // @param {*} value Attribute value.\n    // @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n    // is caused by `Batch` API.\n    // @returns {Boolean} Whether value has changed.\n\n  }, {\n    key: \"_setAttribute\",\n    value: function _setAttribute(key, value) {\n      var directChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var priority = directChange ? 'normal' : 'low';\n\n      if (priority == 'low' && this._attributePriority.get(key) == 'normal') {\n        // Priority too low.\n        return false;\n      }\n\n      var oldValue = _get(_getPrototypeOf(LiveSelection.prototype), \"getAttribute\", this).call(this, key); // Don't do anything if value has not changed.\n\n\n      if (oldValue === value) {\n        return false;\n      }\n\n      this._attrs.set(key, value); // Update priorities map.\n\n\n      this._attributePriority.set(key, priority);\n\n      return true;\n    } // Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n    // parameter).\n    //\n    // NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n    // be changed according to `directChange` parameter.\n    //\n    // @private\n    // @param {String} key Attribute key.\n    // @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n    // is caused by `Batch` API.\n    // @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\n    // existing attribute had higher priority.\n\n  }, {\n    key: \"_removeAttribute\",\n    value: function _removeAttribute(key) {\n      var directChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var priority = directChange ? 'normal' : 'low';\n\n      if (priority == 'low' && this._attributePriority.get(key) == 'normal') {\n        // Priority too low.\n        return false;\n      } // Update priorities map.\n\n\n      this._attributePriority.set(key, priority); // Don't do anything if value has not changed.\n\n\n      if (!_get(_getPrototypeOf(LiveSelection.prototype), \"hasAttribute\", this).call(this, key)) {\n        return false;\n      }\n\n      this._attrs.delete(key);\n\n      return true;\n    } // Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n    // `directChange` parameter).\n    //\n    // @private\n    // @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\n    // @returns {Set.<String>} Changed attribute keys.\n\n  }, {\n    key: \"_setAttributesTo\",\n    value: function _setAttributesTo(attrs) {\n      var changed = new Set();\n\n      var _iterator8 = _createForOfIteratorHelper(this.getAttributes()),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _step8$value = _slicedToArray(_step8.value, 2),\n              oldKey = _step8$value[0],\n              oldValue = _step8$value[1];\n\n          // Do not remove attribute if attribute with same key and value is about to be set.\n          if (attrs.get(oldKey) === oldValue) {\n            continue;\n          } // All rest attributes will be removed so changed attributes won't change .\n\n\n          this._removeAttribute(oldKey, false);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      var _iterator9 = _createForOfIteratorHelper(attrs),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _step9$value = _slicedToArray(_step9.value, 2),\n              key = _step9$value[0],\n              value = _step9$value[1];\n\n          // Attribute may not be set because of attributes or because same key/value is already added.\n          var gotAdded = this._setAttribute(key, value, false);\n\n          if (gotAdded) {\n            changed.add(key);\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return changed;\n    } // Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n    //\n    // @protected\n    // @returns {Iterable.<*>}\n\n  }, {\n    key: \"_getStoredAttributes\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function _getStoredAttributes() {\n      var selectionParent, _iterator10, _step10, key, realKey;\n\n      return _regeneratorRuntime.wrap(function _getStoredAttributes$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              selectionParent = this.getFirstPosition().parent;\n\n              if (!(this.isCollapsed && selectionParent.isEmpty)) {\n                _context2.next = 21;\n                break;\n              }\n\n              _iterator10 = _createForOfIteratorHelper(selectionParent.getAttributeKeys());\n              _context2.prev = 3;\n\n              _iterator10.s();\n\n            case 5:\n              if ((_step10 = _iterator10.n()).done) {\n                _context2.next = 13;\n                break;\n              }\n\n              key = _step10.value;\n\n              if (!key.startsWith(storePrefix)) {\n                _context2.next = 11;\n                break;\n              }\n\n              realKey = key.substr(storePrefix.length);\n              _context2.next = 11;\n              return [realKey, selectionParent.getAttribute(key)];\n\n            case 11:\n              _context2.next = 5;\n              break;\n\n            case 13:\n              _context2.next = 18;\n              break;\n\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](3);\n\n              _iterator10.e(_context2.t0);\n\n            case 18:\n              _context2.prev = 18;\n\n              _iterator10.f();\n\n              return _context2.finish(18);\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _getStoredAttributes, this, [[3, 15, 18, 21]]);\n    }) // Checks model text nodes that are closest to the selection's first position and returns attributes of first\n    // found element. If there are no text nodes in selection's first position parent, it returns selection\n    // attributes stored in that parent.\n    //\n    // @private\n    // @returns {Iterable.<*>} Collection of attributes.\n\n  }, {\n    key: \"_getSurroundingAttributes\",\n    value: function _getSurroundingAttributes() {\n      var position = this.getFirstPosition();\n      var schema = this._model.schema;\n      var attrs = null;\n\n      if (!this.isCollapsed) {\n        // 1. If selection is a range...\n        var range = this.getFirstRange(); // ...look for a first character node in that range and take attributes from it.\n\n        var _iterator11 = _createForOfIteratorHelper(range),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var value = _step11.value;\n\n            // If the item is an object, we don't want to get attributes from its children.\n            if (value.item.is('element') && schema.isObject(value.item)) {\n              break;\n            }\n\n            if (value.type == 'text') {\n              attrs = value.item.getAttributes();\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      } else {\n        // 2. If the selection is a caret or the range does not contain a character node...\n        var nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n        var nodeAfter = position.textNode ? position.textNode : position.nodeAfter; // When gravity is overridden then don't take node before into consideration.\n\n        if (!this.isGravityOverridden) {\n          // ...look at the node before caret and take attributes from it if it is a character node.\n          attrs = getAttrsIfCharacter(nodeBefore);\n        } // 3. If not, look at the node after caret...\n\n\n        if (!attrs) {\n          attrs = getAttrsIfCharacter(nodeAfter);\n        } // 4. If not, try to find the first character on the left, that is in the same node.\n        // When gravity is overridden then don't take node before into consideration.\n\n\n        if (!this.isGravityOverridden && !attrs) {\n          var node = nodeBefore;\n\n          while (node && !schema.isInline(node) && !attrs) {\n            node = node.previousSibling;\n            attrs = getAttrsIfCharacter(node);\n          }\n        } // 5. If not found, try to find the first character on the right, that is in the same node.\n\n\n        if (!attrs) {\n          var _node = nodeAfter;\n\n          while (_node && !schema.isInline(_node) && !attrs) {\n            _node = _node.nextSibling;\n            attrs = getAttrsIfCharacter(_node);\n          }\n        } // 6. If not found, selection should retrieve attributes from parent.\n\n\n        if (!attrs) {\n          attrs = this._getStoredAttributes();\n        }\n      }\n\n      return attrs;\n    } // Fixes the selection after all its ranges got removed.\n    //\n    // @private\n    // @param {module:engine/model/position~Position} deletionPosition Position where the deletion happened.\n\n  }, {\n    key: \"_fixGraveyardSelection\",\n    value: function _fixGraveyardSelection(deletionPosition) {\n      // Find a range that is a correct selection range and is closest to the position where the deletion happened.\n      var selectionRange = this._model.schema.getNearestSelectionRange(deletionPosition); // If nearest valid selection range has been found - add it in the place of old range.\n\n\n      if (selectionRange) {\n        // Check the range, convert it to live range, bind events, etc.\n        this._pushRange(selectionRange);\n      } // If nearest valid selection range cannot be found don't add any range. Selection will be set to the default range.\n\n    }\n  }, {\n    key: \"isCollapsed\",\n    get: function get() {\n      var length = this._ranges.length;\n      return length === 0 ? this._document._getDefaultRange().isCollapsed : _get(_getPrototypeOf(LiveSelection.prototype), \"isCollapsed\", this);\n    }\n  }, {\n    key: \"anchor\",\n    get: function get() {\n      return _get(_getPrototypeOf(LiveSelection.prototype), \"anchor\", this) || this._document._getDefaultRange().start;\n    }\n  }, {\n    key: \"focus\",\n    get: function get() {\n      return _get(_getPrototypeOf(LiveSelection.prototype), \"focus\", this) || this._document._getDefaultRange().end;\n    }\n  }, {\n    key: \"rangeCount\",\n    get: function get() {\n      return this._ranges.length ? this._ranges.length : 1;\n    } // Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n    // {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n    //\n    // @readonly\n    // @type {Boolean}\n\n  }, {\n    key: \"hasOwnRange\",\n    get: function get() {\n      return this._ranges.length > 0;\n    } // When set to `true` then selection attributes on node before the caret won't be taken\n    // into consideration while updating selection attributes.\n    //\n    // @protected\n    // @type {Boolean}\n\n  }, {\n    key: \"isGravityOverridden\",\n    get: function get() {\n      return !!this._overriddenGravityRegister.size;\n    }\n  }]);\n\n  return LiveSelection;\n}(Selection); // Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n//\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\n//\n// @param {module:engine/model/item~Item|null}  node\n// @returns {Boolean}\n\n\nfunction getAttrsIfCharacter(node) {\n  if (node instanceof TextProxy || node instanceof Text) {\n    return node.getAttributes();\n  }\n\n  return null;\n} // Removes selection attributes from element which is not empty anymore.\n//\n// @param {module:engine/model/model~Model} model\n// @param {module:engine/model/batch~Batch} batch\n\n\nfunction clearAttributesStoredInElement(model, batch) {\n  var differ = model.document.differ;\n\n  var _iterator12 = _createForOfIteratorHelper(differ.getChanges()),\n      _step12;\n\n  try {\n    var _loop = function _loop() {\n      var entry = _step12.value;\n\n      if (entry.type != 'insert') {\n        return \"continue\";\n      }\n\n      var changeParent = entry.position.parent;\n      var isNoLongerEmpty = entry.length === changeParent.maxOffset;\n\n      if (isNoLongerEmpty) {\n        model.enqueueChange(batch, function (writer) {\n          var storedAttributes = Array.from(changeParent.getAttributeKeys()).filter(function (key) {\n            return key.startsWith(storePrefix);\n          });\n\n          var _iterator13 = _createForOfIteratorHelper(storedAttributes),\n              _step13;\n\n          try {\n            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n              var key = _step13.value;\n              writer.removeAttribute(key, changeParent);\n            }\n          } catch (err) {\n            _iterator13.e(err);\n          } finally {\n            _iterator13.f();\n          }\n        });\n      }\n    };\n\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}