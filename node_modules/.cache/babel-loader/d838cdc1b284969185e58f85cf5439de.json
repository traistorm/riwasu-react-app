{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nimport React, { useCallback, useContext, useMemo } from 'react';\nimport omit from 'lodash/omit';\nimport Menu from '../Menu/Menu';\nimport MenuItem from '../Menu/MenuItem';\nimport { mergeRefs, useClassNames } from '../utils';\nimport PropTypes from 'prop-types';\nimport { SidenavContext } from '../Sidenav/Sidenav';\nimport AngleLeft from '@rsuite/icons/legacy/AngleLeft';\nimport AngleRight from '@rsuite/icons/legacy/AngleRight';\nimport useCustom from '../utils/useCustom';\nimport DropdownContext from './DropdownContext';\nimport { NavbarContext } from '../Navbar';\nimport Menubar from '../Menu/Menubar';\nimport SidenavDropdownMenu from '../Sidenav/SidenavDropdownMenu';\nimport Disclosure from '../Disclosure';\n/**\n * The <Dropdown.Menu> API\n *\n * @description\n * Note the difference between this component and <Menu> component:\n * <Menu> is used for ARIA menu control logic and is used internally only.\n * This component is only used for supporting submenu syntax and is\n * assigned to Dropdown.Menu\n *\n * @example\n *\n * <Dropdown>\n *   <Dropdown.Item>Item 1</Dropdown.Item>\n *   <Dropdown.Menu title=\"Submenu\">\n *     <Dropdown.Item>Sub item</Dropdown.Item>\n *   </Dropdown.Menu>\n * </Dropdown>\n */\n\nvar DropdownMenu = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var onToggle = props.onToggle,\n      eventKey = props.eventKey,\n      title = props.title,\n      activeKey = props.activeKey,\n      onSelect = props.onSelect,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'dropdown-menu' : _props$classPrefix,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"onToggle\", \"eventKey\", \"title\", \"activeKey\", \"onSelect\", \"classPrefix\", \"children\"]);\n\n  var dropdown = useContext(DropdownContext);\n  var sidenav = useContext(SidenavContext);\n  var withinNavbar = Boolean(useContext(NavbarContext));\n\n  var _useCustom = useCustom('DropdownMenu'),\n      rtl = _useCustom.rtl;\n\n  var handleToggleSubmenu = useCallback(function (_, event) {\n    onToggle === null || onToggle === void 0 ? void 0 : onToggle(eventKey, event);\n  }, [eventKey, onToggle]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix,\n      withClassPrefix = _useClassNames.withClassPrefix;\n\n  var _useClassNames2 = useClassNames('dropdown-menu'),\n      withMenuClassPrefix = _useClassNames2.withClassPrefix,\n      mergeMenuClassName = _useClassNames2.merge;\n\n  var _useClassNames3 = useClassNames('dropdown-item'),\n      mergeItemClassNames = _useClassNames3.merge,\n      withItemClassPrefix = _useClassNames3.withClassPrefix,\n      prefixItemClassName = _useClassNames3.prefix;\n\n  var contextValue = useMemo(function () {\n    return {\n      activeKey: activeKey,\n      onSelect: onSelect\n    };\n  }, [activeKey, onSelect]); // <Dropdown.Menu> is used outside of <Dropdown>\n  // renders a vertical `menubar`\n\n  if (!dropdown) {\n    var classes = merge(props.className, withClassPrefix());\n    return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Menubar, {\n      vertical: true\n    }, function (menubar, menubarRef) {\n      return /*#__PURE__*/React.createElement(\"ul\", _extends({\n        ref: mergeRefs(menubarRef, ref),\n        className: classes\n      }, menubar, rest), children);\n    }));\n  }\n\n  if (sidenav !== null && sidenav !== void 0 && sidenav.expanded) {\n    return /*#__PURE__*/React.createElement(SidenavDropdownMenu, omit(props, 'classPrefix'));\n  } // Parent menu exists. This is a submenu.\n  // Should render a `menuitem` that controls this submenu.\n\n\n  var _omit = omit(rest, ['trigger']),\n      icon = _omit.icon,\n      className = _omit.className,\n      disabled = _omit.disabled,\n      menuProps = _objectWithoutPropertiesLoose(_omit, [\"icon\", \"className\", \"disabled\"]);\n\n  var Icon = rtl ? AngleLeft : AngleRight; // Renders a disclosure when used within <Navbar>\n\n  if (withinNavbar) {\n    return /*#__PURE__*/React.createElement(Disclosure, {\n      hideOnClickOutside: true,\n      trigger: ['click', 'mouseover']\n    }, function (_ref, containerRef) {\n      var open = _ref.open,\n          props = _objectWithoutPropertiesLoose(_ref, [\"open\"]);\n\n      var classes = mergeItemClassNames(className, withItemClassPrefix({\n        disabled: disabled,\n        open: open,\n        submenu: true\n      }));\n      return /*#__PURE__*/React.createElement(\"li\", _extends({\n        ref: mergeRefs(ref, containerRef),\n        className: classes\n      }, props), /*#__PURE__*/React.createElement(Disclosure.Button, null, function (_ref2, buttonRef) {\n        var open = _ref2.open,\n            buttonProps = _objectWithoutPropertiesLoose(_ref2, [\"open\"]);\n\n        var classes = mergeItemClassNames(className, prefixItemClassName(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"toggle\"]))), withItemClassPrefix({\n          'with-icon': icon,\n          open: open,\n          disabled: disabled\n        }));\n        return /*#__PURE__*/React.createElement(\"div\", _extends({\n          ref: mergeRefs(buttonRef, buttonRef),\n          className: classes,\n          \"data-event-key\": eventKey,\n          \"data-event-key-type\": typeof eventKey\n        }, buttonProps), icon && /*#__PURE__*/React.cloneElement(icon, {\n          className: prefix('menu-icon')\n        }), title, /*#__PURE__*/React.createElement(Icon, {\n          className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"toggle-icon\"])))\n        }));\n      }), /*#__PURE__*/React.createElement(Disclosure.Content, null, function (_ref3, elementRef) {\n        var open = _ref3.open;\n        var menuClassName = mergeMenuClassName(className, withMenuClassPrefix());\n        return /*#__PURE__*/React.createElement(\"ul\", _extends({\n          ref: elementRef,\n          className: menuClassName,\n          hidden: !open\n        }, menuProps), children);\n      }));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Menu, {\n    openMenuOn: ['mouseover', 'click'],\n    renderMenuButton: function renderMenuButton(_ref4, buttonRef) {\n      var open = _ref4.open,\n          menuButtonProps = _objectWithoutPropertiesLoose(_ref4, [\"open\"]);\n\n      return /*#__PURE__*/React.createElement(MenuItem, {\n        disabled: disabled\n      }, function (_ref5, menuitemRef) {\n        var selected = _ref5.selected,\n            active = _ref5.active,\n            menuitem = _objectWithoutPropertiesLoose(_ref5, [\"selected\", \"active\"]);\n\n        var classes = mergeItemClassNames(className, prefixItemClassName(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"toggle\"]))), withItemClassPrefix({\n          'with-icon': icon,\n          open: open,\n          active: selected,\n          disabled: disabled,\n          focus: active\n        }));\n        return /*#__PURE__*/React.createElement(\"div\", _extends({\n          ref: mergeRefs(buttonRef, menuitemRef),\n          className: classes,\n          \"data-event-key\": eventKey,\n          \"data-event-key-type\": typeof eventKey\n        }, menuitem, omit(menuButtonProps, ['role'])), icon && /*#__PURE__*/React.cloneElement(icon, {\n          className: prefix('menu-icon')\n        }), title, /*#__PURE__*/React.createElement(Icon, {\n          className: prefix(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"toggle-icon\"])))\n        }));\n      });\n    },\n    renderMenuPopup: function renderMenuPopup(_ref6, popupRef) {\n      var open = _ref6.open,\n          popupProps = _objectWithoutPropertiesLoose(_ref6, [\"open\"]);\n\n      var menuClassName = mergeMenuClassName(className, withMenuClassPrefix());\n      return /*#__PURE__*/React.createElement(\"ul\", _extends({\n        ref: popupRef,\n        className: menuClassName,\n        hidden: !open\n      }, popupProps, menuProps), children);\n    },\n    onToggleMenu: handleToggleSubmenu\n  }, function (_ref7, menuContainerRef) {\n    var open = _ref7.open,\n        menuContainer = _objectWithoutPropertiesLoose(_ref7, [\"open\"]);\n\n    var classes = mergeItemClassNames(className, withItemClassPrefix({\n      disabled: disabled,\n      open: open,\n      submenu: true\n    }));\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      ref: mergeRefs(ref, menuContainerRef),\n      className: classes\n    }, menuContainer));\n  });\n});\nDropdownMenu.displayName = 'Dropdown.Menu';\nDropdownMenu.propTypes = {\n  active: PropTypes.bool,\n  activeKey: PropTypes.any,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  icon: PropTypes.any,\n  classPrefix: PropTypes.string,\n  pullLeft: PropTypes.bool,\n  title: PropTypes.node,\n  open: PropTypes.bool,\n  trigger: PropTypes.oneOf(['click', 'hover']),\n  eventKey: PropTypes.any,\n  expanded: PropTypes.bool,\n  collapsible: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggle: PropTypes.func\n};\nexport default DropdownMenu;","map":null,"metadata":{},"sourceType":"module"}