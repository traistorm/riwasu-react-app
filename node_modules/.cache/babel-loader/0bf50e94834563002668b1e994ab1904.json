{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/operation\n */\n\n/**\n * Abstract base operation class.\n *\n * @abstract\n */\nvar Operation = /*#__PURE__*/function () {\n  /**\n   * Base operation constructor.\n   *\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  function Operation(baseVersion) {\n    _classCallCheck(this, Operation);\n\n    /**\n     * {@link module:engine/model/document~Document#version} on which operation can be applied. If you try to\n     * {@link module:engine/model/model~Model#applyOperation apply} operation with different base version than the\n     * {@link module:engine/model/document~Document#version document version} the\n     * {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n     *\n     * @member {Number}\n     */\n    this.baseVersion = baseVersion;\n    /**\n     * Defines whether operation is executed on attached or detached {@link module:engine/model/item~Item items}.\n     *\n     * @readonly\n     * @member {Boolean} #isDocumentOperation\n     */\n\n    this.isDocumentOperation = this.baseVersion !== null;\n    /**\n     * {@link module:engine/model/batch~Batch Batch} to which the operation is added or `null` if the operation is not\n     * added to any batch yet.\n     *\n     * @member {module:engine/model/batch~Batch|null} #batch\n     */\n\n    this.batch = null;\n    /**\n     * Operation type.\n     *\n     * @readonly\n     * @member {String} #type\n     */\n\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @method #clone\n     * @returns {module:engine/model/operation/operation~Operation} Clone of this operation.\n     */\n\n    /**\n     * Creates and returns a reverse operation. Reverse operation when executed right after\n     * the original operation will bring back tree model state to the point before the original\n     * operation execution. In other words, it reverses changes done by the original operation.\n     *\n     * Keep in mind that tree model state may change since executing the original operation,\n     * so reverse operation will be \"outdated\". In that case you will need to transform it by\n     * all operations that were executed after the original operation.\n     *\n     * @method #getReversed\n     * @returns {module:engine/model/operation/operation~Operation} Reversed operation.\n     */\n\n    /**\n     * Executes the operation - modifications described by the operation properties will be applied to the model tree.\n     *\n     * @protected\n     * @method #_execute\n     */\n  }\n  /**\n   * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\n   * an error if operation is not valid.\n   *\n   * @protected\n   * @method #_validate\n   */\n\n\n  _createClass(Operation, [{\n    key: \"_validate\",\n    value: function _validate() {}\n    /**\n     * Custom toJSON method to solve child-parent circular dependencies.\n     *\n     * @method #toJSON\n     * @returns {Object} Clone of this object with the operation property replaced with string.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      // This method creates only a shallow copy, all nested objects should be defined separately.\n      // See https://github.com/ckeditor/ckeditor5-engine/issues/1477.\n      var json = Object.assign({}, this);\n      json.__className = this.constructor.className; // Remove reference to the parent `Batch` to avoid circular dependencies.\n\n      delete json.batch; // Only document operations are shared with other clients so it is not necessary to keep this information.\n\n      delete json.isDocumentOperation;\n      return json;\n    }\n    /**\n     * Name of the operation class used for serialization.\n     *\n     * @type {String}\n     */\n\n  }], [{\n    key: \"fromJSON\",\n\n    /**\n     * Creates Operation object from deserilized object, i.e. from parsed JSON string.\n     *\n     * @param {Object} json Deserialized JSON object.\n     * @param {module:engine/model/document~Document} doc Document on which this operation will be applied.\n     * @returns {module:engine/model/operation/operation~Operation}\n     */\n    value: function fromJSON(json) {\n      return new this(json.baseVersion);\n    } // @if CK_DEBUG_ENGINE // log() {\n    // @if CK_DEBUG_ENGINE // \tconsole.log( this.toString() );\n    // @if CK_DEBUG_ENGINE // }\n\n  }, {\n    key: \"className\",\n    get: function get() {\n      return 'Operation';\n    }\n  }]);\n\n  return Operation;\n}();\n\nexport { Operation as default };","map":null,"metadata":{},"sourceType":"module"}