{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injecttypingmutationshandling\n */\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\nimport { getSingleTextNodeChange, containerChildrenMutated } from './utils';\n/**\n * Handles mutations caused by normal typing.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\n\nexport default function injectTypingMutationsHandling(editor) {\n  editor.editing.view.document.on('mutations', function (evt, mutations, viewSelection) {\n    new MutationHandler(editor).handle(mutations, viewSelection);\n  });\n}\n/**\n * Helper class for translating DOM mutations into model changes.\n *\n * @private\n */\n\nvar MutationHandler = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of the mutation handler.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   */\n  function MutationHandler(editor) {\n    _classCallCheck(this, MutationHandler);\n\n    /**\n     * Editor instance for which mutations are handled.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor} #editor\n     */\n    this.editor = editor;\n    /**\n     * The editing controller.\n     *\n     * @readonly\n     * @member {module:engine/controller/editingcontroller~EditingController} #editing\n     */\n\n    this.editing = this.editor.editing;\n  }\n  /**\n   * Handles given mutations.\n   *\n   * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n   * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n   * @param {module:engine/view/selection~Selection|null} viewSelection\n   */\n\n\n  _createClass(MutationHandler, [{\n    key: \"handle\",\n    value: function handle(mutations, viewSelection) {\n      if (containerChildrenMutated(mutations)) {\n        this._handleContainerChildrenMutations(mutations, viewSelection);\n      } else {\n        var _iterator = _createForOfIteratorHelper(mutations),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var mutation = _step.value;\n\n            // Fortunately it will never be both.\n            this._handleTextMutation(mutation, viewSelection);\n\n            this._handleTextNodeInsertion(mutation);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n    /**\n     * Handles situations when container's children mutated during input. This can happen when\n     * the browser is trying to \"fix\" DOM in certain situations. For example, when the user starts to type\n     * in `<p><a href=\"\"><i>Link{}</i></a></p>`, the browser might change the order of elements\n     * to `<p><i><a href=\"\">Link</a>x{}</i></p>`. A similar situation happens when the spell checker\n     * replaces a word wrapped with `<strong>` with a word wrapped with a `<b>` element.\n     *\n     * To handle such situations, the common DOM ancestor of all mutations is converted to the model representation\n     * and then compared with the current model to calculate the proper text change.\n     *\n     * Note: Single text node insertion is handled in {@link #_handleTextNodeInsertion} and text node mutation is handled\n     * in {@link #_handleTextMutation}).\n     *\n     * @private\n     * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n     * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n     * @param {module:engine/view/selection~Selection|null} viewSelection\n     */\n\n  }, {\n    key: \"_handleContainerChildrenMutations\",\n    value: function _handleContainerChildrenMutations(mutations, viewSelection) {\n      // Get common ancestor of all mutations.\n      var mutationsCommonAncestor = getMutationsContainer(mutations); // Quit if there is no common ancestor.\n\n      if (!mutationsCommonAncestor) {\n        return;\n      }\n\n      var domConverter = this.editor.editing.view.domConverter; // Get common ancestor in DOM.\n\n      var domMutationCommonAncestor = domConverter.mapViewToDom(mutationsCommonAncestor); // Create fresh DomConverter so it will not use existing mapping and convert current DOM to model.\n      // This wouldn't be needed if DomConverter would allow to create fresh view without checking any mappings.\n\n      var freshDomConverter = new DomConverter(this.editor.editing.view.document);\n      var modelFromCurrentDom = this.editor.data.toModel(freshDomConverter.domToView(domMutationCommonAncestor)).getChild(0); // Current model.\n\n      var currentModel = this.editor.editing.mapper.toModelElement(mutationsCommonAncestor); // If common ancestor is not mapped, do not do anything. It probably is a parent of another view element.\n      // That means that we would need to diff model elements (see `if` below). Better return early instead of\n      // trying to get a reasonable model ancestor. It will fell into the `if` below anyway.\n      // This situation happens for example for lists. If `<ul>` is a common ancestor, `currentModel` is `undefined`\n      // because `<ul>` is not mapped (`<li>`s are).\n      // See https://github.com/ckeditor/ckeditor5/issues/718.\n\n      if (!currentModel) {\n        return;\n      } // Get children from both ancestors.\n\n\n      var modelFromDomChildren = Array.from(modelFromCurrentDom.getChildren());\n      var currentModelChildren = Array.from(currentModel.getChildren()); // Remove the last `<softBreak>` from the end of `modelFromDomChildren` if there is no `<softBreak>` in current model.\n      // If the described scenario happened, it means that this is a bogus `<br />` added by a browser.\n\n      var lastDomChild = modelFromDomChildren[modelFromDomChildren.length - 1];\n      var lastCurrentChild = currentModelChildren[currentModelChildren.length - 1];\n      var isLastDomChildSoftBreak = lastDomChild && lastDomChild.is('element', 'softBreak');\n      var isLastCurrentChildSoftBreak = lastCurrentChild && !lastCurrentChild.is('element', 'softBreak');\n\n      if (isLastDomChildSoftBreak && isLastCurrentChildSoftBreak) {\n        modelFromDomChildren.pop();\n      }\n\n      var schema = this.editor.model.schema; // Skip situations when common ancestor has any container elements.\n\n      if (!isSafeForTextMutation(modelFromDomChildren, schema) || !isSafeForTextMutation(currentModelChildren, schema)) {\n        return;\n      } // Replace &nbsp; inserted by the browser with normal space. See comment in `_handleTextMutation`.\n      // Replace non-texts with any character. This is potentially dangerous but passes in manual tests. The thing is\n      // that we need to take care of proper indexes so we cannot simply remove non-text elements from the content.\n      // By inserting a character we keep all the real texts on their indexes.\n\n\n      var newText = modelFromDomChildren.map(function (item) {\n        return item.is('$text') ? item.data : '@';\n      }).join('').replace(/\\u00A0/g, ' ');\n      var oldText = currentModelChildren.map(function (item) {\n        return item.is('$text') ? item.data : '@';\n      }).join('').replace(/\\u00A0/g, ' '); // Do nothing if mutations created same text.\n\n      if (oldText === newText) {\n        return;\n      }\n\n      var diffResult = diff(oldText, newText);\n\n      var _calculateChanges = calculateChanges(diffResult),\n          firstChangeAt = _calculateChanges.firstChangeAt,\n          insertions = _calculateChanges.insertions,\n          deletions = _calculateChanges.deletions; // Try setting new model selection according to passed view selection.\n\n\n      var modelSelectionRange = null;\n\n      if (viewSelection) {\n        modelSelectionRange = this.editing.mapper.toModelRange(viewSelection.getFirstRange());\n      }\n\n      var insertText = newText.substr(firstChangeAt, insertions);\n      var removeRange = this.editor.model.createRange(this.editor.model.createPositionAt(currentModel, firstChangeAt), this.editor.model.createPositionAt(currentModel, firstChangeAt + deletions));\n      this.editor.execute('input', {\n        text: insertText,\n        range: removeRange,\n        resultRange: modelSelectionRange\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_handleTextMutation\",\n    value: function _handleTextMutation(mutation, viewSelection) {\n      if (mutation.type != 'text') {\n        return;\n      } // Replace &nbsp; inserted by the browser with normal space.\n      // We want only normal spaces in the model and in the view. Renderer and DOM Converter will be then responsible\n      // for rendering consecutive spaces using &nbsp;, but the model and the view has to be clear.\n      // Other feature may introduce inserting non-breakable space on specific key stroke (for example shift + space).\n      // However then it will be handled outside of mutations, like enter key is.\n      // The replacing is here because it has to be done before `diff` and `diffToChanges` functions, as they\n      // take `newText` and compare it to (cleaned up) view.\n      // It could also be done in mutation observer too, however if any outside plugin would like to\n      // introduce additional events for mutations, they would get already cleaned up version (this may be good or not).\n\n\n      var newText = mutation.newText.replace(/\\u00A0/g, ' '); // To have correct `diffResult`, we also compare view node text data with &nbsp; replaced by space.\n\n      var oldText = mutation.oldText.replace(/\\u00A0/g, ' '); // Do nothing if mutations created same text.\n\n      if (oldText === newText) {\n        return;\n      }\n\n      var diffResult = diff(oldText, newText);\n\n      var _calculateChanges2 = calculateChanges(diffResult),\n          firstChangeAt = _calculateChanges2.firstChangeAt,\n          insertions = _calculateChanges2.insertions,\n          deletions = _calculateChanges2.deletions; // Try setting new model selection according to passed view selection.\n\n\n      var modelSelectionRange = null;\n\n      if (viewSelection) {\n        modelSelectionRange = this.editing.mapper.toModelRange(viewSelection.getFirstRange());\n      } // Get the position in view and model where the changes will happen.\n\n\n      var viewPos = this.editing.view.createPositionAt(mutation.node, firstChangeAt);\n      var modelPos = this.editing.mapper.toModelPosition(viewPos);\n      var removeRange = this.editor.model.createRange(modelPos, modelPos.getShiftedBy(deletions));\n      var insertText = newText.substr(firstChangeAt, insertions);\n      this.editor.execute('input', {\n        text: insertText,\n        range: removeRange,\n        resultRange: modelSelectionRange\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_handleTextNodeInsertion\",\n    value: function _handleTextNodeInsertion(mutation) {\n      if (mutation.type != 'children') {\n        return;\n      }\n\n      var change = getSingleTextNodeChange(mutation);\n      var viewPos = this.editing.view.createPositionAt(mutation.node, change.index);\n      var modelPos = this.editing.mapper.toModelPosition(viewPos);\n      var insertedText = change.values[0].data;\n      this.editor.execute('input', {\n        // Replace &nbsp; inserted by the browser with normal space.\n        // See comment in `_handleTextMutation`.\n        // In this case we don't need to do this before `diff` because we diff whole nodes.\n        // Just change &nbsp; in case there are some.\n        text: insertedText.replace(/\\u00A0/g, ' '),\n        range: this.editor.model.createRange(modelPos)\n      });\n    }\n  }]);\n\n  return MutationHandler;\n}(); // Returns first common ancestor of all mutations that is either {@link module:engine/view/containerelement~ContainerElement}\n// or {@link module:engine/view/rootelement~RootElement}.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {module:engine/view/containerelement~ContainerElement|engine/view/rootelement~RootElement|undefined}\n\n\nfunction getMutationsContainer(mutations) {\n  var lca = mutations.map(function (mutation) {\n    return mutation.node;\n  }).reduce(function (commonAncestor, node) {\n    return commonAncestor.getCommonAncestor(node, {\n      includeSelf: true\n    });\n  });\n\n  if (!lca) {\n    return;\n  } // We need to look for container and root elements only, so check all LCA's\n  // ancestors (starting from itself).\n\n\n  return lca.getAncestors({\n    includeSelf: true,\n    parentFirst: true\n  }).find(function (element) {\n    return element.is('containerElement') || element.is('rootElement');\n  });\n} // Returns true if provided array contains content that won't be problematic during diffing and text mutation handling.\n//\n// @param {Array.<module:engine/model/node~Node>} children\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\n\nfunction isSafeForTextMutation(children, schema) {\n  return children.every(function (child) {\n    return schema.isInline(child);\n  });\n} // Calculates first change index and number of characters that should be inserted and deleted starting from that index.\n//\n// @private\n// @param diffResult\n// @returns {{insertions: number, deletions: number, firstChangeAt: *}}\n\n\nfunction calculateChanges(diffResult) {\n  // Index where the first change happens. Used to set the position from which nodes will be removed and where will be inserted.\n  var firstChangeAt = null; // Index where the last change happens. Used to properly count how many characters have to be removed and inserted.\n\n  var lastChangeAt = null; // Get `firstChangeAt` and `lastChangeAt`.\n\n  for (var i = 0; i < diffResult.length; i++) {\n    var change = diffResult[i];\n\n    if (change != 'equal') {\n      firstChangeAt = firstChangeAt === null ? i : firstChangeAt;\n      lastChangeAt = i;\n    }\n  } // How many characters, starting from `firstChangeAt`, should be removed.\n\n\n  var deletions = 0; // How many characters, starting from `firstChangeAt`, should be inserted.\n\n  var insertions = 0;\n\n  for (var _i = firstChangeAt; _i <= lastChangeAt; _i++) {\n    // If there is no change (equal) or delete, the character is existing in `oldText`. We count it for removing.\n    if (diffResult[_i] != 'insert') {\n      deletions++;\n    } // If there is no change (equal) or insert, the character is existing in `newText`. We count it for inserting.\n\n\n    if (diffResult[_i] != 'delete') {\n      insertions++;\n    }\n  }\n\n  return {\n    insertions: insertions,\n    deletions: deletions,\n    firstChangeAt: firstChangeAt\n  };\n}","map":null,"metadata":{},"sourceType":"module"}