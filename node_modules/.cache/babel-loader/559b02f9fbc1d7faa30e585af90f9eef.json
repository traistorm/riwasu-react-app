{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/ui/textalternativeformview\n */\nimport { ButtonView, FocusCycler, LabeledFieldView, View, ViewCollection, createLabeledInputText, injectCssTransitionDisabler, submitHandler } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\nimport '../../../theme/textalternativeform.css'; // See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\n\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\n/**\n * The TextAlternativeFormView class.\n *\n * @extends module:ui/view~View\n */\n\nvar TextAlternativeFormView = /*#__PURE__*/function (_View) {\n  _inherits(TextAlternativeFormView, _View);\n\n  /**\n   * @inheritDoc\n   */\n  function TextAlternativeFormView(locale) {\n    var _this;\n\n    _classCallCheck(this, TextAlternativeFormView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextAlternativeFormView).call(this, locale));\n    var t = _this.locale.t;\n    /**\n     * Tracks information about the DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    _this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    _this.keystrokes = new KeystrokeHandler();\n    /**\n     * An input with a label.\n     *\n     * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView} #labeledInput\n     */\n\n    _this.labeledInput = _this._createLabeledInputView();\n    /**\n     * A button used to submit the form.\n     *\n     * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\n     */\n\n    _this.saveButtonView = _this._createButton(t('Save'), icons.check, 'ck-button-save');\n    _this.saveButtonView.type = 'submit';\n    /**\n     * A button used to cancel the form.\n     *\n     * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\n     */\n\n    _this.cancelButtonView = _this._createButton(t('Cancel'), icons.cancel, 'ck-button-cancel', 'cancel');\n    /**\n     * A collection of views which can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    _this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    _this._focusCycler = new FocusCycler({\n      focusables: _this._focusables,\n      focusTracker: _this.focusTracker,\n      keystrokeHandler: _this.keystrokes,\n      actions: {\n        // Navigate form fields backwards using the Shift + Tab keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the Tab key.\n        focusNext: 'tab'\n      }\n    });\n\n    _this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-text-alternative-form', 'ck-responsive-form'],\n        // https://github.com/ckeditor/ckeditor5-image/issues/40\n        tabindex: '-1'\n      },\n      children: [_this.labeledInput, _this.saveButtonView, _this.cancelButtonView]\n    });\n\n    injectCssTransitionDisabler(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(TextAlternativeFormView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(TextAlternativeFormView.prototype), \"render\", this).call(this);\n\n      this.keystrokes.listenTo(this.element);\n      submitHandler({\n        view: this\n      });\n      [this.labeledInput, this.saveButtonView, this.cancelButtonView].forEach(function (v) {\n        // Register the view as focusable.\n        _this2._focusables.add(v); // Register the view in the focus tracker.\n\n\n        _this2.focusTracker.add(v.element);\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(TextAlternativeFormView.prototype), \"destroy\", this).call(this);\n\n      this.focusTracker.destroy();\n      this.keystrokes.destroy();\n    }\n    /**\n     * Creates the button view.\n     *\n     * @private\n     * @param {String} label The button label\n     * @param {String} icon The button's icon.\n     * @param {String} className The additional button CSS class name.\n     * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\n     * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n     */\n\n  }, {\n    key: \"_createButton\",\n    value: function _createButton(label, icon, className, eventName) {\n      var button = new ButtonView(this.locale);\n      button.set({\n        label: label,\n        icon: icon,\n        tooltip: true\n      });\n      button.extendTemplate({\n        attributes: {\n          class: className\n        }\n      });\n\n      if (eventName) {\n        button.delegate('execute').to(this, eventName);\n      }\n\n      return button;\n    }\n    /**\n     * Creates an input with a label.\n     *\n     * @private\n     * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} Labeled field view instance.\n     */\n\n  }, {\n    key: \"_createLabeledInputView\",\n    value: function _createLabeledInputView() {\n      var t = this.locale.t;\n      var labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n      labeledInput.label = t('Text alternative');\n      return labeledInput;\n    }\n  }]);\n\n  return TextAlternativeFormView;\n}(View);\n\nexport { TextAlternativeFormView as default };","map":null,"metadata":{},"sourceType":"module"}