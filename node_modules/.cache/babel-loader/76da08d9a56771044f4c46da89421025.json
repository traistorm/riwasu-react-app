{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * @module core/editor/utils/securesourceelement\n */\n\n/**\n * Marks the source element on which the editor was initialized. This prevents other editor instances from using this element.\n *\n * Running multiple editor instances on the same source element causes various issues and it is\n * crucial this helper is called as soon as the source element is known to prevent collisions.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n */\n\nexport default function secureSourceElement(editor) {\n  var sourceElement = editor.sourceElement; // If the editor was initialized without specifying an element, we don't need to secure anything.\n\n  if (!sourceElement) {\n    return;\n  }\n\n  if (sourceElement.ckeditorInstance) {\n    /**\n     * A DOM element used to create the editor (e.g.\n     * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`})\n     * has already been used to create another editor instance. Make sure each editor is\n     * created with an unique DOM element.\n     *\n     * @error editor-source-element-already-used\n     * @param {HTMLElement} element DOM element that caused the collision.\n     */\n    throw new CKEditorError('editor-source-element-already-used', editor);\n  }\n\n  sourceElement.ckeditorInstance = editor;\n  editor.once('destroy', function () {\n    delete sourceElement.ckeditorInstance;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}