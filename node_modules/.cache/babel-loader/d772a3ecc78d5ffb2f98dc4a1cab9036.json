{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/resizeobserver\n */\n\n/* globals setTimeout, clearTimeout */\nimport mix from '../mix';\nimport global from './global';\nimport Rect from './rect';\nimport DomEmitterMixin from './emittermixin';\nvar RESIZE_CHECK_INTERVAL = 100;\n/**\n * A helper class which instances allow performing custom actions when native DOM elements are resized.\n *\n *\t\tconst editableElement = editor.editing.view.getDomRoot();\n *\n *\t\tconst observer = new ResizeObserver( editableElement, entry => {\n *\t\t\tconsole.log( 'The editable element has been resized in DOM.' );\n *\t\t\tconsole.log( entry.target ); // -> editableElement\n *\t\t\tconsole.log( entry.contentRect.width ); // -> e.g. '423px'\n *\t\t} );\n *\n * By default, it uses the [native DOM resize observer](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\n * under the hood and in browsers that do not support the native API yet, a polyfilled observer is\n * used instead.\n */\n\nvar ResizeObserver = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of the `ResizeObserver` class.\n   *\n   * @param {HTMLElement} element A DOM element that is to be observed for resizing. Note that\n   * the element must be visible (i.e. not detached from DOM) for the observer to work.\n   * @param {Function} callback A function called when the observed element was resized. It passes\n   * the [`ResizeObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry)\n   * object with information about the resize event.\n   */\n  function ResizeObserver(element, callback) {\n    _classCallCheck(this, ResizeObserver);\n\n    // **Note**: For the maximum performance, this class ensures only a single instance of the native\n    // (or polyfilled) observer is used no matter how many instances of this class were created.\n    if (!ResizeObserver._observerInstance) {\n      ResizeObserver._createObserver();\n    }\n    /**\n     * The element observer by this observer.\n     *\n     * @readonly\n     * @private\n     * @member {HTMLElement}\n     */\n\n\n    this._element = element;\n    /**\n     * The callback executed each time {@link #_element} is resized.\n     *\n     * @readonly\n     * @private\n     * @member {Function}\n     */\n\n    this._callback = callback;\n\n    ResizeObserver._addElementCallback(element, callback);\n\n    ResizeObserver._observerInstance.observe(element);\n  }\n  /**\n   * Destroys the observer which disables the `callback` passed to the {@link #constructor}.\n   */\n\n\n  _createClass(ResizeObserver, [{\n    key: \"destroy\",\n    value: function destroy() {\n      ResizeObserver._deleteElementCallback(this._element, this._callback);\n    }\n    /**\n     * Registers a new resize callback for the DOM element.\n     *\n     * @private\n     * @static\n     * @param {HTMLElement} element\n     * @param {Function} callback\n     */\n\n  }], [{\n    key: \"_addElementCallback\",\n    value: function _addElementCallback(element, callback) {\n      if (!ResizeObserver._elementCallbacks) {\n        ResizeObserver._elementCallbacks = new Map();\n      }\n\n      var callbacks = ResizeObserver._elementCallbacks.get(element);\n\n      if (!callbacks) {\n        callbacks = new Set();\n\n        ResizeObserver._elementCallbacks.set(element, callbacks);\n      }\n\n      callbacks.add(callback);\n    }\n    /**\n     * Removes a resize callback from the DOM element. If no callbacks are left\n     * for the element, it removes the element from the native observer.\n     *\n     * @private\n     * @static\n     * @param {HTMLElement} element\n     * @param {Function} callback\n     */\n\n  }, {\n    key: \"_deleteElementCallback\",\n    value: function _deleteElementCallback(element, callback) {\n      var callbacks = ResizeObserver._getElementCallbacks(element); // Remove the element callback. Check if exist first in case someone\n      // called destroy() twice.\n\n\n      if (callbacks) {\n        callbacks.delete(callback); // If no callbacks left for the element, also remove the element.\n\n        if (!callbacks.size) {\n          ResizeObserver._elementCallbacks.delete(element);\n\n          ResizeObserver._observerInstance.unobserve(element);\n        }\n      }\n\n      if (ResizeObserver._elementCallbacks && !ResizeObserver._elementCallbacks.size) {\n        ResizeObserver._observerInstance = null;\n        ResizeObserver._elementCallbacks = null;\n      }\n    }\n    /**\n     * Returns are registered resize callbacks for the DOM element.\n     *\n     * @private\n     * @static\n     * @param {HTMLElement} element\n     * @returns {Set.<HTMLElement>|null}\n     */\n\n  }, {\n    key: \"_getElementCallbacks\",\n    value: function _getElementCallbacks(element) {\n      if (!ResizeObserver._elementCallbacks) {\n        return null;\n      }\n\n      return ResizeObserver._elementCallbacks.get(element);\n    }\n    /**\n     * Creates the single native observer shared across all `ResizeObserver` instances.\n     * If the browser does not support the native API, it creates a polyfill.\n     *\n     * @private\n     * @static\n     */\n\n  }, {\n    key: \"_createObserver\",\n    value: function _createObserver() {\n      var ObserverConstructor; // TODO: One day, the `ResizeObserver` API will be supported in all modern web browsers.\n      // When it happens, this module will no longer make sense and should be removed and\n      // the native implementation should be used across the project to save bytes.\n      // Check out https://caniuse.com/#feat=resizeobserver.\n\n      if (typeof global.window.ResizeObserver === 'function') {\n        ObserverConstructor = global.window.ResizeObserver;\n      } else {\n        ObserverConstructor = ResizeObserverPolyfill;\n      }\n\n      ResizeObserver._observerInstance = new ObserverConstructor(function (entries) {\n        var _iterator = _createForOfIteratorHelper(entries),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var entry = _step.value;\n\n            var callbacks = ResizeObserver._getElementCallbacks(entry.target);\n\n            if (callbacks) {\n              var _iterator2 = _createForOfIteratorHelper(callbacks),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var callback = _step2.value;\n                  callback(entry);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    }\n  }]);\n\n  return ResizeObserver;\n}();\n/**\n * The single native observer instance (or polyfill in browsers that do not support the API)\n * shared across all {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n *\n * @static\n * @protected\n * @readonly\n * @property {Object|null} module:utils/dom/resizeobserver~ResizeObserver#_observerInstance\n */\n\n\nexport { ResizeObserver as default };\nResizeObserver._observerInstance = null;\n/**\n * A mapping of native DOM elements and their callbacks shared across all\n * {@link module:utils/dom/resizeobserver~ResizeObserver} instances.\n *\n * @static\n * @private\n * @readonly\n * @property {Map.<HTMLElement,Set>|null} module:utils/dom/resizeobserver~ResizeObserver#_elementCallbacks\n */\n\nResizeObserver._elementCallbacks = null;\n/**\n * A polyfill class for the native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n *\n * @private\n * @mixes module:utils/domemittermixin~DomEmitterMixin\n */\n\nvar ResizeObserverPolyfill = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of the {@link module:utils/dom/resizeobserver~ResizeObserverPolyfill} class.\n   *\n   * It synchronously reacts to resize of the window to check if observed elements' geometry changed.\n   *\n   * Additionally, the polyfilled observer uses a timeout to check if observed elements' geometry has changed\n   * in some other way (dynamic layouts, scrollbars showing up, etc.), so its response can also be asynchronous.\n   *\n   * @param {Function} callback A function called when any observed element was resized. Refer to the\n   * native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API to\n   * learn more.\n   */\n  function ResizeObserverPolyfill(callback) {\n    _classCallCheck(this, ResizeObserverPolyfill);\n\n    /**\n     * A function called when any observed {@link #_elements element} was resized.\n     *\n     * @readonly\n     * @protected\n     * @member {Function}\n     */\n    this._callback = callback;\n    /**\n     * DOM elements currently observed by the observer instance.\n     *\n     * @readonly\n     * @protected\n     * @member {Set}\n     */\n\n    this._elements = new Set();\n    /**\n     * Cached DOM {@link #_elements elements} bounding rects to compare to upon the next check.\n     *\n     * @readonly\n     * @protected\n     * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n     */\n\n    this._previousRects = new Map();\n    /**\n     * An UID of the current timeout upon which the observed elements rects\n     * will be compared to the {@link #_previousRects previous rects} from the past.\n     *\n     * @readonly\n     * @protected\n     * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n     */\n\n    this._periodicCheckTimeout = null;\n  }\n  /**\n   * Starts observing a DOM element.\n   *\n   * Learn more in the\n   * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe).\n   *\n   * @param {HTMLElement} element\n   */\n\n\n  _createClass(ResizeObserverPolyfill, [{\n    key: \"observe\",\n    value: function observe(element) {\n      this._elements.add(element);\n\n      this._checkElementRectsAndExecuteCallback();\n\n      if (this._elements.size === 1) {\n        this._startPeriodicCheck();\n      }\n    }\n    /**\n     * Stops observing a DOM element.\n     *\n     * Learn more in the\n     * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/unobserve).\n     *\n     * @param {HTMLElement} element\n     */\n\n  }, {\n    key: \"unobserve\",\n    value: function unobserve(element) {\n      this._elements.delete(element);\n\n      this._previousRects.delete(element);\n\n      if (!this._elements.size) {\n        this._stopPeriodicCheck();\n      }\n    }\n    /**\n     * When called, the observer calls the {@link #_callback resize callback} for all observed\n     * {@link #_elements elements} but also starts checking periodically for changes in the elements' geometry.\n     * If some are detected, {@link #_callback resize callback} is called for relevant elements that were resized.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"_startPeriodicCheck\",\n    value: function _startPeriodicCheck() {\n      var _this = this;\n\n      var periodicCheck = function periodicCheck() {\n        _this._checkElementRectsAndExecuteCallback();\n\n        _this._periodicCheckTimeout = setTimeout(periodicCheck, RESIZE_CHECK_INTERVAL);\n      };\n\n      this.listenTo(global.window, 'resize', function () {\n        _this._checkElementRectsAndExecuteCallback();\n      });\n      this._periodicCheckTimeout = setTimeout(periodicCheck, RESIZE_CHECK_INTERVAL);\n    }\n    /**\n     * Stops checking for changes in all observed {@link #_elements elements} geometry.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"_stopPeriodicCheck\",\n    value: function _stopPeriodicCheck() {\n      clearTimeout(this._periodicCheckTimeout);\n      this.stopListening();\n\n      this._previousRects.clear();\n    }\n    /**\n     * Checks if the geometry of any of the {@link #_elements element} has changed. If so, executes\n     * the {@link #_callback resize callback} with element geometry data.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"_checkElementRectsAndExecuteCallback\",\n    value: function _checkElementRectsAndExecuteCallback() {\n      var entries = [];\n\n      var _iterator3 = _createForOfIteratorHelper(this._elements),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var element = _step3.value;\n\n          if (this._hasRectChanged(element)) {\n            entries.push({\n              target: element,\n              contentRect: this._previousRects.get(element)\n            });\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      if (entries.length) {\n        this._callback(entries);\n      }\n    }\n    /**\n     * Compares the DOM element geometry to the {@link #_previousRects cached geometry} from the past.\n     * Returns `true` if geometry has changed or the element is checked for the first time.\n     *\n     * @protected\n     * @param {HTMLElement} element\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"_hasRectChanged\",\n    value: function _hasRectChanged(element) {\n      if (!element.ownerDocument.body.contains(element)) {\n        return false;\n      }\n\n      var currentRect = new Rect(element);\n\n      var previousRect = this._previousRects.get(element); // The first check should always yield true despite no Previous rect to compare to.\n      // The native ResizeObserver does that and... that makes sense. Sort of.\n\n\n      var hasChanged = !previousRect || !previousRect.isEqual(currentRect);\n\n      this._previousRects.set(element, currentRect);\n\n      return hasChanged;\n    }\n  }]);\n\n  return ResizeObserverPolyfill;\n}();\n\nmix(ResizeObserverPolyfill, DomEmitterMixin);","map":null,"metadata":{},"sourceType":"module"}