{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useContext, useMemo, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport DropdownMenu from './DropdownMenu';\nimport { mergeRefs, PLACEMENT_8, placementPolyfill, useClassNames } from '../utils';\nimport { SidenavContext } from '../Sidenav/Sidenav';\nimport deprecatePropType from '../utils/deprecatePropType';\nimport DropdownItem from './DropdownItem';\nimport DropdownContext from './DropdownContext';\nimport Menu from '../Menu/Menu';\nimport DropdownToggle from './DropdownToggle';\nimport MenuContext from '../Menu/MenuContext';\nimport MenuItem from '../Menu/MenuItem';\nimport kebabCase from 'lodash/kebabCase';\nimport { NavbarContext } from '../Navbar';\nimport Disclosure from '../Disclosure/Disclosure';\nimport SidenavDropdown from '../Sidenav/SidenavDropdown';\nimport NavContext from '../Nav/NavContext';\nimport { initialState, reducer } from './DropdownState';\n/**\n * The <Dropdown> API\n * When used inside <Sidenav>, renders a <TreeviewRootItem>;\n * Otherwise renders a <MenuRoot>\n */\n\nvar Dropdown = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var activeKey = props.activeKey,\n      onSelectProp = props.onSelect,\n      rest = _objectWithoutPropertiesLoose(props, [\"activeKey\", \"onSelect\"]);\n\n  var _rest$as = rest.as,\n      Component = _rest$as === void 0 ? 'div' : _rest$as,\n      title = rest.title,\n      onClose = rest.onClose,\n      onOpen = rest.onOpen,\n      onToggle = rest.onToggle,\n      eventKey = rest.eventKey,\n      _rest$trigger = rest.trigger,\n      trigger = _rest$trigger === void 0 ? 'click' : _rest$trigger,\n      _rest$placement = rest.placement,\n      placement = _rest$placement === void 0 ? 'bottomStart' : _rest$placement,\n      toggleAs = rest.toggleAs,\n      toggleClassName = rest.toggleClassName,\n      open = rest.open,\n      defaultOpen = rest.defaultOpen,\n      _rest$classPrefix = rest.classPrefix,\n      classPrefix = _rest$classPrefix === void 0 ? 'dropdown' : _rest$classPrefix,\n      className = rest.className,\n      disabled = rest.disabled,\n      children = rest.children,\n      menuStyle = rest.menuStyle,\n      style = rest.style,\n      toggleProps = _objectWithoutPropertiesLoose(rest, [\"as\", \"title\", \"onClose\", \"onOpen\", \"onToggle\", \"eventKey\", \"trigger\", \"placement\", \"toggleAs\", \"toggleClassName\", \"open\", \"defaultOpen\", \"classPrefix\", \"className\", \"disabled\", \"children\", \"menuStyle\", \"style\"]);\n\n  var _useContext = useContext(NavContext),\n      onSelectFromNav = _useContext.onSelect;\n\n  var emitSelect = useCallback(function (eventKey, event) {\n    onSelectProp === null || onSelectProp === void 0 ? void 0 : onSelectProp(eventKey, event); // If <Dropdown> is inside <Nav>, also trigger `onSelect` on <Nav>\n\n    onSelectFromNav === null || onSelectFromNav === void 0 ? void 0 : onSelectFromNav(eventKey, event);\n  }, [onSelectProp, onSelectFromNav]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      withClassPrefix = _useClassNames.withClassPrefix,\n      prefix = _useClassNames.prefix;\n\n  var _useClassNames2 = useClassNames('dropdown-menu'),\n      withMenuClassPrefix = _useClassNames2.withClassPrefix,\n      mergeMenuClassName = _useClassNames2.merge;\n\n  var _useClassNames3 = useClassNames('nav-item'),\n      withNavItemClassPrefix = _useClassNames3.withClassPrefix,\n      mergeNavItemClassNames = _useClassNames3.merge;\n\n  var menuButtonTriggers = useMemo(function () {\n    if (!trigger) {\n      return undefined;\n    }\n\n    var triggerMap = {\n      hover: 'mouseover',\n      click: 'click',\n      contextMenu: 'contextmenu'\n    };\n\n    if (!Array.isArray(trigger)) {\n      return [triggerMap[trigger]];\n    }\n\n    return trigger.map(function (t) {\n      return triggerMap[t];\n    });\n  }, [trigger]);\n  var parentMenu = useContext(MenuContext);\n  var sidenav = useContext(SidenavContext);\n  var navbar = useContext(NavbarContext);\n\n  var _useReducer = useReducer(reducer, initialState),\n      items = _useReducer[0].items,\n      dispatch = _useReducer[1];\n\n  var hasSelectedItem = useMemo(function () {\n    return items.some(function (item) {\n      return item.props.selected;\n    });\n  }, [items]);\n  var dropdownContextValue = useMemo(function () {\n    return {\n      activeKey: activeKey,\n      onSelect: emitSelect,\n      hasSelectedItem: hasSelectedItem,\n      dispatch: dispatch\n    };\n  }, [activeKey, emitSelect, hasSelectedItem, dispatch]); // Render a disclosure when inside expanded <Sidenav>\n\n  if (sidenav !== null && sidenav !== void 0 && sidenav.expanded) {\n    return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n      value: dropdownContextValue\n    }, /*#__PURE__*/React.createElement(SidenavDropdown, _extends({\n      ref: ref\n    }, rest)));\n  } // Renders a disclosure when used inside <Navbar>\n\n\n  if (navbar) {\n    return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n      value: dropdownContextValue\n    }, /*#__PURE__*/React.createElement(Disclosure, {\n      hideOnClickOutside: true\n    }, function (_ref, containerRef) {\n      var _withClassPrefix;\n\n      var open = _ref.open;\n      var classes = merge(className, withClassPrefix((_withClassPrefix = {}, _withClassPrefix[\"placement-\" + kebabCase(placementPolyfill(placement))] = !!placement, _withClassPrefix.disabled = disabled, _withClassPrefix.open = open, _withClassPrefix)));\n      return /*#__PURE__*/React.createElement(Component, {\n        ref: mergeRefs(ref, containerRef),\n        className: classes,\n        style: style\n      }, /*#__PURE__*/React.createElement(Disclosure.Button, null, function (buttonProps, buttonRef) {\n        return /*#__PURE__*/React.createElement(DropdownToggle, _extends({\n          ref: buttonRef,\n          as: toggleAs,\n          className: toggleClassName,\n          placement: placement,\n          disabled: disabled\n        }, omit(buttonProps, ['open']), toggleProps), title);\n      }), /*#__PURE__*/React.createElement(Disclosure.Content, null, function (_ref2, elementRef) {\n        var open = _ref2.open;\n        var menuClassName = mergeMenuClassName(className, withMenuClassPrefix());\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          ref: elementRef,\n          className: menuClassName,\n          style: menuStyle,\n          hidden: !open\n        }, children);\n      }));\n    }));\n  }\n\n  var renderMenuButton = function renderMenuButton(menuButtonProps, menuButtonRef) {\n    return /*#__PURE__*/React.createElement(DropdownToggle, _extends({\n      ref: menuButtonRef,\n      as: toggleAs,\n      className: toggleClassName,\n      placement: placement,\n      disabled: disabled\n    }, omit(menuButtonProps, ['open']), omit(toggleProps, ['data-testid'])), title);\n  };\n\n  if (parentMenu) {\n    renderMenuButton = function renderMenuButton(menuButtonProps, buttonRef) {\n      return /*#__PURE__*/React.createElement(MenuItem, {\n        disabled: disabled\n      }, function (_ref3, menuitemRef) {\n        var active = _ref3.active,\n            menuitemProps = _objectWithoutPropertiesLoose(_ref3, [\"active\"]);\n\n        return /*#__PURE__*/React.createElement(DropdownToggle, _extends({\n          ref: mergeRefs(buttonRef, menuitemRef),\n          as: toggleAs,\n          className: mergeNavItemClassNames(toggleClassName, withNavItemClassPrefix({\n            focus: active\n          }))\n        }, menuButtonProps, omit(menuitemProps, ['onClick']), omit(toggleProps, 'data-testid')), title);\n      });\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n    value: dropdownContextValue\n  }, /*#__PURE__*/React.createElement(Menu, {\n    open: open,\n    defaultOpen: defaultOpen,\n    menuButtonText: title,\n    renderMenuButton: renderMenuButton,\n    openMenuOn: menuButtonTriggers,\n    renderMenuPopup: function renderMenuPopup(_ref4, popupRef) {\n      var open = _ref4.open,\n          popupProps = _objectWithoutPropertiesLoose(_ref4, [\"open\"]);\n\n      var menuClassName = mergeMenuClassName(className, withMenuClassPrefix({})); // When inside a collapsed <Sidenav>, render a header in menu\n\n      var showHeader = !!sidenav;\n      return /*#__PURE__*/React.createElement(\"ul\", _extends({\n        ref: popupRef,\n        className: menuClassName,\n        style: menuStyle,\n        hidden: !open\n      }, popupProps), showHeader && /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('header')\n      }, title), children);\n    },\n    onToggleMenu: function onToggleMenu(open, event) {\n      onToggle === null || onToggle === void 0 ? void 0 : onToggle(open);\n      sidenav === null || sidenav === void 0 ? void 0 : sidenav.onOpenChange(eventKey, event);\n\n      if (open) {\n        onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n      } else {\n        onClose === null || onClose === void 0 ? void 0 : onClose();\n      }\n    }\n  }, function (_ref5, menuContainerRef) {\n    var _withClassPrefix2;\n\n    var open = _ref5.open,\n        menuContainer = _objectWithoutPropertiesLoose(_ref5, [\"open\"]);\n\n    var classes = merge(className, withClassPrefix((_withClassPrefix2 = {}, _withClassPrefix2[\"placement-\" + kebabCase(placementPolyfill(placement))] = !!placement, _withClassPrefix2.disabled = disabled, _withClassPrefix2.open = open, _withClassPrefix2.submenu = !!parentMenu, _withClassPrefix2['selected-within'] = hasSelectedItem, _withClassPrefix2)));\n    return /*#__PURE__*/React.createElement(Component, _extends({\n      ref: mergeRefs(ref, menuContainerRef),\n      className: classes\n    }, menuContainer, pick(toggleProps, ['data-testid']), {\n      style: style\n    }));\n  }));\n});\nDropdown.Item = DropdownItem;\nDropdown.Menu = DropdownMenu;\nDropdown.displayName = 'Dropdown';\nDropdown.propTypes = {\n  activeKey: PropTypes.any,\n  classPrefix: PropTypes.string,\n  trigger: PropTypes.oneOfType([PropTypes.array, PropTypes.oneOf(['click', 'hover', 'contextMenu'])]),\n  placement: PropTypes.oneOf(PLACEMENT_8),\n  title: PropTypes.node,\n  disabled: PropTypes.bool,\n  icon: PropTypes.node,\n  menuStyle: PropTypes.object,\n  className: PropTypes.string,\n  toggleClassName: PropTypes.string,\n  children: PropTypes.node,\n  open: deprecatePropType(PropTypes.bool),\n  eventKey: PropTypes.any,\n  as: PropTypes.elementType,\n  toggleAs: PropTypes.elementType,\n  noCaret: PropTypes.bool,\n  style: PropTypes.object,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  onToggle: PropTypes.func,\n  onSelect: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onClick: PropTypes.func,\n  renderToggle: PropTypes.func\n};\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}