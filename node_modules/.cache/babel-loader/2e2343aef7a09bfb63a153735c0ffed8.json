{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizerstate\n */\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Stores the internal state of a single resizable object.\n *\n */\n\nvar ResizeState = /*#__PURE__*/function () {\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n   */\n  function ResizeState(options) {\n    _classCallCheck(this, ResizeState);\n\n    /**\n     * The original width (pixels) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalWidth\n     */\n\n    /**\n     * The original height (pixels) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalHeight\n     */\n\n    /**\n     * The original width (percents) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalWidthPercents\n     */\n\n    /**\n     * The position of the handle that initiated the resizing. E.g. `\"top-left\"`, `\"bottom-right\"` etc. or `null`\n     * if unknown.\n     *\n     * @readonly\n     * @observable\n     * @member {String|null} #activeHandlePosition\n     */\n    this.set('activeHandlePosition', null);\n    /**\n     * The width (percents) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedWidthPercents\n     */\n\n    this.set('proposedWidthPercents', null);\n    /**\n     * The width (pixels) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedWidthPixels\n     */\n\n    this.set('proposedWidth', null);\n    /**\n     * The height (pixels) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedHeightPixels\n     */\n\n    this.set('proposedHeight', null);\n    this.set('proposedHandleHostWidth', null);\n    this.set('proposedHandleHostHeight', null);\n    /**\n     * A width to height ratio of the resized image.\n     *\n     * @readonly\n     * @member {Number} #aspectRatio\n     */\n\n    /**\n     * @private\n     * @type {module:widget/widgetresize~ResizerOptions}\n     */\n\n    this._options = options;\n    /**\n     * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n     * traveled, so how much the image should be enlarged.\n     * This information is only known after the DOM was rendered, so it will be updated later.\n     *\n     * @private\n     * @type {Object}\n     */\n\n    this._referenceCoordinates = null;\n  }\n  /**\n   *\n   * @param {HTMLElement} domResizeHandle The handle used to calculate the reference point.\n   * @param {HTMLElement} domHandleHost\n   * @param {HTMLElement} domResizeHost\n   */\n\n\n  _createClass(ResizeState, [{\n    key: \"begin\",\n    value: function begin(domResizeHandle, domHandleHost, domResizeHost) {\n      var clientRect = new Rect(domHandleHost);\n      this.activeHandlePosition = getHandlePosition(domResizeHandle);\n      this._referenceCoordinates = getAbsoluteBoundaryPoint(domHandleHost, getOppositePosition(this.activeHandlePosition));\n      this.originalWidth = clientRect.width;\n      this.originalHeight = clientRect.height;\n      this.aspectRatio = clientRect.width / clientRect.height;\n      var widthStyle = domResizeHost.style.width;\n\n      if (widthStyle && widthStyle.match(/^\\d+(\\.\\d*)?%$/)) {\n        this.originalWidthPercents = parseFloat(widthStyle);\n      } else {\n        this.originalWidthPercents = calculateHostPercentageWidth(domResizeHost, clientRect);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(newSize) {\n      this.proposedWidth = newSize.width;\n      this.proposedHeight = newSize.height;\n      this.proposedWidthPercents = newSize.widthPercents;\n      this.proposedHandleHostWidth = newSize.handleHostWidth;\n      this.proposedHandleHostHeight = newSize.handleHostHeight;\n    }\n  }]);\n\n  return ResizeState;\n}();\n\nexport { ResizeState as default };\nmix(ResizeState, ObservableMixin); // Calculates a relative width of a `domResizeHost` compared to it's parent in percents.\n//\n// @private\n// @param {HTMLElement} domResizeHost\n// @param {module:utils/dom/rect~Rect} resizeHostRect\n// @returns {Number}\n\nfunction calculateHostPercentageWidth(domResizeHost, resizeHostRect) {\n  var domResizeHostParent = domResizeHost.parentElement; // Need to use computed style as it properly excludes parent's paddings from the returned value.\n\n  var parentWidth = parseFloat(domResizeHostParent.ownerDocument.defaultView.getComputedStyle(domResizeHostParent).width);\n  return resizeHostRect.width / parentWidth * 100;\n} // Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n//\n// @private\n// @param {HTMLElement} element\n// @param {String} resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n// @returns {Object} return\n// @returns {Number} return.x\n// @returns {Number} return.y\n\n\nfunction getAbsoluteBoundaryPoint(element, resizerPosition) {\n  var elementRect = new Rect(element);\n  var positionParts = resizerPosition.split('-');\n  var ret = {\n    x: positionParts[1] == 'right' ? elementRect.right : elementRect.left,\n    y: positionParts[0] == 'bottom' ? elementRect.bottom : elementRect.top\n  };\n  ret.x += element.ownerDocument.defaultView.scrollX;\n  ret.y += element.ownerDocument.defaultView.scrollY;\n  return ret;\n} // @private\n// @param {String} resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element.\n\n\nfunction getResizerHandleClass(resizerPosition) {\n  return \"ck-widget__resizer__handle-\".concat(resizerPosition);\n} // Determines the position of a given resize handle.\n//\n// @private\n// @param {HTMLElement} domHandle Handle used to calculate the reference point.\n// @returns {String|undefined} Returns a string like `\"top-left\"` or `undefined` if not matched.\n\n\nfunction getHandlePosition(domHandle) {\n  var resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n\n  for (var _i = 0, _resizerPositions = resizerPositions; _i < _resizerPositions.length; _i++) {\n    var position = _resizerPositions[_i];\n\n    if (domHandle.classList.contains(getResizerHandleClass(position))) {\n      return position;\n    }\n  }\n} // @private\n// @param {String} position Like `\"top-left\"`.\n// @returns {String} Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n\n\nfunction getOppositePosition(position) {\n  var parts = position.split('-');\n  var replacements = {\n    top: 'bottom',\n    bottom: 'top',\n    left: 'right',\n    right: 'left'\n  };\n  return \"\".concat(replacements[parts[0]], \"-\").concat(replacements[parts[1]]);\n}","map":null,"metadata":{},"sourceType":"module"}