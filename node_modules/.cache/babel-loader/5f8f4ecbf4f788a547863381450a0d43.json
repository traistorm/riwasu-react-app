{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\nimport getHeight from 'dom-lib/getHeight';\nimport on from 'dom-lib/on';\nimport { ResizeObserver } from '@juggle/resize-observer';\nexport var useBodyStyles = function useBodyStyles(ref, options) {\n  var _useState = useState({}),\n      bodyStyles = _useState[0],\n      setBodyStyles = _useState[1];\n\n  var overflow = options.overflow,\n      drawer = options.drawer,\n      prefix = options.prefix;\n  var windowResizeListener = useRef();\n  var contentElement = useRef(null);\n  var contentElementResizeObserver = useRef();\n  var updateBodyStyles = useCallback(function (_event, entering) {\n    var dialog = ref.current;\n    var scrollHeight = dialog ? dialog.scrollHeight : 0;\n    var styles = {\n      overflow: 'auto'\n    };\n\n    if (dialog) {\n      // default margin\n      var headerHeight = 46;\n      var footerHeight = 46;\n      var headerDOM = dialog.querySelector(\".\" + prefix('header'));\n      var footerDOM = dialog.querySelector(\".\" + prefix('footer'));\n      headerHeight = headerDOM ? getHeight(headerDOM) + headerHeight : headerHeight;\n      footerHeight = footerDOM ? getHeight(footerDOM) + footerHeight : footerHeight;\n      /**\n       * Header height + Footer height + Dialog margin\n       */\n\n      var excludeHeight = headerHeight + footerHeight + (entering ? 70 : 60);\n      var bodyHeight = getHeight(window) - excludeHeight;\n      var maxHeight = scrollHeight >= bodyHeight ? bodyHeight : scrollHeight;\n      styles.maxHeight = maxHeight;\n    }\n\n    setBodyStyles(styles);\n  }, [prefix, ref]);\n  var onDestroyEvents = useCallback(function () {\n    var _windowResizeListener, _windowResizeListener2, _contentElementResize;\n\n    (_windowResizeListener = windowResizeListener.current) === null || _windowResizeListener === void 0 ? void 0 : (_windowResizeListener2 = _windowResizeListener.off) === null || _windowResizeListener2 === void 0 ? void 0 : _windowResizeListener2.call(_windowResizeListener);\n    (_contentElementResize = contentElementResizeObserver.current) === null || _contentElementResize === void 0 ? void 0 : _contentElementResize.disconnect();\n    windowResizeListener.current = null;\n    contentElementResizeObserver.current = null;\n  }, []);\n  var onChangeBodyStyles = useCallback(function (entering) {\n    if (overflow && !drawer && ref.current) {\n      updateBodyStyles(undefined, entering);\n      contentElement.current = ref.current.querySelector(\".\" + prefix('content'));\n\n      if (!windowResizeListener.current) {\n        windowResizeListener.current = on(window, 'resize', updateBodyStyles);\n      }\n\n      if (contentElement.current && !contentElementResizeObserver.current) {\n        contentElementResizeObserver.current = new ResizeObserver(function () {\n          return updateBodyStyles();\n        });\n        contentElementResizeObserver.current.observe(contentElement.current);\n      }\n    }\n  }, [drawer, overflow, prefix, ref, updateBodyStyles]);\n  useEffect(function () {\n    return onDestroyEvents; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return [overflow ? bodyStyles : {}, onChangeBodyStyles, onDestroyEvents];\n};","map":null,"metadata":{},"sourceType":"module"}