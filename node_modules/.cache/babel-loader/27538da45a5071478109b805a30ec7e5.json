{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/viewcollection\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n *\t\tconst parentView = new ParentView( locale );\n *\t\tconst collection = new ViewCollection( locale );\n *\n *\t\tcollection.setParent( parentView.element );\n *\n *\t\tconst viewA = new ChildView( locale );\n *\t\tconst viewB = new ChildView( locale );\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n *\t\tcollection.add( viewA );\n *\t\tcollection.add( viewB );\n *\n *\t\tconsole.log( parentView.element.firsChild ); // -> viewA.element\n *\t\tconsole.log( parentView.element.lastChild ); // -> viewB.element\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n *\t\t// Delegate #click and #keydown events from viewA and viewB to the parentView.\n *\t\tcollection.delegate( 'click' ).to( parentView );\n *\n *\t\tparentView.on( 'click', ( evt ) => {\n *\t\t\tconsole.log( `${ evt.source } has been clicked.` );\n *\t\t} );\n *\n *\t\t// This event will be delegated to the parentView.\n *\t\tviewB.fire( 'click' );\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n *\n * @extends module:utils/collection~Collection\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nvar ViewCollection = /*#__PURE__*/function (_Collection) {\n  _inherits(ViewCollection, _Collection);\n\n  /**\n   * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n   *\n   * @param {Iterable.<module:ui/view~View>} [initialItems] The initial items of the collection.\n   */\n  function ViewCollection() {\n    var _this;\n\n    var initialItems = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, ViewCollection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ViewCollection).call(this, initialItems, {\n      // An #id Number attribute should be legal and not break the `ViewCollection` instance.\n      // https://github.com/ckeditor/ckeditor5-ui/issues/93\n      idProperty: 'viewUid'\n    })); // Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n\n    _this.on('add', function (evt, view, index) {\n      _this._renderViewIntoCollectionParent(view, index);\n    }); // Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n\n\n    _this.on('remove', function (evt, view) {\n      if (view.element && _this._parentElement) {\n        view.element.remove();\n      }\n    });\n    /**\n     * A parent element within which child views are rendered and managed in DOM.\n     *\n     * @protected\n     * @member {HTMLElement}\n     */\n\n\n    _this._parentElement = null;\n    return _this;\n  }\n  /**\n   * Destroys the view collection along with child views.\n   * See the view {@link module:ui/view~View#destroy} method.\n   */\n\n\n  _createClass(ViewCollection, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.map(function (view) {\n        return view.destroy();\n      });\n    }\n    /**\n     * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n     * {@link #remove removing} views in the collection synchronizes their\n     * {@link module:ui/view~View#element elements} in the parent element.\n     *\n     * @param {HTMLElement} element A new parent element.\n     */\n\n  }, {\n    key: \"setParent\",\n    value: function setParent(elementOrDocFragment) {\n      this._parentElement = elementOrDocFragment; // Take care of the initial collection items passed to the constructor.\n\n      var _iterator = _createForOfIteratorHelper(this),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var view = _step.value;\n\n          this._renderViewIntoCollectionParent(view);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Delegates selected events coming from within views in the collection to any\n     * {@link module:utils/emittermixin~Emitter}.\n     *\n     * For the following views and collection:\n     *\n     *\t\tconst viewA = new View();\n     *\t\tconst viewB = new View();\n     *\t\tconst viewC = new View();\n     *\n     *\t\tconst views = parentView.createCollection();\n     *\n     *\t\tviews.delegate( 'eventX' ).to( viewB );\n     *\t\tviews.delegate( 'eventX', 'eventY' ).to( viewC );\n     *\n     *\t\tviews.add( viewA );\n     *\n     * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n     *\n     *\t\tviewA.fire( 'eventX', customData );\n     *\n     * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n     *\n     *\t\tviewA.fire( 'eventY', customData );\n     *\n     * See {@link module:utils/emittermixin~Emitter#delegate}.\n     *\n     * @param {...String} events {@link module:ui/view~View} event names to be delegated to another\n     * {@link module:utils/emittermixin~Emitter}.\n     * @returns {Object}\n     * @returns {Function} return.to A function which accepts the destination of\n     * {@link module:utils/emittermixin~Emitter#delegate delegated} events.\n     */\n\n  }, {\n    key: \"delegate\",\n    value: function delegate() {\n      var _this2 = this;\n\n      for (var _len = arguments.length, events = new Array(_len), _key = 0; _key < _len; _key++) {\n        events[_key] = arguments[_key];\n      }\n\n      if (!events.length || !isStringArray(events)) {\n        /**\n         * All event names must be strings.\n         *\n         * @error ui-viewcollection-delegate-wrong-events\n         */\n        throw new CKEditorError('ui-viewcollection-delegate-wrong-events', this);\n      }\n\n      return {\n        /**\n         * Selects destination for {@link module:utils/emittermixin~Emitter#delegate} events.\n         *\n         * @memberOf module:ui/viewcollection~ViewCollection#delegate\n         * @function module:ui/viewcollection~ViewCollection#delegate.to\n         * @param {module:utils/emittermixin~Emitter} dest An `Emitter` instance which is\n         * the destination for delegated events.\n         */\n        to: function to(dest) {\n          // Activate delegating on existing views in this collection.\n          var _iterator2 = _createForOfIteratorHelper(_this2),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var view = _step2.value;\n\n              var _iterator5 = _createForOfIteratorHelper(events),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var evtName = _step5.value;\n                  view.delegate(evtName).to(dest);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            } // Activate delegating on future views in this collection.\n\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          _this2.on('add', function (evt, view) {\n            var _iterator3 = _createForOfIteratorHelper(events),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var evtName = _step3.value;\n                view.delegate(evtName).to(dest);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }); // Deactivate delegating when view is removed from this collection.\n\n\n          _this2.on('remove', function (evt, view) {\n            var _iterator4 = _createForOfIteratorHelper(events),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var evtName = _step4.value;\n                view.stopDelegating(evtName, dest);\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          });\n        }\n      };\n    }\n    /**\n     * This method {@link module:ui/view~View#render renders} a new view added to the collection.\n     *\n     * If the {@link #_parentElement parent element} of the collection is set, this method also adds\n     * the view's {@link module:ui/view~View#element} as a child of the parent in DOM at a specified index.\n     *\n     * **Note**: If index is not specified, the view's element is pushed as the last child\n     * of the parent element.\n     *\n     * @private\n     * @param {module:ui/view~View} view A new view added to the collection.\n     * @param {Number} [index] An index the view holds in the collection. When not specified,\n     * the view is added at the end.\n     */\n\n  }, {\n    key: \"_renderViewIntoCollectionParent\",\n    value: function _renderViewIntoCollectionParent(view, index) {\n      if (!view.isRendered) {\n        view.render();\n      }\n\n      if (view.element && this._parentElement) {\n        this._parentElement.insertBefore(view.element, this._parentElement.children[index]);\n      }\n    }\n    /**\n     * Removes a child view from the collection. If the {@link #setParent parent element} of the\n     * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n     * in DOM, reflecting the order of the collection.\n     *\n     * See the {@link #add} method.\n     *\n     * @method #remove\n     * @param {module:ui/view~View|Number|String} subject The view to remove, its id or index in the collection.\n     * @returns {Object} The removed view.\n     */\n\n  }]);\n\n  return ViewCollection;\n}(Collection); // Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\n\n\nexport { ViewCollection as default };\n\nfunction isStringArray(arr) {\n  return arr.every(function (a) {\n    return typeof a == 'string';\n  });\n}","map":null,"metadata":{},"sourceType":"module"}