{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport DOMMouseMoveTracker from 'dom-lib/DOMMouseMoveTracker';\nimport addStyle from 'dom-lib/addStyle';\nimport getWidth from 'dom-lib/getWidth';\nimport Tooltip from '../Tooltip';\nimport { useClassNames, mergeRefs } from '../utils';\nimport Input from './Input';\nvar Handle = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _extends2;\n\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'slider' : _props$classPrefix,\n      className = props.className,\n      disabled = props.disabled,\n      style = props.style,\n      children = props.children,\n      position = props.position,\n      vertical = props.vertical,\n      tooltip = props.tooltip,\n      rtl = props.rtl,\n      value = props.value,\n      role = props.role,\n      tabIndex = props.tabIndex,\n      renderTooltip = props.renderTooltip,\n      onDragStart = props.onDragStart,\n      onDragMove = props.onDragMove,\n      onDragEnd = props.onDragEnd,\n      onKeyDown = props.onKeyDown,\n      dataRange = props['data-range'],\n      dateKey = props['data-key'],\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"classPrefix\", \"className\", \"disabled\", \"style\", \"children\", \"position\", \"vertical\", \"tooltip\", \"rtl\", \"value\", \"role\", \"tabIndex\", \"renderTooltip\", \"onDragStart\", \"onDragMove\", \"onDragEnd\", \"onKeyDown\", \"data-range\", \"data-key\"]);\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var rootRef = useRef(null);\n  var horizontalKey = rtl ? 'right' : 'left';\n  var direction = vertical ? 'bottom' : horizontalKey;\n\n  var styles = _extends({}, style, (_extends2 = {}, _extends2[direction] = position + \"%\", _extends2));\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix;\n\n  var handleClasses = merge(className, prefix('handle'), {\n    active: active\n  });\n  var tooltipRef = useRef(null);\n  var mouseMoveTracker = useRef();\n  var releaseMouseMoves = useCallback(function () {\n    var _mouseMoveTracker$cur;\n\n    (_mouseMoveTracker$cur = mouseMoveTracker.current) === null || _mouseMoveTracker$cur === void 0 ? void 0 : _mouseMoveTracker$cur.releaseMouseMoves();\n    mouseMoveTracker.current = null;\n  }, []);\n  var setTooltipPosition = useCallback(function () {\n    var tooltipElement = tooltipRef.current;\n\n    if (tooltip && tooltipElement) {\n      var width = getWidth(tooltipElement);\n      addStyle(tooltipElement, 'left', \"-\" + width / 2 + \"px\");\n    }\n  }, [tooltip]);\n  var handleDragMove = useCallback(function (_deltaX, _deltaY, event) {\n    var _mouseMoveTracker$cur2;\n\n    if ((_mouseMoveTracker$cur2 = mouseMoveTracker.current) !== null && _mouseMoveTracker$cur2 !== void 0 && _mouseMoveTracker$cur2.isDragging()) {\n      var _rootRef$current;\n\n      onDragMove === null || onDragMove === void 0 ? void 0 : onDragMove(event, (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.dataset);\n      setTooltipPosition();\n    }\n  }, [onDragMove, setTooltipPosition]);\n  var handleDragEnd = useCallback(function (event) {\n    var _rootRef$current2;\n\n    setActive(false);\n    releaseMouseMoves();\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, (_rootRef$current2 = rootRef.current) === null || _rootRef$current2 === void 0 ? void 0 : _rootRef$current2.dataset);\n  }, [onDragEnd, releaseMouseMoves]);\n  var getMouseMoveTracker = useCallback(function () {\n    return mouseMoveTracker.current || new DOMMouseMoveTracker(handleDragMove, handleDragEnd, document.body);\n  }, [handleDragEnd, handleDragMove]);\n  var handleMouseDown = useCallback(function (event) {\n    var _mouseMoveTracker$cur3, _rootRef$current3;\n\n    if (disabled) {\n      return;\n    }\n\n    mouseMoveTracker.current = getMouseMoveTracker();\n    (_mouseMoveTracker$cur3 = mouseMoveTracker.current) === null || _mouseMoveTracker$cur3 === void 0 ? void 0 : _mouseMoveTracker$cur3.captureMouseMoves(event);\n    (_rootRef$current3 = rootRef.current) === null || _rootRef$current3 === void 0 ? void 0 : _rootRef$current3.focus();\n    setActive(true);\n    onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event);\n  }, [disabled, getMouseMoveTracker, onDragStart]);\n  var handleMouseEnter = useCallback(function () {\n    setTooltipPosition();\n  }, [setTooltipPosition]);\n  useEffect(function () {\n    return function () {\n      releaseMouseMoves();\n    };\n  }, [releaseMouseMoves]);\n  return /*#__PURE__*/React.createElement(Component, {\n    role: role,\n    tabIndex: tabIndex,\n    ref: mergeRefs(ref, rootRef),\n    className: handleClasses,\n    onMouseDown: handleMouseDown,\n    onMouseEnter: handleMouseEnter,\n    onKeyDown: onKeyDown,\n    style: styles,\n    \"data-range\": dataRange,\n    \"data-key\": dateKey\n  }, tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n    \"aria-hidden\": \"true\",\n    ref: tooltipRef,\n    className: merge(prefix('tooltip'), 'placement-top')\n  }, renderTooltip ? renderTooltip(value) : value), /*#__PURE__*/React.createElement(Input, _extends({\n    tabIndex: -1,\n    value: value\n  }, rest)), children);\n});\nHandle.displayName = 'Handle';\nHandle.propTypes = {\n  as: PropTypes.elementType,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  vertical: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  rtl: PropTypes.bool,\n  position: PropTypes.number,\n  value: PropTypes.number,\n  renderTooltip: PropTypes.func,\n  style: PropTypes.object,\n  onDragMove: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnd: PropTypes.func\n};\nexport default Handle;","map":null,"metadata":{},"sourceType":"module"}