{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageloadobserver\n */\nimport { Observer } from 'ckeditor5/src/engine';\n/**\n * Observes all new images added to the {@link module:engine/view/document~Document},\n * fires {@link module:engine/view/document~Document#event:imageLoaded} and\n * {@link module:engine/view/document~Document#event:layoutChanged} event every time when the new image\n * has been loaded.\n *\n * **Note:** This event is not fired for images that has been added to the document and rendered as `complete` (already loaded).\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nvar ImageLoadObserver = /*#__PURE__*/function (_Observer) {\n  _inherits(ImageLoadObserver, _Observer);\n\n  function ImageLoadObserver() {\n    _classCallCheck(this, ImageLoadObserver);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageLoadObserver).apply(this, arguments));\n  }\n\n  _createClass(ImageLoadObserver, [{\n    key: \"observe\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function observe(domRoot) {\n      var _this = this;\n\n      this.listenTo(domRoot, 'load', function (event, domEvent) {\n        var domElement = domEvent.target;\n\n        if (_this.checkShouldIgnoreEventFromTarget(domElement)) {\n          return;\n        }\n\n        if (domElement.tagName == 'IMG') {\n          _this._fireEvents(domEvent);\n        } // Use capture phase for better performance (#4504).\n\n      }, {\n        useCapture: true\n      });\n    }\n    /**\n     * Fires {@link module:engine/view/document~Document#event:layoutChanged} and\n     * {@link module:engine/view/document~Document#event:imageLoaded}\n     * if observer {@link #isEnabled is enabled}.\n     *\n     * @protected\n     * @param {Event} domEvent The DOM event.\n     */\n\n  }, {\n    key: \"_fireEvents\",\n    value: function _fireEvents(domEvent) {\n      if (this.isEnabled) {\n        this.document.fire('layoutChanged');\n        this.document.fire('imageLoaded', domEvent);\n      }\n    }\n  }]);\n\n  return ImageLoadObserver;\n}(Observer);\n/**\n * Fired when an <img/> DOM element has been loaded in the DOM root.\n *\n * Introduced by {@link module:image/image/imageloadobserver~ImageLoadObserver}.\n *\n * @see module:image/image/imageloadobserver~ImageLoadObserver\n * @event module:engine/view/document~Document#event:imageLoaded\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n\nexport { ImageLoadObserver as default };","map":null,"metadata":{},"sourceType":"module"}