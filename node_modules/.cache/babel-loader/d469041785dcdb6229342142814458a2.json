{"ast":null,"code":"import _objectSpread from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { logWarning, toArray } from 'ckeditor5/src/utils';\n/**\n * @module image/image/insertimagecommand\n */\n\n/**\n * Insert image command.\n *\n * The command is registered by the {@link module:image/image/imageediting~ImageEditing} plugin as `insertImage`\n * and it is also available via aliased `imageInsert` name.\n *\n * In order to insert an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionRange} algorithm),\n * execute the command and specify the image source:\n *\n *\t\teditor.execute( 'insertImage', { source: 'http://url.to.the/image' } );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'insertImage', {\n *\t\t\tsource:  [\n *\t\t\t\t'path/to/image.jpg',\n *\t\t\t\t'path/to/other-image.jpg'\n *\t\t\t]\n *\t\t} );\n *\n * If you want to take the full control over the process, you can specify individual model attributes:\n *\n *\t\teditor.execute( 'insertImage', {\n *\t\t\tsource:  [\n *\t\t\t\t{ src: 'path/to/image.jpg', alt: 'First alt text' },\n *\t\t\t\t{ src: 'path/to/other-image.jpg', alt: 'Second alt text', customAttribute: 'My attribute value' }\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\n\nvar InsertImageCommand = /*#__PURE__*/function (_Command) {\n  _inherits(InsertImageCommand, _Command);\n\n  /**\n   * @inheritDoc\n   */\n  function InsertImageCommand(editor) {\n    var _this;\n\n    _classCallCheck(this, InsertImageCommand);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InsertImageCommand).call(this, editor));\n    var configImageInsertType = editor.config.get('image.insert.type');\n\n    if (!editor.plugins.has('ImageBlockEditing')) {\n      if (configImageInsertType === 'block') {\n        /**\n         * The {@link module:image/imageblock~ImageBlock} plugin must be enabled to allow inserting block images. See\n         * {@link module:image/imageinsert~ImageInsertConfig#type} to learn more.\n         *\n         * @error image-block-plugin-required\n         */\n        logWarning('image-block-plugin-required');\n      }\n    }\n\n    if (!editor.plugins.has('ImageInlineEditing')) {\n      if (configImageInsertType === 'inline') {\n        /**\n         * The {@link module:image/imageinline~ImageInline} plugin must be enabled to allow inserting inline images. See\n         * {@link module:image/imageinsert~ImageInsertConfig#type} to learn more.\n         *\n         * @error image-inline-plugin-required\n         */\n        logWarning('image-inline-plugin-required');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(InsertImageCommand, [{\n    key: \"refresh\",\n    value: function refresh() {\n      this.isEnabled = this.editor.plugins.get('ImageUtils').isImageAllowed();\n    }\n    /**\n     * Executes the command.\n     *\n     * @fires execute\n     * @param {Object} options Options for the executed command.\n     * @param {String|Array.<String>|Array.<Object>} options.source The image source or an array of image sources to insert.\n     * See the documentation of the command to learn more about accepted formats.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(options) {\n      var _this2 = this;\n\n      var sourceDefinitions = toArray(options.source);\n      var selection = this.editor.model.document.selection;\n      var imageUtils = this.editor.plugins.get('ImageUtils'); // In case of multiple images, each image (starting from the 2nd) will be inserted at a position that\n      // follows the previous one. That will move the selection and, to stay on the safe side and make sure\n      // all images inherit the same selection attributes, they are collected beforehand.\n      //\n      // Applying these attributes ensures, for instance, that inserting an (inline) image into a link does\n      // not split that link but preserves its continuity.\n      //\n      // Note: Selection attributes that do not make sense for images will be filtered out by insertImage() anyway.\n\n      var selectionAttributes = Object.fromEntries(selection.getAttributes());\n      sourceDefinitions.forEach(function (sourceDefinition, index) {\n        var selectedElement = selection.getSelectedElement();\n\n        if (typeof sourceDefinition === 'string') {\n          sourceDefinition = {\n            src: sourceDefinition\n          };\n        } // Inserting of an inline image replace the selected element and make a selection on the inserted image.\n        // Therefore inserting multiple inline images requires creating position after each element.\n\n\n        if (index && selectedElement && imageUtils.isImage(selectedElement)) {\n          var position = _this2.editor.model.createPositionAfter(selectedElement);\n\n          imageUtils.insertImage(_objectSpread({}, sourceDefinition, selectionAttributes), position);\n        } else {\n          imageUtils.insertImage(_objectSpread({}, sourceDefinition, selectionAttributes));\n        }\n      });\n    }\n  }]);\n\n  return InsertImageCommand;\n}(Command);\n\nexport { InsertImageCommand as default };","map":null,"metadata":{},"sourceType":"module"}