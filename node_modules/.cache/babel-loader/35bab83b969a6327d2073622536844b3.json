{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/colorgrid/colorgrid\n */\nimport View from '../view';\nimport ColorTileView from './colortileview';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport '../../theme/components/colorgrid/colorgrid.css';\n/**\n * A grid of {@link module:ui/colorgrid/colortile~ColorTileView color tiles}.\n *\n * @extends module:ui/view~View\n */\n\nvar ColorGridView = /*#__PURE__*/function (_View) {\n  _inherits(ColorGridView, _View);\n\n  /**\n   * Creates an instance of a color grid containing {@link module:ui/colorgrid/colortile~ColorTileView tiles}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {Object} options Component configuration\n   * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} [options.colorDefinitions] Array with definitions\n   * required to create the {@link module:ui/colorgrid/colortile~ColorTileView tiles}.\n   * @param {Number} options.columns A number of columns to display the tiles.\n   */\n  function ColorGridView(locale, options) {\n    var _this;\n\n    _classCallCheck(this, ColorGridView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorGridView).call(this, locale));\n    var colorDefinitions = options && options.colorDefinitions || [];\n    var viewStyleAttribute = {};\n\n    if (options && options.columns) {\n      viewStyleAttribute.gridTemplateColumns = \"repeat( \".concat(options.columns, \", 1fr)\");\n    }\n    /**\n     * The color of the currently selected color tile in {@link #items}.\n     *\n     * @observable\n     * @type {String}\n     */\n\n\n    _this.set('selectedColor');\n    /**\n     * Collection of the child tile views.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n\n    _this.items = _this.createCollection();\n    /**\n     * Tracks information about DOM focus in the grid.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    _this.focusTracker = new FocusTracker();\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    _this.keystrokes = new KeystrokeHandler();\n    /**\n     * Helps cycling over focusable {@link #items} in the grid.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    _this._focusCycler = new FocusCycler({\n      focusables: _this.items,\n      focusTracker: _this.focusTracker,\n      keystrokeHandler: _this.keystrokes,\n      actions: {\n        // Navigate grid items backwards using the arrowup key.\n        focusPrevious: 'arrowleft',\n        // Navigate grid items forwards using the arrowdown key.\n        focusNext: 'arrowright'\n      }\n    });\n\n    _this.items.on('add', function (evt, colorTile) {\n      colorTile.isOn = colorTile.color === _this.selectedColor;\n    });\n\n    colorDefinitions.forEach(function (color) {\n      var colorTile = new ColorTileView();\n      colorTile.set({\n        color: color.color,\n        label: color.label,\n        tooltip: true,\n        hasBorder: color.options.hasBorder\n      });\n      colorTile.on('execute', function () {\n        _this.fire('execute', {\n          value: color.color,\n          hasBorder: color.options.hasBorder,\n          label: color.label\n        });\n      });\n\n      _this.items.add(colorTile);\n    });\n\n    _this.setTemplate({\n      tag: 'div',\n      children: _this.items,\n      attributes: {\n        class: ['ck', 'ck-color-grid'],\n        style: viewStyleAttribute\n      }\n    });\n\n    _this.on('change:selectedColor', function (evt, name, selectedColor) {\n      var _iterator = _createForOfIteratorHelper(_this.items),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          item.isOn = item.color === selectedColor;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * Focuses the first focusable in {@link #items}.\n   */\n\n\n  _createClass(ColorGridView, [{\n    key: \"focus\",\n    value: function focus() {\n      if (this.items.length) {\n        this.items.first.focus();\n      }\n    }\n    /**\n     * Focuses the last focusable in {@link #items}.\n     */\n\n  }, {\n    key: \"focusLast\",\n    value: function focusLast() {\n      if (this.items.length) {\n        this.items.last.focus();\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(ColorGridView.prototype), \"render\", this).call(this); // Items added before rendering should be known to the #focusTracker.\n\n\n      var _iterator2 = _createForOfIteratorHelper(this.items),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.focusTracker.add(item.element);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.items.on('add', function (evt, item) {\n        _this2.focusTracker.add(item.element);\n      });\n      this.items.on('remove', function (evt, item) {\n        _this2.focusTracker.remove(item.element);\n      }); // Start listening for the keystrokes coming from #element.\n\n      this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(ColorGridView.prototype), \"destroy\", this).call(this);\n\n      this.focusTracker.destroy();\n      this.keystrokes.destroy();\n    }\n    /**\n     * Fired when the `ColorTileView` for the picked item is executed.\n     *\n     * @event execute\n     * @param {Object} data Additional information about the event.\n     * @param {String} data.value The value of the selected color\n     * ({@link module:ui/colorgrid/colorgrid~ColorDefinition#color `color.color`}).\n     * @param {Boolean} data.hasBorder The `hasBorder` property of the selected color\n     * ({@link module:ui/colorgrid/colorgrid~ColorDefinition#options `color.options.hasBorder`}).\n     * @param {String} data.Label The label of the selected color\n     * ({@link module:ui/colorgrid/colorgrid~ColorDefinition#label `color.label`})\n     */\n\n  }]);\n\n  return ColorGridView;\n}(View);\n/**\n * A color definition used to create a {@link module:ui/colorgrid/colortile~ColorTileView}.\n *\n *\t\t{\n *\t\t\tcolor: 'hsl(0, 0%, 75%)',\n *\t\t\tlabel: 'Light Grey',\n *\t\t\toptions: {\n *\t\t\t\thasBorder: true\n *\t\t\t}\n *\t\t}\n *\n * @typedef {Object} module:ui/colorgrid/colorgrid~ColorDefinition\n * @type Object\n *\n * @property {String} color String representing a color.\n * It is used as value of background-color style in {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {String} label String used as label for {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {Object} options Additional options passed to create a {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {Boolean} options.hasBorder A flag that indicates if special a CSS class should be added\n * to {@link module:ui/colorgrid/colortile~ColorTileView}, which renders a border around it.\n */\n\n\nexport { ColorGridView as default };","map":null,"metadata":{},"sourceType":"module"}