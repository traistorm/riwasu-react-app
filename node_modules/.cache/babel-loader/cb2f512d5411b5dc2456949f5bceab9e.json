{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/splitbuttonview\n */\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport '../../../theme/components/dropdown/splitbutton.css';\n/**\n * The split button view class.\n *\n *\t\tconst view = new SplitButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/view~View\n */\n\nvar SplitButtonView = /*#__PURE__*/function (_View) {\n  _inherits(SplitButtonView, _View);\n\n  /**\n   * @inheritDoc\n   */\n  function SplitButtonView(locale) {\n    var _this;\n\n    _classCallCheck(this, SplitButtonView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SplitButtonView).call(this, locale));\n    var bind = _this.bindTemplate; // Implement the Button interface.\n\n    _this.set('class');\n\n    _this.set('icon');\n\n    _this.set('isEnabled', true);\n\n    _this.set('isOn', false);\n\n    _this.set('isToggleable', false);\n\n    _this.set('isVisible', true);\n\n    _this.set('keystroke');\n\n    _this.set('label');\n\n    _this.set('tabindex', -1);\n\n    _this.set('tooltip');\n\n    _this.set('tooltipPosition', 's');\n\n    _this.set('type', 'button');\n\n    _this.set('withText', false);\n    /**\n     * Collection of the child views inside of the split button {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n\n    _this.children = _this.createCollection();\n    /**\n     * A main button of split button.\n     *\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    _this.actionView = _this._createActionView();\n    /**\n     * A secondary button of split button that opens dropdown.\n     *\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    _this.arrowView = _this._createArrowView();\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n     * keystrokes of the split button:\n     *\n     * * <kbd>▶</kbd> moves focus to arrow view when action view is focused,\n     * * <kbd>◀</kbd> moves focus to action view when arrow view is focused.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    _this.keystrokes = new KeystrokeHandler();\n    /**\n     * Tracks information about DOM focus in the dropdown.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    _this.focusTracker = new FocusTracker();\n\n    _this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-splitbutton', bind.to('class'), bind.if('isVisible', 'ck-hidden', function (value) {\n          return !value;\n        }), _this.arrowView.bindTemplate.if('isOn', 'ck-splitbutton_open')]\n      },\n      children: _this.children\n    });\n\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(SplitButtonView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(SplitButtonView.prototype), \"render\", this).call(this);\n\n      this.children.add(this.actionView);\n      this.children.add(this.arrowView);\n      this.focusTracker.add(this.actionView.element);\n      this.focusTracker.add(this.arrowView.element);\n      this.keystrokes.listenTo(this.element); // Overrides toolbar focus cycling behavior.\n\n      this.keystrokes.set('arrowright', function (evt, cancel) {\n        if (_this2.focusTracker.focusedElement === _this2.actionView.element) {\n          _this2.arrowView.focus();\n\n          cancel();\n        }\n      }); // Overrides toolbar focus cycling behavior.\n\n      this.keystrokes.set('arrowleft', function (evt, cancel) {\n        if (_this2.focusTracker.focusedElement === _this2.arrowView.element) {\n          _this2.actionView.focus();\n\n          cancel();\n        }\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(SplitButtonView.prototype), \"destroy\", this).call(this);\n\n      this.focusTracker.destroy();\n      this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the {@link #actionView#element} of the action part of split button.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.actionView.focus();\n    }\n    /**\n     * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #actionView} and binds it with main split button\n     * attributes.\n     *\n     * @private\n     * @returns {module:ui/button/buttonview~ButtonView}\n     */\n\n  }, {\n    key: \"_createActionView\",\n    value: function _createActionView() {\n      var actionView = new ButtonView();\n      actionView.bind('icon', 'isEnabled', 'isOn', 'isToggleable', 'keystroke', 'label', 'tabindex', 'tooltip', 'tooltipPosition', 'type', 'withText').to(this);\n      actionView.extendTemplate({\n        attributes: {\n          class: 'ck-splitbutton__action'\n        }\n      });\n      actionView.delegate('execute').to(this);\n      return actionView;\n    }\n    /**\n     * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #arrowView} and binds it with main split button\n     * attributes.\n     *\n     * @private\n     * @returns {module:ui/button/buttonview~ButtonView}\n     */\n\n  }, {\n    key: \"_createArrowView\",\n    value: function _createArrowView() {\n      var arrowView = new ButtonView();\n      var bind = arrowView.bindTemplate;\n      arrowView.icon = dropdownArrowIcon;\n      arrowView.extendTemplate({\n        attributes: {\n          class: 'ck-splitbutton__arrow',\n          'aria-haspopup': true,\n          'aria-expanded': bind.to('isOn', function (value) {\n            return String(value);\n          })\n        }\n      });\n      arrowView.bind('isEnabled').to(this);\n      arrowView.delegate('execute').to(this, 'open');\n      return arrowView;\n    }\n  }]);\n\n  return SplitButtonView;\n}(View);\n\nexport { SplitButtonView as default };","map":null,"metadata":{},"sourceType":"module"}