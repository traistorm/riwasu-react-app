{"ast":null,"code":"import _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/bubblingemittermixin\n */\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport toArray from '@ckeditor/ckeditor5-utils/src/toarray';\nimport BubblingEventInfo from './bubblingeventinfo';\nvar contextsSymbol = Symbol('bubbling contexts');\n/**\n * Bubbling emitter mixin for the view document as described in the\n * {@link ~BubblingEmitter} interface.\n *\n * @mixin BubblingEmitterMixin\n * @implements module:engine/view/observer/bubblingemittermixin~BubblingEmitter\n */\n\nvar BubblingEmitterMixin = {\n  /**\n   * @inheritDoc\n   */\n  fire: function fire(eventOrInfo) {\n    try {\n      var eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo(this, eventOrInfo);\n      var eventContexts = getBubblingContexts(this);\n\n      if (!eventContexts.size) {\n        return;\n      }\n\n      updateEventInfo(eventInfo, 'capturing', this); // The capture phase of the event.\n\n      for (var _len = arguments.length, eventArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        eventArgs[_key - 1] = arguments[_key];\n      }\n\n      if (fireListenerFor.apply(void 0, [eventContexts, '$capture', eventInfo].concat(eventArgs))) {\n        return eventInfo.return;\n      }\n\n      var startRange = eventInfo.startRange || this.selection.getFirstRange();\n      var selectedElement = startRange ? startRange.getContainedElement() : null;\n      var isCustomContext = selectedElement ? Boolean(getCustomContext(eventContexts, selectedElement)) : false;\n      var node = selectedElement || getDeeperRangeParent(startRange);\n      updateEventInfo(eventInfo, 'atTarget', node); // For the not yet bubbling event trigger for $text node if selection can be there and it's not a custom context selected.\n\n      if (!isCustomContext) {\n        if (fireListenerFor.apply(void 0, [eventContexts, '$text', eventInfo].concat(eventArgs))) {\n          return eventInfo.return;\n        }\n\n        updateEventInfo(eventInfo, 'bubbling', node);\n      }\n\n      while (node) {\n        // Root node handling.\n        if (node.is('rootElement')) {\n          if (fireListenerFor.apply(void 0, [eventContexts, '$root', eventInfo].concat(eventArgs))) {\n            return eventInfo.return;\n          }\n        } // Element node handling.\n        else if (node.is('element')) {\n          if (fireListenerFor.apply(void 0, [eventContexts, node.name, eventInfo].concat(eventArgs))) {\n            return eventInfo.return;\n          }\n        } // Check custom contexts (i.e., a widget).\n\n\n        if (fireListenerFor.apply(void 0, [eventContexts, node, eventInfo].concat(eventArgs))) {\n          return eventInfo.return;\n        }\n\n        node = node.parent;\n        updateEventInfo(eventInfo, 'bubbling', node);\n      }\n\n      updateEventInfo(eventInfo, 'bubbling', this); // Document context.\n\n      fireListenerFor.apply(void 0, [eventContexts, '$document', eventInfo].concat(eventArgs));\n      return eventInfo.return;\n    } catch (err) {\n      // @if CK_DEBUG // throw err;\n\n      /* istanbul ignore next */\n      CKEditorError.rethrowUnexpectedError(err, this);\n    }\n  },\n\n  /**\n   * @inheritDoc\n   */\n  _addEventListener: function _addEventListener(event, callback, options) {\n    var contexts = toArray(options.context || '$document');\n    var eventContexts = getBubblingContexts(this);\n\n    var _iterator = _createForOfIteratorHelper(contexts),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var context = _step.value;\n        var emitter = eventContexts.get(context);\n\n        if (!emitter) {\n          emitter = Object.create(EmitterMixin);\n          eventContexts.set(context, emitter);\n        }\n\n        this.listenTo(emitter, event, callback, options);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  },\n\n  /**\n   * @inheritDoc\n   */\n  _removeEventListener: function _removeEventListener(event, callback) {\n    var eventContexts = getBubblingContexts(this);\n\n    var _iterator2 = _createForOfIteratorHelper(eventContexts.values()),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var emitter = _step2.value;\n        this.stopListening(emitter, event, callback);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n};\nexport default BubblingEmitterMixin; // Update the event info bubbling fields.\n//\n// @param {module:utils/eventinfo~EventInfo} eventInfo The event info object to update.\n// @param {'none'|'capturing'|'atTarget'|'bubbling'} eventPhase The current event phase.\n// @param {module:engine/view/document~Document|module:engine/view/node~Node} currentTarget The current bubbling target.\n\nfunction updateEventInfo(eventInfo, eventPhase, currentTarget) {\n  if (eventInfo instanceof BubblingEventInfo) {\n    eventInfo._eventPhase = eventPhase;\n    eventInfo._currentTarget = currentTarget;\n  }\n} // Fires the listener for the specified context. Returns `true` if event was stopped.\n//\n// @private\n// @param {Map.<String|Function, module:utils/emittermixin~Emitter>} eventContexts\n// @param {String|module:engine/view/node~Node} context\n// @param {module:utils/eventinfo~EventInfo} eventInfo The `EventInfo` object.\n// @param {...*} [eventArgs] Additional arguments to be passed to the callbacks.\n// @returns {Boolean} True if event stop was called.\n\n\nfunction fireListenerFor(eventContexts, context, eventInfo) {\n  var emitter = typeof context == 'string' ? eventContexts.get(context) : getCustomContext(eventContexts, context);\n\n  if (!emitter) {\n    return false;\n  }\n\n  for (var _len2 = arguments.length, eventArgs = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n    eventArgs[_key2 - 3] = arguments[_key2];\n  }\n\n  emitter.fire.apply(emitter, [eventInfo].concat(eventArgs));\n  return eventInfo.stop.called;\n} // Returns an emitter for a specified view node.\n//\n// @private\n// @param {Map.<String|Function, module:utils/emittermixin~Emitter>} eventContexts\n// @param {module:engine/view/node~Node} node\n// @returns {module:utils/emittermixin~Emitter|null}\n\n\nfunction getCustomContext(eventContexts, node) {\n  var _iterator3 = _createForOfIteratorHelper(eventContexts),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          context = _step3$value[0],\n          emitter = _step3$value[1];\n\n      if (typeof context == 'function' && context(node)) {\n        return emitter;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return null;\n} // Returns bubbling contexts map for the source (emitter).\n\n\nfunction getBubblingContexts(source) {\n  if (!source[contextsSymbol]) {\n    source[contextsSymbol] = new Map();\n  }\n\n  return source[contextsSymbol];\n} // Returns the deeper parent element for the range.\n\n\nfunction getDeeperRangeParent(range) {\n  if (!range) {\n    return null;\n  }\n\n  var startParent = range.start.parent;\n  var endParent = range.end.parent;\n  var startPath = startParent.getPath();\n  var endPath = endParent.getPath();\n  return startPath.length > endPath.length ? startParent : endParent;\n}\n/**\n * Bubbling emitter for the view document.\n *\n * Bubbling emitter is triggering events in the context of specified {@link module:engine/view/element~Element view element} name,\n * predefined `'$text'`, `'$root'`, `'$document'` and `'$capture'` contexts, and context matchers provided as a function.\n *\n * Before bubbling starts, listeners for `'$capture'` context are triggered. Then the bubbling starts from the deeper selection\n * position (by firing event on the `'$text'` context) and propagates the view document tree up to the `'$root'` and finally\n * the listeners at `'$document'` context are fired (this is the default context).\n *\n * Examples:\n *\n *\t\t// Listeners registered in the context of the view element names:\n *\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n *\t\t\t// ...\n *\t\t}, { context: 'blockquote' } );\n *\n *\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n *\t\t\t// ...\n *\t\t}, { context: 'li' } );\n *\n *\t\t// Listeners registered in the context of the '$text' and '$root' nodes.\n *\t\tthis.listenTo( view.document, 'arrowKey', ( evt, data ) => {\n *\t\t\t// ...\n *\t\t}, { context: '$text', priority: 'high' } );\n *\n *\t\tthis.listenTo( view.document, 'arrowKey', ( evt, data ) => {\n *\t\t\t// ...\n *\t\t}, { context: '$root' } );\n *\n *\t\t// Listeners registered in the context of custom callback function.\n *\t\tthis.listenTo( view.document, 'arrowKey', ( evt, data ) => {\n *\t\t\t// ...\n *\t\t}, { context: isWidget } );\n *\n *\t\tthis.listenTo( view.document, 'arrowKey', ( evt, data ) => {\n *\t\t\t// ...\n *\t\t}, { context: isWidget, priority: 'high' } );\n *\n * Example flow for selection in text:\n *\n *\t\t<blockquote><p>Foo[]bar</p></blockquote>\n *\n * Fired events on contexts:\n * 1. `'$capture'`\n * 2. `'$text'`\n * 3. `'p'`\n * 4. `'blockquote'`\n * 5. `'$root'`\n * 6. `'$document'`\n *\n * Example flow for selection on element (i.e., Widget):\n *\n *\t\t<blockquote><p>Foo[<widget/>]bar</p></blockquote>\n *\n * Fired events on contexts:\n * 1. `'$capture'`\n * 2. *widget* (custom matcher)\n * 3. `'p'`\n * 4. `'blockquote'`\n * 5. `'$root'`\n * 6. `'$document'`\n *\n * There could be multiple listeners registered for the same context and at different priority levels:\n *\n *\t\t<p>Foo[]bar</p>\n *\n * 1. `'$capture'` at priorities:\n *    1. `'highest'`\n *    2. `'high'`\n *    3. `'normal'`\n *    4. `'low'`\n *    5. `'lowest'`\n * 2. `'$text'` at priorities:\n *    1. `'highest'`\n *    2. `'high'`\n *    3. `'normal'`\n *    4. `'low'`\n *    5. `'lowest'`\n * 3. `'p'` at priorities:\n *    1. `'highest'`\n *    2. `'high'`\n *    3. `'normal'`\n *    4. `'low'`\n *    5. `'lowest'`\n * 4. `'$root'` at priorities:\n *    1. `'highest'`\n *    2. `'high'`\n *    3. `'normal'`\n *    4. `'low'`\n *    5. `'lowest'`\n * 5. `'$document'` at priorities:\n *    1. `'highest'`\n *    2. `'high'`\n *    3. `'normal'`\n *    4. `'low'`\n *    5. `'lowest'`\n *\n * @interface BubblingEmitter\n * @extends module:utils/emittermixin~Emitter\n */","map":null,"metadata":{},"sourceType":"module"}