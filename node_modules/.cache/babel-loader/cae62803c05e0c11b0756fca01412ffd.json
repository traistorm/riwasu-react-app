{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'paragraphStyle',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    var context = core.context;\n    context.paragraphStyle = {\n      _classList: null\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    /** add event listeners */\n\n    listDiv.querySelector('ul').addEventListener('click', this.pickUp.bind(core));\n    context.paragraphStyle._classList = listDiv.querySelectorAll('li button');\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** empty memory */\n\n    listDiv = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var option = core.options;\n    var listDiv = core.util.createElement('DIV');\n    listDiv.className = 'se-submenu se-list-layer se-list-format';\n    var menuLang = core.lang.menu;\n    var defaultList = {\n      spaced: {\n        name: menuLang.spaced,\n        class: '__se__p-spaced',\n        _class: ''\n      },\n      bordered: {\n        name: menuLang.bordered,\n        class: '__se__p-bordered',\n        _class: ''\n      },\n      neon: {\n        name: menuLang.neon,\n        class: '__se__p-neon',\n        _class: ''\n      }\n    };\n    var paragraphStyles = !option.paragraphStyles || option.paragraphStyles.length === 0 ? ['spaced', 'bordered', 'neon'] : option.paragraphStyles;\n    var list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n\n    for (var i = 0, len = paragraphStyles.length, p, name, attrs, _class; i < len; i++) {\n      p = paragraphStyles[i];\n\n      if (typeof p === 'string') {\n        var defaultStyle = defaultList[p.toLowerCase()];\n        if (!defaultStyle) continue;\n        p = defaultStyle;\n      }\n\n      name = p.name;\n      attrs = p.class ? ' class=\"' + p.class + '\"' : '';\n      _class = p._class;\n      list += '<li>' + '<button type=\"button\" class=\"se-btn-list' + (_class ? ' ' + _class : '') + '\" data-value=\"' + p.class + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + '<div' + attrs + '>' + name + '</div>' + '</button></li>';\n    }\n\n    list += '</ul></div>';\n    listDiv.innerHTML = list;\n    return listDiv;\n  },\n\n  /**\n  * @Override submenu\n  */\n  on: function on() {\n    var paragraphContext = this.context.paragraphStyle;\n    var paragraphList = paragraphContext._classList;\n    var currentFormat = this.util.getFormatElement(this.getSelectionNode());\n\n    for (var i = 0, len = paragraphList.length; i < len; i++) {\n      if (this.util.hasClass(currentFormat, paragraphList[i].getAttribute('data-value'))) {\n        this.util.addClass(paragraphList[i], 'active');\n      } else {\n        this.util.removeClass(paragraphList[i], 'active');\n      }\n    }\n  },\n  pickUp: function pickUp(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    var target = e.target;\n    var value = null;\n\n    while (!/^UL$/i.test(target.tagName)) {\n      value = target.getAttribute('data-value');\n      if (value) break;\n      target = target.parentNode;\n    }\n\n    if (!value) return;\n    var selectedFormsts = this.getSelectedElements();\n\n    if (selectedFormsts.length === 0) {\n      this.getRange_addLine(this.getRange(), null);\n      selectedFormsts = this.getSelectedElements();\n      if (selectedFormsts.length === 0) return;\n    } // change format class\n\n\n    var toggleClass = this.util.hasClass(target, 'active') ? this.util.removeClass.bind(this.util) : this.util.addClass.bind(this.util);\n\n    for (var i = 0, len = selectedFormsts.length; i < len; i++) {\n      toggleClass(selectedFormsts[i], value);\n    }\n\n    this.submenuOff(); // history stack\n\n    this.history.push(false);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}