{"ast":null,"code":"'use strict';\n\nimport dialog from '../modules/dialog';\nexport default {\n  name: 'math',\n  display: 'dialog',\n  add: function add(core) {\n    core.addModule([dialog]);\n    var context = core.context;\n    context.math = {\n      focusElement: null,\n      // @Override dialog // This element has focus when the dialog is opened.\n      previewElement: null,\n      fontSizeElement: null,\n      defaultFontSize: '',\n      _mathExp: null\n    };\n    /** math dialog */\n\n    var math_dialog = this.setDialog(core);\n    context.math.modal = math_dialog;\n    context.math.focusElement = math_dialog.querySelector('.se-math-exp');\n    context.math.previewElement = math_dialog.querySelector('.se-math-preview');\n    context.math.fontSizeElement = math_dialog.querySelector('.se-math-size');\n    context.math.focusElement.addEventListener(core.util.isIE ? 'textinput' : 'input', this._renderMathExp.bind(core, context.math), false);\n    context.math.fontSizeElement.addEventListener('change', function (e) {\n      this.fontSize = e.target.value;\n    }.bind(context.math.previewElement.style), false);\n    /** math controller */\n\n    var math_controller = this.setController_MathButton(core);\n    context.math.mathController = math_controller;\n    context.math._mathExp = null;\n    /** add event listeners */\n\n    math_dialog.querySelector('form').addEventListener('submit', this.submit.bind(core), false);\n    math_controller.addEventListener('click', this.onClick_mathController.bind(core));\n    context.math.previewElement.style.fontSize = context.math.defaultFontSize;\n    /** append html */\n\n    context.dialog.modal.appendChild(math_dialog);\n    context.element.relative.appendChild(math_controller);\n    /** empty memory */\n\n    math_dialog = null, math_controller = null;\n  },\n\n  /** dialog */\n  setDialog: function setDialog(core) {\n    var lang = core.lang;\n    var dialog = core.util.createElement('DIV');\n    var fontSize = core.options.mathFontSize;\n    var defaultFontSize = fontSize[0].value;\n    dialog.className = 'se-dialog-content';\n    dialog.style.display = 'none';\n    var html = '' + '<form>' + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + core.icons.cancel + '</button>' + '<span class=\"se-modal-title\">' + lang.dialogBox.mathBox.title + '</span>' + '</div>' + '<div class=\"se-dialog-body\">' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.mathBox.inputLabel + ' (<a href=\"https://katex.org/docs/supported.html\" target=\"_blank\">KaTeX</a>)</label>' + '<textarea class=\"se-input-form se-math-exp\" type=\"text\"></textarea>' + '</div>' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.mathBox.fontSizeLabel + '</label>' + '<select class=\"se-input-select se-math-size\">';\n\n    for (var i = 0, len = fontSize.length, f; i < len; i++) {\n      f = fontSize[i];\n      if (f.default) defaultFontSize = f.value;\n      html += '<option value=\"' + f.value + '\"' + (f.default ? ' selected' : '') + '>' + f.text + '</option>';\n    }\n\n    html += '</select>' + '</div>' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.mathBox.previewLabel + '</label>' + '<p class=\"se-math-preview\"></p>' + '</div>' + '</div>' + '<div class=\"se-dialog-footer\">' + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + '</span></button>' + '</div>' + '</form>';\n    core.context.math.defaultFontSize = defaultFontSize;\n    dialog.innerHTML = html;\n    return dialog;\n  },\n\n  /** modify controller button */\n  setController_MathButton: function setController_MathButton(core) {\n    var lang = core.lang;\n    var math_btn = core.util.createElement('DIV');\n    math_btn.className = 'se-controller se-controller-link';\n    math_btn.innerHTML = '' + '<div class=\"se-arrow se-arrow-up\"></div>' + '<div class=\"link-content\">' + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"update\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + core.icons.edit + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.edit + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"delete\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + core.icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + '</span></span>' + '</button>' + '</div>' + '</div>' + '';\n    return math_btn;\n  },\n\n  /**\n   * @Required @Override dialog\n   */\n  open: function open() {\n    this.plugins.dialog.open.call(this, 'math', 'math' === this.currentControllerName);\n  },\n\n  /**\n   * @Override core - managedTagsInfo\n   */\n  managedTags: function managedTags() {\n    return {\n      className: 'katex',\n      method: function method(element) {\n        if (!element.getAttribute('data-exp') || !this.options.katex) return;\n\n        var dom = this._d.createRange().createContextualFragment(this.plugins.math._renderer.call(this, this.util.HTMLDecoder(element.getAttribute('data-exp'))));\n\n        element.innerHTML = dom.querySelector('.katex').innerHTML;\n      }\n    };\n  },\n  _renderer: function _renderer(exp) {\n    var katex = this.options.katex;\n    return katex.src.renderToString(exp, {\n      throwOnError: true,\n      displayMode: true\n    });\n  },\n  _renderMathExp: function _renderMathExp(contextMath, e) {\n    contextMath.previewElement.innerHTML = this.plugins.math._renderer.call(this, e.target.value);\n  },\n  submit: function submit(e) {\n    this.showLoading();\n    e.preventDefault();\n    e.stopPropagation();\n\n    var submitAction = function () {\n      if (this.context.math.focusElement.value.trim().length === 0) return false;\n      var contextMath = this.context.math;\n      var mathExp = contextMath.focusElement.value;\n      var katexEl = contextMath.previewElement.querySelector('.katex');\n      if (!katexEl) return false;\n      katexEl.className = '__se__katex ' + katexEl.className;\n      katexEl.setAttribute('contenteditable', false);\n      katexEl.setAttribute('data-exp', this.util.HTMLEncoder(mathExp));\n      katexEl.setAttribute('data-font-size', contextMath.fontSizeElement.value);\n      katexEl.style.fontSize = contextMath.fontSizeElement.value;\n\n      if (!this.context.dialog.updateModal) {\n        var selectedFormats = this.getSelectedElements();\n\n        if (selectedFormats.length > 1) {\n          var oFormat = this.util.createElement(selectedFormats[0].nodeName);\n          oFormat.appendChild(katexEl);\n          if (!this.insertNode(oFormat, null, true)) return false;\n        } else {\n          if (!this.insertNode(katexEl, null, true)) return false;\n        }\n\n        var empty = this.util.createTextNode(this.util.zeroWidthSpace);\n        katexEl.parentNode.insertBefore(empty, katexEl.nextSibling);\n        this.setRange(katexEl, 0, katexEl, 1);\n      } else {\n        var containerEl = this.util.getParentElement(contextMath._mathExp, '.katex');\n        containerEl.parentNode.replaceChild(katexEl, containerEl);\n        this.setRange(katexEl, 0, katexEl, 1);\n      }\n\n      contextMath.focusElement.value = '';\n      contextMath.fontSizeElement.value = '1em';\n      contextMath.previewElement.style.fontSize = '1em';\n      contextMath.previewElement.innerHTML = '';\n      return true;\n    }.bind(this);\n\n    try {\n      if (submitAction()) {\n        this.plugins.dialog.close.call(this); // history stack\n\n        this.history.push(false);\n      }\n    } catch (e) {\n      this.plugins.dialog.close.call(this);\n    } finally {\n      this.closeLoading();\n    }\n\n    return false;\n  },\n  active: function active(element) {\n    if (!element) {\n      if (this.controllerArray.indexOf(this.context.math.mathController) > -1) {\n        this.controllersOff();\n      }\n    } else if (element.getAttribute('data-exp')) {\n      if (this.controllerArray.indexOf(this.context.math.mathController) < 0) {\n        this.setRange(element, 0, element, 1);\n        this.plugins.math.call_controller.call(this, element);\n      }\n\n      return true;\n    }\n\n    return false;\n  },\n  on: function on(update) {\n    if (!update) {\n      this.plugins.math.init.call(this);\n    } else {\n      var contextMath = this.context.math;\n\n      if (contextMath._mathExp) {\n        var exp = this.util.HTMLDecoder(contextMath._mathExp.getAttribute('data-exp'));\n        var fontSize = contextMath._mathExp.getAttribute('data-font-size') || '1em';\n        this.context.dialog.updateModal = true;\n        contextMath.focusElement.value = exp;\n        contextMath.fontSizeElement.value = fontSize;\n        contextMath.previewElement.innerHTML = this.plugins.math._renderer.call(this, exp);\n        contextMath.previewElement.style.fontSize = fontSize;\n      }\n    }\n  },\n  call_controller: function call_controller(mathTag) {\n    this.context.math._mathExp = mathTag;\n    var mathBtn = this.context.math.mathController;\n    this.setControllerPosition(mathBtn, mathTag, 'bottom', {\n      left: 0,\n      top: 0\n    });\n    this.controllersOn(mathBtn, mathTag, 'math');\n  },\n  onClick_mathController: function onClick_mathController(e) {\n    e.stopPropagation();\n    var command = e.target.getAttribute('data-command') || e.target.parentNode.getAttribute('data-command');\n    if (!command) return;\n    e.preventDefault();\n\n    if (/update/.test(command)) {\n      this.context.math.focusElement.value = this.util.HTMLDecoder(this.context.math._mathExp.getAttribute('data-exp'));\n      this.plugins.dialog.open.call(this, 'math', true);\n    } else {\n      /** delete */\n      this.util.removeItem(this.context.math._mathExp);\n      this.context.math._mathExp = null;\n      this.focus(); // history stack\n\n      this.history.push(false);\n    }\n\n    this.controllersOff();\n  },\n  init: function init() {\n    var contextMath = this.context.math;\n    contextMath.mathController.style.display = 'none';\n    contextMath._mathExp = null;\n    contextMath.focusElement.value = '';\n    contextMath.previewElement.innerHTML = '';\n  }\n};","map":null,"metadata":{},"sourceType":"module"}