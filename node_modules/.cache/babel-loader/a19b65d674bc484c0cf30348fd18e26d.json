{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/highlightstack\n */\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\n\nvar HighlightStack = /*#__PURE__*/function () {\n  /**\n   * Creates class instance.\n   */\n  function HighlightStack() {\n    _classCallCheck(this, HighlightStack);\n\n    this._stack = [];\n  }\n  /**\n   * Adds highlight descriptor to the stack.\n   *\n   * @fires change:top\n   * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n   */\n\n\n  _createClass(HighlightStack, [{\n    key: \"add\",\n    value: function add(descriptor, writer) {\n      var stack = this._stack; // Save top descriptor and insert new one. If top is changed - fire event.\n\n      var oldTop = stack[0];\n\n      this._insertDescriptor(descriptor);\n\n      var newTop = stack[0]; // When new object is at the top and stores different information.\n\n      if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n        this.fire('change:top', {\n          oldDescriptor: oldTop,\n          newDescriptor: newTop,\n          writer: writer\n        });\n      }\n    }\n    /**\n     * Removes highlight descriptor from the stack.\n     *\n     * @fires change:top\n     * @param {String} id Id of the descriptor to remove.\n     * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(id, writer) {\n      var stack = this._stack;\n      var oldTop = stack[0];\n\n      this._removeDescriptor(id);\n\n      var newTop = stack[0]; // When new object is at the top and stores different information.\n\n      if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n        this.fire('change:top', {\n          oldDescriptor: oldTop,\n          newDescriptor: newTop,\n          writer: writer\n        });\n      }\n    }\n    /**\n     * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n     * descriptor with same id is already present.\n     *\n     * @private\n     * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n     */\n\n  }, {\n    key: \"_insertDescriptor\",\n    value: function _insertDescriptor(descriptor) {\n      var stack = this._stack;\n      var index = stack.findIndex(function (item) {\n        return item.id === descriptor.id;\n      }); // Inserting exact same descriptor - do nothing.\n\n      if (compareDescriptors(descriptor, stack[index])) {\n        return;\n      } // If descriptor with same id but with different information is on the stack - remove it.\n\n\n      if (index > -1) {\n        stack.splice(index, 1);\n      } // Find correct place to insert descriptor in the stack.\n      // It have different information (for example priority) so it must be re-inserted in correct place.\n\n\n      var i = 0;\n\n      while (stack[i] && shouldABeBeforeB(stack[i], descriptor)) {\n        i++;\n      }\n\n      stack.splice(i, 0, descriptor);\n    }\n    /**\n     * Removes descriptor with given id from the stack.\n     *\n     * @private\n     * @param {String} id Descriptor's id.\n     */\n\n  }, {\n    key: \"_removeDescriptor\",\n    value: function _removeDescriptor(id) {\n      var stack = this._stack;\n      var index = stack.findIndex(function (item) {\n        return item.id === id;\n      }); // If descriptor with same id is on the list - remove it.\n\n      if (index > -1) {\n        stack.splice(index, 1);\n      }\n    }\n  }]);\n\n  return HighlightStack;\n}();\n\nexport { HighlightStack as default };\nmix(HighlightStack, EmitterMixin); // Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\n\nfunction compareDescriptors(a, b) {\n  return a && b && a.priority == b.priority && classesToString(a.classes) == classesToString(b.classes);\n} // Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean}\n\n\nfunction shouldABeBeforeB(a, b) {\n  if (a.priority > b.priority) {\n    return true;\n  } else if (a.priority < b.priority) {\n    return false;\n  } // When priorities are equal and names are different - use classes to compare.\n\n\n  return classesToString(a.classes) > classesToString(b.classes);\n} // Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\n\n\nfunction classesToString(classes) {\n  return Array.isArray(classes) ? classes.sort().join(',') : classes;\n}\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that can be used to modify element.\n */","map":null,"metadata":{},"sourceType":"module"}