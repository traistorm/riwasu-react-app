{"ast":null,"code":"import _objectSpread from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/panel/balloon/balloonpanelview\n */\nimport View from '../../view';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport isRange from '@ckeditor/ckeditor5-utils/src/dom/isrange';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { isElement } from 'lodash-es';\nimport '../../../theme/components/panel/balloonpanel.css';\nvar toPx = toUnit('px');\nvar defaultLimiterElement = global.document.body;\n/**\n * The balloon panel view class.\n *\n * A floating container which can\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\n * {@link module:utils/dom/position~Options#target target} in the DOM and remain in that position\n * e.g. when the web page is scrolled.\n *\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\n * collection.\n *\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\n * accept any custom position set provided by the user compatible with the\n * {@link module:utils/dom/position~Options options}.\n *\n *\t\tconst panel = new BalloonPanelView( locale );\n *\t\tconst childView = new ChildView();\n *\t\tconst positions = BalloonPanelView.defaultPositions;\n *\n *\t\tpanel.render();\n *\n *\t\t// Add a child view to the panel's content collection.\n *\t\tpanel.content.add( childView );\n *\n *\t\t// Start pinning the panel to an element with the \"target\" id DOM.\n *\t\t// The balloon will remain pinned until unpin() is called.\n *\t\tpanel.pin( {\n *\t\t\ttarget: document.querySelector( '#target' ),\n *\t\t\tpositions: [\n *\t\t\t\tpositions.northArrowSouth,\n *\t\t\t\tpositions.southArrowNorth\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\n\nvar BalloonPanelView = /*#__PURE__*/function (_View) {\n  _inherits(BalloonPanelView, _View);\n\n  /**\n   * @inheritDoc\n   */\n  function BalloonPanelView(locale) {\n    var _this;\n\n    _classCallCheck(this, BalloonPanelView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BalloonPanelView).call(this, locale));\n    var bind = _this.bindTemplate;\n    /**\n     * The absolute top position of the balloon panel in pixels.\n     *\n     * @observable\n     * @default 0\n     * @member {Number} #top\n     */\n\n    _this.set('top', 0);\n    /**\n     * The absolute left position of the balloon panel in pixels.\n     *\n     * @observable\n     * @default 0\n     * @member {Number} #left\n     */\n\n\n    _this.set('left', 0);\n    /**\n     * The balloon panel's current position. The position name is reflected in the CSS class set\n     * to the balloon, i.e. `.ck-balloon-panel_arrow_nw` for the \"arrow_nw\" position. The class\n     * controls the minor aspects of the balloon's visual appearance like the placement\n     * of an {@link #withArrow arrow}. To support a new position, an additional CSS must be created.\n     *\n     * Default position names correspond with\n     * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     *\n     * See the {@link #attachTo} and {@link #pin} methods to learn about custom balloon positions.\n     *\n     * @observable\n     * @default 'arrow_nw'\n     * @member {'arrow_nw'|'arrow_ne'|'arrow_sw'|'arrow_se'} #position\n     */\n\n\n    _this.set('position', 'arrow_nw');\n    /**\n     * Controls whether the balloon panel is visible or not.\n     *\n     * @observable\n     * @default false\n     * @member {Boolean} #isVisible\n     */\n\n\n    _this.set('isVisible', false);\n    /**\n     * Controls whether the balloon panel has an arrow. The presence of the arrow\n     * is reflected in the `ck-balloon-panel_with-arrow` CSS class.\n     *\n     * @observable\n     * @default true\n     * @member {Boolean} #withArrow\n     */\n\n\n    _this.set('withArrow', true);\n    /**\n     * An additional CSS class added to the {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n\n    _this.set('class');\n    /**\n     * A callback that starts pinning the panel when {@link #isVisible} gets\n     * `true`. Used by {@link #pin}.\n     *\n     * @private\n     * @member {Function} #_pinWhenIsVisibleCallback\n     */\n\n    /**\n     * A collection of the child views that creates the balloon panel contents.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n\n    _this.content = _this.createCollection();\n\n    _this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-balloon-panel', bind.to('position', function (value) {\n          return \"ck-balloon-panel_\".concat(value);\n        }), bind.if('isVisible', 'ck-balloon-panel_visible'), bind.if('withArrow', 'ck-balloon-panel_with-arrow'), bind.to('class')],\n        style: {\n          top: bind.to('top', toPx),\n          left: bind.to('left', toPx)\n        }\n      },\n      children: _this.content\n    });\n\n    return _this;\n  }\n  /**\n   * Shows the panel.\n   *\n   * See {@link #isVisible}.\n   */\n\n\n  _createClass(BalloonPanelView, [{\n    key: \"show\",\n    value: function show() {\n      this.isVisible = true;\n    }\n    /**\n     * Hides the panel.\n     *\n     * See {@link #isVisible}.\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.isVisible = false;\n    }\n    /**\n     * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\n     * smart positioning heuristics that chooses from available positions to make sure the panel\n     * is visible to the user i.e. within the limits of the viewport.\n     *\n     * This method accepts configuration {@link module:utils/dom/position~Options options}\n     * to set the `target`, optional `limiter` and `positions` the balloon should choose from.\n     *\n     *\t\tconst panel = new BalloonPanelView( locale );\n     *\t\tconst positions = BalloonPanelView.defaultPositions;\n     *\n     *\t\tpanel.render();\n     *\n     *\t\t// Attach the panel to an element with the \"target\" id DOM.\n     *\t\tpanel.attachTo( {\n     *\t\t\ttarget: document.querySelector( '#target' ),\n     *\t\t\tpositions: [\n     *\t\t\t\tpositions.northArrowSouth,\n     *\t\t\t\tpositions.southArrowNorth\n     *\t\t\t]\n     *\t\t} );\n     *\n     * **Note**: Attaching the panel will also automatically {@link #show} it.\n     *\n     * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\n     * See the {@link #pin} method for a more permanent positioning strategy.\n     *\n     * @param {module:utils/dom/position~Options} options Positioning options compatible with\n     * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n     * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     */\n\n  }, {\n    key: \"attachTo\",\n    value: function attachTo(options) {\n      this.show();\n      var defaultPositions = BalloonPanelView.defaultPositions;\n      var positionOptions = Object.assign({}, {\n        element: this.element,\n        positions: [defaultPositions.southArrowNorth, defaultPositions.southArrowNorthMiddleWest, defaultPositions.southArrowNorthMiddleEast, defaultPositions.southArrowNorthWest, defaultPositions.southArrowNorthEast, defaultPositions.northArrowSouth, defaultPositions.northArrowSouthMiddleWest, defaultPositions.northArrowSouthMiddleEast, defaultPositions.northArrowSouthWest, defaultPositions.northArrowSouthEast, defaultPositions.viewportStickyNorth],\n        limiter: defaultLimiterElement,\n        fitInViewport: true\n      }, options);\n\n      var optimalPosition = BalloonPanelView._getOptimalPosition(positionOptions); // Usually browsers make some problems with super accurate values like 104.345px\n      // so it is better to use int values.\n\n\n      var left = parseInt(optimalPosition.left);\n      var top = parseInt(optimalPosition.top);\n      var position = optimalPosition.name,\n          _optimalPosition$conf = optimalPosition.config,\n          config = _optimalPosition$conf === void 0 ? {} : _optimalPosition$conf;\n      var _config$withArrow = config.withArrow,\n          withArrow = _config$withArrow === void 0 ? true : _config$withArrow;\n      Object.assign(this, {\n        top: top,\n        left: left,\n        position: position,\n        withArrow: withArrow\n      });\n    }\n    /**\n     * Works the same way as the {@link #attachTo} method except that the position of the panel is\n     * continuously updated when:\n     *\n     * * any ancestor of the {@link module:utils/dom/position~Options#target}\n     * or {@link module:utils/dom/position~Options#limiter} is scrolled,\n     * * the browser window gets resized or scrolled.\n     *\n     * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target}\n     * and is immune to the changing environment.\n     *\n     *\t\tconst panel = new BalloonPanelView( locale );\n     *\t\tconst positions = BalloonPanelView.defaultPositions;\n     *\n     *\t\tpanel.render();\n     *\n     *\t\t// Pin the panel to an element with the \"target\" id DOM.\n     *\t\tpanel.pin( {\n     *\t\t\ttarget: document.querySelector( '#target' ),\n     *\t\t\tpositions: [\n     *\t\t\t\tpositions.northArrowSouth,\n     *\t\t\t\tpositions.southArrowNorth\n     *\t\t\t]\n     *\t\t} );\n     *\n     * To leave the pinned state, use the {@link #unpin} method.\n     *\n     * **Note**: Pinning the panel will also automatically {@link #show} it.\n     *\n     * @param {module:utils/dom/position~Options} options Positioning options compatible with\n     * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n     * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     */\n\n  }, {\n    key: \"pin\",\n    value: function pin(options) {\n      var _this2 = this;\n\n      this.unpin();\n\n      this._pinWhenIsVisibleCallback = function () {\n        if (_this2.isVisible) {\n          _this2._startPinning(options);\n        } else {\n          _this2._stopPinning();\n        }\n      };\n\n      this._startPinning(options); // Control the state of the listeners depending on whether the panel is visible\n      // or not.\n      // TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\n\n      this.listenTo(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n    }\n    /**\n     * Stops pinning the panel, as set up by {@link #pin}.\n     */\n\n  }, {\n    key: \"unpin\",\n    value: function unpin() {\n      if (this._pinWhenIsVisibleCallback) {\n        // Deactivate listeners attached by pin().\n        this._stopPinning(); // Deactivate the panel pin() control logic.\n        // TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\n\n        this.stopListening(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n        this._pinWhenIsVisibleCallback = null;\n        this.hide();\n      }\n    }\n    /**\n     * Starts managing the pinned state of the panel. See {@link #pin}.\n     *\n     * @private\n     * @param {module:utils/dom/position~Options} options Positioning options compatible with\n     * {@link module:utils/dom/position~getOptimalPosition}.\n     */\n\n  }, {\n    key: \"_startPinning\",\n    value: function _startPinning(options) {\n      var _this3 = this;\n\n      this.attachTo(options);\n      var targetElement = getDomElement(options.target);\n      var limiterElement = options.limiter ? getDomElement(options.limiter) : defaultLimiterElement; // Then we need to listen on scroll event of eny element in the document.\n\n      this.listenTo(global.document, 'scroll', function (evt, domEvt) {\n        var scrollTarget = domEvt.target; // The position needs to be updated if the positioning target is within the scrolled element.\n\n        var isWithinScrollTarget = targetElement && scrollTarget.contains(targetElement); // The position needs to be updated if the positioning limiter is within the scrolled element.\n\n        var isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains(limiterElement); // The positioning target and/or limiter can be a Rect, object etc..\n        // There's no way to optimize the listener then.\n\n        if (isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement) {\n          _this3.attachTo(options);\n        }\n      }, {\n        useCapture: true\n      }); // We need to listen on window resize event and update position.\n\n      this.listenTo(global.window, 'resize', function () {\n        _this3.attachTo(options);\n      });\n    }\n    /**\n     * Stops managing the pinned state of the panel. See {@link #pin}.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_stopPinning\",\n    value: function _stopPinning() {\n      this.stopListening(global.document, 'scroll');\n      this.stopListening(global.window, 'resize');\n    }\n  }]);\n\n  return BalloonPanelView;\n}(View); // Returns the DOM element for given object or null, if there is none,\n// e.g. when the passed object is a Rect instance or so.\n//\n// @private\n// @param {*} object\n// @returns {HTMLElement|null}\n\n\nexport { BalloonPanelView as default };\n\nfunction getDomElement(object) {\n  if (isElement(object)) {\n    return object;\n  }\n\n  if (isRange(object)) {\n    return object.commonAncestorContainer;\n  }\n\n  if (typeof object == 'function') {\n    return getDomElement(object());\n  }\n\n  return null;\n}\n/**\n * A horizontal offset of the arrow tip from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-----|---------...\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t +--+  |  +------...\n *\t\t     \\ | /\n *\t\t      \\|/\n *\t    >|-----|<---------------- horizontal offset\n *\n * @default 25\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHorizontalOffset\n */\n\n\nBalloonPanelView.arrowHorizontalOffset = 25;\n/**\n * A vertical offset of the arrow from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-------------...\n *\t\t |\n *\t\t |\n *\t\t |                      /-- vertical offset\n *\t\t |                     V\n *\t\t +--+    +-----...    ---------\n *\t\t     \\  /              |\n *\t\t      \\/               |\n *\t\t-------------------------------\n *\t\t                       ^\n *\n * @default 10\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowVerticalOffset\n */\n\nBalloonPanelView.arrowVerticalOffset = 10;\n/**\n * A vertical offset of the balloon panel from the edge of the viewport if sticky.\n * It helps in accessing toolbar buttons underneath the balloon panel.\n *\n *\t\t  +---------------------------------------------------+\n *\t\t  |                      Target                       |\n *\t\t  |                                                   |\n *\t\t  |                            /-- vertical offset    |\n *\t\t+-----------------------------V-------------------------+\n *\t\t| Toolbar            +-------------+                    |\n *\t\t+--------------------|   Balloon   |--------------------+\n *\t\t| |                  +-------------+                  | |\n *\t\t| |                                                   | |\n *\t\t| |                                                   | |\n *\t\t| |                                                   | |\n *\t\t| +---------------------------------------------------+ |\n *\t\t|                        Viewport                       |\n *\t\t+-------------------------------------------------------+\n *\n * @default 20\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.stickyVerticalOffset\n */\n\nBalloonPanelView.stickyVerticalOffset = 20;\n/**\n * Function used to calculate the optimal position for the balloon.\n *\n * @protected\n * @member {Function} module:ui/panel/balloon/balloonpanelview~BalloonPanelView._getOptimalPosition\n */\n\nBalloonPanelView._getOptimalPosition = getOptimalPosition;\n/**\n * A default set of positioning functions used by the balloon panel view\n * when attaching using the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\n *\n * The available positioning functions are as follows:\n *\n *\n *\n * **North west**\n *\n * * `northWestArrowSouthWest`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t V\n *\t\t [ Target ]\n *\n * * `northWestArrowSouthMiddleWest`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t    V\n *\t\t    [ Target ]\n *\n * * `northWestArrowSouth`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t         [ Target ]\n *\n * * `northWestArrowSouthMiddleEast`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t             [ Target ]\n *\n * * `northWestArrowSouthEast`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                 V\n *\t\t                 [ Target ]\n *\n *\n *\n * **North**\n *\n * * `northArrowSouthWest`\n *\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n *\t\t     V\n *\t\t[ Target ]\n *\n * * `northArrowSouthMiddleWest`\n *\n *\t\t +-----------------+\n *\t\t |     Balloon     |\n *\t\t +-----------------+\n *\t\t     V\n *\t\t[ Target ]\n *\n * * `northArrowSouth`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t    [ Target ]\n *\n * * `northArrowSouthMiddleEast`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t        [ Target ]\n *\n * * `northArrowSouthEast`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                V\n *\t\t           [ Target ]\n *\n * **North east**\n *\n * * `northEastArrowSouthWest`\n *\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n *\t\t         V\n *\t\t[ Target ]\n *\n *\n * * `northEastArrowSouthMiddleWest`\n *\n *\t\t     +-----------------+\n *\t\t     |     Balloon     |\n *\t\t     +-----------------+\n *\t\t         V\n *\t\t[ Target ]\n *\n * * `northEastArrowSouth`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t         V\n *\t\t[ Target ]\n *\n * * `northEastArrowSouthMiddleEast`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t             V\n *\t\t    [ Target ]\n *\n * * `northEastArrowSouthEast`\n *\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\t\t                 V\n *\t\t        [ Target ]\n *\n *\n *\n * **South**\n *\n *\n * * `southArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t     ^\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n *\n * * `southArrowNorthMiddleWest`\n *\n *\t\t   [ Target ]\n *\t\t        ^\n *\t\t    +-----------------+\n *\t\t    |     Balloon     |\n *\t\t    +-----------------+\n *\n * * `southArrowNorth`\n *\n *\t\t    [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthMiddleEast`\n *\n *\t\t            [ Target ]\n *\t\t                 ^\n *\t\t   +-----------------+\n *\t\t   |     Balloon     |\n *\t\t   +-----------------+\n *\n * * `southArrowNorthEast`\n *\n *\t\t            [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n *\n *\n * **South west**\n *\n * * `southWestArrowNorthWest`\n *\n *\t\t [ Target ]\n *\t\t ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthMiddleWest`\n *\n *\t\t     [ Target ]\n *\t\t     ^\n *\t\t +-----------------+\n *\t\t |     Balloon     |\n *\t\t +-----------------+\n *\n * * `southWestArrowNorth`\n *\n *\t\t         [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthMiddleEast`\n *\n *\t\t              [ Target ]\n *\t\t              ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthEast`\n *\n *\t\t                 [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n *\n *\n * **South east**\n *\n * * `southEastArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n* * `southEastArrowNorthMiddleWest`\n *\n *\t\t   [ Target ]\n *\t\t            ^\n *\t\t        +-----------------+\n *\t\t        |     Balloon     |\n *\t\t        +-----------------+\n *\n * * `southEastArrowNorth`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthMiddleEast`\n *\n *\t\t     [ Target ]\n *\t\t              ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthEast`\n *\n *\t\t        [ Target ]\n *\t\t                 ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `viewportStickyNorth`\n *\n *\t\t    +---------------------------+\n *\t\t    |        [ Target ]         |\n *\t\t    |                           |\n *\t\t+-----------------------------------+\n *\t\t|   |    +-----------------+    |   |\n *\t\t|   |    |     Balloon     |    |   |\n *\t\t|   |    +-----------------+    |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   |                           |   |\n *\t\t|   +---------------------------+   |\n *\t\t|             Viewport              |\n *\t\t+-----------------------------------+\n *\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\n *\n * Positioning functions must be compatible with {@link module:utils/dom/position~Position}.\n *\n * Default positioning functions with customized offsets can be generated using\n * {@link module:ui/panel/balloon/balloonpanelview~generatePositions}.\n *\n * The name that the position function returns will be reflected in the balloon panel's class that\n * controls the placement of the \"arrow\". See {@link #position} to learn more.\n *\n * @member {Object.<String,module:utils/dom/position~positioningFunction>}\n * module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions\n */\n\nBalloonPanelView.defaultPositions = generatePositions();\n/**\n * Returns available {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * {@link module:utils/dom/position~positioningFunction positioning functions} adjusted by the specific offsets.\n *\n * @protected\n * @param {Object} [options] Options to generate positions. If not specified, this helper will simply return\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n * @param {Number} [options.horizontalOffset] A custom horizontal offset (in pixels) of each position. If\n * not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHorizontalOffset the default value}\n * will be used.\n * @param {Number} [options.verticalOffset] A custom vertical offset (in pixels) of each position. If\n * not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowVerticalOffset the default value}\n * will be used.\n * @param {Number} [options.stickyVerticalOffset] A custom offset (in pixels) of the `viewportStickyNorth` positioning function.\n * If not specified, {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.stickyVerticalOffset the default value}\n * will be used.\n * @param {Object} [options.config] Additional configuration of the balloon balloon panel view.\n * Currently only {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#withArrow} is supported. Learn more\n * about {@link module:utils/dom/position~positioningFunction positioning functions}.\n * @returns {Object.<String,module:utils/dom/position~positioningFunction>}\n */\n\nexport function generatePositions() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$horizontalOffset = _ref.horizontalOffset,\n      horizontalOffset = _ref$horizontalOffset === void 0 ? BalloonPanelView.arrowHorizontalOffset : _ref$horizontalOffset,\n      _ref$verticalOffset = _ref.verticalOffset,\n      verticalOffset = _ref$verticalOffset === void 0 ? BalloonPanelView.arrowVerticalOffset : _ref$verticalOffset,\n      _ref$stickyVerticalOf = _ref.stickyVerticalOffset,\n      stickyVerticalOffset = _ref$stickyVerticalOf === void 0 ? BalloonPanelView.stickyVerticalOffset : _ref$stickyVerticalOf,\n      config = _ref.config;\n\n  return {\n    // ------- North west\n    northWestArrowSouthWest: function northWestArrowSouthWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left - horizontalOffset,\n        name: 'arrow_sw'\n      }, config && {\n        config: config\n      });\n    },\n    northWestArrowSouthMiddleWest: function northWestArrowSouthMiddleWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left - balloonRect.width * .25 - horizontalOffset,\n        name: 'arrow_smw'\n      }, config && {\n        config: config\n      });\n    },\n    northWestArrowSouth: function northWestArrowSouth(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left - balloonRect.width / 2,\n        name: 'arrow_s'\n      }, config && {\n        config: config\n      });\n    },\n    northWestArrowSouthMiddleEast: function northWestArrowSouthMiddleEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left - balloonRect.width * .75 + horizontalOffset,\n        name: 'arrow_sme'\n      }, config && {\n        config: config\n      });\n    },\n    northWestArrowSouthEast: function northWestArrowSouthEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left - balloonRect.width + horizontalOffset,\n        name: 'arrow_se'\n      }, config && {\n        config: config\n      });\n    },\n    // ------- North\n    northArrowSouthWest: function northArrowSouthWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - horizontalOffset,\n        name: 'arrow_sw'\n      }, config && {\n        config: config\n      });\n    },\n    northArrowSouthMiddleWest: function northArrowSouthMiddleWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - balloonRect.width * .25 - horizontalOffset,\n        name: 'arrow_smw'\n      }, config && {\n        config: config\n      });\n    },\n    northArrowSouth: function northArrowSouth(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n        name: 'arrow_s'\n      }, config && {\n        config: config\n      });\n    },\n    northArrowSouthMiddleEast: function northArrowSouthMiddleEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - balloonRect.width * .75 + horizontalOffset,\n        name: 'arrow_sme'\n      }, config && {\n        config: config\n      });\n    },\n    northArrowSouthEast: function northArrowSouthEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - balloonRect.width + horizontalOffset,\n        name: 'arrow_se'\n      }, config && {\n        config: config\n      });\n    },\n    // ------- North east\n    northEastArrowSouthWest: function northEastArrowSouthWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.right - horizontalOffset,\n        name: 'arrow_sw'\n      }, config && {\n        config: config\n      });\n    },\n    northEastArrowSouthMiddleWest: function northEastArrowSouthMiddleWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.right - balloonRect.width * .25 - horizontalOffset,\n        name: 'arrow_smw'\n      }, config && {\n        config: config\n      });\n    },\n    northEastArrowSouth: function northEastArrowSouth(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.right - balloonRect.width / 2,\n        name: 'arrow_s'\n      }, config && {\n        config: config\n      });\n    },\n    northEastArrowSouthMiddleEast: function northEastArrowSouthMiddleEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.right - balloonRect.width * .75 + horizontalOffset,\n        name: 'arrow_sme'\n      }, config && {\n        config: config\n      });\n    },\n    northEastArrowSouthEast: function northEastArrowSouthEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getNorthTop(targetRect, balloonRect),\n        left: targetRect.right - balloonRect.width + horizontalOffset,\n        name: 'arrow_se'\n      }, config && {\n        config: config\n      });\n    },\n    // ------- South west\n    southWestArrowNorthWest: function southWestArrowNorthWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left - horizontalOffset,\n        name: 'arrow_nw'\n      }, config && {\n        config: config\n      });\n    },\n    southWestArrowNorthMiddleWest: function southWestArrowNorthMiddleWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left - balloonRect.width * .25 - horizontalOffset,\n        name: 'arrow_nmw'\n      }, config && {\n        config: config\n      });\n    },\n    southWestArrowNorth: function southWestArrowNorth(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left - balloonRect.width / 2,\n        name: 'arrow_n'\n      }, config && {\n        config: config\n      });\n    },\n    southWestArrowNorthMiddleEast: function southWestArrowNorthMiddleEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left - balloonRect.width * .75 + horizontalOffset,\n        name: 'arrow_nme'\n      }, config && {\n        config: config\n      });\n    },\n    southWestArrowNorthEast: function southWestArrowNorthEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left - balloonRect.width + horizontalOffset,\n        name: 'arrow_ne'\n      }, config && {\n        config: config\n      });\n    },\n    // ------- South\n    southArrowNorthWest: function southArrowNorthWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - horizontalOffset,\n        name: 'arrow_nw'\n      }, config && {\n        config: config\n      });\n    },\n    southArrowNorthMiddleWest: function southArrowNorthMiddleWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - balloonRect.width * 0.25 - horizontalOffset,\n        name: 'arrow_nmw'\n      }, config && {\n        config: config\n      });\n    },\n    southArrowNorth: function southArrowNorth(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n        name: 'arrow_n'\n      }, config && {\n        config: config\n      });\n    },\n    southArrowNorthMiddleEast: function southArrowNorthMiddleEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - balloonRect.width * 0.75 + horizontalOffset,\n        name: 'arrow_nme'\n      }, config && {\n        config: config\n      });\n    },\n    southArrowNorthEast: function southArrowNorthEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.left + targetRect.width / 2 - balloonRect.width + horizontalOffset,\n        name: 'arrow_ne'\n      }, config && {\n        config: config\n      });\n    },\n    // ------- South east\n    southEastArrowNorthWest: function southEastArrowNorthWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.right - horizontalOffset,\n        name: 'arrow_nw'\n      }, config && {\n        config: config\n      });\n    },\n    southEastArrowNorthMiddleWest: function southEastArrowNorthMiddleWest(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.right - balloonRect.width * .25 - horizontalOffset,\n        name: 'arrow_nmw'\n      }, config && {\n        config: config\n      });\n    },\n    southEastArrowNorth: function southEastArrowNorth(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.right - balloonRect.width / 2,\n        name: 'arrow_n'\n      }, config && {\n        config: config\n      });\n    },\n    southEastArrowNorthMiddleEast: function southEastArrowNorthMiddleEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.right - balloonRect.width * .75 + horizontalOffset,\n        name: 'arrow_nme'\n      }, config && {\n        config: config\n      });\n    },\n    southEastArrowNorthEast: function southEastArrowNorthEast(targetRect, balloonRect) {\n      return _objectSpread({\n        top: getSouthTop(targetRect, balloonRect),\n        left: targetRect.right - balloonRect.width + horizontalOffset,\n        name: 'arrow_ne'\n      }, config && {\n        config: config\n      });\n    },\n    // ------- Sticky\n    viewportStickyNorth: function viewportStickyNorth(targetRect, balloonRect, viewportRect) {\n      if (!targetRect.getIntersection(viewportRect)) {\n        return null;\n      }\n\n      return {\n        top: viewportRect.top + stickyVerticalOffset,\n        left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n        name: 'arrowless',\n        config: _objectSpread({\n          withArrow: false\n        }, config)\n      };\n    }\n  }; // Returns the top coordinate for positions starting with `north*`.\n  //\n  // @private\n  // @param {utils/dom/rect~Rect} targetRect A rect of the target.\n  // @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n  // @returns {Number}\n\n  function getNorthTop(targetRect, balloonRect) {\n    return targetRect.top - balloonRect.height - verticalOffset;\n  } // Returns the top coordinate for positions starting with `south*`.\n  //\n  // @private\n  // @param {utils/dom/rect~Rect} targetRect A rect of the target.\n  // @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n  // @returns {Number}\n\n\n  function getSouthTop(targetRect) {\n    return targetRect.bottom + verticalOffset;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}