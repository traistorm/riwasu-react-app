{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/attributeelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror'; // Default attribute priority.\n\nvar DEFAULT_PRIORITY = 10;\n/**\n * Attribute elements are used to represent formatting elements in the view (think â€“ `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\n\nvar AttributeElement = /*#__PURE__*/function (_Element) {\n  _inherits(AttributeElement, _Element);\n\n  /**\n   * Creates an attribute element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n   * @see module:engine/view/element~Element\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attrs] Collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into created element.\n   */\n  function AttributeElement(document, name, attrs, children) {\n    var _this;\n\n    _classCallCheck(this, AttributeElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AttributeElement).call(this, document, name, attrs, children));\n    /**\n     * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n     *\n     * @method #getFillerOffset\n     * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n     */\n\n    _this.getFillerOffset = getFillerOffset;\n    /**\n     * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @protected\n     * @member {Number}\n     */\n\n    _this._priority = DEFAULT_PRIORITY;\n    /**\n     * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n     * and then two elements are considered similar if, and only if they have the same `_id`.\n     *\n     * @protected\n     * @member {String|Number}\n     */\n\n    _this._id = null;\n    /**\n     * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n     * and still exist in the view tree.\n     *\n     * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @protected\n     * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n     */\n\n    _this._clonesGroup = null;\n    return _this;\n  }\n  /**\n   * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  _createClass(AttributeElement, [{\n    key: \"getElementsWithSameId\",\n\n    /**\n     * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n     * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n     *\n     * Note: If this element has been removed from the tree, returned set will not include it.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n     * if this element has no `id`.\n     *\n     * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n     * with the same `id` that were added and not removed from the view tree.\n     */\n    value: function getElementsWithSameId() {\n      if (this.id === null) {\n        /**\n         * Cannot get elements with the same id for an attribute element without id.\n         *\n         * @error attribute-element-get-elements-with-same-id-no-id\n         */\n        throw new CKEditorError('attribute-element-get-elements-with-same-id-no-id', this);\n      }\n\n      return new Set(this._clonesGroup);\n    }\n    /**\n     * Checks whether this object is of the given.\n     *\n     *\t\tattributeElement.is( 'attributeElement' ); // -> true\n     *\t\tattributeElement.is( 'element' ); // -> true\n     *\t\tattributeElement.is( 'node' ); // -> true\n     *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n     *\t\tattributeElement.is( 'view:element' ); // -> true\n     *\t\tattributeElement.is( 'view:node' ); // -> true\n     *\n     *\t\tattributeElement.is( 'model:element' ); // -> false\n     *\t\tattributeElement.is( 'documentFragment' ); // -> false\n     *\n     * Assuming that the object being checked is an attribute element, you can also check its\n     * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n     *\n     *\t\tattributeElement.is( 'element', 'b' ); // -> true if this is a bold element\n     *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n     *\t\ttext.is( 'element', 'b' ); -> false\n     *\n     * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n     *\n     * @param {String} type Type to check.\n     * @param {String} [name] Element name.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"is\",\n    value: function is(type) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!name) {\n        return type === 'attributeElement' || type === 'view:attributeElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n      } else {\n        return name === this.name && (type === 'attributeElement' || type === 'view:attributeElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'element' || type === 'view:element');\n      }\n    }\n    /**\n     * Checks if this element is similar to other element.\n     *\n     * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n     * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n     * different set of children nodes.\n     *\n     * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n     * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n     * considered similar.\n     *\n     * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n     *\n     * * two following similar elements can be merged together into one, longer element,\n     * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n     * decide whether processed element should be unwrapped,\n     * * etc.\n     *\n     * @param {module:engine/view/element~Element} otherElement\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isSimilar\",\n    value: function isSimilar(otherElement) {\n      // If any element has an `id` set, just compare the ids.\n      if (this.id !== null || otherElement.id !== null) {\n        return this.id === otherElement.id;\n      }\n\n      return _get(_getPrototypeOf(AttributeElement.prototype), \"isSimilar\", this).call(this, otherElement) && this.priority == otherElement.priority;\n    }\n    /**\n     * Clones provided element with priority.\n     *\n     * @protected\n     * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n     * element will be cloned without any children.\n     * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n     */\n\n  }, {\n    key: \"_clone\",\n    value: function _clone(deep) {\n      var cloned = _get(_getPrototypeOf(AttributeElement.prototype), \"_clone\", this).call(this, deep); // Clone priority too.\n\n\n      cloned._priority = this._priority; // And id too.\n\n      cloned._id = this._id;\n      return cloned;\n    }\n  }, {\n    key: \"priority\",\n    get: function get() {\n      return this._priority;\n    }\n    /**\n     * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n     * and then two elements are considered similar if, and only if they have the same `id`.\n     *\n     * @readonly\n     * @type {String|Number}\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }]);\n\n  return AttributeElement;\n}(Element);\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\n\n\nexport { AttributeElement as default };\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY; // Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\nfunction getFillerOffset() {\n  // <b>foo</b> does not need filler.\n  if (nonUiChildrenCount(this)) {\n    return null;\n  }\n\n  var element = this.parent; // <p><b></b></p> needs filler -> <p><b><br></b></p>\n\n  while (element && element.is('attributeElement')) {\n    if (nonUiChildrenCount(element) > 1) {\n      return null;\n    }\n\n    element = element.parent;\n  }\n\n  if (!element || nonUiChildrenCount(element) > 1) {\n    return null;\n  } // Render block filler at the end of element (after all ui elements).\n\n\n  return this.childCount;\n} // Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\n\n\nfunction nonUiChildrenCount(element) {\n  return Array.from(element.getChildren()).filter(function (element) {\n    return !element.is('uiElement');\n  }).length;\n}","map":null,"metadata":{},"sourceType":"module"}