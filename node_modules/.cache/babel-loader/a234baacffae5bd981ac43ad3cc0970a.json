{"ast":null,"code":"/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\n'use strict';\n\nexport default {\n  name: 'table',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    var context = core.context;\n    var contextTable = context.table = {\n      _element: null,\n      _tdElement: null,\n      _trElement: null,\n      _trElements: null,\n      _tableXY: [],\n      _maxWidth: true,\n      _fixedColumn: false,\n      _rtl: core.options.rtl,\n      cellControllerTop: core.options.tableCellControllerPosition === 'top',\n      resizeText: null,\n      headerButton: null,\n      mergeButton: null,\n      splitButton: null,\n      splitMenu: null,\n      maxText: core.lang.controller.maxSize,\n      minText: core.lang.controller.minSize,\n      _physical_cellCnt: 0,\n      _logical_cellCnt: 0,\n      _rowCnt: 0,\n      _rowIndex: 0,\n      _physical_cellIndex: 0,\n      _logical_cellIndex: 0,\n      _current_colSpan: 0,\n      _current_rowSpan: 0,\n      icons: {\n        expansion: core.icons.expansion,\n        reduction: core.icons.reduction\n      }\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    var tablePicker = listDiv.querySelector('.se-controller-table-picker');\n    contextTable.tableHighlight = listDiv.querySelector('.se-table-size-highlighted');\n    contextTable.tableUnHighlight = listDiv.querySelector('.se-table-size-unhighlighted');\n    contextTable.tableDisplay = listDiv.querySelector('.se-table-size-display');\n    if (core.options.rtl) contextTable.tableHighlight.style.left = 10 * 18 - 13 + 'px';\n    /** set table controller */\n\n    var tableController = this.setController_table(core);\n    contextTable.tableController = tableController;\n    contextTable.resizeButton = tableController.querySelector('._se_table_resize');\n    contextTable.resizeText = tableController.querySelector('._se_table_resize > span > span');\n    contextTable.columnFixedButton = tableController.querySelector('._se_table_fixed_column');\n    contextTable.headerButton = tableController.querySelector('._se_table_header');\n    /** set resizing */\n\n    var resizeDiv = this.setController_tableEditor(core, contextTable.cellControllerTop);\n    contextTable.resizeDiv = resizeDiv;\n    contextTable.splitMenu = resizeDiv.querySelector('.se-btn-group-sub');\n    contextTable.mergeButton = resizeDiv.querySelector('._se_table_merge_button');\n    contextTable.splitButton = resizeDiv.querySelector('._se_table_split_button');\n    contextTable.insertRowAboveButton = resizeDiv.querySelector('._se_table_insert_row_a');\n    contextTable.insertRowBelowButton = resizeDiv.querySelector('._se_table_insert_row_b');\n    /** add event listeners */\n\n    tablePicker.addEventListener('mousemove', this.onMouseMove_tablePicker.bind(core, contextTable));\n    tablePicker.addEventListener('click', this.appendTable.bind(core));\n    resizeDiv.addEventListener('click', this.onClick_tableController.bind(core));\n    tableController.addEventListener('click', this.onClick_tableController.bind(core));\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** append controller */\n\n    context.element.relative.appendChild(resizeDiv);\n    context.element.relative.appendChild(tableController);\n    /** empty memory */\n\n    listDiv = null, tablePicker = null, resizeDiv = null, tableController = null, contextTable = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var listDiv = core.util.createElement('DIV');\n    listDiv.className = 'se-submenu se-selector-table';\n    listDiv.innerHTML = '' + '<div class=\"se-table-size\">' + '<div class=\"se-table-size-picker se-controller-table-picker\"></div>' + '<div class=\"se-table-size-highlighted\"></div>' + '<div class=\"se-table-size-unhighlighted\"></div>' + '</div>' + '<div class=\"se-table-size-display\">1 x 1</div>';\n    return listDiv;\n  },\n  setController_table: function setController_table(core) {\n    var lang = core.lang;\n    var icons = core.icons;\n    var tableResize = core.util.createElement('DIV');\n    tableResize.className = 'se-controller se-controller-table';\n    tableResize.innerHTML = '' + '<div>' + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"resize\" class=\"se-btn se-tooltip _se_table_resize\">' + icons.expansion + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.maxSize + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"layout\" class=\"se-btn se-tooltip _se_table_fixed_column\">' + icons.fixed_column_width + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.fixedColumnWidth + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"header\" class=\"se-btn se-tooltip _se_table_header\">' + icons.table_header + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.tableHeader + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"remove\" class=\"se-btn se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + '</span></span>' + '</button>' + '</div>' + '</div>';\n    return tableResize;\n  },\n  setController_tableEditor: function setController_tableEditor(core, cellControllerTop) {\n    var lang = core.lang;\n    var icons = core.icons;\n    var tableResize = core.util.createElement('DIV');\n    tableResize.className = 'se-controller se-controller-table-cell';\n    tableResize.innerHTML = (cellControllerTop ? '' : '<div class=\"se-arrow se-arrow-up\"></div>') + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"insert\" data-value=\"row\" data-option=\"up\" class=\"se-btn se-tooltip _se_table_insert_row_a\">' + icons.insert_row_above + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertRowAbove + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"insert\" data-value=\"row\" data-option=\"down\" class=\"se-btn se-tooltip _se_table_insert_row_b\">' + icons.insert_row_below + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertRowBelow + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"delete\" data-value=\"row\" class=\"se-btn se-tooltip\">' + icons.delete_row + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.deleteRow + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"merge\" class=\"_se_table_merge_button se-btn se-tooltip\" disabled>' + icons.merge_cell + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.mergeCells + '</span></span>' + '</button>' + '</div>' + '<div class=\"se-btn-group\" style=\"padding-top: 0;\">' + '<button type=\"button\" data-command=\"insert\" data-value=\"cell\" data-option=\"left\" class=\"se-btn se-tooltip\">' + icons.insert_column_left + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertColumnBefore + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"insert\" data-value=\"cell\" data-option=\"right\" class=\"se-btn se-tooltip\">' + icons.insert_column_right + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertColumnAfter + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"delete\" data-value=\"cell\" class=\"se-btn se-tooltip\">' + icons.delete_column + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.deleteColumn + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"onsplit\" class=\"_se_table_split_button se-btn se-tooltip\">' + icons.split_cell + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.splitCells + '</span></span>' + '</button>' + '<div class=\"se-btn-group-sub sun-editor-common se-list-layer se-table-split\">' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li class=\"se-btn-list\" data-command=\"split\" data-value=\"vertical\" style=\"line-height:32px;\" title=\"' + lang.controller.VerticalSplit + '\" aria-label=\"' + lang.controller.VerticalSplit + '\">' + lang.controller.VerticalSplit + '</li>' + '<li class=\"se-btn-list\" data-command=\"split\" data-value=\"horizontal\" style=\"line-height:32px;\" title=\"' + lang.controller.HorizontalSplit + '\" aria-label=\"' + lang.controller.HorizontalSplit + '\">' + lang.controller.HorizontalSplit + '</li>' + '</ul>' + '</div>' + '</div>' + '</div>';\n    return tableResize;\n  },\n  appendTable: function appendTable() {\n    var oTable = this.util.createElement('TABLE');\n    var createCells = this.plugins.table.createCells;\n    var x = this.context.table._tableXY[0];\n    var y = this.context.table._tableXY[1];\n    var tableHTML = '<tbody>';\n\n    while (y > 0) {\n      tableHTML += '<tr>' + createCells.call(this, 'td', x) + '</tr>';\n      --y;\n    }\n\n    tableHTML += '</tbody>';\n    oTable.innerHTML = tableHTML;\n    var changed = this.insertComponent(oTable, false, true, false);\n\n    if (changed) {\n      var firstTd = oTable.querySelector('td div');\n      this.setRange(firstTd, 0, firstTd, 0);\n      this.plugins.table.reset_table_picker.call(this);\n    }\n  },\n  createCells: function createCells(nodeName, cnt, returnElement) {\n    nodeName = nodeName.toLowerCase();\n\n    if (!returnElement) {\n      var cellsHTML = '';\n\n      while (cnt > 0) {\n        cellsHTML += '<' + nodeName + '><div><br></div></' + nodeName + '>';\n        cnt--;\n      }\n\n      return cellsHTML;\n    } else {\n      var cell = this.util.createElement(nodeName);\n      cell.innerHTML = '<div><br></div>';\n      return cell;\n    }\n  },\n  onMouseMove_tablePicker: function onMouseMove_tablePicker(contextTable, e) {\n    e.stopPropagation();\n\n    var x = this._w.Math.ceil(e.offsetX / 18);\n\n    var y = this._w.Math.ceil(e.offsetY / 18);\n\n    x = x < 1 ? 1 : x;\n    y = y < 1 ? 1 : y;\n\n    if (contextTable._rtl) {\n      contextTable.tableHighlight.style.left = x * 18 - 13 + 'px';\n      x = 11 - x;\n    }\n\n    contextTable.tableHighlight.style.width = x + 'em';\n    contextTable.tableHighlight.style.height = y + 'em'; // let x_u = x < 5 ? 5 : (x > 9 ? 10 : x + 1);\n    // let y_u = y < 5 ? 5 : (y > 9 ? 10 : y + 1);\n    // contextTable.tableUnHighlight.style.width = x_u + 'em';\n    // contextTable.tableUnHighlight.style.height = y_u + 'em';\n\n    this.util.changeTxt(contextTable.tableDisplay, x + ' x ' + y);\n    contextTable._tableXY = [x, y];\n  },\n  reset_table_picker: function reset_table_picker() {\n    if (!this.context.table.tableHighlight) return;\n    var highlight = this.context.table.tableHighlight.style;\n    var unHighlight = this.context.table.tableUnHighlight.style;\n    highlight.width = '1em';\n    highlight.height = '1em';\n    unHighlight.width = '10em';\n    unHighlight.height = '10em';\n    this.util.changeTxt(this.context.table.tableDisplay, '1 x 1');\n    this.submenuOff();\n  },\n  init: function init() {\n    var contextTable = this.context.table;\n    var tablePlugin = this.plugins.table;\n\n    tablePlugin._removeEvents.call(this);\n\n    if (tablePlugin._selectedTable) {\n      var selectedCells = tablePlugin._selectedTable.querySelectorAll('.se-table-selected-cell');\n\n      for (var i = 0, len = selectedCells.length; i < len; i++) {\n        this.util.removeClass(selectedCells[i], 'se-table-selected-cell');\n      }\n    }\n\n    tablePlugin._toggleEditor.call(this, true);\n\n    contextTable._element = null;\n    contextTable._tdElement = null;\n    contextTable._trElement = null;\n    contextTable._trElements = null;\n    contextTable._tableXY = [];\n    contextTable._maxWidth = true;\n    contextTable._fixedColumn = false;\n    contextTable._physical_cellCnt = 0;\n    contextTable._logical_cellCnt = 0;\n    contextTable._rowCnt = 0;\n    contextTable._rowIndex = 0;\n    contextTable._physical_cellIndex = 0;\n    contextTable._logical_cellIndex = 0;\n    contextTable._current_colSpan = 0;\n    contextTable._current_rowSpan = 0;\n    tablePlugin._shift = false;\n    tablePlugin._selectedCells = null;\n    tablePlugin._selectedTable = null;\n    tablePlugin._ref = null;\n    tablePlugin._fixedCell = null;\n    tablePlugin._selectedCell = null;\n    tablePlugin._fixedCellName = null;\n  },\n\n  /** table edit controller */\n  call_controller_tableEdit: function call_controller_tableEdit(tdElement) {\n    var tablePlugin = this.plugins.table;\n    var contextTable = this.context.table;\n\n    if (!this.getSelection().isCollapsed && !tablePlugin._selectedCell) {\n      this.controllersOff();\n      this.util.removeClass(tdElement, 'se-table-selected-cell');\n      return;\n    }\n\n    var tableElement = contextTable._element || this.plugins.table._selectedTable || this.util.getParentElement(tdElement, 'TABLE');\n    contextTable._maxWidth = this.util.hasClass(tableElement, 'se-table-size-100') || tableElement.style.width === '100%' || !tableElement.style.width && !this.util.hasClass(tableElement, 'se-table-size-auto');\n    contextTable._fixedColumn = this.util.hasClass(tableElement, 'se-table-layout-fixed') || tableElement.style.tableLayout === 'fixed';\n    tablePlugin.setTableStyle.call(this, contextTable._maxWidth ? 'width|column' : 'width');\n    tablePlugin.setPositionControllerTop.call(this, tableElement);\n    tablePlugin.setPositionControllerDiv.call(this, tdElement, tablePlugin._shift);\n    if (!tablePlugin._shift) this.controllersOn(contextTable.resizeDiv, contextTable.tableController, tablePlugin.init.bind(this), tdElement, 'table');\n  },\n  setPositionControllerTop: function setPositionControllerTop(tableElement) {\n    this.setControllerPosition(this.context.table.tableController, tableElement, 'top', {\n      left: 0,\n      top: 0\n    });\n  },\n  setPositionControllerDiv: function setPositionControllerDiv(tdElement, reset) {\n    var contextTable = this.context.table;\n    var resizeDiv = contextTable.resizeDiv;\n    this.plugins.table.setCellInfo.call(this, tdElement, reset);\n\n    if (contextTable.cellControllerTop) {\n      this.setControllerPosition(resizeDiv, contextTable._element, 'top', {\n        left: contextTable.tableController.offsetWidth,\n        top: 0\n      });\n    } else {\n      this.setControllerPosition(resizeDiv, tdElement, 'bottom', {\n        left: 0,\n        top: 0\n      });\n    }\n  },\n  setCellInfo: function setCellInfo(tdElement, reset) {\n    var contextTable = this.context.table;\n    var table = contextTable._element = this.plugins.table._selectedTable || this.util.getParentElement(tdElement, 'TABLE');\n\n    if (/THEAD/i.test(table.firstElementChild.nodeName)) {\n      this.util.addClass(contextTable.headerButton, 'active');\n    } else {\n      this.util.removeClass(contextTable.headerButton, 'active');\n    }\n\n    if (reset || contextTable._physical_cellCnt === 0) {\n      if (contextTable._tdElement !== tdElement) {\n        contextTable._tdElement = tdElement;\n        contextTable._trElement = tdElement.parentNode;\n      }\n\n      var rows = contextTable._trElements = table.rows;\n      var cellIndex = tdElement.cellIndex;\n      var cellCnt = 0;\n\n      for (var i = 0, cells = rows[0].cells, len = rows[0].cells.length; i < len; i++) {\n        cellCnt += cells[i].colSpan;\n      } // row cnt, row index\n\n\n      var rowIndex = contextTable._rowIndex = contextTable._trElement.rowIndex;\n      contextTable._rowCnt = rows.length; // cell cnt, physical cell index\n\n      contextTable._physical_cellCnt = contextTable._trElement.cells.length;\n      contextTable._logical_cellCnt = cellCnt;\n      contextTable._physical_cellIndex = cellIndex; // span\n\n      contextTable._current_colSpan = contextTable._tdElement.colSpan - 1;\n      contextTable._current_rowSpan - contextTable._trElement.cells[cellIndex].rowSpan - 1; // find logcal cell index\n\n      var rowSpanArr = [];\n      var spanIndex = [];\n\n      for (var _i = 0, _cells, colSpan; _i <= rowIndex; _i++) {\n        _cells = rows[_i].cells;\n        colSpan = 0;\n\n        for (var c = 0, cLen = _cells.length, cell, cs, rs, logcalIndex; c < cLen; c++) {\n          cell = _cells[c];\n          cs = cell.colSpan - 1;\n          rs = cell.rowSpan - 1;\n          logcalIndex = c + colSpan;\n\n          if (spanIndex.length > 0) {\n            for (var r = 0, arr; r < spanIndex.length; r++) {\n              arr = spanIndex[r];\n              if (arr.row > _i) continue;\n\n              if (logcalIndex >= arr.index) {\n                colSpan += arr.cs;\n                logcalIndex += arr.cs;\n                arr.rs -= 1;\n                arr.row = _i + 1;\n\n                if (arr.rs < 1) {\n                  spanIndex.splice(r, 1);\n                  r--;\n                }\n              } else if (c === cLen - 1) {\n                arr.rs -= 1;\n                arr.row = _i + 1;\n\n                if (arr.rs < 1) {\n                  spanIndex.splice(r, 1);\n                  r--;\n                }\n              }\n            }\n          } // logcal cell index\n\n\n          if (_i === rowIndex && c === cellIndex) {\n            contextTable._logical_cellIndex = logcalIndex;\n            break;\n          }\n\n          if (rs > 0) {\n            rowSpanArr.push({\n              index: logcalIndex,\n              cs: cs + 1,\n              rs: rs,\n              row: -1\n            });\n          }\n\n          colSpan += cs;\n        }\n\n        spanIndex = spanIndex.concat(rowSpanArr).sort(function (a, b) {\n          return a.index - b.index;\n        });\n        rowSpanArr = [];\n      }\n\n      rowSpanArr = null;\n      spanIndex = null;\n    }\n  },\n  editTable: function editTable(type, option) {\n    var tablePlugin = this.plugins.table;\n    var contextTable = this.context.table;\n    var table = contextTable._element;\n    var isRow = type === 'row';\n\n    if (isRow) {\n      var tableAttr = contextTable._trElement.parentNode;\n\n      if (/^THEAD$/i.test(tableAttr.nodeName)) {\n        if (option === 'up') {\n          return;\n        } else if (!tableAttr.nextElementSibling || !/^TBODY$/i.test(tableAttr.nextElementSibling.nodeName)) {\n          table.innerHTML += '<tbody><tr>' + tablePlugin.createCells.call(this, 'td', contextTable._logical_cellCnt, false) + '</tr></tbody>';\n          return;\n        }\n      }\n    } // multi\n\n\n    if (tablePlugin._ref) {\n      var positionCell = contextTable._tdElement;\n      var selectedCells = tablePlugin._selectedCells; // multi - row\n\n      if (isRow) {\n        // remove row\n        if (!option) {\n          var row = selectedCells[0].parentNode;\n          var removeCells = [selectedCells[0]];\n\n          for (var i = 1, len = selectedCells.length, cell; i < len; i++) {\n            cell = selectedCells[i];\n\n            if (row !== cell.parentNode) {\n              removeCells.push(cell);\n              row = cell.parentNode;\n            }\n          }\n\n          for (var _i2 = 0, _len = removeCells.length; _i2 < _len; _i2++) {\n            tablePlugin.setCellInfo.call(this, removeCells[_i2], true);\n            tablePlugin.editRow.call(this, option);\n          }\n        } else {\n          // edit row\n          tablePlugin.setCellInfo.call(this, option === 'up' ? selectedCells[0] : selectedCells[selectedCells.length - 1], true);\n          tablePlugin.editRow.call(this, option, positionCell);\n        }\n      } else {\n        // multi - cell\n        var firstRow = selectedCells[0].parentNode; // remove cell\n\n        if (!option) {\n          var _removeCells = [selectedCells[0]];\n\n          for (var _i3 = 1, _len2 = selectedCells.length, _cell; _i3 < _len2; _i3++) {\n            _cell = selectedCells[_i3];\n\n            if (firstRow === _cell.parentNode) {\n              _removeCells.push(_cell);\n            } else {\n              break;\n            }\n          }\n\n          for (var _i4 = 0, _len3 = _removeCells.length; _i4 < _len3; _i4++) {\n            tablePlugin.setCellInfo.call(this, _removeCells[_i4], true);\n            tablePlugin.editCell.call(this, option);\n          }\n        } else {\n          // edit cell\n          var rightCell = null;\n\n          for (var _i5 = 0, _len4 = selectedCells.length - 1; _i5 < _len4; _i5++) {\n            if (firstRow !== selectedCells[_i5 + 1].parentNode) {\n              rightCell = selectedCells[_i5];\n              break;\n            }\n          }\n\n          tablePlugin.setCellInfo.call(this, option === 'left' ? selectedCells[0] : rightCell || selectedCells[0], true);\n          tablePlugin.editCell.call(this, option, positionCell);\n        }\n      }\n\n      if (!option) tablePlugin.init.call(this);\n    } // one\n    else {\n      tablePlugin[isRow ? 'editRow' : 'editCell'].call(this, option);\n    } // after remove\n\n\n    if (!option) {\n      var children = table.children;\n\n      for (var _i6 = 0; _i6 < children.length; _i6++) {\n        if (children[_i6].children.length === 0) {\n          this.util.removeItem(children[_i6]);\n          _i6--;\n        }\n      }\n\n      if (table.children.length === 0) this.util.removeItem(table);\n    }\n  },\n  editRow: function editRow(option, positionResetElement) {\n    var contextTable = this.context.table;\n    var remove = !option;\n    var up = option === 'up';\n    var originRowIndex = contextTable._rowIndex;\n    var rowIndex = remove || up ? originRowIndex : originRowIndex + contextTable._current_rowSpan + 1;\n    var sign = remove ? -1 : 1;\n    var rows = contextTable._trElements;\n    var cellCnt = contextTable._logical_cellCnt;\n\n    for (var i = 0, len = originRowIndex + (remove ? -1 : 0), cell; i <= len; i++) {\n      cell = rows[i].cells;\n      if (cell.length === 0) return;\n\n      for (var c = 0, cLen = cell.length, rs, cs; c < cLen; c++) {\n        rs = cell[c].rowSpan;\n        cs = cell[c].colSpan;\n        if (rs < 2 && cs < 2) continue;\n\n        if (rs + i > rowIndex && rowIndex > i) {\n          cell[c].rowSpan = rs + sign;\n          cellCnt -= cs;\n        }\n      }\n    }\n\n    if (remove) {\n      var next = rows[originRowIndex + 1];\n\n      if (next) {\n        var spanCells = [];\n        var cells = rows[originRowIndex].cells;\n        var colSpan = 0;\n\n        for (var _i7 = 0, _len5 = cells.length, _cell2, logcalIndex; _i7 < _len5; _i7++) {\n          _cell2 = cells[_i7];\n          logcalIndex = _i7 + colSpan;\n          colSpan += _cell2.colSpan - 1;\n\n          if (_cell2.rowSpan > 1) {\n            _cell2.rowSpan -= 1;\n            spanCells.push({\n              cell: _cell2.cloneNode(false),\n              index: logcalIndex\n            });\n          }\n        }\n\n        if (spanCells.length > 0) {\n          var spanCell = spanCells.shift();\n          cells = next.cells;\n          colSpan = 0;\n\n          for (var _i8 = 0, _len6 = cells.length, _cell3, _logcalIndex; _i8 < _len6; _i8++) {\n            _cell3 = cells[_i8];\n            _logcalIndex = _i8 + colSpan;\n            colSpan += _cell3.colSpan - 1;\n\n            if (_logcalIndex >= spanCell.index) {\n              _i8--, colSpan--;\n              colSpan += spanCell.cell.colSpan - 1;\n              next.insertBefore(spanCell.cell, _cell3);\n              spanCell = spanCells.shift();\n              if (!spanCell) break;\n            }\n          }\n\n          if (spanCell) {\n            next.appendChild(spanCell.cell);\n\n            for (var _i9 = 0, _len7 = spanCells.length; _i9 < _len7; _i9++) {\n              next.appendChild(spanCells[_i9].cell);\n            }\n          }\n        }\n      }\n\n      contextTable._element.deleteRow(rowIndex);\n    } else {\n      var newRow = contextTable._element.insertRow(rowIndex);\n\n      newRow.innerHTML = this.plugins.table.createCells.call(this, 'td', cellCnt, false);\n    }\n\n    if (!remove) {\n      this.plugins.table.setPositionControllerDiv.call(this, positionResetElement || contextTable._tdElement, true);\n    } else {\n      this.controllersOff();\n    }\n  },\n  editCell: function editCell(option, positionResetElement) {\n    var contextTable = this.context.table;\n    var util = this.util;\n    var remove = !option;\n    var left = option === 'left';\n    var colSpan = contextTable._current_colSpan;\n    var cellIndex = remove || left ? contextTable._logical_cellIndex : contextTable._logical_cellIndex + colSpan + 1;\n    var rows = contextTable._trElements;\n    var rowSpanArr = [];\n    var spanIndex = [];\n    var passCell = 0;\n    var removeCell = [];\n    var removeSpanArr = [];\n\n    for (var i = 0, len = contextTable._rowCnt, row, insertIndex, cells, newCell, applySpan, cellColSpan; i < len; i++) {\n      row = rows[i];\n      insertIndex = cellIndex;\n      applySpan = false;\n      cells = row.cells;\n      cellColSpan = 0;\n\n      for (var c = 0, cell, cLen = cells.length, rs, cs, removeIndex; c < cLen; c++) {\n        cell = cells[c];\n        if (!cell) break;\n        rs = cell.rowSpan - 1;\n        cs = cell.colSpan - 1;\n\n        if (!remove) {\n          if (c >= insertIndex) break;\n\n          if (cs > 0) {\n            if (passCell < 1 && cs + c >= insertIndex) {\n              cell.colSpan += 1;\n              insertIndex = null;\n              passCell = rs + 1;\n              break;\n            }\n\n            insertIndex -= cs;\n          }\n\n          if (!applySpan) {\n            for (var r = 0, arr; r < spanIndex.length; r++) {\n              arr = spanIndex[r];\n              insertIndex -= arr.cs;\n              arr.rs -= 1;\n\n              if (arr.rs < 1) {\n                spanIndex.splice(r, 1);\n                r--;\n              }\n            }\n\n            applySpan = true;\n          }\n        } else {\n          removeIndex = c + cellColSpan;\n\n          if (spanIndex.length > 0) {\n            var lastCell = !cells[c + 1];\n\n            for (var _r = 0, _arr; _r < spanIndex.length; _r++) {\n              _arr = spanIndex[_r];\n              if (_arr.row > i) continue;\n\n              if (removeIndex >= _arr.index) {\n                cellColSpan += _arr.cs;\n                removeIndex = c + cellColSpan;\n                _arr.rs -= 1;\n                _arr.row = i + 1;\n\n                if (_arr.rs < 1) {\n                  spanIndex.splice(_r, 1);\n                  _r--;\n                }\n              } else if (lastCell) {\n                _arr.rs -= 1;\n                _arr.row = i + 1;\n\n                if (_arr.rs < 1) {\n                  spanIndex.splice(_r, 1);\n                  _r--;\n                }\n              }\n            }\n          }\n\n          if (rs > 0) {\n            rowSpanArr.push({\n              rs: rs,\n              cs: cs + 1,\n              index: removeIndex,\n              row: -1\n            });\n          }\n\n          if (removeIndex >= insertIndex && removeIndex + cs <= insertIndex + colSpan) {\n            removeCell.push(cell);\n          } else if (removeIndex <= insertIndex + colSpan && removeIndex + cs >= insertIndex) {\n            cell.colSpan -= util.getOverlapRangeAtIndex(cellIndex, cellIndex + colSpan, removeIndex, removeIndex + cs);\n          } else if (rs > 0 && (removeIndex < insertIndex || removeIndex + cs > insertIndex + colSpan)) {\n            removeSpanArr.push({\n              cell: cell,\n              i: i,\n              rs: i + rs\n            });\n          }\n\n          cellColSpan += cs;\n        }\n      }\n\n      spanIndex = spanIndex.concat(rowSpanArr).sort(function (a, b) {\n        return a.index - b.index;\n      });\n      rowSpanArr = [];\n\n      if (!remove) {\n        if (passCell > 0) {\n          passCell -= 1;\n          continue;\n        }\n\n        if (insertIndex !== null && cells.length > 0) {\n          newCell = this.plugins.table.createCells.call(this, cells[0].nodeName, 0, true);\n          newCell = row.insertBefore(newCell, cells[insertIndex]);\n        }\n      }\n    }\n\n    if (remove) {\n      var removeFirst, removeEnd;\n\n      for (var _r2 = 0, rLen = removeCell.length, _row; _r2 < rLen; _r2++) {\n        _row = removeCell[_r2].parentNode;\n        util.removeItem(removeCell[_r2]);\n\n        if (_row.cells.length === 0) {\n          if (!removeFirst) removeFirst = util.getArrayIndex(rows, _row);\n          removeEnd = util.getArrayIndex(rows, _row);\n          util.removeItem(_row);\n        }\n      }\n\n      for (var _c = 0, _cLen = removeSpanArr.length, rowSpanCell; _c < _cLen; _c++) {\n        rowSpanCell = removeSpanArr[_c];\n        rowSpanCell.cell.rowSpan = util.getOverlapRangeAtIndex(removeFirst, removeEnd, rowSpanCell.i, rowSpanCell.rs);\n      }\n\n      this.controllersOff();\n    } else {\n      this.plugins.table.setPositionControllerDiv.call(this, positionResetElement || contextTable._tdElement, true);\n    }\n  },\n  _closeSplitMenu: null,\n  openSplitMenu: function openSplitMenu() {\n    this.util.addClass(this.context.table.splitButton, 'on');\n    this.context.table.splitMenu.style.display = 'inline-table';\n\n    this.plugins.table._closeSplitMenu = function () {\n      this.util.removeClass(this.context.table.splitButton, 'on');\n      this.context.table.splitMenu.style.display = 'none';\n      this.removeDocEvent('click', this.plugins.table._closeSplitMenu);\n      this.plugins.table._closeSplitMenu = null;\n    }.bind(this);\n\n    this.addDocEvent('click', this.plugins.table._closeSplitMenu);\n  },\n  splitCells: function splitCells(direction) {\n    var util = this.util;\n    var vertical = direction === 'vertical';\n    var contextTable = this.context.table;\n    var currentCell = contextTable._tdElement;\n    var rows = contextTable._trElements;\n    var currentRow = contextTable._trElement;\n    var index = contextTable._logical_cellIndex;\n    var rowIndex = contextTable._rowIndex;\n    var newCell = this.plugins.table.createCells.call(this, currentCell.nodeName, 0, true); // vertical\n\n    if (vertical) {\n      var currentColSpan = currentCell.colSpan;\n      newCell.rowSpan = currentCell.rowSpan; // colspan > 1\n\n      if (currentColSpan > 1) {\n        newCell.colSpan = this._w.Math.floor(currentColSpan / 2);\n        currentCell.colSpan = currentColSpan - newCell.colSpan;\n        currentRow.insertBefore(newCell, currentCell.nextElementSibling);\n      } else {\n        // colspan - 1\n        var rowSpanArr = [];\n        var spanIndex = [];\n\n        for (var i = 0, len = contextTable._rowCnt, cells, colSpan; i < len; i++) {\n          cells = rows[i].cells;\n          colSpan = 0;\n\n          for (var c = 0, cLen = cells.length, cell, cs, rs, logcalIndex; c < cLen; c++) {\n            cell = cells[c];\n            cs = cell.colSpan - 1;\n            rs = cell.rowSpan - 1;\n            logcalIndex = c + colSpan;\n\n            if (spanIndex.length > 0) {\n              for (var r = 0, arr; r < spanIndex.length; r++) {\n                arr = spanIndex[r];\n                if (arr.row > i) continue;\n\n                if (logcalIndex >= arr.index) {\n                  colSpan += arr.cs;\n                  logcalIndex += arr.cs;\n                  arr.rs -= 1;\n                  arr.row = i + 1;\n\n                  if (arr.rs < 1) {\n                    spanIndex.splice(r, 1);\n                    r--;\n                  }\n                } else if (c === cLen - 1) {\n                  arr.rs -= 1;\n                  arr.row = i + 1;\n\n                  if (arr.rs < 1) {\n                    spanIndex.splice(r, 1);\n                    r--;\n                  }\n                }\n              }\n            }\n\n            if (logcalIndex <= index && rs > 0) {\n              rowSpanArr.push({\n                index: logcalIndex,\n                cs: cs + 1,\n                rs: rs,\n                row: -1\n              });\n            }\n\n            if (cell !== currentCell && logcalIndex <= index && logcalIndex + cs >= index + currentColSpan - 1) {\n              cell.colSpan += 1;\n              break;\n            }\n\n            if (logcalIndex > index) break;\n            colSpan += cs;\n          }\n\n          spanIndex = spanIndex.concat(rowSpanArr).sort(function (a, b) {\n            return a.index - b.index;\n          });\n          rowSpanArr = [];\n        }\n\n        currentRow.insertBefore(newCell, currentCell.nextElementSibling);\n      }\n    } else {\n      // horizontal\n      var currentRowSpan = currentCell.rowSpan;\n      newCell.colSpan = currentCell.colSpan; // rowspan > 1\n\n      if (currentRowSpan > 1) {\n        newCell.rowSpan = this._w.Math.floor(currentRowSpan / 2);\n        var newRowSpan = currentRowSpan - newCell.rowSpan;\n        var _rowSpanArr = [];\n        var nextRowIndex = util.getArrayIndex(rows, currentRow) + newRowSpan;\n\n        for (var _i10 = 0, _cells2, _colSpan; _i10 < nextRowIndex; _i10++) {\n          _cells2 = rows[_i10].cells;\n          _colSpan = 0;\n\n          for (var _c2 = 0, _cLen2 = _cells2.length, _cell4, _cs, _logcalIndex2; _c2 < _cLen2; _c2++) {\n            _logcalIndex2 = _c2 + _colSpan;\n            if (_logcalIndex2 >= index) break;\n            _cell4 = _cells2[_c2];\n            _cs = _cell4.rowSpan - 1;\n\n            if (_cs > 0 && _cs + _i10 >= nextRowIndex && _logcalIndex2 < index) {\n              _rowSpanArr.push({\n                index: _logcalIndex2,\n                cs: _cell4.colSpan\n              });\n            }\n\n            _colSpan += _cell4.colSpan - 1;\n          }\n        }\n\n        var nextRow = rows[nextRowIndex];\n        var nextCells = nextRow.cells;\n\n        var _rs = _rowSpanArr.shift();\n\n        for (var _c3 = 0, _cLen3 = nextCells.length, _colSpan2 = 0, _cell5, _cs2, _logcalIndex3, insertIndex; _c3 < _cLen3; _c3++) {\n          _logcalIndex3 = _c3 + _colSpan2;\n          _cell5 = nextCells[_c3];\n          _cs2 = _cell5.colSpan - 1;\n          insertIndex = _logcalIndex3 + _cs2 + 1;\n\n          if (_rs && insertIndex >= _rs.index) {\n            _colSpan2 += _rs.cs;\n            insertIndex += _rs.cs;\n            _rs = _rowSpanArr.shift();\n          }\n\n          if (insertIndex >= index || _c3 === _cLen3 - 1) {\n            nextRow.insertBefore(newCell, _cell5.nextElementSibling);\n            break;\n          }\n\n          _colSpan2 += _cs2;\n        }\n\n        currentCell.rowSpan = newRowSpan;\n      } else {\n        // rowspan - 1\n        newCell.rowSpan = currentCell.rowSpan;\n        var newRow = util.createElement('TR');\n        newRow.appendChild(newCell);\n\n        for (var _i11 = 0, _cells4; _i11 < rowIndex; _i11++) {\n          _cells4 = rows[_i11].cells;\n          if (_cells4.length === 0) return;\n\n          for (var _c4 = 0, _cLen4 = _cells4.length; _c4 < _cLen4; _c4++) {\n            if (_i11 + _cells4[_c4].rowSpan - 1 >= rowIndex) {\n              _cells4[_c4].rowSpan += 1;\n            }\n          }\n        }\n\n        var physicalIndex = contextTable._physical_cellIndex;\n        var _cells3 = currentRow.cells;\n\n        for (var _c5 = 0, _cLen5 = _cells3.length; _c5 < _cLen5; _c5++) {\n          if (_c5 === physicalIndex) continue;\n          _cells3[_c5].rowSpan += 1;\n        }\n\n        currentRow.parentNode.insertBefore(newRow, currentRow.nextElementSibling);\n      }\n    }\n\n    this.focusEdge(currentCell);\n    this.plugins.table.setPositionControllerDiv.call(this, currentCell, true);\n  },\n  mergeCells: function mergeCells() {\n    var tablePlugin = this.plugins.table;\n    var contextTable = this.context.table;\n    var util = this.util;\n    var ref = tablePlugin._ref;\n    var selectedCells = tablePlugin._selectedCells;\n    var mergeCell = selectedCells[0];\n    var emptyRowFirst = null;\n    var emptyRowLast = null;\n    var cs = ref.ce - ref.cs + 1;\n    var rs = ref.re - ref.rs + 1;\n    var mergeHTML = '';\n    var row = null;\n\n    for (var i = 1, len = selectedCells.length, cell, ch; i < len; i++) {\n      cell = selectedCells[i];\n      if (row !== cell.parentNode) row = cell.parentNode;\n      ch = cell.children;\n\n      for (var c = 0, cLen = ch.length; c < cLen; c++) {\n        if (util.isFormatElement(ch[c]) && util.onlyZeroWidthSpace(ch[c].textContent)) {\n          util.removeItem(ch[c]);\n        }\n      }\n\n      mergeHTML += cell.innerHTML;\n      util.removeItem(cell);\n\n      if (row.cells.length === 0) {\n        if (!emptyRowFirst) emptyRowFirst = row;else emptyRowLast = row;\n        rs -= 1;\n      }\n    }\n\n    if (emptyRowFirst) {\n      var rows = contextTable._trElements;\n      var rowIndexFirst = util.getArrayIndex(rows, emptyRowFirst);\n      var rowIndexLast = util.getArrayIndex(rows, emptyRowLast || emptyRowFirst);\n      var removeRows = [];\n\n      for (var _i12 = 0, cells; _i12 <= rowIndexLast; _i12++) {\n        cells = rows[_i12].cells;\n\n        if (cells.length === 0) {\n          removeRows.push(rows[_i12]);\n          continue;\n        }\n\n        for (var _c6 = 0, _cLen6 = cells.length, _cell6, _rs2; _c6 < _cLen6; _c6++) {\n          _cell6 = cells[_c6];\n          _rs2 = _cell6.rowSpan - 1;\n\n          if (_rs2 > 0 && _i12 + _rs2 >= rowIndexFirst) {\n            _cell6.rowSpan -= util.getOverlapRangeAtIndex(rowIndexFirst, rowIndexLast, _i12, _i12 + _rs2);\n          }\n        }\n      }\n\n      for (var _i13 = 0, _len8 = removeRows.length; _i13 < _len8; _i13++) {\n        util.removeItem(removeRows[_i13]);\n      }\n    }\n\n    mergeCell.innerHTML += mergeHTML;\n    mergeCell.colSpan = cs;\n    mergeCell.rowSpan = rs;\n    this.controllersOff();\n    tablePlugin.setActiveButton.call(this, true, false);\n    tablePlugin.call_controller_tableEdit.call(this, mergeCell);\n    util.addClass(mergeCell, 'se-table-selected-cell');\n    this.focusEdge(mergeCell);\n  },\n  toggleHeader: function toggleHeader() {\n    var util = this.util;\n    var headerButton = this.context.table.headerButton;\n    var active = util.hasClass(headerButton, 'active');\n    var table = this.context.table._element;\n\n    if (!active) {\n      var header = util.createElement('THEAD');\n      header.innerHTML = '<tr>' + this.plugins.table.createCells.call(this, 'th', this.context.table._logical_cellCnt, false) + '</tr>';\n      table.insertBefore(header, table.firstElementChild);\n    } else {\n      util.removeItem(table.querySelector('thead'));\n    }\n\n    util.toggleClass(headerButton, 'active');\n\n    if (/TH/i.test(this.context.table._tdElement.nodeName)) {\n      this.controllersOff();\n    } else {\n      this.plugins.table.setPositionControllerDiv.call(this, this.context.table._tdElement, false);\n    }\n  },\n  setTableStyle: function setTableStyle(styles) {\n    var contextTable = this.context.table;\n    var tableElement = contextTable._element;\n    var icon, span, sizeIcon, text;\n\n    if (styles.indexOf('width') > -1) {\n      icon = contextTable.resizeButton.firstElementChild;\n      span = contextTable.resizeText;\n\n      if (!contextTable._maxWidth) {\n        sizeIcon = contextTable.icons.expansion;\n        text = contextTable.maxText;\n        contextTable.columnFixedButton.style.display = 'none';\n        this.util.removeClass(tableElement, 'se-table-size-100');\n        this.util.addClass(tableElement, 'se-table-size-auto');\n      } else {\n        sizeIcon = contextTable.icons.reduction;\n        text = contextTable.minText;\n        contextTable.columnFixedButton.style.display = 'block';\n        this.util.removeClass(tableElement, 'se-table-size-auto');\n        this.util.addClass(tableElement, 'se-table-size-100');\n      }\n\n      this.util.changeElement(icon, sizeIcon);\n      this.util.changeTxt(span, text);\n    }\n\n    if (styles.indexOf('column') > -1) {\n      if (!contextTable._fixedColumn) {\n        this.util.removeClass(tableElement, 'se-table-layout-fixed');\n        this.util.addClass(tableElement, 'se-table-layout-auto');\n        this.util.removeClass(contextTable.columnFixedButton, 'active');\n      } else {\n        this.util.removeClass(tableElement, 'se-table-layout-auto');\n        this.util.addClass(tableElement, 'se-table-layout-fixed');\n        this.util.addClass(contextTable.columnFixedButton, 'active');\n      }\n    }\n  },\n  setActiveButton: function setActiveButton(fixedCell, selectedCell) {\n    var contextTable = this.context.table;\n\n    if (/^TH$/i.test(fixedCell.nodeName)) {\n      contextTable.insertRowAboveButton.setAttribute('disabled', true);\n      contextTable.insertRowBelowButton.setAttribute('disabled', true);\n    } else {\n      contextTable.insertRowAboveButton.removeAttribute('disabled');\n      contextTable.insertRowBelowButton.removeAttribute('disabled');\n    }\n\n    if (!selectedCell || fixedCell === selectedCell) {\n      contextTable.splitButton.removeAttribute('disabled');\n      contextTable.mergeButton.setAttribute('disabled', true);\n    } else {\n      contextTable.splitButton.setAttribute('disabled', true);\n      contextTable.mergeButton.removeAttribute('disabled');\n    }\n  },\n  // multi selecte\n  _bindOnSelect: null,\n  _bindOffSelect: null,\n  _bindOffShift: null,\n  _selectedCells: null,\n  _shift: false,\n  _fixedCell: null,\n  _fixedCellName: null,\n  _selectedCell: null,\n  _selectedTable: null,\n  _ref: null,\n  _toggleEditor: function _toggleEditor(enabled) {\n    this.context.element.wysiwyg.setAttribute('contenteditable', enabled);\n    if (enabled) this.util.removeClass(this.context.element.wysiwyg, 'se-disabled');else this.util.addClass(this.context.element.wysiwyg, 'se-disabled');\n  },\n  _offCellMultiSelect: function _offCellMultiSelect(e) {\n    e.stopPropagation();\n    var tablePlugin = this.plugins.table;\n\n    if (!tablePlugin._shift) {\n      tablePlugin._removeEvents.call(this);\n\n      tablePlugin._toggleEditor.call(this, true);\n    } else if (tablePlugin._initBind) {\n      this._wd.removeEventListener('touchmove', tablePlugin._initBind);\n\n      tablePlugin._initBind = null;\n    }\n\n    if (!tablePlugin._fixedCell || !tablePlugin._selectedTable) return;\n    tablePlugin.setActiveButton.call(this, tablePlugin._fixedCell, tablePlugin._selectedCell);\n    tablePlugin.call_controller_tableEdit.call(this, tablePlugin._selectedCell || tablePlugin._fixedCell);\n    tablePlugin._selectedCells = tablePlugin._selectedTable.querySelectorAll('.se-table-selected-cell');\n    if (tablePlugin._selectedCell && tablePlugin._fixedCell) this.focusEdge(tablePlugin._selectedCell);\n\n    if (!tablePlugin._shift) {\n      tablePlugin._fixedCell = null;\n      tablePlugin._selectedCell = null;\n      tablePlugin._fixedCellName = null;\n    }\n  },\n  _onCellMultiSelect: function _onCellMultiSelect(e) {\n    this._antiBlur = true;\n    var tablePlugin = this.plugins.table;\n    var target = this.util.getParentElement(e.target, this.util.isCell);\n\n    if (tablePlugin._shift) {\n      if (target === tablePlugin._fixedCell) tablePlugin._toggleEditor.call(this, true);else tablePlugin._toggleEditor.call(this, false);\n    } else if (!tablePlugin._ref) {\n      if (target === tablePlugin._fixedCell) return;else tablePlugin._toggleEditor.call(this, false);\n    }\n\n    if (!target || target === tablePlugin._selectedCell || tablePlugin._fixedCellName !== target.nodeName || tablePlugin._selectedTable !== this.util.getParentElement(target, 'TABLE')) {\n      return;\n    }\n\n    tablePlugin._selectedCell = target;\n\n    tablePlugin._setMultiCells.call(this, tablePlugin._fixedCell, target);\n  },\n  _setMultiCells: function _setMultiCells(startCell, endCell) {\n    var tablePlugin = this.plugins.table;\n    var rows = tablePlugin._selectedTable.rows;\n    var util = this.util;\n\n    var selectedCells = tablePlugin._selectedTable.querySelectorAll('.se-table-selected-cell');\n\n    for (var i = 0, len = selectedCells.length; i < len; i++) {\n      util.removeClass(selectedCells[i], 'se-table-selected-cell');\n    }\n\n    if (startCell === endCell) {\n      util.addClass(startCell, 'se-table-selected-cell');\n      if (!tablePlugin._shift) return;\n    }\n\n    var findSelectedCell = true;\n    var spanIndex = [];\n    var rowSpanArr = [];\n    var ref = tablePlugin._ref = {\n      _i: 0,\n      cs: null,\n      ce: null,\n      rs: null,\n      re: null\n    };\n\n    for (var _i14 = 0, _len9 = rows.length, cells, colSpan; _i14 < _len9; _i14++) {\n      cells = rows[_i14].cells;\n      colSpan = 0;\n\n      for (var c = 0, cLen = cells.length, cell, logcalIndex, cs, rs; c < cLen; c++) {\n        cell = cells[c];\n        cs = cell.colSpan - 1;\n        rs = cell.rowSpan - 1;\n        logcalIndex = c + colSpan;\n\n        if (spanIndex.length > 0) {\n          for (var r = 0, arr; r < spanIndex.length; r++) {\n            arr = spanIndex[r];\n            if (arr.row > _i14) continue;\n\n            if (logcalIndex >= arr.index) {\n              colSpan += arr.cs;\n              logcalIndex += arr.cs;\n              arr.rs -= 1;\n              arr.row = _i14 + 1;\n\n              if (arr.rs < 1) {\n                spanIndex.splice(r, 1);\n                r--;\n              }\n            } else if (c === cLen - 1) {\n              arr.rs -= 1;\n              arr.row = _i14 + 1;\n\n              if (arr.rs < 1) {\n                spanIndex.splice(r, 1);\n                r--;\n              }\n            }\n          }\n        }\n\n        if (findSelectedCell) {\n          if (cell === startCell || cell === endCell) {\n            ref.cs = ref.cs !== null && ref.cs < logcalIndex ? ref.cs : logcalIndex;\n            ref.ce = ref.ce !== null && ref.ce > logcalIndex + cs ? ref.ce : logcalIndex + cs;\n            ref.rs = ref.rs !== null && ref.rs < _i14 ? ref.rs : _i14;\n            ref.re = ref.re !== null && ref.re > _i14 + rs ? ref.re : _i14 + rs;\n            ref._i += 1;\n          }\n\n          if (ref._i === 2) {\n            findSelectedCell = false;\n            spanIndex = [];\n            rowSpanArr = [];\n            _i14 = -1;\n            break;\n          }\n        } else if (util.getOverlapRangeAtIndex(ref.cs, ref.ce, logcalIndex, logcalIndex + cs) && util.getOverlapRangeAtIndex(ref.rs, ref.re, _i14, _i14 + rs)) {\n          var newCs = ref.cs < logcalIndex ? ref.cs : logcalIndex;\n          var newCe = ref.ce > logcalIndex + cs ? ref.ce : logcalIndex + cs;\n          var newRs = ref.rs < _i14 ? ref.rs : _i14;\n          var newRe = ref.re > _i14 + rs ? ref.re : _i14 + rs;\n\n          if (ref.cs !== newCs || ref.ce !== newCe || ref.rs !== newRs || ref.re !== newRe) {\n            ref.cs = newCs;\n            ref.ce = newCe;\n            ref.rs = newRs;\n            ref.re = newRe;\n            _i14 = -1;\n            spanIndex = [];\n            rowSpanArr = [];\n            break;\n          }\n\n          util.addClass(cell, 'se-table-selected-cell');\n        }\n\n        if (rs > 0) {\n          rowSpanArr.push({\n            index: logcalIndex,\n            cs: cs + 1,\n            rs: rs,\n            row: -1\n          });\n        }\n\n        colSpan += cell.colSpan - 1;\n      }\n\n      spanIndex = spanIndex.concat(rowSpanArr).sort(function (a, b) {\n        return a.index - b.index;\n      });\n      rowSpanArr = [];\n    }\n  },\n  _removeEvents: function _removeEvents() {\n    var tablePlugin = this.plugins.table;\n\n    if (tablePlugin._initBind) {\n      this._wd.removeEventListener('touchmove', tablePlugin._initBind);\n\n      tablePlugin._initBind = null;\n    }\n\n    if (tablePlugin._bindOnSelect) {\n      this._wd.removeEventListener('mousedown', tablePlugin._bindOnSelect);\n\n      this._wd.removeEventListener('mousemove', tablePlugin._bindOnSelect);\n\n      tablePlugin._bindOnSelect = null;\n    }\n\n    if (tablePlugin._bindOffSelect) {\n      this._wd.removeEventListener('mouseup', tablePlugin._bindOffSelect);\n\n      tablePlugin._bindOffSelect = null;\n    }\n\n    if (tablePlugin._bindOffShift) {\n      this._wd.removeEventListener('keyup', tablePlugin._bindOffShift);\n\n      tablePlugin._bindOffShift = null;\n    }\n  },\n  _initBind: null,\n  onTableCellMultiSelect: function onTableCellMultiSelect(tdElement, shift) {\n    var tablePlugin = this.plugins.table;\n\n    tablePlugin._removeEvents.call(this);\n\n    this.controllersOff();\n    tablePlugin._shift = shift;\n    tablePlugin._fixedCell = tdElement;\n    tablePlugin._fixedCellName = tdElement.nodeName;\n    tablePlugin._selectedTable = this.util.getParentElement(tdElement, 'TABLE');\n\n    var selectedCells = tablePlugin._selectedTable.querySelectorAll('.se-table-selected-cell');\n\n    for (var i = 0, len = selectedCells.length; i < len; i++) {\n      this.util.removeClass(selectedCells[i], 'se-table-selected-cell');\n    }\n\n    this.util.addClass(tdElement, 'se-table-selected-cell');\n    tablePlugin._bindOnSelect = tablePlugin._onCellMultiSelect.bind(this);\n    tablePlugin._bindOffSelect = tablePlugin._offCellMultiSelect.bind(this);\n\n    if (!shift) {\n      this._wd.addEventListener('mousemove', tablePlugin._bindOnSelect, false);\n    } else {\n      tablePlugin._bindOffShift = function () {\n        this.controllersOn(this.context.table.resizeDiv, this.context.table.tableController, this.plugins.table.init.bind(this), tdElement, 'table');\n        if (!tablePlugin._ref) this.controllersOff();\n      }.bind(this);\n\n      this._wd.addEventListener('keyup', tablePlugin._bindOffShift, false);\n\n      this._wd.addEventListener('mousedown', tablePlugin._bindOnSelect, false);\n    }\n\n    this._wd.addEventListener('mouseup', tablePlugin._bindOffSelect, false);\n\n    tablePlugin._initBind = tablePlugin.init.bind(this);\n\n    this._wd.addEventListener('touchmove', tablePlugin._initBind, false);\n  },\n  onClick_tableController: function onClick_tableController(e) {\n    e.stopPropagation();\n    var target = e.target.getAttribute('data-command') ? e.target : e.target.parentNode;\n    if (target.getAttribute('disabled')) return;\n    var command = target.getAttribute('data-command');\n    var value = target.getAttribute('data-value');\n    var option = target.getAttribute('data-option');\n    var tablePlugin = this.plugins.table;\n\n    if (typeof tablePlugin._closeSplitMenu === 'function') {\n      tablePlugin._closeSplitMenu();\n\n      if (command === 'onsplit') return;\n    }\n\n    if (!command) return;\n    e.preventDefault();\n    var contextTable = this.context.table;\n\n    switch (command) {\n      case 'insert':\n      case 'delete':\n        tablePlugin.editTable.call(this, value, option);\n        break;\n\n      case 'header':\n        tablePlugin.toggleHeader.call(this);\n        break;\n\n      case 'onsplit':\n        tablePlugin.openSplitMenu.call(this);\n        break;\n\n      case 'split':\n        tablePlugin.splitCells.call(this, value);\n        break;\n\n      case 'merge':\n        tablePlugin.mergeCells.call(this);\n        break;\n\n      case 'resize':\n        contextTable._maxWidth = !contextTable._maxWidth;\n        tablePlugin.setTableStyle.call(this, 'width');\n        tablePlugin.setPositionControllerTop.call(this, contextTable._element);\n        tablePlugin.setPositionControllerDiv.call(this, contextTable._tdElement, tablePlugin._shift);\n        break;\n\n      case 'layout':\n        contextTable._fixedColumn = !contextTable._fixedColumn;\n        tablePlugin.setTableStyle.call(this, 'column');\n        tablePlugin.setPositionControllerTop.call(this, contextTable._element);\n        tablePlugin.setPositionControllerDiv.call(this, contextTable._tdElement, tablePlugin._shift);\n        break;\n\n      case 'remove':\n        var emptyDiv = contextTable._element.parentNode;\n        this.util.removeItem(contextTable._element);\n        this.controllersOff();\n        if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function (current) {\n          return current.childNodes.length === 0;\n        }, null);\n        this.focus();\n    } // history stack\n\n\n    this.history.push(false);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}