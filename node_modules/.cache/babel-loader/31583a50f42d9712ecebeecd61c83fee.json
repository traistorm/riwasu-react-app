{"ast":null,"code":"import _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/collection\n */\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport isIterable from './isiterable';\nimport mix from './mix';\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\n\nvar Collection = /*#__PURE__*/function () {\n  /**\n   * Creates a new Collection instance.\n   *\n   * You can provide an iterable of initial items the collection will be created with:\n   *\n   *\t\tconst collection = new Collection( [ { id: 'John' }, { id: 'Mike' } ] );\n   *\n   *\t\tconsole.log( collection.get( 0 ) ); // -> { id: 'John' }\n   *\t\tconsole.log( collection.get( 1 ) ); // -> { id: 'Mike' }\n   *\t\tconsole.log( collection.get( 'Mike' ) ); // -> { id: 'Mike' }\n   *\n   * Or you can first create a collection and then add new items using the {@link #add} method:\n   *\n   *\t\tconst collection = new Collection();\n   *\n   *\t\tcollection.add( { id: 'John' } );\n   *\t\tconsole.log( collection.get( 0 ) ); // -> { id: 'John' }\n   *\n   * Whatever option you choose, you can always pass a configuration object as the last argument\n   * of the constructor:\n   *\n   *\t\tconst emptyCollection = new Collection( { idProperty: 'name' } );\n   *\t\temptyCollection.add( { name: 'John' } );\n   *\t\tconsole.log( collection.get( 'John' ) ); // -> { name: 'John' }\n   *\n   *\t\tconst nonEmptyCollection = new Collection( [ { name: 'John' } ], { idProperty: 'name' } );\n   *\t\tnonEmptyCollection.add( { name: 'George' } );\n   *\t\tconsole.log( collection.get( 'George' ) ); // -> { name: 'George' }\n   *\t\tconsole.log( collection.get( 'John' ) ); // -> { name: 'John' }\n   *\n   * @param {Iterable.<Object>|Object} [initialItemsOrOptions] The initial items of the collection or\n   * the options object.\n   * @param {Object} [options={}] The options object, when the first argument is an array of initial items.\n   * @param {String} [options.idProperty='id'] The name of the property which is used to identify an item.\n   * Items that do not have such a property will be assigned one when added to the collection.\n   */\n  function Collection() {\n    var initialItemsOrOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Collection);\n\n    var hasInitialItems = isIterable(initialItemsOrOptions);\n\n    if (!hasInitialItems) {\n      options = initialItemsOrOptions;\n    }\n    /**\n     * The internal list of items in the collection.\n     *\n     * @private\n     * @member {Object[]}\n     */\n\n\n    this._items = [];\n    /**\n     * The internal map of items in the collection.\n     *\n     * @private\n     * @member {Map}\n     */\n\n    this._itemMap = new Map();\n    /**\n     * The name of the property which is considered to identify an item.\n     *\n     * @private\n     * @member {String}\n     */\n\n    this._idProperty = options.idProperty || 'id';\n    /**\n     * A helper mapping external items of a bound collection ({@link #bindTo})\n     * and actual items of this collection. It provides information\n     * necessary to properly remove items bound to another collection.\n     *\n     * See {@link #_bindToInternalToExternalMap}.\n     *\n     * @protected\n     * @member {WeakMap}\n     */\n\n    this._bindToExternalToInternalMap = new WeakMap();\n    /**\n     * A helper mapping items of this collection to external items of a bound collection\n     * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\n     * to avoid loops in twoâ€“way bindings.\n     *\n     * See {@link #_bindToExternalToInternalMap}.\n     *\n     * @protected\n     * @member {WeakMap}\n     */\n\n    this._bindToInternalToExternalMap = new WeakMap();\n    /**\n     * Stores indexes of skipped items from bound external collection.\n     *\n     * @private\n     * @member {Array}\n     */\n\n    this._skippedIndexesFromExternal = []; // Set the initial content of the collection (if provided in the constructor).\n\n    if (hasInitialItems) {\n      var _iterator = _createForOfIteratorHelper(initialItemsOrOptions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          this._items.push(item);\n\n          this._itemMap.set(this._getItemIdBeforeAdding(item), item);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * A collection instance this collection is bound to as a result\n     * of calling {@link #bindTo} method.\n     *\n     * @protected\n     * @member {module:utils/collection~Collection} #_bindToCollection\n     */\n\n  }\n  /**\n   * The number of items available in the collection.\n   *\n   * @member {Number} #length\n   */\n\n\n  _createClass(Collection, [{\n    key: \"add\",\n\n    /**\n     * Adds an item into the collection.\n     *\n     * If the item does not have an id, then it will be automatically generated and set on the item.\n     *\n     * @chainable\n     * @param {Object} item\n     * @param {Number} [index] The position of the item in the collection. The item\n     * is pushed to the collection when `index` not specified.\n     * @fires add\n     * @fires change\n     */\n    value: function add(item, index) {\n      return this.addMany([item], index);\n    }\n    /**\n     * Adds multiple items into the collection.\n     *\n     * Any item not containing an id will get an automatically generated one.\n     *\n     * @chainable\n     * @param {Iterable.<Object>} item\n     * @param {Number} [index] The position of the insertion. Items will be appended if no `index` is specified.\n     * @fires add\n     * @fires change\n     */\n\n  }, {\n    key: \"addMany\",\n    value: function addMany(items, index) {\n      if (index === undefined) {\n        index = this._items.length;\n      } else if (index > this._items.length || index < 0) {\n        /**\n         * The `index` passed to {@link module:utils/collection~Collection#addMany `Collection#addMany()`}\n         * is invalid. It must be a number between 0 and the collection's length.\n         *\n         * @error collection-add-item-invalid-index\n         */\n        throw new CKEditorError('collection-add-item-invalid-index', this);\n      }\n\n      for (var offset = 0; offset < items.length; offset++) {\n        var item = items[offset];\n\n        var itemId = this._getItemIdBeforeAdding(item);\n\n        var currentItemIndex = index + offset;\n\n        this._items.splice(currentItemIndex, 0, item);\n\n        this._itemMap.set(itemId, item);\n\n        this.fire('add', item, currentItemIndex);\n      }\n\n      this.fire('change', {\n        added: items,\n        removed: [],\n        index: index\n      });\n      return this;\n    }\n    /**\n     * Gets an item by its ID or index.\n     *\n     * @param {String|Number} idOrIndex The item ID or index in the collection.\n     * @returns {Object|null} The requested item or `null` if such item does not exist.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(idOrIndex) {\n      var item;\n\n      if (typeof idOrIndex == 'string') {\n        item = this._itemMap.get(idOrIndex);\n      } else if (typeof idOrIndex == 'number') {\n        item = this._items[idOrIndex];\n      } else {\n        /**\n         * An index or ID must be given.\n         *\n         * @error collection-get-invalid-arg\n         */\n        throw new CKEditorError('collection-get-invalid-arg', this);\n      }\n\n      return item || null;\n    }\n    /**\n     * Returns a Boolean indicating whether the collection contains an item.\n     *\n     * @param {Object|String} itemOrId The item or its ID in the collection.\n     * @returns {Boolean} `true` if the collection contains the item, `false` otherwise.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(itemOrId) {\n      if (typeof itemOrId == 'string') {\n        return this._itemMap.has(itemOrId);\n      } else {\n        // Object\n        var idProperty = this._idProperty;\n        var id = itemOrId[idProperty];\n        return this._itemMap.has(id);\n      }\n    }\n    /**\n     * Gets an index of an item in the collection.\n     * When an item is not defined in the collection, the index will equal -1.\n     *\n     * @param {Object|String} itemOrId The item or its ID in the collection.\n     * @returns {Number} The index of a given item.\n     */\n\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(itemOrId) {\n      var item;\n\n      if (typeof itemOrId == 'string') {\n        item = this._itemMap.get(itemOrId);\n      } else {\n        item = itemOrId;\n      }\n\n      return this._items.indexOf(item);\n    }\n    /**\n     * Removes an item from the collection.\n     *\n     * @param {Object|Number|String} subject The item to remove, its ID or index in the collection.\n     * @returns {Object} The removed item.\n     * @fires remove\n     * @fires change\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(subject) {\n      var _this$_remove = this._remove(subject),\n          _this$_remove2 = _slicedToArray(_this$_remove, 2),\n          item = _this$_remove2[0],\n          index = _this$_remove2[1];\n\n      this.fire('change', {\n        added: [],\n        removed: [item],\n        index: index\n      });\n      return item;\n    }\n    /**\n     * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n     *\n     * @param {Function} callback\n     * @param {Object} callback.item\n     * @param {Number} callback.index\n     * @param {Object} ctx Context in which the `callback` will be called.\n     * @returns {Array} The result of mapping.\n     */\n\n  }, {\n    key: \"map\",\n    value: function map(callback, ctx) {\n      return this._items.map(callback, ctx);\n    }\n    /**\n     * Finds the first item in the collection for which the `callback` returns a true value.\n     *\n     * @param {Function} callback\n     * @param {Object} callback.item\n     * @param {Number} callback.index\n     * @param {Object} ctx Context in which the `callback` will be called.\n     * @returns {Object} The item for which `callback` returned a true value.\n     */\n\n  }, {\n    key: \"find\",\n    value: function find(callback, ctx) {\n      return this._items.find(callback, ctx);\n    }\n    /**\n     * Returns an array with items for which the `callback` returned a true value.\n     *\n     * @param {Function} callback\n     * @param {Object} callback.item\n     * @param {Number} callback.index\n     * @param {Object} ctx Context in which the `callback` will be called.\n     * @returns {Object[]} The array with matching items.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(callback, ctx) {\n      return this._items.filter(callback, ctx);\n    }\n    /**\n     * Removes all items from the collection and destroys the binding created using\n     * {@link #bindTo}.\n     *\n     * @fires remove\n     * @fires change\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this._bindToCollection) {\n        this.stopListening(this._bindToCollection);\n        this._bindToCollection = null;\n      }\n\n      var removedItems = Array.from(this._items);\n\n      while (this.length) {\n        this._remove(0);\n      }\n\n      this.fire('change', {\n        added: [],\n        removed: removedItems,\n        index: 0\n      });\n    }\n    /**\n     * Binds and synchronizes the collection with another one.\n     *\n     * The binding can be a simple factory:\n     *\n     *\t\tclass FactoryClass {\n     *\t\t\tconstructor( data ) {\n     *\t\t\t\tthis.label = data.label;\n     *\t\t\t}\n     *\t\t}\n     *\n     *\t\tconst source = new Collection( { idProperty: 'label' } );\n     *\t\tconst target = new Collection();\n     *\n     *\t\ttarget.bindTo( source ).as( FactoryClass );\n     *\n     *\t\tsource.add( { label: 'foo' } );\n     *\t\tsource.add( { label: 'bar' } );\n     *\n     *\t\tconsole.log( target.length ); // 2\n     *\t\tconsole.log( target.get( 1 ).label ); // 'bar'\n     *\n     *\t\tsource.remove( 0 );\n     *\t\tconsole.log( target.length ); // 1\n     *\t\tconsole.log( target.get( 0 ).label ); // 'bar'\n     *\n     * or the factory driven by a custom callback:\n     *\n     *\t\tclass FooClass {\n     *\t\t\tconstructor( data ) {\n     *\t\t\t\tthis.label = data.label;\n     *\t\t\t}\n     *\t\t}\n     *\n     *\t\tclass BarClass {\n     *\t\t\tconstructor( data ) {\n     *\t\t\t\tthis.label = data.label;\n     *\t\t\t}\n     *\t\t}\n     *\n     *\t\tconst source = new Collection( { idProperty: 'label' } );\n     *\t\tconst target = new Collection();\n     *\n     *\t\ttarget.bindTo( source ).using( ( item ) => {\n     *\t\t\tif ( item.label == 'foo' ) {\n     *\t\t\t\treturn new FooClass( item );\n     *\t\t\t} else {\n     *\t\t\t\treturn new BarClass( item );\n     *\t\t\t}\n     *\t\t} );\n     *\n     *\t\tsource.add( { label: 'foo' } );\n     *\t\tsource.add( { label: 'bar' } );\n     *\n     *\t\tconsole.log( target.length ); // 2\n     *\t\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\n     *\t\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\n     *\n     * or the factory out of property name:\n     *\n     *\t\tconst source = new Collection( { idProperty: 'label' } );\n     *\t\tconst target = new Collection();\n     *\n     *\t\ttarget.bindTo( source ).using( 'label' );\n     *\n     *\t\tsource.add( { label: { value: 'foo' } } );\n     *\t\tsource.add( { label: { value: 'bar' } } );\n     *\n     *\t\tconsole.log( target.length ); // 2\n     *\t\tconsole.log( target.get( 0 ).value ); // 'foo'\n     *\t\tconsole.log( target.get( 1 ).value ); // 'bar'\n     *\n     * It's possible to skip specified items by returning falsy value:\n     *\n     *\t\tconst source = new Collection();\n     *\t\tconst target = new Collection();\n     *\n     *\t\ttarget.bindTo( source ).using( item => {\n     *\t\t\tif ( item.hidden ) {\n     *\t\t\t\treturn null;\n     *\t\t\t}\n     *\n     *\t\t\treturn item;\n     *\t\t} );\n     *\n     *\t\tsource.add( { hidden: true } );\n     *\t\tsource.add( { hidden: false } );\n     *\n     *\t\tconsole.log( source.length ); // 2\n     *\t\tconsole.log( target.length ); // 1\n     *\n     * **Note**: {@link #clear} can be used to break the binding.\n     *\n     * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\n     * @returns {Object}\n     * @returns {module:utils/collection~CollectionBindToChain} The binding chain object.\n     */\n\n  }, {\n    key: \"bindTo\",\n    value: function bindTo(externalCollection) {\n      var _this = this;\n\n      if (this._bindToCollection) {\n        /**\n         * The collection cannot be bound more than once.\n         *\n         * @error collection-bind-to-rebind\n         */\n        throw new CKEditorError('collection-bind-to-rebind', this);\n      }\n\n      this._bindToCollection = externalCollection;\n      return {\n        as: function as(Class) {\n          _this._setUpBindToBinding(function (item) {\n            return new Class(item);\n          });\n        },\n        using: function using(callbackOrProperty) {\n          if (typeof callbackOrProperty == 'function') {\n            _this._setUpBindToBinding(function (item) {\n              return callbackOrProperty(item);\n            });\n          } else {\n            _this._setUpBindToBinding(function (item) {\n              return item[callbackOrProperty];\n            });\n          }\n        }\n      };\n    }\n    /**\n     * Finalizes and activates a binding initiated by {#bindTo}.\n     *\n     * @protected\n     * @param {Function} factory A function which produces collection items.\n     */\n\n  }, {\n    key: \"_setUpBindToBinding\",\n    value: function _setUpBindToBinding(factory) {\n      var _this2 = this;\n\n      var externalCollection = this._bindToCollection; // Adds the item to the collection once a change has been done to the external collection.\n      //\n      // @private\n\n      var addItem = function addItem(evt, externalItem, index) {\n        var isExternalBoundToThis = externalCollection._bindToCollection == _this2;\n\n        var externalItemBound = externalCollection._bindToInternalToExternalMap.get(externalItem); // If an external collection is bound to this collection, which makes it a 2â€“way binding,\n        // and the particular external collection item is already bound, don't add it here.\n        // The external item has been created **out of this collection's item** and (re)adding it will\n        // cause a loop.\n\n\n        if (isExternalBoundToThis && externalItemBound) {\n          _this2._bindToExternalToInternalMap.set(externalItem, externalItemBound);\n\n          _this2._bindToInternalToExternalMap.set(externalItemBound, externalItem);\n        } else {\n          var item = factory(externalItem); // When there is no item we need to remember skipped index first and then we can skip this item.\n\n          if (!item) {\n            _this2._skippedIndexesFromExternal.push(index);\n\n            return;\n          } // Lets try to put item at the same index as index in external collection\n          // but when there are a skipped items in one or both collections we need to recalculate this index.\n\n\n          var finalIndex = index; // When we try to insert item after some skipped items from external collection we need\n          // to include this skipped items and decrease index.\n          //\n          // For the following example:\n          // external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n          // internal -> [ A ]\n          //\n          // Another item is been added at the end of external collection:\n          // external.add( 'D' )\n          // external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n          //\n          // We can't just add 'D' to internal at the same index as index in external because\n          // this will produce empty indexes what is invalid:\n          // internal -> [ 'A', empty, empty, 'D' ]\n          //\n          // So we need to include skipped items and decrease index\n          // internal -> [ 'A', 'D' ]\n\n          var _iterator2 = _createForOfIteratorHelper(_this2._skippedIndexesFromExternal),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var skipped = _step2.value;\n\n              if (index > skipped) {\n                finalIndex--;\n              }\n            } // We need to take into consideration that external collection could skip some items from\n            // internal collection.\n            //\n            // For the following example:\n            // internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n            // external -> [ A ]\n            //\n            // Another item is been added at the end of external collection:\n            // external.add( 'D' )\n            // external -> [ 'A', 'D' ]\n            //\n            // We need to include skipped items and place new item after them:\n            // internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          var _iterator3 = _createForOfIteratorHelper(externalCollection._skippedIndexesFromExternal),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _skipped = _step3.value;\n\n              if (finalIndex >= _skipped) {\n                finalIndex++;\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          _this2._bindToExternalToInternalMap.set(externalItem, item);\n\n          _this2._bindToInternalToExternalMap.set(item, externalItem);\n\n          _this2.add(item, finalIndex); // After adding new element to internal collection we need update indexes\n          // of skipped items in external collection.\n\n\n          for (var i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++) {\n            if (finalIndex <= externalCollection._skippedIndexesFromExternal[i]) {\n              externalCollection._skippedIndexesFromExternal[i]++;\n            }\n          }\n        }\n      }; // Load the initial content of the collection.\n\n\n      var _iterator4 = _createForOfIteratorHelper(externalCollection),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var externalItem = _step4.value;\n          addItem(null, externalItem, externalCollection.getIndex(externalItem));\n        } // Synchronize the with collection as new items are added.\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this.listenTo(externalCollection, 'add', addItem); // Synchronize the with collection as new items are removed.\n\n      this.listenTo(externalCollection, 'remove', function (evt, externalItem, index) {\n        var item = _this2._bindToExternalToInternalMap.get(externalItem);\n\n        if (item) {\n          _this2.remove(item);\n        } // After removing element from external collection we need update/remove indexes\n        // of skipped items in internal collection.\n\n\n        _this2._skippedIndexesFromExternal = _this2._skippedIndexesFromExternal.reduce(function (result, skipped) {\n          if (index < skipped) {\n            result.push(skipped - 1);\n          }\n\n          if (index > skipped) {\n            result.push(skipped);\n          }\n\n          return result;\n        }, []);\n      });\n    }\n    /**\n     * Returns an unique id property for a given `item`.\n     *\n     * The method will generate new id and assign it to the `item` if it doesn't have any.\n     *\n     * @private\n     * @param {Object} item Item to be added.\n     * @returns {String}\n     */\n\n  }, {\n    key: \"_getItemIdBeforeAdding\",\n    value: function _getItemIdBeforeAdding(item) {\n      var idProperty = this._idProperty;\n      var itemId;\n\n      if (idProperty in item) {\n        itemId = item[idProperty];\n\n        if (typeof itemId != 'string') {\n          /**\n           * This item's ID should be a string.\n           *\n           * @error collection-add-invalid-id\n           */\n          throw new CKEditorError('collection-add-invalid-id', this);\n        }\n\n        if (this.get(itemId)) {\n          /**\n           * This item already exists in the collection.\n           *\n           * @error collection-add-item-already-exists\n           */\n          throw new CKEditorError('collection-add-item-already-exists', this);\n        }\n      } else {\n        item[idProperty] = itemId = uid();\n      }\n\n      return itemId;\n    }\n    /**\n     * Core {@link #remove} method implementation shared in other functions.\n     *\n     * In contrast this method **does not** fire the {@link #event:change} event.\n     *\n     * @private\n     * @param {Object} subject The item to remove, its id or index in the collection.\n     * @returns {Array} Returns an array with the removed item and its index.\n     * @fires remove\n     */\n\n  }, {\n    key: \"_remove\",\n    value: function _remove(subject) {\n      var index, id, item;\n      var itemDoesNotExist = false;\n      var idProperty = this._idProperty;\n\n      if (typeof subject == 'string') {\n        id = subject;\n        item = this._itemMap.get(id);\n        itemDoesNotExist = !item;\n\n        if (item) {\n          index = this._items.indexOf(item);\n        }\n      } else if (typeof subject == 'number') {\n        index = subject;\n        item = this._items[index];\n        itemDoesNotExist = !item;\n\n        if (item) {\n          id = item[idProperty];\n        }\n      } else {\n        item = subject;\n        id = item[idProperty];\n        index = this._items.indexOf(item);\n        itemDoesNotExist = index == -1 || !this._itemMap.get(id);\n      }\n\n      if (itemDoesNotExist) {\n        /**\n         * Item not found.\n         *\n         * @error collection-remove-404\n         */\n        throw new CKEditorError('collection-remove-404', this);\n      }\n\n      this._items.splice(index, 1);\n\n      this._itemMap.delete(id);\n\n      var externalItem = this._bindToInternalToExternalMap.get(item);\n\n      this._bindToInternalToExternalMap.delete(item);\n\n      this._bindToExternalToInternalMap.delete(externalItem);\n\n      this.fire('remove', item, index);\n      return [item, index];\n    }\n    /**\n     * Iterable interface.\n     *\n     * @returns {Iterable.<*>}\n     */\n\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this._items[Symbol.iterator]();\n    }\n    /**\n     * Fired when an item is added to the collection.\n     *\n     * @event add\n     * @param {Object} item The added item.\n     */\n\n    /**\n     * Fired when the collection was changed due to adding or removing items.\n     *\n     * @event change\n     * @param {Iterable.<Object>} added A list of added items.\n     * @param {Iterable.<Object>} removed A list of removed items.\n     * @param {Number} index An index where the addition or removal occurred.\n     */\n\n    /**\n     * Fired when an item is removed from the collection.\n     *\n     * @event remove\n     * @param {Object} item The removed item.\n     * @param {Number} index Index from which item was removed.\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._items.length;\n    }\n    /**\n     * Returns the first item from the collection or null when collection is empty.\n     *\n     * @returns {Object|null} The first item or `null` if collection is empty.\n     */\n\n  }, {\n    key: \"first\",\n    get: function get() {\n      return this._items[0] || null;\n    }\n    /**\n     * Returns the last item from the collection or null when collection is empty.\n     *\n     * @returns {Object|null} The last item or `null` if collection is empty.\n     */\n\n  }, {\n    key: \"last\",\n    get: function get() {\n      return this._items[this.length - 1] || null;\n    }\n  }]);\n\n  return Collection;\n}();\n\nexport { Collection as default };\nmix(Collection, EmitterMixin);\n/**\n * An object returned by the {@link module:utils/collection~Collection#bindTo `bindTo()`} method\n * providing functions that specify the type of the binding.\n *\n * See the {@link module:utils/collection~Collection#bindTo `bindTo()`} documentation for examples.\n *\n * @interface module:utils/collection~CollectionBindToChain\n */\n\n/**\n * Creates a callback or a property binding.\n *\n * @method #using\n * @param {Function|String} callbackOrProperty  When the function is passed, it should return\n * the collection items. When the string is provided, the property value is used to create the bound collection items.\n */\n\n/**\n * Creates the class factory binding in which items of the source collection are passed to\n * the constructor of the specified class.\n *\n * @method #as\n * @param {Function} Class The class constructor used to create instances in the factory.\n */","map":null,"metadata":{},"sourceType":"module"}