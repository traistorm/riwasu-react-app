{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/dropdownview\n */\nimport View from '../view';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport '../../theme/components/dropdown/dropdown.css';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n *\t\tconst button = new DropdownButtonView( locale );\n *\t\tconst panel = new DropdownPanelView( locale );\n *\t\tconst dropdown = new DropdownView( locale, button, panel );\n *\n *\t\tbutton.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tpanel.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n *\n * @extends module:ui/view~View\n */\n\nvar DropdownView = /*#__PURE__*/function (_View) {\n  _inherits(DropdownView, _View);\n\n  /**\n   * Creates an instance of the dropdown.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {module:ui/dropdown/button/dropdownbutton~DropdownButton} buttonView\n   * @param {module:ui/dropdown/dropdownpanelview~DropdownPanelView} panelView\n   */\n  function DropdownView(locale, buttonView, panelView) {\n    var _this;\n\n    _classCallCheck(this, DropdownView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropdownView).call(this, locale));\n    var bind = _this.bindTemplate;\n    /**\n     * Button of the dropdown view. Clicking the button opens the {@link #panelView}.\n     *\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView} #buttonView\n     */\n\n    _this.buttonView = buttonView;\n    /**\n     * Panel of the dropdown. It opens when the {@link #buttonView} is\n     * {@link module:ui/button/buttonview~ButtonView#event:execute executed} (i.e. clicked).\n     *\n     * Child views can be added to the panel's `children` collection:\n     *\n     *\t\tdropdown.panelView.children.add( childView );\n     *\n     * See {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children} and\n     * {@link module:ui/viewcollection~ViewCollection#add}.\n     *\n     * @readonly\n     * @member {module:ui/dropdown/dropdownpanelview~DropdownPanelView} #panelView\n     */\n\n    _this.panelView = panelView;\n    /**\n     * Controls whether the dropdown view is open, i.e. shows or hides the {@link #panelView panel}.\n     *\n     * @observable\n     * @member {Boolean} #isOpen\n     */\n\n    _this.set('isOpen', false);\n    /**\n     * Controls whether the dropdown is enabled, i.e. it can be clicked and execute an action.\n     *\n     * See {@link module:ui/button/buttonview~ButtonView#isEnabled}.\n     *\n     * @observable\n     * @member {Boolean} #isEnabled\n     */\n\n\n    _this.set('isEnabled', true);\n    /**\n     * (Optional) The additional CSS class set on the dropdown {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n\n    _this.set('class');\n    /**\n     * (Optional) The `id` attribute of the dropdown (i.e. to pair with a `<label>` element).\n     *\n     * @observable\n     * @member {String} #id\n     */\n\n\n    _this.set('id');\n    /**\n     * The position of the panel, relative to the dropdown.\n     *\n     * **Note**: When `'auto'`, the panel will use one of the remaining positions to stay\n     * in the viewport, visible to the user. The positions correspond directly to\n     * {@link module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions default panel positions}.\n     *\n     * **Note**: This value has an impact on the\n     * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#position} property\n     * each time the panel becomes {@link #isOpen open}.\n     *\n     * @observable\n     * @default 'auto'\n     * @member {'auto'|'s'|'se'|'sw'|'sme'|'smw'|'n'|'ne'|'nw'|'nme'|'nmw'} #panelPosition\n     */\n\n\n    _this.set('panelPosition', 'auto');\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n     * keystrokes of the dropdown:\n     *\n     * * <kbd>▼</kbd> opens the dropdown,\n     * * <kbd>◀</kbd> and <kbd>Esc</kbd> closes the dropdown.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n\n    _this.keystrokes = new KeystrokeHandler();\n\n    _this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-dropdown', bind.to('class'), bind.if('isEnabled', 'ck-disabled', function (value) {\n          return !value;\n        })],\n        id: bind.to('id'),\n        'aria-describedby': bind.to('ariaDescribedById')\n      },\n      children: [buttonView, panelView]\n    });\n\n    buttonView.extendTemplate({\n      attributes: {\n        class: ['ck-dropdown__button']\n      }\n    });\n    /**\n     * A child {@link module:ui/list/listview~ListView list view} of the dropdown located\n     * in its {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n     *\n     * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}.\n     *\n     * @readonly\n     * @member {module:ui/list/listview~ListView} #listView\n     */\n\n    /**\n     * A child toolbar of the dropdown located in the\n     * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n     *\n     * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarView} #toolbarView\n     */\n\n    /**\n     * Fired when the toolbar button or list item is executed.\n     *\n     * For {@link #listView} It fires when a child of some {@link module:ui/list/listitemview~ListItemView}\n     * fired `execute`.\n     *\n     * For {@link #toolbarView} It fires when one of the buttons has been\n     * {@link module:ui/button/buttonview~ButtonView#event:execute executed}.\n     *\n     * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}\n     * or {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n     *\n     * @event execute\n     */\n\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(DropdownView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(DropdownView.prototype), \"render\", this).call(this); // Toggle the dropdown when its button has been clicked.\n\n\n      this.listenTo(this.buttonView, 'open', function () {\n        _this2.isOpen = !_this2.isOpen;\n      }); // Toggle the visibility of the panel when the dropdown becomes open.\n\n      this.panelView.bind('isVisible').to(this, 'isOpen'); // Let the dropdown control the position of the panel. The position must\n      // be updated every time the dropdown is open.\n\n      this.on('change:isOpen', function () {\n        if (!_this2.isOpen) {\n          return;\n        } // If \"auto\", find the best position of the panel to fit into the viewport.\n        // Otherwise, simply assign the static position.\n\n\n        if (_this2.panelPosition === 'auto') {\n          _this2.panelView.position = DropdownView._getOptimalPosition({\n            element: _this2.panelView.element,\n            target: _this2.buttonView.element,\n            fitInViewport: true,\n            positions: _this2._panelPositions\n          }).name;\n        } else {\n          _this2.panelView.position = _this2.panelPosition;\n        }\n      }); // Listen for keystrokes coming from within #element.\n\n      this.keystrokes.listenTo(this.element);\n\n      var closeDropdown = function closeDropdown(data, cancel) {\n        if (_this2.isOpen) {\n          _this2.buttonView.focus();\n\n          _this2.isOpen = false;\n          cancel();\n        }\n      }; // Open the dropdown panel using the arrow down key, just like with return or space.\n\n\n      this.keystrokes.set('arrowdown', function (data, cancel) {\n        // Don't open if the dropdown is disabled or already open.\n        if (_this2.buttonView.isEnabled && !_this2.isOpen) {\n          _this2.isOpen = true;\n          cancel();\n        }\n      }); // Block the right arrow key (until nested dropdowns are implemented).\n\n      this.keystrokes.set('arrowright', function (data, cancel) {\n        if (_this2.isOpen) {\n          cancel();\n        }\n      }); // Close the dropdown using the arrow left/escape key.\n\n      this.keystrokes.set('arrowleft', closeDropdown);\n      this.keystrokes.set('esc', closeDropdown);\n    }\n    /**\n     * Focuses the {@link #buttonView}.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.buttonView.focus();\n    }\n    /**\n     * Returns {@link #panelView panel} positions to be used by the\n     * {@link module:utils/dom/position~getOptimalPosition `getOptimalPosition()`}\n     * utility considering the direction of the language the UI of the editor is displayed in.\n     *\n     * @type {module:utils/dom/position~Options#positions}\n     * @private\n     */\n\n  }, {\n    key: \"_panelPositions\",\n    get: function get() {\n      var _DropdownView$default = DropdownView.defaultPanelPositions,\n          south = _DropdownView$default.south,\n          north = _DropdownView$default.north,\n          southEast = _DropdownView$default.southEast,\n          southWest = _DropdownView$default.southWest,\n          northEast = _DropdownView$default.northEast,\n          northWest = _DropdownView$default.northWest,\n          southMiddleEast = _DropdownView$default.southMiddleEast,\n          southMiddleWest = _DropdownView$default.southMiddleWest,\n          northMiddleEast = _DropdownView$default.northMiddleEast,\n          northMiddleWest = _DropdownView$default.northMiddleWest;\n\n      if (this.locale.uiLanguageDirection !== 'rtl') {\n        return [southEast, southWest, southMiddleEast, southMiddleWest, south, northEast, northWest, northMiddleEast, northMiddleWest, north];\n      } else {\n        return [southWest, southEast, southMiddleWest, southMiddleEast, south, northWest, northEast, northMiddleWest, northMiddleEast, north];\n      }\n    }\n  }]);\n\n  return DropdownView;\n}(View);\n/**\n * A set of positioning functions used by the dropdown view to determine\n * the optimal position (i.e. fitting into the browser viewport) of its\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel} when\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition} is set to 'auto'`.\n *\n * The available positioning functions are as follow:\n *\n * **South**\n *\n * * `south`\n *\n *\t\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * * `southEast`\n *\n *\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * * `southWest`\n *\n *\t\t         [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * * `southMiddleEast`\n *\n *\t\t  [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * * `southMiddleWest`\n *\n *\t\t       [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * **North**\n *\n * * `north`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t    [ Button ]\n *\n * * `northEast`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t[ Button ]\n *\n * * `northWest`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t         [ Button ]\n *\n * * `northMiddleEast`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t  [ Button ]\n *\n * * `northMiddleWest`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t       [ Button ]\n *\n * Positioning functions are compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in dropdown panel's class that\n * controls its placement. See {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition}\n * to learn more.\n *\n * @member {Object} module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions\n */\n\n\nexport { DropdownView as default };\nDropdownView.defaultPanelPositions = {\n  south: function south(buttonRect, panelRect) {\n    return {\n      top: buttonRect.bottom,\n      left: buttonRect.left - (panelRect.width - buttonRect.width) / 2,\n      name: 's'\n    };\n  },\n  southEast: function southEast(buttonRect) {\n    return {\n      top: buttonRect.bottom,\n      left: buttonRect.left,\n      name: 'se'\n    };\n  },\n  southWest: function southWest(buttonRect, panelRect) {\n    return {\n      top: buttonRect.bottom,\n      left: buttonRect.left - panelRect.width + buttonRect.width,\n      name: 'sw'\n    };\n  },\n  southMiddleEast: function southMiddleEast(buttonRect, panelRect) {\n    return {\n      top: buttonRect.bottom,\n      left: buttonRect.left - (panelRect.width - buttonRect.width) / 4,\n      name: 'sme'\n    };\n  },\n  southMiddleWest: function southMiddleWest(buttonRect, panelRect) {\n    return {\n      top: buttonRect.bottom,\n      left: buttonRect.left - (panelRect.width - buttonRect.width) * 3 / 4,\n      name: 'smw'\n    };\n  },\n  north: function north(buttonRect, panelRect) {\n    return {\n      top: buttonRect.top - panelRect.height,\n      left: buttonRect.left - (panelRect.width - buttonRect.width) / 2,\n      name: 'n'\n    };\n  },\n  northEast: function northEast(buttonRect, panelRect) {\n    return {\n      top: buttonRect.top - panelRect.height,\n      left: buttonRect.left,\n      name: 'ne'\n    };\n  },\n  northWest: function northWest(buttonRect, panelRect) {\n    return {\n      top: buttonRect.top - panelRect.height,\n      left: buttonRect.left - panelRect.width + buttonRect.width,\n      name: 'nw'\n    };\n  },\n  northMiddleEast: function northMiddleEast(buttonRect, panelRect) {\n    return {\n      top: buttonRect.top - panelRect.height,\n      left: buttonRect.left - (panelRect.width - buttonRect.width) / 4,\n      name: 'nme'\n    };\n  },\n  northMiddleWest: function northMiddleWest(buttonRect, panelRect) {\n    return {\n      top: buttonRect.top - panelRect.height,\n      left: buttonRect.left - (panelRect.width - buttonRect.width) * 3 / 4,\n      name: 'nmw'\n    };\n  }\n};\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n *\n * @protected\n * @member {Function} module:ui/dropdown/dropdownview~DropdownView._getOptimalPosition\n */\n\nDropdownView._getOptimalPosition = getOptimalPosition;","map":null,"metadata":{},"sourceType":"module"}