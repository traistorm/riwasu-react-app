{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageLoadObserver from './imageloadobserver';\nimport InsertImageCommand from './insertimagecommand';\nimport ImageUtils from '../imageutils';\n/**\n * The image engine plugin. This module loads common code shared between\n * {@link module:image/image/imageinlineediting~ImageInlineEditing} and\n * {@link module:image/image/imageblockediting~ImageBlockEditing} plugins.\n *\n * This plugin registers the {@link module:image/image/insertimagecommand~InsertImageCommand 'insertImage'} command.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar ImageEditing = /*#__PURE__*/function (_Plugin) {\n  _inherits(ImageEditing, _Plugin);\n\n  function ImageEditing() {\n    _classCallCheck(this, ImageEditing);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageEditing).apply(this, arguments));\n  }\n\n  _createClass(ImageEditing, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      var editor = this.editor;\n      var conversion = editor.conversion; // See https://github.com/ckeditor/ckeditor5-image/issues/142.\n\n      editor.editing.view.addObserver(ImageLoadObserver);\n      conversion.for('upcast').attributeToAttribute({\n        view: {\n          name: 'img',\n          key: 'alt'\n        },\n        model: 'alt'\n      }).attributeToAttribute({\n        view: {\n          name: 'img',\n          key: 'srcset'\n        },\n        model: {\n          key: 'srcset',\n          value: function value(viewImage) {\n            var value = {\n              data: viewImage.getAttribute('srcset')\n            };\n\n            if (viewImage.hasAttribute('width')) {\n              value.width = viewImage.getAttribute('width');\n            }\n\n            return value;\n          }\n        }\n      });\n      var insertImageCommand = new InsertImageCommand(editor); // Register `insertImage` command and add `imageInsert` command as an alias for backward compatibility.\n\n      editor.commands.add('insertImage', insertImageCommand);\n      editor.commands.add('imageInsert', insertImageCommand);\n    }\n  }], [{\n    key: \"requires\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return [ImageUtils];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"pluginName\",\n    get: function get() {\n      return 'ImageEditing';\n    }\n  }]);\n\n  return ImageEditing;\n}(Plugin);\n\nexport { ImageEditing as default };","map":null,"metadata":{},"sourceType":"module"}