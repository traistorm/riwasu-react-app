{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageinsert/imageinsertui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageInsertPanelView from './ui/imageinsertpanelview';\nimport { prepareIntegrations } from './utils';\n/**\n * The image insert dropdown plugin.\n *\n * For a detailed overview, check the {@glink features/images/image-upload/image-upload Image upload feature}\n * and {@glink features/images/image-upload/images-inserting#inserting-images-via-source-url Insert images via source URL} documentation.\n *\n * Adds the `'insertImage'` dropdown to the {@link module:ui/componentfactory~ComponentFactory UI component factory}\n * and also the `imageInsert` dropdown as an alias for backward compatibility.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar ImageInsertUI = /*#__PURE__*/function (_Plugin) {\n  _inherits(ImageInsertUI, _Plugin);\n\n  function ImageInsertUI() {\n    _classCallCheck(this, ImageInsertUI);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageInsertUI).apply(this, arguments));\n  }\n\n  _createClass(ImageInsertUI, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      var _this = this;\n\n      var editor = this.editor;\n\n      var componentCreator = function componentCreator(locale) {\n        return _this._createDropdownView(locale);\n      }; // Register `insertImage` dropdown and add `imageInsert` dropdown as an alias for backward compatibility.\n\n\n      editor.ui.componentFactory.add('insertImage', componentCreator);\n      editor.ui.componentFactory.add('imageInsert', componentCreator);\n    }\n    /**\n     * Creates the dropdown view.\n     *\n     * @param {module:utils/locale~Locale} locale The localization services instance.\n     *\n     * @private\n     * @returns {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n  }, {\n    key: \"_createDropdownView\",\n    value: function _createDropdownView(locale) {\n      var editor = this.editor;\n      var imageInsertView = new ImageInsertPanelView(locale, prepareIntegrations(editor));\n      var command = editor.commands.get('uploadImage');\n      var dropdownView = imageInsertView.dropdownView;\n      var splitButtonView = dropdownView.buttonView;\n      splitButtonView.actionView = editor.ui.componentFactory.create('uploadImage'); // After we replaced action button with `uploadImage` component,\n      // we have lost a proper styling and some minor visual quirks have appeared.\n      // Brining back original split button classes helps fix the button styling\n      // See https://github.com/ckeditor/ckeditor5/issues/7986.\n\n      splitButtonView.actionView.extendTemplate({\n        attributes: {\n          class: 'ck ck-button ck-splitbutton__action'\n        }\n      });\n      return this._setUpDropdown(dropdownView, imageInsertView, command);\n    }\n    /**\n     * Sets up the dropdown view.\n     *\n     * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdownView.\n     * @param {module:image/imageinsert/ui/imageinsertpanelview~ImageInsertPanelView} imageInsertView An imageInsertView.\n     * @param {module:core/command~Command} command An insertImage command\n     *\n     * @private\n     * @returns {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n  }, {\n    key: \"_setUpDropdown\",\n    value: function _setUpDropdown(dropdownView, imageInsertView, command) {\n      var editor = this.editor;\n      var t = editor.t;\n      var insertButtonView = imageInsertView.insertButtonView;\n      var insertImageViaUrlForm = imageInsertView.getIntegration('insertImageViaUrl');\n      var panelView = dropdownView.panelView;\n      var imageUtils = this.editor.plugins.get('ImageUtils');\n      dropdownView.bind('isEnabled').to(command); // Defer the children injection to improve initial performance.\n      // See https://github.com/ckeditor/ckeditor5/pull/8019#discussion_r484069652.\n\n      dropdownView.buttonView.once('open', function () {\n        panelView.children.add(imageInsertView);\n      });\n      dropdownView.on('change:isOpen', function () {\n        var selectedElement = editor.model.document.selection.getSelectedElement();\n\n        if (dropdownView.isOpen) {\n          imageInsertView.focus();\n\n          if (imageUtils.isImage(selectedElement)) {\n            imageInsertView.imageURLInputValue = selectedElement.getAttribute('src');\n            insertButtonView.label = t('Update');\n            insertImageViaUrlForm.label = t('Update image URL');\n          } else {\n            imageInsertView.imageURLInputValue = '';\n            insertButtonView.label = t('Insert');\n            insertImageViaUrlForm.label = t('Insert image via URL');\n          }\n        } // Note: Use the low priority to make sure the following listener starts working after the\n        // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n        // invisible form/input cannot be focused/selected.\n\n      }, {\n        priority: 'low'\n      });\n      imageInsertView.delegate('submit', 'cancel').to(dropdownView);\n      this.delegate('cancel').to(dropdownView);\n      dropdownView.on('submit', function () {\n        closePanel();\n        onSubmit();\n      });\n      dropdownView.on('cancel', function () {\n        closePanel();\n      });\n\n      function onSubmit() {\n        var selectedElement = editor.model.document.selection.getSelectedElement();\n\n        if (imageUtils.isImage(selectedElement)) {\n          editor.model.change(function (writer) {\n            writer.setAttribute('src', imageInsertView.imageURLInputValue, selectedElement);\n            writer.removeAttribute('srcset', selectedElement);\n            writer.removeAttribute('sizes', selectedElement);\n          });\n        } else {\n          editor.execute('insertImage', {\n            source: imageInsertView.imageURLInputValue\n          });\n        }\n      }\n\n      function closePanel() {\n        editor.editing.view.focus();\n        dropdownView.isOpen = false;\n      }\n\n      return dropdownView;\n    }\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'ImageInsertUI';\n    }\n  }]);\n\n  return ImageInsertUI;\n}(Plugin);\n\nexport { ImageInsertUI as default };","map":null,"metadata":{},"sourceType":"module"}