{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/sizeview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n/**\n * A view displaying the proposed new element size during the resizing.\n *\n * @protected\n * @extends {module:ui/view~View}\n */\n\nvar SizeView = /*#__PURE__*/function (_View) {\n  _inherits(SizeView, _View);\n\n  function SizeView() {\n    var _this;\n\n    _classCallCheck(this, SizeView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SizeView).call(this));\n    /**\n     * The visibility of the view defined based on the existence of the host proposed dimensions.\n     *\n     * @private\n     * @observable\n     * @readonly\n     * @member {Boolean} #_isVisible\n     */\n\n    /**\n     * The text that will be displayed in the `SizeView` child.\n     * It can be formatted as the pixel values (e.g. 10x20) or the percentage value (e.g. 10%).\n     *\n     * @private\n     * @observable\n     * @readonly\n     * @member {Boolean} #_label\n     */\n\n    /**\n     * The position of the view defined based on the host size and active handle position.\n     *\n     * @private\n     * @observable\n     * @readonly\n     * @member {String} #_viewPosition\n     */\n\n    var bind = _this.bindTemplate;\n\n    _this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-size-view', bind.to('_viewPosition', function (value) {\n          return value ? \"ck-orientation-\".concat(value) : '';\n        })],\n        style: {\n          display: bind.if('_isVisible', 'none', function (visible) {\n            return !visible;\n          })\n        }\n      },\n      children: [{\n        text: bind.to('_label')\n      }]\n    });\n\n    return _this;\n  }\n  /**\n   * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.\n   *\n   * @protected\n   * @param {module:widget/widgetresize~ResizerOptions} options\n   * An object defining the resizer options, used for setting the proper size label.\n   * @param {module:widget/widgetresize/resizerstate~ResizeState} resizeState\n   * The `ResizeState` class instance, used for keeping the `SizeView` state up to date.\n   */\n\n\n  _createClass(SizeView, [{\n    key: \"_bindToState\",\n    value: function _bindToState(options, resizeState) {\n      this.bind('_isVisible').to(resizeState, 'proposedWidth', resizeState, 'proposedHeight', function (width, height) {\n        return width !== null && height !== null;\n      });\n      this.bind('_label').to(resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', resizeState, 'proposedWidthPercents', function (width, height, widthPercents) {\n        if (options.unit === 'px') {\n          return \"\".concat(width, \"\\xD7\").concat(height);\n        } else {\n          return \"\".concat(widthPercents, \"%\");\n        }\n      });\n      this.bind('_viewPosition').to(resizeState, 'activeHandlePosition', resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', // If the widget is too small to contain the size label, display the label above.\n      function (position, width, height) {\n        return width < 50 || height < 50 ? 'above-center' : position;\n      });\n    }\n    /**\n     * A method used for cleaning up. It removes the bindings and hides the view.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"_dismiss\",\n    value: function _dismiss() {\n      this.unbind();\n      this._isVisible = false;\n    }\n  }]);\n\n  return SizeView;\n}(View);\n\nexport { SizeView as default };","map":null,"metadata":{},"sourceType":"module"}