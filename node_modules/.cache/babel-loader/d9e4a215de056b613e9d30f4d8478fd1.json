{"ast":null,"code":"import { useRef, useCallback } from 'react';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport useMount from './useMount';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport isNumberOrTrue from './isNumberOrTrue';\n/**\n * The dimension information of the table,\n * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.\n * @param props\n * @returns\n */\n\nvar useTableDimension = function useTableDimension(props) {\n  var data = props.data,\n      rowHeight = props.rowHeight,\n      tableRef = props.tableRef,\n      headerWrapperRef = props.headerWrapperRef,\n      prefix = props.prefix,\n      widthProp = props.width,\n      affixHeader = props.affixHeader,\n      affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n      headerHeight = props.headerHeight,\n      heightProp = props.height,\n      autoHeight = props.autoHeight,\n      minHeight = props.minHeight,\n      fillHeight = props.fillHeight,\n      children = props.children,\n      expandedRowKeys = props.expandedRowKeys,\n      onTableResizeChange = props.onTableResizeChange,\n      onTableScroll = props.onTableScroll;\n  var contentHeight = useRef(0);\n  var contentWidth = useRef(0);\n  var minScrollY = useRef(0);\n  var scrollY = useRef(0);\n  var scrollX = useRef(0);\n  var minScrollX = useRef(0);\n  var tableWidth = useRef(widthProp || 0);\n  var tableHeight = useRef(heightProp || 0);\n  var columnCount = useRef(0);\n  var resizeObserver = useRef();\n  var containerResizeObserver = useRef();\n  var headerOffset = useRef(null);\n  var tableOffset = useRef(null);\n  var calculateTableContextHeight = useCallback(function () {\n    var prevContentHeight = contentHeight.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var rows = (table === null || table === void 0 ? void 0 : table.querySelectorAll(\".\" + (prefix === null || prefix === void 0 ? void 0 : prefix('row')))) || [];\n    var nextContentHeight = rows.length ? Array.from(rows).map(function (row) {\n      return getHeight(row) || rowHeight;\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.\n\n    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight));\n    var height = fillHeight ? tableHeight.current : heightProp;\n\n    if (!autoHeight) {\n      /**\n       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.\n       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).\n       */\n      minScrollY.current = -(nextContentHeight - height) - (contentWidth.current > tableWidth.current ? SCROLLBAR_WIDTH : 0);\n    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.\n\n\n    if (nextContentHeight < height) {\n      onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n        y: 0\n      });\n    } // If the value of scrollTop is greater than the scrollable range, the vertical scroll bar is reset.\n    // When Table is set to virtualized, the logic will be entered every time the wheel event is triggered\n    // to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.\n\n\n    if (Math.abs(scrollY.current) + height - headerHeight > nextContentHeight + SCROLLBAR_WIDTH) {\n      onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n        y: scrollY.current\n      });\n    }\n\n    if (prevContentHeight !== contentHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevContentHeight, 'bodyHeightChanged');\n    }\n  }, [tableRef, prefix, affixHeader, headerHeight, fillHeight, heightProp, autoHeight, rowHeight, onTableScroll, onTableResizeChange]);\n  var setOffsetByAffix = useCallback(function () {\n    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n\n    if (isNumberOrTrue(affixHeader) && headerNode) {\n      headerOffset.current = getOffset(headerNode);\n    }\n\n    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);\n  var calculateTableContentWidth = useCallback(function () {\n    var prevWidth = contentWidth.current;\n    var prevColumnCount = columnCount.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var row = table === null || table === void 0 ? void 0 : table.querySelector(\".\" + prefix('row') + \":not(.virtualized)\");\n    var nextContentWidth = row ? getWidth(row) : 0;\n    contentWidth.current = nextContentWidth - (autoHeight ? SCROLLBAR_WIDTH : 0);\n    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll(\".\" + prefix('cell')).length) || 0; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.\n    // There is no vertical scroll bar after autoHeight.\n\n    minScrollX.current = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);\n    /**\n     * If the width of the content area and the number of columns change,\n     * the horizontal scroll bar is reset.\n     * fix: https://github.com/rsuite/rsuite/issues/2039\n     */\n\n    if (prevWidth > 0 && prevWidth !== contentWidth.current && prevColumnCount > 0 && prevColumnCount !== columnCount.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'bodyWidthChanged');\n    }\n  }, [autoHeight, onTableResizeChange, prefix, tableRef]);\n  var calculateTableWidth = useCallback(function (nextWidth) {\n    var prevWidth = tableWidth.current;\n\n    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableWidth.current = nextWidth || getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n\n    if (prevWidth && prevWidth !== tableWidth.current) {\n      scrollX.current = 0;\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'widthChanged');\n    }\n\n    setOffsetByAffix();\n  }, [onTableResizeChange, setOffsetByAffix, tableRef]);\n  var calculateTableHeight = useCallback(function (nextHeight) {\n    var prevHeight = tableHeight.current;\n\n    if (nextHeight) {\n      tableHeight.current = nextHeight;\n    } else if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableHeight.current = getHeight(tableRef.current.parentNode);\n    }\n\n    if (prevHeight && prevHeight !== tableHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevHeight, 'heightChanged');\n    }\n  }, [onTableResizeChange, tableRef]);\n  useMount(function () {\n    var _tableRef$current;\n\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n    calculateTableWidth();\n    calculateTableHeight();\n    setOffsetByAffix();\n    containerResizeObserver.current = new ResizeObserver(function (entries) {\n      calculateTableHeight(entries[0].contentRect.height);\n    });\n    containerResizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.parentNode);\n    resizeObserver.current = new ResizeObserver(function (entries) {\n      calculateTableWidth(entries[0].contentRect.width);\n    });\n    resizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    return function () {\n      var _resizeObserver$curre, _containerResizeObser;\n\n      (_resizeObserver$curre = resizeObserver.current) === null || _resizeObserver$curre === void 0 ? void 0 : _resizeObserver$curre.disconnect();\n      (_containerResizeObser = containerResizeObserver.current) === null || _containerResizeObser === void 0 ? void 0 : _containerResizeObser.disconnect();\n    };\n  });\n  useUpdateLayoutEffect(function () {\n    calculateTableHeight();\n    calculateTableContextHeight();\n  }, [fillHeight]);\n  useUpdateLayoutEffect(function () {\n    calculateTableWidth();\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n  }, [data, heightProp, contentHeight, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);\n  var setScrollY = useCallback(function (value) {\n    scrollY.current = value;\n  }, []);\n  var setScrollX = useCallback(function (value) {\n    scrollX.current = value;\n  }, []);\n\n  var getTableHeight = function getTableHeight() {\n    if (fillHeight) {\n      return tableHeight.current;\n    }\n\n    if ((data === null || data === void 0 ? void 0 : data.length) === 0 && autoHeight) {\n      return heightProp;\n    }\n\n    return autoHeight ? Math.max(headerHeight + contentHeight.current, minHeight) : heightProp;\n  };\n\n  return {\n    contentHeight: contentHeight,\n    contentWidth: contentWidth,\n    minScrollY: minScrollY,\n    minScrollX: minScrollX,\n    scrollY: scrollY,\n    scrollX: scrollX,\n    tableWidth: tableWidth,\n    headerOffset: headerOffset,\n    tableOffset: tableOffset,\n    getTableHeight: getTableHeight,\n    setScrollY: setScrollY,\n    setScrollX: setScrollX\n  };\n};\n\nexport default useTableDimension;","map":null,"metadata":{},"sourceType":"module"}