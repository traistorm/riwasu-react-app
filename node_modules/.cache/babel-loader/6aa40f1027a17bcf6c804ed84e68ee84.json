{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useState, useMemo } from 'react';\nimport slice from 'lodash/slice';\nimport { shallowEqual, useUpdateEffect } from '../utils';\nimport { findNodeOfTree } from '../utils/treeUtils';\nexport function getColumnsAndPaths(data, value, options) {\n  var childrenKey = options.childrenKey,\n      valueKey = options.valueKey,\n      isAttachChildren = options.isAttachChildren;\n  var columns = [];\n  var paths = [];\n\n  var findNode = function findNode(items) {\n    var _loop = function _loop(i) {\n      var children = items[i][childrenKey];\n\n      if (shallowEqual(items[i][valueKey], value)) {\n        return {\n          v: {\n            items: items,\n            active: items[i]\n          }\n        };\n      } else if (children) {\n        var node = findNode(children);\n\n        if (node) {\n          columns.push(children.map(function (item) {\n            return _extends({}, item, {\n              parent: items[i]\n            });\n          }));\n          paths.push(node.active);\n          return {\n            v: {\n              items: items,\n              active: items[i]\n            }\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < items.length; i += 1) {\n      var _ret = _loop(i);\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return null;\n  };\n\n  var selectedNode = findNode(data);\n  columns.push(data);\n\n  if (selectedNode) {\n    paths.push(selectedNode.active);\n  }\n\n  if (isAttachChildren) {\n    var valueToNode = findNodeOfTree(data, function (item) {\n      return item[valueKey] === value;\n    });\n\n    if (valueToNode !== null && valueToNode !== void 0 && valueToNode[childrenKey]) {\n      columns.unshift(valueToNode[childrenKey]);\n    }\n  }\n\n  columns.reverse();\n  paths.reverse();\n  return {\n    columns: columns,\n    paths: paths\n  };\n}\nexport function usePaths(props) {\n  var data = props.data,\n      valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      value = props.value;\n\n  var _useMemo = useMemo(function () {\n    return getColumnsAndPaths(data, value, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n  }, [data, value, valueKey, childrenKey]),\n      columns = _useMemo.columns,\n      paths = _useMemo.paths; // The columns displayed in the cascading panel.\n\n\n  var _useState = useState(columns),\n      columnData = _useState[0],\n      setColumnData = _useState[1]; // The path after cascading data selection.\n\n\n  var _useState2 = useState(paths),\n      selectedPaths = _useState2[0],\n      setSelectedPaths = _useState2[1]; // The path corresponding to the selected value.\n\n\n  var _useState3 = useState(paths),\n      valueToPaths = _useState3[0],\n      setValueToPaths = _useState3[1];\n  /**\n   * Add a list of options to the cascading panel. Used for lazy loading options.\n   * @param column\n   * @param index The index of the current column.\n   */\n\n\n  function addColumn(column, index) {\n    setColumnData([].concat(slice(columnData, 0, index), [column]));\n  }\n  /**\n   * Enforce update of columns and paths.\n   * @param nextValue  Selected value\n   * @param isAttachChildren  Whether to attach the children of the selected node.\n   */\n\n\n  function enforceUpdate(nextValue, isAttachChildren) {\n    var _getColumnsAndPaths = getColumnsAndPaths(data, nextValue, {\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      isAttachChildren: isAttachChildren\n    }),\n        columns = _getColumnsAndPaths.columns,\n        paths = _getColumnsAndPaths.paths;\n\n    setColumnData(columns);\n    setSelectedPaths(paths);\n  }\n\n  useUpdateEffect(function () {\n    // Update paths when value is updated, then update valueToPaths.\n    setValueToPaths(paths);\n  }, [paths]);\n  useUpdateEffect(function () {\n    enforceUpdate(value);\n  }, [data]);\n  return {\n    enforceUpdate: enforceUpdate,\n    columnData: columnData,\n    valueToPaths: valueToPaths,\n    selectedPaths: selectedPaths,\n    setValueToPaths: setValueToPaths,\n    setColumnData: setColumnData,\n    setSelectedPaths: setSelectedPaths,\n    addColumn: addColumn\n  };\n}","map":null,"metadata":{},"sourceType":"module"}