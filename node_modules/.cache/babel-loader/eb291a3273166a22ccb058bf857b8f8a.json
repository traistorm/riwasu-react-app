{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/datatransfer\n */\n\n/**\n * A facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nvar DataTransfer = /*#__PURE__*/function () {\n  function DataTransfer(nativeDataTransfer) {\n    _classCallCheck(this, DataTransfer);\n\n    /**\n     * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n     *\n     * @readonly\n     * @member {Array.<File>} #files\n     */\n    this.files = getFiles(nativeDataTransfer);\n    /**\n     * The native DataTransfer object.\n     *\n     * @private\n     * @member {DataTransfer} #_native\n     */\n\n    this._native = nativeDataTransfer;\n  }\n  /**\n   * Returns an array of available native content types.\n   *\n   * @returns {Array.<String>}\n   */\n\n\n  _createClass(DataTransfer, [{\n    key: \"getData\",\n\n    /**\n     * Gets the data from the data transfer by its MIME type.\n     *\n     *\t\tdataTransfer.getData( 'text/plain' );\n     *\n     * @param {String} type The MIME type. E.g. `text/html` or `text/plain`.\n     * @returns {String}\n     */\n    value: function getData(type) {\n      return this._native.getData(type);\n    }\n    /**\n     * Sets the data in the data transfer.\n     *\n     * @param {String} type The MIME type. E.g. `text/html` or `text/plain`.\n     * @param {String} data\n     */\n\n  }, {\n    key: \"setData\",\n    value: function setData(type, data) {\n      this._native.setData(type, data);\n    }\n    /**\n     * The effect that is allowed for a drag operation.\n     *\n     * @param {String} value\n     */\n\n  }, {\n    key: \"types\",\n    get: function get() {\n      return this._native.types;\n    }\n  }, {\n    key: \"effectAllowed\",\n    set: function set(value) {\n      this._native.effectAllowed = value;\n    },\n    get: function get() {\n      return this._native.effectAllowed;\n    }\n    /**\n     * The actual drop effect.\n     *\n     * @param {String} value\n     */\n\n  }, {\n    key: \"dropEffect\",\n    set: function set(value) {\n      this._native.dropEffect = value;\n    },\n    get: function get() {\n      return this._native.dropEffect;\n    }\n    /**\n     * Whether the dragging operation was canceled.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isCanceled\",\n    get: function get() {\n      return this._native.dropEffect == 'none' || !!this._native.mozUserCancelled;\n    }\n  }]);\n\n  return DataTransfer;\n}();\n\nexport { DataTransfer as default };\n\nfunction getFiles(nativeDataTransfer) {\n  // DataTransfer.files and items are array-like and might not have an iterable interface.\n  var files = Array.from(nativeDataTransfer.files || []);\n  var items = Array.from(nativeDataTransfer.items || []);\n\n  if (files.length) {\n    return files;\n  } // Chrome has empty DataTransfer.files, but allows getting files through the items interface.\n\n\n  return items.filter(function (item) {\n    return item.kind === 'file';\n  }).map(function (item) {\n    return item.getAsFile();\n  });\n}","map":null,"metadata":{},"sourceType":"module"}