{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liveposition\n */\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\n\nvar LivePosition = /*#__PURE__*/function (_Position) {\n  _inherits(LivePosition, _Position);\n\n  /**\n   * Creates a live position.\n   *\n   * @see module:engine/model/position~Position\n   * @param {module:engine/model/rootelement~RootElement} root\n   * @param {Array.<Number>} path\n   * @param {module:engine/model/position~PositionStickiness} [stickiness]\n   */\n  function LivePosition(root, path) {\n    var _this;\n\n    var stickiness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'toNone';\n\n    _classCallCheck(this, LivePosition);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LivePosition).call(this, root, path, stickiness));\n\n    if (!_this.root.is('rootElement')) {\n      /**\n       * LivePosition's root has to be an instance of RootElement.\n       *\n       * @error model-liveposition-root-not-rootelement\n       */\n      throw new CKEditorError('model-liveposition-root-not-rootelement', root);\n    }\n\n    bindWithDocument.call(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /**\n   * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n   * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n   * referring to it).\n   */\n\n\n  _createClass(LivePosition, [{\n    key: \"detach\",\n    value: function detach() {\n      this.stopListening();\n    }\n    /**\n     * Checks whether this object is of the given.\n     *\n     *\t\tlivePosition.is( 'position' ); // -> true\n     *\t\tlivePosition.is( 'model:position' ); // -> true\n     *\t\tlivePosition.is( 'liveposition' ); // -> true\n     *\t\tlivePosition.is( 'model:livePosition' ); // -> true\n     *\n     *\t\tlivePosition.is( 'view:position' ); // -> false\n     *\t\tlivePosition.is( 'documentSelection' ); // -> false\n     *\n     * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n     *\n     * @param {String} type\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"is\",\n    value: function is(type) {\n      return type === 'livePosition' || type === 'model:livePosition' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n      type == 'position' || type === 'model:position';\n    }\n    /**\n     * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n     *\n     * @returns {module:engine/model/position~Position}\n     */\n\n  }, {\n    key: \"toPosition\",\n    value: function toPosition() {\n      return new Position(this.root, this.path.slice(), this.stickiness);\n    }\n    /**\n     * Creates a `LivePosition` instance that is equal to position.\n     *\n     * @param {module:engine/model/position~Position} position\n     * @param {module:engine/model/position~PositionStickiness} [stickiness]\n     * @returns {module:engine/model/liveposition~LivePosition}\n     */\n\n  }], [{\n    key: \"fromPosition\",\n    value: function fromPosition(position, stickiness) {\n      return new this(position.root, position.path.slice(), stickiness ? stickiness : position.stickiness);\n    }\n    /**\n     * @static\n     * @protected\n     * @method module:engine/model/liveposition~LivePosition._createAfter\n     * @see module:engine/model/position~Position._createAfter\n     * @param {module:engine/model/node~Node} node\n     * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n     * @returns {module:engine/model/liveposition~LivePosition}\n     */\n\n    /**\n     * @static\n     * @protected\n     * @method module:engine/model/liveposition~LivePosition._createBefore\n     * @see module:engine/model/position~Position._createBefore\n     * @param {module:engine/model/node~Node} node\n     * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n     * @returns {module:engine/model/liveposition~LivePosition}\n     */\n\n    /**\n     * @static\n     * @protected\n     * @method module:engine/model/liveposition~LivePosition._createAt\n     * @see module:engine/model/position~Position._createAt\n     * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n     * @param {Number|'end'|'before'|'after'} [offset]\n     * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n     * @returns {module:engine/model/liveposition~LivePosition}\n     */\n\n    /**\n     * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\n     *\n     * @event module:engine/model/liveposition~LivePosition#change\n     * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\n     */\n\n  }]);\n\n  return LivePosition;\n}(Position); // Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\n\n\nexport { LivePosition as default };\n\nfunction bindWithDocument() {\n  var _this2 = this;\n\n  this.listenTo(this.root.document.model, 'applyOperation', function (event, args) {\n    var operation = args[0];\n\n    if (!operation.isDocumentOperation) {\n      return;\n    }\n\n    transform.call(_this2, operation);\n  }, {\n    priority: 'low'\n  });\n} // Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n\n\nfunction transform(operation) {\n  var result = this.getTransformedByOperation(operation);\n\n  if (!this.isEqual(result)) {\n    var oldPosition = this.toPosition();\n    this.path = result.path;\n    this.root = result.root;\n    this.fire('change', oldPosition);\n  }\n}\n\nmix(LivePosition, EmitterMixin);","map":null,"metadata":{},"sourceType":"module"}