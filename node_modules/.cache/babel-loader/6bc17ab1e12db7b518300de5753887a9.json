{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/styles/border\n */\nimport { getShorthandValues, getBoxSidesValueReducer, getBoxSidesValues, isLength, isLineStyle } from './utils';\n/**\n * Adds a border CSS styles processing rules.\n *\n *\t\teditor.data.addStyleProcessorRules( addBorderRules );\n *\n * This rules merges all [border](https://developer.mozilla.org/en-US/docs/Web/CSS/border) styles notation shorthands:\n *\n * - border\n * - border-top\n * - border-right\n * - border-bottom\n * - border-left\n * - border-color\n * - border-style\n * - border-width\n *\n * and all corresponding longhand forms (like `border-top-color`, `border-top-style`, etc).\n *\n * It does not handle other shorthands (like `border-radius` or `border-image`).\n *\n * The normalized model stores border values as:\n *\n *\t\tconst styles = {\n *\t\t\tborder: {\n *\t\t\t\tcolor: { top, right, bottom, left },\n *\t\t\t\tstyle: { top, right, bottom, left },\n *\t\t\t\twidth: { top, right, bottom, left },\n *\t\t\t}\n *\t\t};\n *\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n */\n\nexport function addBorderRules(stylesProcessor) {\n  stylesProcessor.setNormalizer('border', borderNormalizer); // Border-position shorthands.\n\n  stylesProcessor.setNormalizer('border-top', getBorderPositionNormalizer('top'));\n  stylesProcessor.setNormalizer('border-right', getBorderPositionNormalizer('right'));\n  stylesProcessor.setNormalizer('border-bottom', getBorderPositionNormalizer('bottom'));\n  stylesProcessor.setNormalizer('border-left', getBorderPositionNormalizer('left')); // Border-property shorthands.\n\n  stylesProcessor.setNormalizer('border-color', getBorderPropertyNormalizer('color'));\n  stylesProcessor.setNormalizer('border-width', getBorderPropertyNormalizer('width'));\n  stylesProcessor.setNormalizer('border-style', getBorderPropertyNormalizer('style')); // Border longhands.\n\n  stylesProcessor.setNormalizer('border-top-color', getBorderPropertyPositionNormalizer('color', 'top'));\n  stylesProcessor.setNormalizer('border-top-style', getBorderPropertyPositionNormalizer('style', 'top'));\n  stylesProcessor.setNormalizer('border-top-width', getBorderPropertyPositionNormalizer('width', 'top'));\n  stylesProcessor.setNormalizer('border-right-color', getBorderPropertyPositionNormalizer('color', 'right'));\n  stylesProcessor.setNormalizer('border-right-style', getBorderPropertyPositionNormalizer('style', 'right'));\n  stylesProcessor.setNormalizer('border-right-width', getBorderPropertyPositionNormalizer('width', 'right'));\n  stylesProcessor.setNormalizer('border-bottom-color', getBorderPropertyPositionNormalizer('color', 'bottom'));\n  stylesProcessor.setNormalizer('border-bottom-style', getBorderPropertyPositionNormalizer('style', 'bottom'));\n  stylesProcessor.setNormalizer('border-bottom-width', getBorderPropertyPositionNormalizer('width', 'bottom'));\n  stylesProcessor.setNormalizer('border-left-color', getBorderPropertyPositionNormalizer('color', 'left'));\n  stylesProcessor.setNormalizer('border-left-style', getBorderPropertyPositionNormalizer('style', 'left'));\n  stylesProcessor.setNormalizer('border-left-width', getBorderPropertyPositionNormalizer('width', 'left'));\n  stylesProcessor.setExtractor('border-top', getBorderPositionExtractor('top'));\n  stylesProcessor.setExtractor('border-right', getBorderPositionExtractor('right'));\n  stylesProcessor.setExtractor('border-bottom', getBorderPositionExtractor('bottom'));\n  stylesProcessor.setExtractor('border-left', getBorderPositionExtractor('left'));\n  stylesProcessor.setExtractor('border-top-color', 'border.color.top');\n  stylesProcessor.setExtractor('border-right-color', 'border.color.right');\n  stylesProcessor.setExtractor('border-bottom-color', 'border.color.bottom');\n  stylesProcessor.setExtractor('border-left-color', 'border.color.left');\n  stylesProcessor.setExtractor('border-top-width', 'border.width.top');\n  stylesProcessor.setExtractor('border-right-width', 'border.width.right');\n  stylesProcessor.setExtractor('border-bottom-width', 'border.width.bottom');\n  stylesProcessor.setExtractor('border-left-width', 'border.width.left');\n  stylesProcessor.setExtractor('border-top-style', 'border.style.top');\n  stylesProcessor.setExtractor('border-right-style', 'border.style.right');\n  stylesProcessor.setExtractor('border-bottom-style', 'border.style.bottom');\n  stylesProcessor.setExtractor('border-left-style', 'border.style.left');\n  stylesProcessor.setReducer('border-color', getBoxSidesValueReducer('border-color'));\n  stylesProcessor.setReducer('border-style', getBoxSidesValueReducer('border-style'));\n  stylesProcessor.setReducer('border-width', getBoxSidesValueReducer('border-width'));\n  stylesProcessor.setReducer('border-top', getBorderPositionReducer('top'));\n  stylesProcessor.setReducer('border-right', getBorderPositionReducer('right'));\n  stylesProcessor.setReducer('border-bottom', getBorderPositionReducer('bottom'));\n  stylesProcessor.setReducer('border-left', getBorderPositionReducer('left'));\n  stylesProcessor.setReducer('border', getBorderReducer());\n  stylesProcessor.setStyleRelation('border', ['border-color', 'border-style', 'border-width', 'border-top', 'border-right', 'border-bottom', 'border-left', 'border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color', 'border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style', 'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width']);\n  stylesProcessor.setStyleRelation('border-color', ['border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color']);\n  stylesProcessor.setStyleRelation('border-style', ['border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style']);\n  stylesProcessor.setStyleRelation('border-width', ['border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width']);\n  stylesProcessor.setStyleRelation('border-top', ['border-top-color', 'border-top-style', 'border-top-width']);\n  stylesProcessor.setStyleRelation('border-right', ['border-right-color', 'border-right-style', 'border-right-width']);\n  stylesProcessor.setStyleRelation('border-bottom', ['border-bottom-color', 'border-bottom-style', 'border-bottom-width']);\n  stylesProcessor.setStyleRelation('border-left', ['border-left-color', 'border-left-style', 'border-left-width']);\n}\n\nfunction borderNormalizer(value) {\n  var _normalizeBorderShort = normalizeBorderShorthand(value),\n      color = _normalizeBorderShort.color,\n      style = _normalizeBorderShort.style,\n      width = _normalizeBorderShort.width;\n\n  return {\n    path: 'border',\n    value: {\n      color: getBoxSidesValues(color),\n      style: getBoxSidesValues(style),\n      width: getBoxSidesValues(width)\n    }\n  };\n}\n\nfunction getBorderPositionNormalizer(side) {\n  return function (value) {\n    var _normalizeBorderShort2 = normalizeBorderShorthand(value),\n        color = _normalizeBorderShort2.color,\n        style = _normalizeBorderShort2.style,\n        width = _normalizeBorderShort2.width;\n\n    var border = {};\n\n    if (color !== undefined) {\n      border.color = _defineProperty({}, side, color);\n    }\n\n    if (style !== undefined) {\n      border.style = _defineProperty({}, side, style);\n    }\n\n    if (width !== undefined) {\n      border.width = _defineProperty({}, side, width);\n    }\n\n    return {\n      path: 'border',\n      value: border\n    };\n  };\n}\n\nfunction getBorderPropertyNormalizer(propertyName) {\n  return function (value) {\n    return {\n      path: 'border',\n      value: toBorderPropertyShorthand(value, propertyName)\n    };\n  };\n}\n\nfunction toBorderPropertyShorthand(value, property) {\n  return _defineProperty({}, property, getBoxSidesValues(value));\n}\n\nfunction getBorderPropertyPositionNormalizer(property, side) {\n  return function (value) {\n    return {\n      path: 'border',\n      value: _defineProperty({}, property, _defineProperty({}, side, value))\n    };\n  };\n}\n\nfunction getBorderPositionExtractor(which) {\n  return function (name, styles) {\n    if (styles.border) {\n      return extractBorderPosition(styles.border, which);\n    }\n  };\n}\n\nfunction extractBorderPosition(border, which) {\n  var value = {};\n\n  if (border.width && border.width[which]) {\n    value.width = border.width[which];\n  }\n\n  if (border.style && border.style[which]) {\n    value.style = border.style[which];\n  }\n\n  if (border.color && border.color[which]) {\n    value.color = border.color[which];\n  }\n\n  return value;\n}\n\nfunction normalizeBorderShorthand(string) {\n  var result = {};\n  var parts = getShorthandValues(string);\n\n  var _iterator = _createForOfIteratorHelper(parts),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var part = _step.value;\n\n      if (isLength(part) || /thin|medium|thick/.test(part)) {\n        result.width = part;\n      } else if (isLineStyle(part)) {\n        result.style = part;\n      } else {\n        result.color = part;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n} // The border reducer factory.\n//\n// It tries to produce the most optimal output for the specified styles.\n//\n// For a border style:\n//\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-style: solid`.\n// For a border style and color:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-color: #ff0; border-style: solid`.\n// If all border parameters are specified:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//      width: {top: \"2px\", bottom: \"2px\", right: \"2px\", left: \"2px\"}\n//\n// It will combine everything into a single property: `border: 2px solid #ff0`.\n//\n// The definitions are merged only if all border selectors have the same values.\n//\n// @returns {Function}\n\n\nfunction getBorderReducer() {\n  return function (value) {\n    var topStyles = extractBorderPosition(value, 'top');\n    var rightStyles = extractBorderPosition(value, 'right');\n    var bottomStyles = extractBorderPosition(value, 'bottom');\n    var leftStyles = extractBorderPosition(value, 'left');\n    var borderStyles = [topStyles, rightStyles, bottomStyles, leftStyles];\n    var borderStylesByType = {\n      width: getReducedStyleValueForType(borderStyles, 'width'),\n      style: getReducedStyleValueForType(borderStyles, 'style'),\n      color: getReducedStyleValueForType(borderStyles, 'color')\n    }; // Try reducing to a single `border:` property.\n\n    var reducedBorderStyle = reduceBorderPosition(borderStylesByType, 'all');\n\n    if (reducedBorderStyle.length) {\n      return reducedBorderStyle;\n    } // Try reducing to `border-style:`, `border-width:`, `border-color:` properties.\n\n\n    var reducedStyleTypes = Object.entries(borderStylesByType).reduce(function (reducedStyleTypes, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          type = _ref3[0],\n          value = _ref3[1];\n\n      if (value) {\n        reducedStyleTypes.push([\"border-\".concat(type), value]); // Remove it from the full set to not include it in the most specific properties later.\n\n        borderStyles.forEach(function (style) {\n          return style[type] = null;\n        });\n      }\n\n      return reducedStyleTypes;\n    }, []); // The reduced properties (by type) and all that remains that could not be reduced.\n\n    return [].concat(_toConsumableArray(reducedStyleTypes), _toConsumableArray(reduceBorderPosition(topStyles, 'top')), _toConsumableArray(reduceBorderPosition(rightStyles, 'right')), _toConsumableArray(reduceBorderPosition(bottomStyles, 'bottom')), _toConsumableArray(reduceBorderPosition(leftStyles, 'left')));\n  }; // @param {Array.<Object>} styles The array of objects with `style`, `color`, `width` properties.\n  // @param {'width'|'style'|'color'} type\n\n  function getReducedStyleValueForType(styles, type) {\n    return styles.map(function (style) {\n      return style[type];\n    }).reduce(function (result, style) {\n      return result == style ? result : null;\n    });\n  }\n}\n\nfunction getBorderPositionReducer(which) {\n  return function (value) {\n    return reduceBorderPosition(value, which);\n  };\n} // Returns an array with reduced border styles depending on the specified values.\n//\n// If all border properties (width, style, color) are specified, the returned selector will be\n// merged into a group: `border-*: [width] [style] [color]`.\n//\n// Otherwise, the specific definitions will be returned: `border-(width|style|color)-*: [value]`.\n//\n// @param {Object|null} value Styles if defined.\n// @param {'top'|'right'|'bottom'|'left'|'all'} which The border position.\n// @returns {Array}\n\n\nfunction reduceBorderPosition(value, which) {\n  var borderTypes = [];\n\n  if (value && value.width) {\n    borderTypes.push('width');\n  }\n\n  if (value && value.style) {\n    borderTypes.push('style');\n  }\n\n  if (value && value.color) {\n    borderTypes.push('color');\n  }\n\n  if (borderTypes.length == 3) {\n    var borderValue = borderTypes.map(function (item) {\n      return value[item];\n    }).join(' ');\n    return [which == 'all' ? ['border', borderValue] : [\"border-\".concat(which), borderValue]];\n  } // We are unable to reduce to a single `border:` property.\n\n\n  if (which == 'all') {\n    return [];\n  }\n\n  return borderTypes.map(function (type) {\n    return [\"border-\".concat(which, \"-\").concat(type), value[type]];\n  });\n}","map":null,"metadata":{},"sourceType":"module"}