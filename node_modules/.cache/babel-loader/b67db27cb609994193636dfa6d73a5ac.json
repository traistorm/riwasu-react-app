{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraphcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * The paragraph command.\n *\n * @extends module:core/command~Command\n */\n\nvar ParagraphCommand = /*#__PURE__*/function (_Command) {\n  _inherits(ParagraphCommand, _Command);\n\n  function ParagraphCommand() {\n    _classCallCheck(this, ParagraphCommand);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ParagraphCommand).apply(this, arguments));\n  }\n\n  _createClass(ParagraphCommand, [{\n    key: \"refresh\",\n\n    /**\n     * The value of the command. Indicates whether the selection start is placed in a paragraph.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #value\n     */\n\n    /**\n     * @inheritDoc\n     */\n    value: function refresh() {\n      var model = this.editor.model;\n      var document = model.document;\n      var block = first(document.selection.getSelectedBlocks());\n      this.value = !!block && block.is('element', 'paragraph');\n      this.isEnabled = !!block && checkCanBecomeParagraph(block, model.schema);\n    }\n    /**\n     * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n     * will be turned to paragraphs.\n     *\n     * @fires execute\n     * @param {Object} [options] Options for the executed command.\n     * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} [options.selection]\n     * The selection that the command should be applied to.\n     * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var model = this.editor.model;\n      var document = model.document;\n      model.change(function (writer) {\n        var blocks = (options.selection || document.selection).getSelectedBlocks();\n\n        var _iterator = _createForOfIteratorHelper(blocks),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var block = _step.value;\n\n            if (!block.is('element', 'paragraph') && checkCanBecomeParagraph(block, model.schema)) {\n              writer.rename(block, 'paragraph');\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    }\n  }]);\n\n  return ParagraphCommand;\n}(Command); // Checks whether the given block can be replaced by a paragraph.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\n\n\nexport { ParagraphCommand as default };\n\nfunction checkCanBecomeParagraph(block, schema) {\n  return schema.checkChild(block.parent, 'paragraph') && !schema.isObject(block);\n}","map":null,"metadata":{},"sourceType":"module"}