{"ast":null,"code":"import { checkRequired, createValidator, createValidatorAsync, isEmpty, formatErrorMessage } from './utils';\nimport locales from './locales';\nexport var MixedType = /*#__PURE__*/function () {\n  function MixedType(name) {\n    this.typeName = void 0;\n    this.required = false;\n    this.requiredMessage = '';\n    this.trim = false;\n    this.emptyAllowed = false;\n    this.rules = [];\n    this.priorityRules = [];\n    this.schemaSpec = void 0;\n    this.value = void 0;\n    this.locale = void 0;\n    this.typeName = name;\n    this.locale = Object.assign(name ? locales[name] : {}, locales.mixed);\n  }\n\n  var _proto = MixedType.prototype;\n\n  _proto.setSchemaOptions = function setSchemaOptions(schemaSpec, value) {\n    this.schemaSpec = schemaSpec;\n    this.value = value;\n  };\n\n  _proto.check = function check(value, data, fieldName) {\n    if (value === void 0) {\n      value = this.value;\n    }\n\n    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n      return {\n        hasError: true,\n        errorMessage: formatErrorMessage(this.requiredMessage, {\n          name: fieldName\n        })\n      };\n    }\n\n    var validator = createValidator(data, fieldName);\n    var checkStatus = validator(value, this.priorityRules);\n\n    if (checkStatus) {\n      return checkStatus;\n    }\n\n    if (!this.required && isEmpty(value)) {\n      return {\n        hasError: false\n      };\n    }\n\n    return validator(value, this.rules) || {\n      hasError: false\n    };\n  };\n\n  _proto.checkAsync = function checkAsync(value, data, fieldName) {\n    var _this = this;\n\n    if (value === void 0) {\n      value = this.value;\n    }\n\n    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n      return Promise.resolve({\n        hasError: true,\n        errorMessage: formatErrorMessage(this.requiredMessage, {\n          name: fieldName\n        })\n      });\n    }\n\n    var validator = createValidatorAsync(data, fieldName);\n    return new Promise(function (resolve) {\n      return validator(value, _this.priorityRules).then(function (checkStatus) {\n        if (checkStatus) {\n          resolve(checkStatus);\n        }\n      }).then(function () {\n        if (!_this.required && isEmpty(value)) {\n          resolve({\n            hasError: false\n          });\n        }\n      }).then(function () {\n        return validator(value, _this.rules);\n      }).then(function (checkStatus) {\n        if (checkStatus) {\n          resolve(checkStatus);\n        }\n\n        resolve({\n          hasError: false\n        });\n      });\n    });\n  };\n\n  _proto.pushRule = function pushRule(rule) {\n    var _this$rules, _this$rules$;\n\n    var onValid = rule.onValid,\n        errorMessage = rule.errorMessage,\n        priority = rule.priority,\n        params = rule.params;\n    var nextRule = {\n      onValid: onValid,\n      params: params,\n      errorMessage: errorMessage || ((_this$rules = this.rules) === null || _this$rules === void 0 ? void 0 : (_this$rules$ = _this$rules[0]) === null || _this$rules$ === void 0 ? void 0 : _this$rules$.errorMessage)\n    };\n\n    if (priority) {\n      this.priorityRules.push(nextRule);\n    } else {\n      this.rules.push(nextRule);\n    }\n  };\n\n  _proto.addRule = function addRule(onValid, errorMessage, priority) {\n    this.pushRule({\n      onValid: onValid,\n      errorMessage: errorMessage,\n      priority: priority\n    });\n    return this;\n  };\n\n  _proto.isRequired = function isRequired(errorMessage, trim) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.isRequired;\n    }\n\n    if (trim === void 0) {\n      trim = true;\n    }\n\n    this.required = true;\n    this.trim = trim;\n    this.requiredMessage = errorMessage;\n    return this;\n  };\n\n  _proto.isRequiredOrEmpty = function isRequiredOrEmpty(errorMessage, trim) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.isRequiredOrEmpty;\n    }\n\n    if (trim === void 0) {\n      trim = true;\n    }\n\n    this.required = true;\n    this.trim = trim;\n    this.emptyAllowed = true;\n    this.requiredMessage = errorMessage;\n    return this;\n  }\n  /**\n   * Define data verification rules based on conditions.\n   * @param validator\n   * @example\n   * MixedType().when(schema => {\n   *   return schema.filed1.check() ? NumberType().min(5) : NumberType().min(0);\n   * });\n   */\n  ;\n\n  _proto.when = function when(condition) {\n    var _this2 = this;\n\n    this.addRule(function (value, data, filedName) {\n      return condition(_this2.schemaSpec).check(value, data, filedName);\n    }, undefined, true);\n    return this;\n  };\n\n  return MixedType;\n}();\nexport default function getMixedType() {\n  return new MixedType();\n}","map":null,"metadata":{},"sourceType":"module"}