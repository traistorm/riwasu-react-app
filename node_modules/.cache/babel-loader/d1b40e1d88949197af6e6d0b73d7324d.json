{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nimport selectMenu from './_selectMenu';\nexport default {\n  name: 'anchor',\n  add: function add(core) {\n    core.addModule([selectMenu]);\n    core.context.anchor = {\n      caller: {},\n      forms: this.setDialogForm(core),\n      host: (core._w.location.origin + core._w.location.pathname).replace(/\\/$/, ''),\n      callerContext: null\n    };\n  },\n\n  /** dialog */\n  setDialogForm: function setDialogForm(core) {\n    var lang = core.lang;\n    var relList = core.options.linkRel;\n    var defaultRel = (core.options.linkRelDefault.default || '').split(' ');\n    var icons = core.icons;\n    var forms = core.util.createElement('DIV');\n    var html = '<div class=\"se-dialog-body\">' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.linkBox.url + '</label>' + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form se-input-url\" type=\"text\" placeholder=\"' + (core.options.protocol || '') + '\" />' + '<button type=\"button\" class=\"se-btn se-dialog-files-edge-button _se_bookmark_button\" title=\"' + lang.dialogBox.linkBox.bookmark + '\" aria-label=\"' + lang.dialogBox.linkBox.bookmark + '\">' + icons.bookmark + '</button>' + core.plugins.selectMenu.setForm() + '</div>' + '<div class=\"se-anchor-preview-form\">' + '<span class=\"se-svg se-anchor-preview-icon _se_anchor_bookmark_icon\">' + icons.bookmark + '</span>' + '<span class=\"se-svg se-anchor-preview-icon _se_anchor_download_icon\">' + icons.download + '</span>' + '<pre class=\"se-link-preview\"></pre>' + '</div>' + '</div>' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.linkBox.text + '</label><input class=\"se-input-form _se_anchor_text\" type=\"text\" />' + '</div>' + '<div class=\"se-dialog-form-footer\">' + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_anchor_check\" />&nbsp;' + lang.dialogBox.linkBox.newWindowCheck + '</label>' + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_anchor_download\" />&nbsp;' + lang.dialogBox.linkBox.downloadLinkCheck + '</label>';\n\n    if (relList.length > 0) {\n      html += '<div class=\"se-anchor-rel\"><button type=\"button\" class=\"se-btn se-btn-select se-anchor-rel-btn\">&lt;rel&gt;</button>' + '<div class=\"se-anchor-rel-wrapper\"><pre class=\"se-link-preview se-anchor-rel-preview\"></pre></div>' + '<div class=\"se-list-layer\">' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic se-list-checked\">';\n\n      for (var i = 0, len = relList.length, rel; i < len; i++) {\n        rel = relList[i];\n        html += '<li><button type=\"button\" class=\"se-btn-list' + (defaultRel.indexOf(rel) > -1 ? ' se-checked' : '') + '\" data-command=\"' + rel + '\" title=\"' + rel + '\" aria-label=\"' + rel + '\"><span class=\"se-svg\">' + icons.checked + '</span>' + rel + '</button></li>';\n      }\n\n      html += '</ul></div></div></div>';\n    }\n\n    html += '</div></div>';\n    forms.innerHTML = html;\n    return forms;\n  },\n  initEvent: function initEvent(pluginName, forms) {\n    var anchorPlugin = this.plugins.anchor;\n    var context = this.context.anchor.caller[pluginName] = {\n      modal: forms,\n      urlInput: null,\n      linkDefaultRel: this.options.linkRelDefault,\n      defaultRel: this.options.linkRelDefault.default || '',\n      currentRel: [],\n      linkAnchor: null,\n      linkValue: '',\n      _change: false,\n      callerName: pluginName\n    };\n    if (typeof context.linkDefaultRel.default === 'string') context.linkDefaultRel.default = context.linkDefaultRel.default.trim();\n    if (typeof context.linkDefaultRel.check_new_window === 'string') context.linkDefaultRel.check_new_window = context.linkDefaultRel.check_new_window.trim();\n    if (typeof context.linkDefaultRel.check_bookmark === 'string') context.linkDefaultRel.check_bookmark = context.linkDefaultRel.check_bookmark.trim();\n    context.urlInput = forms.querySelector('.se-input-url');\n    context.anchorText = forms.querySelector('._se_anchor_text');\n    context.newWindowCheck = forms.querySelector('._se_anchor_check');\n    context.downloadCheck = forms.querySelector('._se_anchor_download');\n    context.download = forms.querySelector('._se_anchor_download_icon');\n    context.preview = forms.querySelector('.se-link-preview');\n    context.bookmark = forms.querySelector('._se_anchor_bookmark_icon');\n    context.bookmarkButton = forms.querySelector('._se_bookmark_button');\n    this.plugins.selectMenu.initEvent.call(this, pluginName, forms);\n    var listContext = this.context.selectMenu.caller[pluginName];\n    /** rel */\n\n    if (this.options.linkRel.length > 0) {\n      context.relButton = forms.querySelector('.se-anchor-rel-btn');\n      context.relList = forms.querySelector('.se-list-layer');\n      context.relPreview = forms.querySelector('.se-anchor-rel-preview');\n      context.relButton.addEventListener('click', anchorPlugin.onClick_relButton.bind(this, context));\n      context.relList.addEventListener('click', anchorPlugin.onClick_relList.bind(this, context));\n    }\n\n    context.newWindowCheck.addEventListener('change', anchorPlugin.onChange_newWindowCheck.bind(this, context));\n    context.downloadCheck.addEventListener('change', anchorPlugin.onChange_downloadCheck.bind(this, context));\n    context.anchorText.addEventListener('input', anchorPlugin.onChangeAnchorText.bind(this, context));\n    context.urlInput.addEventListener('input', anchorPlugin.onChangeUrlInput.bind(this, context));\n    context.urlInput.addEventListener('keydown', anchorPlugin.onKeyDownUrlInput.bind(this, listContext));\n    context.urlInput.addEventListener('focus', anchorPlugin.onFocusUrlInput.bind(this, context, listContext));\n    context.urlInput.addEventListener('blur', anchorPlugin.onBlurUrlInput.bind(this, listContext));\n    context.bookmarkButton.addEventListener('click', anchorPlugin.onClick_bookmarkButton.bind(this, context));\n  },\n  on: function on(contextAnchor, update) {\n    var anchorPlugin = this.plugins.anchor;\n\n    if (!update) {\n      anchorPlugin.init.call(this, contextAnchor);\n      contextAnchor.anchorText.value = this.getSelection().toString().trim();\n      contextAnchor.newWindowCheck.checked = this.options.linkTargetNewWindow;\n    } else if (contextAnchor.linkAnchor) {\n      this.context.dialog.updateModal = true;\n      var href = this.options.linkNoPrefix ? contextAnchor.linkAnchor.href.replace(contextAnchor.linkAnchor.origin + '/', '') : contextAnchor.linkAnchor.href;\n      contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = anchorPlugin.selfPathBookmark.call(this, href) ? href.substr(href.lastIndexOf('#')) : href;\n      contextAnchor.anchorText.value = contextAnchor.linkAnchor.textContent || contextAnchor.linkAnchor.getAttribute('alt');\n      contextAnchor.newWindowCheck.checked = /_blank/i.test(contextAnchor.linkAnchor.target) ? true : false;\n      contextAnchor.downloadCheck.checked = contextAnchor.linkAnchor.download;\n    }\n\n    this.context.anchor.callerContext = contextAnchor;\n    anchorPlugin.setRel.call(this, contextAnchor, update && contextAnchor.linkAnchor ? contextAnchor.linkAnchor.rel : contextAnchor.defaultRel);\n    anchorPlugin.setLinkPreview.call(this, contextAnchor, contextAnchor.linkValue);\n    this.plugins.selectMenu.on.call(this, contextAnchor.callerName, this.plugins.anchor.setHeaderBookmark);\n  },\n  selfPathBookmark: function selfPathBookmark(path) {\n    var href = this._w.location.href.replace(/\\/$/, '');\n\n    return path.indexOf('#') === 0 || path.indexOf(href) === 0 && path.indexOf('#') === (href.indexOf(\"#\") === -1 ? href.length : href.substr(0, href.indexOf(\"#\")).length);\n  },\n  _closeRelMenu: null,\n  toggleRelList: function toggleRelList(contextAnchor, show) {\n    if (!show) {\n      if (this.plugins.anchor._closeRelMenu) this.plugins.anchor._closeRelMenu();\n    } else {\n      var target = contextAnchor.relButton;\n      var relList = contextAnchor.relList;\n      this.util.addClass(target, 'active');\n      relList.style.visibility = 'hidden';\n      relList.style.display = 'block';\n      if (!this.options.rtl) relList.style.left = target.offsetLeft + target.offsetWidth + 1 + 'px';else relList.style.left = target.offsetLeft - relList.offsetWidth - 1 + 'px';\n      relList.style.top = target.offsetTop + target.offsetHeight / 2 - relList.offsetHeight / 2 + 'px';\n      relList.style.visibility = '';\n\n      this.plugins.anchor._closeRelMenu = function (context, target, e) {\n        if (e && (context.relButton.contains(e.target) || context.relList.contains(e.target))) return;\n        this.util.removeClass(target, 'active');\n        context.relList.style.display = 'none';\n        this.modalForm.removeEventListener('click', this.plugins.anchor._closeRelMenu);\n        this.plugins.anchor._closeRelMenu = null;\n      }.bind(this, contextAnchor, target);\n\n      this.modalForm.addEventListener('click', this.plugins.anchor._closeRelMenu);\n    }\n  },\n  onClick_relButton: function onClick_relButton(contextAnchor, e) {\n    this.plugins.anchor.toggleRelList.call(this, contextAnchor, !this.util.hasClass(e.target, 'active'));\n  },\n  onClick_relList: function onClick_relList(contextAnchor, e) {\n    var target = e.target;\n    var cmd = target.getAttribute('data-command');\n    if (!cmd) return;\n    var current = contextAnchor.currentRel;\n    var checked = this.util.toggleClass(target, 'se-checked');\n    var index = current.indexOf(cmd);\n\n    if (checked) {\n      if (index === -1) current.push(cmd);\n    } else {\n      if (index > -1) current.splice(index, 1);\n    }\n\n    contextAnchor.relPreview.title = contextAnchor.relPreview.textContent = current.join(' ');\n  },\n  setRel: function setRel(contextAnchor, relAttr) {\n    var relListEl = contextAnchor.relList;\n    var rels = contextAnchor.currentRel = !relAttr ? [] : relAttr.split(' ');\n    if (!relListEl) return;\n    var checkedRel = relListEl.querySelectorAll('button');\n\n    for (var i = 0, len = checkedRel.length, cmd; i < len; i++) {\n      cmd = checkedRel[i].getAttribute('data-command');\n\n      if (rels.indexOf(cmd) > -1) {\n        this.util.addClass(checkedRel[i], 'se-checked');\n      } else {\n        this.util.removeClass(checkedRel[i], 'se-checked');\n      }\n    }\n\n    contextAnchor.relPreview.title = contextAnchor.relPreview.textContent = rels.join(' ');\n  },\n  createHeaderList: function createHeaderList(contextAnchor, contextList, urlValue) {\n    var headers = this.util.getListChildren(this.context.element.wysiwyg, function (current) {\n      return /h[1-6]/i.test(current.nodeName);\n    });\n    if (headers.length === 0) return;\n    var valueRegExp = new this._w.RegExp('^' + urlValue.replace(/^#/, ''), 'i');\n    var list = [];\n    var html = '';\n\n    for (var i = 0, len = headers.length, h; i < len; i++) {\n      h = headers[i];\n      if (!valueRegExp.test(h.textContent)) continue;\n      list.push(h);\n      html += '<li class=\"se-select-item\" data-index=\"' + i + '\">' + h.textContent + '</li>';\n    }\n\n    if (list.length === 0) {\n      this.plugins.selectMenu.close.call(this, contextList);\n    } else {\n      this.plugins.selectMenu.createList(contextList, list, html);\n      this.plugins.selectMenu.open.call(this, contextList, this.plugins.anchor._setMenuListPosition.bind(this, contextAnchor));\n    }\n  },\n  _setMenuListPosition: function _setMenuListPosition(contextAnchor, list) {\n    list.style.top = contextAnchor.urlInput.offsetHeight + 1 + 'px';\n  },\n  onKeyDownUrlInput: function onKeyDownUrlInput(contextList, e) {\n    var keyCode = e.keyCode;\n\n    switch (keyCode) {\n      case 38:\n        // up\n        e.preventDefault();\n        e.stopPropagation();\n        this.plugins.selectMenu.moveItem.call(this, contextList, -1);\n        break;\n\n      case 40:\n        // down\n        e.preventDefault();\n        e.stopPropagation();\n        this.plugins.selectMenu.moveItem.call(this, contextList, 1);\n        break;\n\n      case 13:\n        // enter\n        if (contextList.index > -1) {\n          e.preventDefault();\n          e.stopPropagation();\n          this.plugins.anchor.setHeaderBookmark.call(this, this.plugins.selectMenu.getItem(contextList, null));\n        }\n\n        break;\n    }\n  },\n  setHeaderBookmark: function setHeaderBookmark(header) {\n    var contextAnchor = this.context.anchor.callerContext;\n\n    var id = header.id || 'h_' + this._w.Math.random().toString().replace(/.+\\./, '');\n\n    header.id = id;\n    contextAnchor.urlInput.value = '#' + id;\n\n    if (!contextAnchor.anchorText.value.trim() || !contextAnchor._change) {\n      contextAnchor.anchorText.value = header.textContent;\n    }\n\n    this.plugins.anchor.setLinkPreview.call(this, contextAnchor, contextAnchor.urlInput.value);\n    this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);\n    this.context.anchor.callerContext.urlInput.focus();\n  },\n  onChangeAnchorText: function onChangeAnchorText(contextAnchor, e) {\n    contextAnchor._change = !!e.target.value.trim();\n  },\n  onChangeUrlInput: function onChangeUrlInput(contextAnchor, e) {\n    var value = e.target.value.trim();\n    this.plugins.anchor.setLinkPreview.call(this, contextAnchor, value);\n    if (this.plugins.anchor.selfPathBookmark.call(this, value)) this.plugins.anchor.createHeaderList.call(this, contextAnchor, this.context.selectMenu.callerContext, value);else this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);\n  },\n  onFocusUrlInput: function onFocusUrlInput(contextAnchor, contextLink) {\n    var value = contextAnchor.urlInput.value;\n    if (this.plugins.anchor.selfPathBookmark.call(this, value)) this.plugins.anchor.createHeaderList.call(this, contextAnchor, contextLink, value);\n  },\n  onBlurUrlInput: function onBlurUrlInput(contextList) {\n    this.plugins.selectMenu.close.call(this, contextList);\n  },\n  setLinkPreview: function setLinkPreview(context, value) {\n    var preview = context.preview;\n    var protocol = this.options.linkProtocol;\n    var noPrefix = this.options.linkNoPrefix;\n    var reservedProtocol = /^(mailto\\:|tel\\:|sms\\:|https*\\:\\/\\/|#)/.test(value);\n    var sameProtocol = !protocol ? false : this._w.RegExp('^' + value.substr(0, protocol.length)).test(protocol);\n    value = context.linkValue = preview.textContent = !value ? '' : noPrefix ? value : protocol && !reservedProtocol && !sameProtocol ? protocol + value : reservedProtocol ? value : /^www\\./.test(value) ? 'http://' + value : this.context.anchor.host + (/^\\//.test(value) ? '' : '/') + value;\n\n    if (this.plugins.anchor.selfPathBookmark.call(this, value)) {\n      context.bookmark.style.display = 'block';\n      this.util.addClass(context.bookmarkButton, 'active');\n    } else {\n      context.bookmark.style.display = 'none';\n      this.util.removeClass(context.bookmarkButton, 'active');\n    }\n\n    if (!this.plugins.anchor.selfPathBookmark.call(this, value) && context.downloadCheck.checked) {\n      context.download.style.display = 'block';\n    } else {\n      context.download.style.display = 'none';\n    }\n  },\n  setCtx: function setCtx(anchor, contextAnchor) {\n    if (!anchor) return;\n    contextAnchor.linkAnchor = anchor;\n    contextAnchor.linkValue = anchor.href;\n    contextAnchor.currentRel = anchor.rel.split(\" \");\n  },\n  updateAnchor: function updateAnchor(anchor, url, alt, contextAnchor, notText) {\n    // download\n    if (!this.plugins.anchor.selfPathBookmark.call(this, url) && contextAnchor.downloadCheck.checked) {\n      anchor.setAttribute('download', alt || url);\n    } else {\n      anchor.removeAttribute('download');\n    } // new window\n\n\n    if (contextAnchor.newWindowCheck.checked) anchor.target = '_blank';else anchor.removeAttribute('target'); // rel\n\n    var rel = contextAnchor.currentRel.join(' ');\n    if (!rel) anchor.removeAttribute('rel');else anchor.rel = rel; // est url, alt\n\n    anchor.href = url;\n    anchor.setAttribute('alt', alt);\n\n    if (notText) {\n      if (anchor.children.length === 0) anchor.textContent = '';\n    } else {\n      anchor.textContent = alt;\n    }\n  },\n  createAnchor: function createAnchor(contextAnchor, notText) {\n    if (contextAnchor.linkValue.length === 0) return null;\n    var url = contextAnchor.linkValue;\n    var anchor = contextAnchor.anchorText;\n    var anchorText = anchor.value.length === 0 ? url : anchor.value;\n    var oA = contextAnchor.linkAnchor || this.util.createElement('A');\n    this.plugins.anchor.updateAnchor.call(this, oA, url, anchorText, contextAnchor, notText);\n    contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = contextAnchor.anchorText.value = '';\n    return oA;\n  },\n  onClick_bookmarkButton: function onClick_bookmarkButton(contextAnchor) {\n    var url = contextAnchor.urlInput.value;\n\n    if (this.plugins.anchor.selfPathBookmark.call(this, url)) {\n      url = url.substr(1);\n      contextAnchor.bookmark.style.display = 'none';\n      this.util.removeClass(contextAnchor.bookmarkButton, 'active');\n      this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);\n    } else {\n      url = '#' + url;\n      contextAnchor.bookmark.style.display = 'block';\n      this.util.addClass(contextAnchor.bookmarkButton, 'active');\n      contextAnchor.downloadCheck.checked = false;\n      contextAnchor.download.style.display = 'none';\n      this.plugins.anchor.createHeaderList.call(this, contextAnchor, this.context.selectMenu.callerContext, url);\n    }\n\n    contextAnchor.urlInput.value = url;\n    this.plugins.anchor.setLinkPreview.call(this, contextAnchor, url);\n    contextAnchor.urlInput.focus();\n  },\n  onChange_newWindowCheck: function onChange_newWindowCheck(contextAnchor, e) {\n    if (typeof contextAnchor.linkDefaultRel.check_new_window !== 'string') return;\n\n    if (e.target.checked) {\n      this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relMerge.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_new_window));\n    } else {\n      this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relDelete.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_new_window));\n    }\n  },\n  onChange_downloadCheck: function onChange_downloadCheck(contextAnchor, e) {\n    if (e.target.checked) {\n      contextAnchor.download.style.display = 'block';\n      contextAnchor.bookmark.style.display = 'none';\n      this.util.removeClass(contextAnchor.bookmarkButton, 'active');\n      contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = contextAnchor.urlInput.value.replace(/^\\#+/, '');\n\n      if (typeof contextAnchor.linkDefaultRel.check_bookmark === 'string') {\n        this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relMerge.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_bookmark));\n      }\n    } else {\n      contextAnchor.download.style.display = 'none';\n\n      if (typeof contextAnchor.linkDefaultRel.check_bookmark === 'string') {\n        this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relDelete.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_bookmark));\n      }\n    }\n  },\n  _relMerge: function _relMerge(contextAnchor, relAttr) {\n    var current = contextAnchor.currentRel;\n    if (!relAttr) return current.join(' ');\n\n    if (/^only\\:/.test(relAttr)) {\n      relAttr = relAttr.replace(/^only\\:/, '').trim();\n      contextAnchor.currentRel = relAttr.split(' ');\n      return relAttr;\n    }\n\n    var rels = relAttr.split(' ');\n\n    for (var i = 0, len = rels.length, index; i < len; i++) {\n      index = current.indexOf(rels[i]);\n      if (index === -1) current.push(rels[i]);\n    }\n\n    return current.join(' ');\n  },\n  _relDelete: function _relDelete(contextAnchor, relAttr) {\n    if (!relAttr) return contextAnchor.currentRel.join(' ');\n    if (/^only\\:/.test(relAttr)) relAttr = relAttr.replace(/^only\\:/, '').trim();\n    var rels = contextAnchor.currentRel.join(' ').replace(this._w.RegExp(relAttr + '\\\\s*'), '');\n    contextAnchor.currentRel = rels.split(' ');\n    return rels;\n  },\n  init: function init(contextAnchor) {\n    contextAnchor.linkAnchor = null;\n    contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = '';\n    contextAnchor.anchorText.value = '';\n    contextAnchor.newWindowCheck.checked = false;\n    contextAnchor.downloadCheck.checked = false;\n    contextAnchor._change = false;\n    this.plugins.anchor.setRel.call(this, contextAnchor, contextAnchor.defaultRel);\n\n    if (contextAnchor.relList) {\n      this.plugins.anchor.toggleRelList.call(this, contextAnchor, false);\n    }\n\n    this.context.anchor.callerContext = null;\n    this.plugins.selectMenu.init.call(this, this.context.selectMenu.callerContext);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}