{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugin\n */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * The base class for CKEditor plugin classes.\n *\n * @implements module:core/plugin~PluginInterface\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nvar Plugin = /*#__PURE__*/function () {\n  /**\n   * @inheritDoc\n   */\n  function Plugin(editor) {\n    _classCallCheck(this, Plugin);\n\n    /**\n     * The editor instance.\n     *\n     * Note that most editors implement the {@link module:core/editor/editorwithui~EditorWithUI} interface in addition\n     * to the base {@link module:core/editor/editor~Editor} interface. However, editors with an external UI\n     * (i.e. Bootstrap-based) or a headless editor may not implement the {@link module:core/editor/editorwithui~EditorWithUI}\n     * interface.\n     *\n     * Because of above, to make plugins more universal, it is recommended to split features into:\n     *  - The \"editing\" part that only uses the {@link module:core/editor/editor~Editor} interface.\n     *  - The \"UI\" part that uses both the {@link module:core/editor/editor~Editor} interface and\n     *  the {@link module:core/editor/editorwithui~EditorWithUI} interface.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor} #editor\n     */\n    this.editor = editor;\n    /**\n     * Flag indicating whether a plugin is enabled or disabled.\n     * A disabled plugin will not transform text.\n     *\n     * Plugin can be simply disabled like that:\n     *\n     *\t\t// Disable the plugin so that no toolbars are visible.\n     *\t\teditor.plugins.get( 'TextTransformation' ).isEnabled = false;\n     *\n     * You can also use {@link #forceDisabled} method.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #isEnabled\n     */\n\n    this.set('isEnabled', true);\n    /**\n     * Holds identifiers for {@link #forceDisabled} mechanism.\n     *\n     * @type {Set.<String>}\n     * @private\n     */\n\n    this._disableStack = new Set();\n  }\n  /**\n   * Disables the plugin.\n   *\n   * Plugin may be disabled by multiple features or algorithms (at once). When disabling a plugin, unique id should be passed\n   * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the plugin.\n   * The plugin becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n   *\n   * Disabling and enabling a plugin:\n   *\n   *\t\tplugin.isEnabled; // -> true\n   *\t\tplugin.forceDisabled( 'MyFeature' );\n   *\t\tplugin.isEnabled; // -> false\n   *\t\tplugin.clearForceDisabled( 'MyFeature' );\n   *\t\tplugin.isEnabled; // -> true\n   *\n   * Plugin disabled by multiple features:\n   *\n   *\t\tplugin.forceDisabled( 'MyFeature' );\n   *\t\tplugin.forceDisabled( 'OtherFeature' );\n   *\t\tplugin.clearForceDisabled( 'MyFeature' );\n   *\t\tplugin.isEnabled; // -> false\n   *\t\tplugin.clearForceDisabled( 'OtherFeature' );\n   *\t\tplugin.isEnabled; // -> true\n   *\n   * Multiple disabling with the same identifier is redundant:\n   *\n   *\t\tplugin.forceDisabled( 'MyFeature' );\n   *\t\tplugin.forceDisabled( 'MyFeature' );\n   *\t\tplugin.clearForceDisabled( 'MyFeature' );\n   *\t\tplugin.isEnabled; // -> true\n   *\n   * **Note:** some plugins or algorithms may have more complex logic when it comes to enabling or disabling certain plugins,\n   * so the plugin might be still disabled after {@link #clearForceDisabled} was used.\n   *\n   * @param {String} id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the plugin.\n   */\n\n\n  _createClass(Plugin, [{\n    key: \"forceDisabled\",\n    value: function forceDisabled(id) {\n      this._disableStack.add(id);\n\n      if (this._disableStack.size == 1) {\n        this.on('set:isEnabled', forceDisable, {\n          priority: 'highest'\n        });\n        this.isEnabled = false;\n      }\n    }\n    /**\n     * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n     *\n     * @param {String} id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n     */\n\n  }, {\n    key: \"clearForceDisabled\",\n    value: function clearForceDisabled(id) {\n      this._disableStack.delete(id);\n\n      if (this._disableStack.size == 0) {\n        this.off('set:isEnabled', forceDisable);\n        this.isEnabled = true;\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.stopListening();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }], [{\n    key: \"isContextPlugin\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return Plugin;\n}();\n\nexport { Plugin as default };\nmix(Plugin, ObservableMixin);\n/**\n * The base interface for CKEditor plugins.\n *\n * In its minimal form a plugin can be a simple function that accepts {@link module:core/editor/editor~Editor the editor}\n * as a parameter:\n *\n *\t\t// A simple plugin that enables a data processor.\n *\t\tfunction MyPlugin( editor ) {\n *\t\t\teditor.data.processor = new MyDataProcessor();\n *\t\t}\n *\n * In most cases however, you will want to inherit from the {@link module:core/plugin~Plugin} class which implements the\n * {@link module:utils/observablemixin~ObservableMixin} and is, therefore, more convenient:\n *\n *\t\tclass MyPlugin extends Plugin {\n *\t\t\tinit() {\n *\t\t\t\t// `listenTo()` and `editor` are available thanks to `Plugin`.\n *\t\t\t\t// By using `listenTo()` you will ensure that the listener is removed when\n *\t\t\t\t// the plugin is destroyed.\n *\t\t\t\tthis.listenTo( this.editor.data, 'ready', () => {\n *\t\t\t\t\t// Do something when the data is ready.\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n * The plugin can also implement methods (e.g. {@link module:core/plugin~PluginInterface#init `init()`} or\n * {@link module:core/plugin~PluginInterface#destroy `destroy()`}) which, when present, will be used to properly\n * initialize and destroy the plugin.\n *\n * **Note:** When defined as a plain function, the plugin acts as a constructor and will be\n * called in parallel with other plugins' {@link module:core/plugin~PluginInterface#constructor constructors}.\n * This means the code of that plugin will be executed **before** {@link module:core/plugin~PluginInterface#init `init()`} and\n * {@link module:core/plugin~PluginInterface#afterInit `afterInit()`} methods of other plugins and, for instance,\n * you cannot use it to extend other plugins' {@glink framework/guides/architecture/editing-engine#schema schema}\n * rules as they are defined later on during the `init()` stage.\n *\n * @interface PluginInterface\n */\n\n/**\n * Creates a new plugin instance. This is the first step of the plugin initialization.\n * See also {@link #init} and {@link #afterInit}.\n *\n * A plugin is always instantiated after its {@link module:core/plugin~PluginInterface.requires dependencies} and the\n * {@link #init} and {@link #afterInit} methods are called in the same order.\n *\n * Usually, you will want to put your plugin's initialization code in the {@link #init} method.\n * The constructor can be understood as \"before init\" and used in special cases, just like\n * {@link #afterInit} serves the special \"after init\" scenarios (e.g.the code which depends on other\n * plugins, but which does not {@link module:core/plugin~PluginInterface.requires explicitly require} them).\n *\n * @method #constructor\n * @param {module:core/editor/editor~Editor} editor\n */\n\n/**\n * An array of plugins required by this plugin.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\timport Image from './image.js';\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ Image ];\n *\t\t\t}\n *\t\t}\n *\n * @static\n * @readonly\n * @member {Array.<Function>|undefined} module:core/plugin~PluginInterface.requires\n */\n\n/**\n * An optional name of the plugin. If set, the plugin will be available in\n * {@link module:core/plugincollection~PluginCollection#get} by its\n * name and its constructor. If not, then only by its constructor.\n *\n * The name should reflect the constructor name.\n *\n * To keep the plugin class definition tight, it is recommended to define this property as a static getter:\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get pluginName() {\n *\t\t\t\treturn 'ImageCaption';\n *\t\t\t}\n *\t\t}\n *\n * Note: The native `Function.name` property could not be used to keep the plugin name because\n * it will be mangled during code minification.\n *\n * Naming a plugin is necessary to enable removing it through the\n * {@link module:core/editor/editorconfig~EditorConfig#removePlugins `config.removePlugins`} option.\n *\n * @static\n * @readonly\n * @member {String|undefined} module:core/plugin~PluginInterface.pluginName\n */\n\n/**\n * The second stage (after plugin {@link #constructor}) of the plugin initialization.\n * Unlike the plugin constructor this method can be asynchronous.\n *\n * A plugin's `init()` method is called after its {@link module:core/plugin~PluginInterface.requires dependencies} are initialized,\n * so in the same order as the constructors of these plugins.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #init\n * @returns {null|Promise}\n */\n\n/**\n * The third (and last) stage of the plugin initialization. See also {@link #constructor} and {@link #init}.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #afterInit\n * @returns {null|Promise}\n */\n\n/**\n * Destroys the plugin.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #destroy\n * @returns {null|Promise}\n */\n\n/**\n * A flag which defines if a plugin is allowed or not allowed to be used directly by a {@link module:core/context~Context}.\n *\n * @static\n * @readonly\n * @member {Boolean} module:core/plugin~PluginInterface.isContextPlugin\n */\n\n/**\n * An array of loaded plugins.\n *\n * @typedef {Array.<module:core/plugin~PluginInterface>} module:core/plugin~LoadedPlugins\n */\n// Helper function that forces plugin to be disabled.\n\nfunction forceDisable(evt) {\n  evt.return = false;\n  evt.stop();\n}","map":null,"metadata":{},"sourceType":"module"}