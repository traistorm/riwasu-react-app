{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageinsert/utils\n */\nimport { LabeledFieldView, createLabeledInputText } from 'ckeditor5/src/ui';\n/**\n * Creates integrations object that will be passed to the\n * {@link module:image/imageinsert/ui/imageinsertpanelview~ImageInsertPanelView}.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n *\n * @returns {Object.<String, module:ui/view~View>} Integrations object.\n */\n\nexport function prepareIntegrations(editor) {\n  var panelItems = editor.config.get('image.insert.integrations');\n  var imageInsertUIPlugin = editor.plugins.get('ImageInsertUI');\n  var PREDEFINED_INTEGRATIONS = {\n    'insertImageViaUrl': createLabeledInputView(editor.locale)\n  };\n\n  if (!panelItems) {\n    return PREDEFINED_INTEGRATIONS;\n  } // Prepares ckfinder component for the `openCKFinder` integration token.\n\n\n  if (panelItems.find(function (item) {\n    return item === 'openCKFinder';\n  }) && editor.ui.componentFactory.has('ckfinder')) {\n    var ckFinderButton = editor.ui.componentFactory.create('ckfinder');\n    ckFinderButton.set({\n      withText: true,\n      class: 'ck-image-insert__ck-finder-button'\n    }); // We want to close the dropdown panel view when user clicks the ckFinderButton.\n\n    ckFinderButton.delegate('execute').to(imageInsertUIPlugin, 'cancel');\n    PREDEFINED_INTEGRATIONS.openCKFinder = ckFinderButton;\n  } // Creates integrations object of valid views to pass it to the ImageInsertPanelView.\n\n\n  return panelItems.reduce(function (object, key) {\n    if (PREDEFINED_INTEGRATIONS[key]) {\n      object[key] = PREDEFINED_INTEGRATIONS[key];\n    } else if (editor.ui.componentFactory.has(key)) {\n      object[key] = editor.ui.componentFactory.create(key);\n    }\n\n    return object;\n  }, {});\n}\n/**\n * Creates labeled field view.\n *\n * @param {module:utils/locale~Locale} locale The localization services instance.\n *\n * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n */\n\nexport function createLabeledInputView(locale) {\n  var t = locale.t;\n  var labeledInputView = new LabeledFieldView(locale, createLabeledInputText);\n  labeledInputView.set({\n    label: t('Insert image via URL')\n  });\n  labeledInputView.fieldView.placeholder = 'https://example.com/image.png';\n  return labeledInputView;\n}","map":null,"metadata":{},"sourceType":"module"}