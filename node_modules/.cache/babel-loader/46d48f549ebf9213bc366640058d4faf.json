{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/notification/notification\n */\n\n/* globals window */\nimport ContextPlugin from '@ckeditor/ckeditor5-core/src/contextplugin';\n/**\n * The Notification plugin.\n *\n * This plugin sends a few types of notifications: `success`, `info` and `warning`. The notifications need to be\n * handled and displayed by a plugin responsible for showing the UI of the notifications. Using this plugin for dispatching\n * notifications makes it possible to switch the notifications UI.\n *\n * Note that every unhandled and not stopped `warning` notification will be displayed as a system alert.\n * See {@link module:ui/notification/notification~Notification#showWarning}.\n *\n * @extends module:core/contextplugin~ContextPlugin\n */\n\nvar Notification = /*#__PURE__*/function (_ContextPlugin) {\n  _inherits(Notification, _ContextPlugin);\n\n  function Notification() {\n    _classCallCheck(this, Notification);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Notification).apply(this, arguments));\n  }\n\n  _createClass(Notification, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      // Each unhandled and not stopped `show:warning` event is displayed as a system alert.\n      this.on('show:warning', function (evt, data) {\n        window.alert(data.message); // eslint-disable-line no-alert\n      }, {\n        priority: 'lowest'\n      });\n    }\n    /**\n     * Shows a success notification.\n     *\n     * By default, it fires the {@link #event:show:success `show:success` event} with the given `data`. The event namespace can be extended\n     * using the `data.namespace` option. For example:\n     *\n     * \t\tshowSuccess( 'Image is uploaded.', {\n     * \t\t\tnamespace: 'upload:image'\n     * \t\t} );\n     *\n     * will fire the `show:success:upload:image` event.\n     *\n     * You can provide the title of the notification:\n     *\n     *\t\tshowSuccess( 'Image is uploaded.', {\n     *\t\t\ttitle: 'Image upload success'\n     *\t\t} );\n     *\n     * @param {String} message The content of the notification.\n     * @param {Object} [data={}] Additional data.\n     * @param {String} [data.namespace] Additional event namespace.\n     * @param {String} [data.title] The title of the notification.\n     */\n\n  }, {\n    key: \"showSuccess\",\n    value: function showSuccess(message) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._showNotification({\n        message: message,\n        type: 'success',\n        namespace: data.namespace,\n        title: data.title\n      });\n    }\n    /**\n     * Shows an information notification.\n     *\n     * By default, it fires the {@link #event:show:info `show:info` event} with the given `data`. The event namespace can be extended\n     * using the `data.namespace` option. For example:\n     *\n     * \t\tshowInfo( 'Editor is offline.', {\n     * \t\t\tnamespace: 'editor:status'\n     * \t\t} );\n     *\n     * will fire the `show:info:editor:status` event.\n     *\n     * You can provide the title of the notification:\n     *\n     *\t\tshowInfo( 'Editor is offline.', {\n     *\t\t\ttitle: 'Network information'\n     *\t\t} );\n     *\n     * @param {String} message The content of the notification.\n     * @param {Object} [data={}] Additional data.\n     * @param {String} [data.namespace] Additional event namespace.\n     * @param {String} [data.title] The title of the notification.\n     */\n\n  }, {\n    key: \"showInfo\",\n    value: function showInfo(message) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._showNotification({\n        message: message,\n        type: 'info',\n        namespace: data.namespace,\n        title: data.title\n      });\n    }\n    /**\n     * Shows a warning notification.\n     *\n     * By default, it fires the {@link #event:show:warning `show:warning` event}\n     * with the given `data`. The event namespace can be extended using the `data.namespace` option. For example:\n     *\n     * \t\tshowWarning( 'Image upload error.', {\n     * \t\t\tnamespace: 'upload:image'\n     * \t\t} );\n     *\n     * will fire the `show:warning:upload:image` event.\n     *\n     * You can provide the title of the notification:\n     *\n     *\t\tshowWarning( 'Image upload error.', {\n     *\t\t\ttitle: 'Upload failed'\n     *\t\t} );\n     *\n     * Note that each unhandled and not stopped `warning` notification will be displayed as a system alert.\n     * The plugin responsible for displaying warnings should `stop()` the event to prevent displaying it as an alert:\n     *\n     * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n     * \t\t\t// Do something with the data.\n     *\n     * \t\t\t// Stop this event to prevent displaying it as an alert.\n     * \t\t\tevt.stop();\n     * \t\t} );\n     *\n     * You can attach many listeners to the same event and `stop()` this event in a listener with a low priority:\n     *\n     * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n     * \t\t\t// Show the warning in the UI, but do not stop it.\n     * \t\t} );\n     *\n     * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n     * \t\t\t// Log the warning to some error tracker.\n     *\n     * \t\t\t// Stop this event to prevent displaying it as an alert.\n     * \t\t\tevt.stop();\n     * \t\t}, { priority: 'low' } );\n     *\n     * @param {String} message The content of the notification.\n     * @param {Object} [data={}] Additional data.\n     * @param {String} [data.namespace] Additional event namespace.\n     * @param {String} [data.title] The title of the notification.\n     */\n\n  }, {\n    key: \"showWarning\",\n    value: function showWarning(message) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._showNotification({\n        message: message,\n        type: 'warning',\n        namespace: data.namespace,\n        title: data.title\n      });\n    }\n    /**\n     * Fires the `show` event with the specified type, namespace and message.\n     *\n     * @private\n     * @param {Object} data The message data.\n     * @param {String} data.message The content of the notification.\n     * @param {'success'|'info'|'warning'} data.type The type of the message.\n     * @param {String} [data.namespace] Additional event namespace.\n     * @param {String} [data.title=''] The title of the notification.\n     */\n\n  }, {\n    key: \"_showNotification\",\n    value: function _showNotification(data) {\n      var event = \"show:\".concat(data.type) + (data.namespace ? \":\".concat(data.namespace) : '');\n      this.fire(event, {\n        message: data.message,\n        type: data.type,\n        title: data.title || ''\n      });\n    }\n    /**\n     * Fired when one of the `showSuccess()`, `showInfo()`, `showWarning()` methods is called.\n     *\n     * @event show\n     * @param {Object} data The notification data.\n     * @param {String} data.message The content of the notification.\n     * @param {String} data.title The title of the notification.\n     * @param {'success'|'info'|'warning'} data.type The type of the notification.\n     */\n\n    /**\n     * Fired when the `showSuccess()` method is called.\n     *\n     * @event show:success\n     * @param {Object} data The notification data.\n     * @param {String} data.message The content of the notification.\n     * @param {String} data.title The title of the notification.\n     * @param {'success'} data.type The type of the notification.\n     */\n\n    /**\n     * Fired when the `showInfo()` method is called.\n     *\n     * @event show:info\n     * @param {Object} data The notification data.\n     * @param {String} data.message The content of the notification.\n     * @param {String} data.title The title of the notification.\n     * @param {'info'} data.type The type of the notification.\n     */\n\n    /**\n     * Fired when the `showWarning()` method is called.\n     *\n     * When this event is not handled or stopped by `event.stop()`, the `data.message` of this event will\n     * be automatically displayed as a system alert.\n     *\n     * @event show:warning\n     * @param {Object} data The notification data.\n     * @param {String} data.message The content of the notification.\n     * @param {String} data.title The title of the notification.\n     * @param {'warning'} data.type The type of the notification.\n     */\n\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'Notification';\n    }\n  }]);\n\n  return Notification;\n}(ContextPlugin);\n\nexport { Notification as default };","map":null,"metadata":{},"sourceType":"module"}