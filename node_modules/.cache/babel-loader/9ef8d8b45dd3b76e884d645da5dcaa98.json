{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module select-all/selectallcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n/**\n * The select all command.\n *\n * It is used by the {@link module:select-all/selectallediting~SelectAllEditing select all editing feature} to handle\n * the <kbd>Ctrl/âŒ˜</kbd>+<kbd>A</kbd> keystroke.\n *\n * Executing this command changes the {@glink framework/guides/architecture/editing-engine#model model}\n * selection so it contains the entire content of the editable root of the editor the selection is\n * {@link module:engine/model/selection~Selection#anchor anchored} in.\n *\n * If the selection was anchored in a {@glink framework/guides/tutorials/implementing-a-block-widget nested editable}\n * (e.g. a caption of an image), the new selection will contain its entire content. Successive executions of this command\n * will expand the selection to encompass more and more content up to the entire editable root of the editor.\n *\n * @extends module:core/command~Command\n */\n\nvar SelectAllCommand = /*#__PURE__*/function (_Command) {\n  _inherits(SelectAllCommand, _Command);\n\n  /**\n   * @inheritDoc\n   */\n  function SelectAllCommand(editor) {\n    var _this;\n\n    _classCallCheck(this, SelectAllCommand);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectAllCommand).call(this, editor)); // It does not affect data so should be enabled in read-only mode.\n\n    _this.affectsData = false;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(SelectAllCommand, [{\n    key: \"execute\",\n    value: function execute() {\n      var model = this.editor.model;\n      var selection = model.document.selection;\n      var scopeElement = model.schema.getLimitElement(selection); // If an entire scope is selected, or the selection's ancestor is not a scope yet,\n      // browse through ancestors to find the enclosing parent scope.\n\n      if (selection.containsEntireContent(scopeElement) || !isSelectAllScope(model.schema, scopeElement)) {\n        do {\n          scopeElement = scopeElement.parent; // Do nothing, if the entire `root` is already selected.\n\n          if (!scopeElement) {\n            return;\n          }\n        } while (!isSelectAllScope(model.schema, scopeElement));\n      }\n\n      model.change(function (writer) {\n        writer.setSelection(scopeElement, 'in');\n      });\n    }\n  }]);\n\n  return SelectAllCommand;\n}(Command); // Checks whether the element is a valid select-all scope.\n// Returns true, if the element is a {@link module:engine/model/schema~Schema#isLimit limit},\n// and can contain any text or paragraph.\n//\n// @param {module:engine/model/schema~Schema} schema The schema to check against.\n// @param {module:engine/model/element~Element} element\n// @return {Boolean}\n\n\nexport { SelectAllCommand as default };\n\nfunction isSelectAllScope(schema, element) {\n  return schema.isLimit(element) && (schema.checkChild(element, '$text') || schema.checkChild(element, 'paragraph'));\n}","map":null,"metadata":{},"sourceType":"module"}