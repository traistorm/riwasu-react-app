{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport React, { useCallback, useContext } from 'react';\nimport isNil from 'lodash/isNil';\nimport omit from 'lodash/omit';\nimport { createChainedFunction, useClassNames } from '../utils';\nimport { SidenavContext } from './Sidenav';\nimport useCustom from '../utils/useCustom';\nimport AngleLeft from '@rsuite/icons/legacy/AngleLeft';\nimport AngleRight from '@rsuite/icons/legacy/AngleRight';\nimport PropTypes from 'prop-types';\nimport SidenavDropdownCollapse from './SidenavDropdownCollapse';\nimport Ripple from '../Ripple';\nimport Disclosure from '../Disclosure/Disclosure';\n/**\n * Tree View Node\n * @see https://www.w3.org/TR/wai-aria-practices-1.2/#TreeView\n */\n\nvar SidenavDropdownMenu = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'li' : _props$as,\n      children = props.children,\n      disabled = props.disabled,\n      className = props.className,\n      style = props.style,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'dropdown-item' : _props$classPrefix,\n      tabIndex = props.tabIndex,\n      icon = props.icon,\n      title = props.title,\n      eventKey = props.eventKey,\n      onClick = props.onClick,\n      onSelect = props.onSelect,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"children\", \"disabled\", \"className\", \"style\", \"classPrefix\", \"tabIndex\", \"icon\", \"title\", \"eventKey\", \"onClick\", \"onSelect\"]);\n\n  var _useCustom = useCustom('DropdownMenu'),\n      rtl = _useCustom.rtl;\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      withClassPrefix = _useClassNames.withClassPrefix,\n      prefix = _useClassNames.prefix;\n\n  var sidenavContext = useContext(SidenavContext);\n\n  if (!sidenavContext) {\n    throw new Error('<SidenavDropdownMenu> component is not supposed to be used standalone. Use <Dropdown.Item> inside <Sidenav> instead.');\n  }\n\n  var _sidenavContext$openK = sidenavContext.openKeys,\n      openKeys = _sidenavContext$openK === void 0 ? [] : _sidenavContext$openK,\n      onOpenChange = sidenavContext.onOpenChange,\n      onSidenavSelect = sidenavContext.onSelect;\n  var handleClick = useCallback(function (event) {\n    if (disabled) return;\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n    onSidenavSelect === null || onSidenavSelect === void 0 ? void 0 : onSidenavSelect(eventKey, event);\n  }, [disabled, onSelect, onSidenavSelect, eventKey]);\n  var menuitemEventHandlers = {\n    onClick: createChainedFunction(handleClick, onClick)\n  };\n  var Icon = rtl ? AngleLeft : AngleRight;\n  return /*#__PURE__*/React.createElement(Disclosure, {\n    open: !isNil(eventKey) && openKeys.includes(eventKey),\n    onToggle: function onToggle(_, event) {\n      return onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(eventKey, event);\n    }\n  }, function (_ref) {\n    var open = _ref.open;\n    var classes = merge(className, prefix('submenu'), prefix(\"pull-\" + (rtl ? 'left' : 'right')), prefix(open ? 'expand' : 'collapse'), withClassPrefix({\n      'with-icon': icon,\n      // open,\n      disabled: disabled\n    }));\n    return /*#__PURE__*/React.createElement(Component, _extends({\n      ref: ref\n    }, rest, {\n      tabIndex: disabled ? -1 : tabIndex,\n      style: style,\n      className: classes\n    }, menuitemEventHandlers), /*#__PURE__*/React.createElement(Disclosure.Button, null, function (buttonProps) {\n      return /*#__PURE__*/React.createElement(\"button\", _extends({\n        className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"toggle\"]))),\n        onClick: handleClick\n      }, omit(buttonProps, ['open'])), icon && /*#__PURE__*/React.cloneElement(icon, {\n        className: prefix('menu-icon')\n      }), title, /*#__PURE__*/React.createElement(Icon, {\n        className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"toggle-icon\"])))\n      }), /*#__PURE__*/React.createElement(Ripple, null));\n    }), /*#__PURE__*/React.createElement(Disclosure.Content, null, function (_ref2) {\n      var open = _ref2.open;\n      return /*#__PURE__*/React.createElement(SidenavDropdownCollapse, {\n        open: open\n      }, children);\n    }));\n  });\n});\nSidenavDropdownMenu.displayName = 'Sidenav.Dropdown.Menu';\nSidenavDropdownMenu.propTypes = {\n  as: PropTypes.elementType,\n  expanded: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onClick: PropTypes.func,\n  icon: PropTypes.node,\n  eventKey: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  tabIndex: PropTypes.number,\n  title: PropTypes.node,\n  onMouseOver: PropTypes.func,\n  onMouseOut: PropTypes.func\n};\nexport default SidenavDropdownMenu;","map":null,"metadata":{},"sourceType":"module"}