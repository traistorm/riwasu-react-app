{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativecommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The image text alternative command. It is used to change the `alt` attribute of `<imageBlock>` and `<imageInline>` model elements.\n *\n * @extends module:core/command~Command\n */\n\nvar ImageTextAlternativeCommand = /*#__PURE__*/function (_Command) {\n  _inherits(ImageTextAlternativeCommand, _Command);\n\n  function ImageTextAlternativeCommand() {\n    _classCallCheck(this, ImageTextAlternativeCommand);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageTextAlternativeCommand).apply(this, arguments));\n  }\n\n  _createClass(ImageTextAlternativeCommand, [{\n    key: \"refresh\",\n\n    /**\n     * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n     *\n     * @readonly\n     * @observable\n     * @member {String|Boolean} #value\n     */\n\n    /**\n     * @inheritDoc\n     */\n    value: function refresh() {\n      var editor = this.editor;\n      var imageUtils = editor.plugins.get('ImageUtils');\n      var element = imageUtils.getClosestSelectedImageElement(this.editor.model.document.selection);\n      this.isEnabled = !!element;\n\n      if (this.isEnabled && element.hasAttribute('alt')) {\n        this.value = element.getAttribute('alt');\n      } else {\n        this.value = false;\n      }\n    }\n    /**\n     * Executes the command.\n     *\n     * @fires execute\n     * @param {Object} options\n     * @param {String} options.newValue The new value of the `alt` attribute to set.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(options) {\n      var editor = this.editor;\n      var imageUtils = editor.plugins.get('ImageUtils');\n      var model = editor.model;\n      var imageElement = imageUtils.getClosestSelectedImageElement(model.document.selection);\n      model.change(function (writer) {\n        writer.setAttribute('alt', options.newValue, imageElement);\n      });\n    }\n  }]);\n\n  return ImageTextAlternativeCommand;\n}(Command);\n\nexport { ImageTextAlternativeCommand as default };","map":null,"metadata":{},"sourceType":"module"}