{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'font',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    var context = core.context;\n    context.font = {\n      targetText: targetElement.querySelector('.txt'),\n      targetTooltip: targetElement.parentNode.querySelector('.se-tooltip-text'),\n      _fontList: null,\n      currentFont: ''\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    /** add event listeners */\n\n    listDiv.querySelector('.se-list-inner').addEventListener('click', this.pickup.bind(core));\n    context.font._fontList = listDiv.querySelectorAll('ul li button');\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** empty memory */\n\n    listDiv = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var option = core.options;\n    var lang = core.lang;\n    var listDiv = core.util.createElement('DIV');\n    listDiv.className = 'se-submenu se-list-layer se-list-font-family';\n    var font, text, i, len;\n    var fontList = !option.font ? ['Arial', 'Comic Sans MS', 'Courier New', 'Impact', 'Georgia', 'tahoma', 'Trebuchet MS', 'Verdana'] : option.font;\n    var list = '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"default_value se-btn-list\" title=\"' + lang.toolbar.default + '\" aria-label=\"' + lang.toolbar.default + '\">(' + lang.toolbar.default + ')</button></li>';\n\n    for (i = 0, len = fontList.length; i < len; i++) {\n      font = fontList[i];\n      text = font.split(',')[0];\n      list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + font + '\" data-txt=\"' + text + '\" title=\"' + text + '\" aria-label=\"' + text + '\" style=\"font-family:' + font + ';\">' + text + '</button></li>';\n    }\n\n    list += '</ul></div>';\n    listDiv.innerHTML = list;\n    return listDiv;\n  },\n\n  /**\n  * @Override core\n  */\n  active: function active(element) {\n    var target = this.context.font.targetText;\n    var tooltip = this.context.font.targetTooltip;\n\n    if (!element) {\n      var font = this.hasFocus ? this.wwComputedStyle.fontFamily : this.lang.toolbar.font;\n      this.util.changeTxt(target, font);\n      this.util.changeTxt(tooltip, this.hasFocus ? this.lang.toolbar.font + (font ? ' (' + font + ')' : '') : font);\n    } else if (element.style && element.style.fontFamily.length > 0) {\n      var selectFont = element.style.fontFamily.replace(/[\"']/g, '');\n      this.util.changeTxt(target, selectFont);\n      this.util.changeTxt(tooltip, this.lang.toolbar.font + ' (' + selectFont + ')');\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n  * @Override submenu\n  */\n  on: function on() {\n    var fontContext = this.context.font;\n    var fontList = fontContext._fontList;\n    var currentFont = fontContext.targetText.textContent;\n\n    if (currentFont !== fontContext.currentFont) {\n      for (var i = 0, len = fontList.length; i < len; i++) {\n        if (currentFont === fontList[i].getAttribute('data-value')) {\n          this.util.addClass(fontList[i], 'active');\n        } else {\n          this.util.removeClass(fontList[i], 'active');\n        }\n      }\n\n      fontContext.currentFont = currentFont;\n    }\n  },\n  pickup: function pickup(e) {\n    if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n    e.preventDefault();\n    e.stopPropagation();\n    var value = e.target.getAttribute('data-value');\n\n    if (value) {\n      var newNode = this.util.createElement('SPAN');\n      newNode.style.fontFamily = value;\n      this.nodeChange(newNode, ['font-family'], null, null);\n    } else {\n      this.nodeChange(null, ['font-family'], ['span'], true);\n    }\n\n    this.submenuOff();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}