{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport kebabCase from 'lodash/kebabCase';\nimport omit from 'lodash/omit';\nimport DropdownToggle from '../Dropdown/DropdownToggle';\nimport { useClassNames, placementPolyfill, PLACEMENT_8, mergeRefs } from '../utils';\nimport { SidenavContext } from './Sidenav';\nimport deprecatePropType from '../utils/deprecatePropType';\nimport SidenavDropdownCollapse from './SidenavDropdownCollapse';\nimport Disclosure from '../Disclosure/Disclosure';\nimport DropdownContext from '../Dropdown/DropdownContext';\nimport useInternalId from '../utils/useInternalId';\nvar SidenavDropdown = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      title = props.title,\n      children = props.children,\n      className = props.className,\n      menuStyle = props.menuStyle,\n      disabled = props.disabled,\n      renderTitle = props.renderTitle,\n      renderToggle = props.renderToggle,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'dropdown' : _props$classPrefix,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n      toggleClassName = props.toggleClassName,\n      icon = props.icon,\n      eventKey = props.eventKey,\n      toggleAs = props.toggleAs,\n      noCaret = props.noCaret,\n      style = props.style,\n      onOpen = props.onOpen,\n      onClose = props.onClose,\n      openProp = props.open,\n      onToggle = props.onToggle,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"title\", \"children\", \"className\", \"menuStyle\", \"disabled\", \"renderTitle\", \"renderToggle\", \"classPrefix\", \"placement\", \"toggleClassName\", \"icon\", \"eventKey\", \"toggleAs\", \"noCaret\", \"style\", \"onOpen\", \"onClose\", \"open\", \"onToggle\"]);\n\n  var sidenavContext = useContext(SidenavContext);\n  var dropdownContext = useContext(DropdownContext);\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      withClassPrefix = _useClassNames.withClassPrefix;\n\n  var internalId = useInternalId('SidenavDropdown');\n  var uniqueKey = eventKey !== null && eventKey !== void 0 ? eventKey : internalId;\n\n  if (!sidenavContext || !dropdownContext) {\n    throw new Error('<SidenavDropdown> component is not supposed to be used standalone. Use <Dropdown> inside <Sidenav> instead.');\n  }\n\n  var _sidenavContext$openK = sidenavContext.openKeys,\n      openKeys = _sidenavContext$openK === void 0 ? [] : _sidenavContext$openK,\n      onOpenChange = sidenavContext.onOpenChange;\n  var hasSelectedItem = dropdownContext.hasSelectedItem;\n  var handleToggleDisclosure = useCallback(function (open, event) {\n    if (open) {\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n    } else {\n      onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n    }\n\n    onToggle === null || onToggle === void 0 ? void 0 : onToggle(open);\n    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(uniqueKey, event);\n  }, [onClose, onOpen, onToggle, uniqueKey, onOpenChange]);\n  var open = openProp !== null && openProp !== void 0 ? openProp : openKeys.includes(uniqueKey);\n  return /*#__PURE__*/React.createElement(Disclosure, {\n    open: open,\n    onToggle: handleToggleDisclosure\n  }, function (_ref, containerRef) {\n    var _withClassPrefix;\n\n    var open = _ref.open;\n    var classes = merge(className, withClassPrefix((_withClassPrefix = {}, _withClassPrefix[\"placement-\" + kebabCase(placementPolyfill(placement))] = placement, _withClassPrefix[open ? 'expand' : 'collapse'] = true, _withClassPrefix.disabled = disabled, _withClassPrefix['selected-within'] = hasSelectedItem, _withClassPrefix['no-caret'] = noCaret, _withClassPrefix)));\n    return /*#__PURE__*/React.createElement(Component, _extends({\n      ref: mergeRefs(ref, containerRef),\n      style: style,\n      className: classes\n    }, rest, {\n      \"data-event-key\": eventKey\n    }), /*#__PURE__*/React.createElement(Disclosure.Button, null, function (buttonProps, buttonRef) {\n      return /*#__PURE__*/React.createElement(DropdownToggle, _extends({\n        ref: buttonRef,\n        as: toggleAs,\n        noCaret: noCaret,\n        className: toggleClassName,\n        renderToggle: renderToggle,\n        icon: icon,\n        placement: placement\n      }, omit(buttonProps, ['open'])), title);\n    }), /*#__PURE__*/React.createElement(Disclosure.Content, null, function (_ref2) {\n      var open = _ref2.open;\n      return /*#__PURE__*/React.createElement(SidenavDropdownCollapse, {\n        open: open,\n        style: menuStyle\n      }, children);\n    }));\n  });\n});\nSidenavDropdown.displayName = 'Sidenav.Dropdown';\nSidenavDropdown.propTypes = {\n  activeKey: PropTypes.any,\n  classPrefix: PropTypes.string,\n  placement: PropTypes.oneOf(PLACEMENT_8),\n  title: PropTypes.node,\n  disabled: PropTypes.bool,\n  icon: PropTypes.node,\n  menuStyle: PropTypes.object,\n  className: PropTypes.string,\n  toggleClassName: PropTypes.string,\n  children: PropTypes.node,\n  tabIndex: PropTypes.number,\n  open: deprecatePropType(PropTypes.bool),\n  eventKey: PropTypes.any,\n  as: PropTypes.elementType,\n  toggleAs: PropTypes.elementType,\n  noCaret: PropTypes.bool,\n  style: PropTypes.object,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  onToggle: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onClick: PropTypes.func,\n  renderTitle: deprecatePropType(PropTypes.func),\n  renderToggle: PropTypes.func\n};\nexport default SidenavDropdown;","map":null,"metadata":{},"sourceType":"module"}