{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport SpinnerIcon from '@rsuite/icons/legacy/Spinner';\nimport isUndefined from 'lodash/isUndefined';\nimport isNil from 'lodash/isNil';\nimport { shallowEqual, useClassNames, mergeRefs, useCustom } from '../utils';\nimport { DropdownMenuItem } from '../Picker';\nimport AngleLeftIcon from '@rsuite/icons/legacy/AngleLeft';\nimport AngleRightIcon from '@rsuite/icons/legacy/AngleRight';\nimport getPosition from 'dom-lib/getPosition';\nimport scrollTop from 'dom-lib/scrollTop';\nvar emptyArray = [];\nvar DropdownMenu = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      activeItemValue = props.activeItemValue,\n      classPrefix = props.classPrefix,\n      className = props.className,\n      _props$childrenKey = props.childrenKey,\n      childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n      _props$disabledItemVa = props.disabledItemValues,\n      disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n      _props$menuWidth = props.menuWidth,\n      menuWidth = _props$menuWidth === void 0 ? 120 : _props$menuWidth,\n      _props$menuHeight = props.menuHeight,\n      menuHeight = _props$menuHeight === void 0 ? 200 : _props$menuHeight,\n      _props$valueKey = props.valueKey,\n      valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n      _props$cascadeData = props.cascadeData,\n      cascadeData = _props$cascadeData === void 0 ? emptyArray : _props$cascadeData,\n      _props$cascadePaths = props.cascadePaths,\n      cascadePaths = _props$cascadePaths === void 0 ? emptyArray : _props$cascadePaths,\n      _props$labelKey = props.labelKey,\n      labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n      renderMenu = props.renderMenu,\n      renderMenuItem = props.renderMenuItem,\n      onSelect = props.onSelect,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"activeItemValue\", \"classPrefix\", \"className\", \"childrenKey\", \"disabledItemValues\", \"menuWidth\", \"menuHeight\", \"valueKey\", \"cascadeData\", \"cascadePaths\", \"labelKey\", \"renderMenu\", \"renderMenuItem\", \"onSelect\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix;\n\n  var classes = merge(className, prefix('items'));\n  var rootRef = useRef();\n  var rtl = useCustom('DropdownMenu');\n  useEffect(function () {\n    var _rootRef$current;\n\n    var columns = ((_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.querySelectorAll('[data-type=\"column\"]')) || [];\n    columns.forEach(function (column) {\n      if (!column) {\n        return;\n      }\n\n      var activeItem = column.querySelector(\".\" + prefix('item-focus'));\n\n      if (!activeItem) {\n        activeItem = column.querySelector(\".\" + prefix('item-active'));\n      }\n\n      if (activeItem) {\n        var position = getPosition(activeItem, column); // Let the active option scroll into view.\n\n        scrollTop(column, position === null || position === void 0 ? void 0 : position.top);\n      }\n    });\n  }, [prefix]);\n  var getCascadePaths = useCallback(function (layer, node) {\n    var paths = [];\n\n    for (var i = 0; i < cascadeData.length && i < layer; i += 1) {\n      if (i < layer - 1 && cascadePaths) {\n        paths.push(cascadePaths[i]);\n      }\n    }\n\n    paths.push(node);\n    return paths;\n  }, [cascadeData, cascadePaths]);\n\n  var handleSelect = function handleSelect(layer, node, event) {\n    var isLeafNode = isNil(node[childrenKey]);\n    var cascadePaths = getCascadePaths(layer + 1, node);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, cascadePaths, isLeafNode, event);\n  };\n\n  var renderCascadeNode = function renderCascadeNode(node, index, layer, focus) {\n    var children = node[childrenKey];\n    var value = node[valueKey];\n    var label = node[labelKey];\n    var disabled = disabledItemValues.some(function (disabledValue) {\n      return shallowEqual(disabledValue, value);\n    }); // Use `value` in keys when If `value` is string or number\n\n    var onlyKey = typeof value === 'number' || typeof value === 'string' ? value : index;\n    var Icon = node.loading ? SpinnerIcon : rtl ? AngleRightIcon : AngleLeftIcon;\n    return /*#__PURE__*/React.createElement(DropdownMenuItem, {\n      classPrefix: \"picker-cascader-menu-item\",\n      as: 'li',\n      key: layer + \"-\" + onlyKey,\n      disabled: disabled,\n      active: !isUndefined(activeItemValue) && shallowEqual(activeItemValue, value),\n      focus: focus,\n      value: value,\n      className: children ? prefix('has-children') : undefined,\n      onSelect: function onSelect(_value, event) {\n        return handleSelect(layer, node, event);\n      }\n    }, renderMenuItem ? renderMenuItem(label, node) : label, children ? /*#__PURE__*/React.createElement(Icon, {\n      className: prefix('caret'),\n      spin: node.loading\n    }) : null);\n  };\n\n  var styles = {\n    width: cascadeData.length * menuWidth\n  };\n  var cascadeNodes = cascadeData.map(function (children, layer) {\n    var onlyKey = layer + \"_\" + children.length;\n    var menu = /*#__PURE__*/React.createElement(\"ul\", {\n      role: \"listbox\"\n    }, children.map(function (item, index) {\n      return renderCascadeNode(item, index, layer, cascadePaths[layer] && shallowEqual(cascadePaths[layer][valueKey], item[valueKey]));\n    }));\n    var parentNode = cascadePaths[layer - 1];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: onlyKey,\n      className: prefix('column'),\n      \"data-layer\": layer,\n      \"data-type\": 'column',\n      style: {\n        height: menuHeight,\n        width: menuWidth\n      }\n    }, renderMenu ? renderMenu(children, menu, parentNode, layer) : menu);\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: mergeRefs(rootRef, ref),\n    className: classes\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: styles\n  }, cascadeNodes));\n});\nexport var dropdownMenuPropTypes = {\n  classPrefix: PropTypes.string,\n  disabledItemValues: PropTypes.array,\n  activeItemValue: PropTypes.any,\n  childrenKey: PropTypes.string,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  menuWidth: PropTypes.number,\n  menuHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  className: PropTypes.string,\n  renderMenuItem: PropTypes.func,\n  renderMenu: PropTypes.func,\n  onSelect: PropTypes.func,\n  cascadeData: PropTypes.array,\n  cascadePaths: PropTypes.array\n};\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.propTypes = dropdownMenuPropTypes;\nexport default DropdownMenu;","map":null,"metadata":{},"sourceType":"module"}