{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/batch\n */\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\n\nvar Batch = /*#__PURE__*/function () {\n  /**\n   * Creates a batch instance.\n   *\n   * @see module:engine/model/model~Model#enqueueChange\n   * @see module:engine/model/model~Model#change\n   * @param {Object} [type] A set of flags that specify the type of the batch. Batch type can alter how some of the features work\n   * when encountering a given `Batch` instance (for example, when a feature listens to applied operations).\n   * @param {Boolean} [type.isUndoable=true] Whether a batch can be undone through undo feature.\n   * @param {Boolean} [type.isLocal=true] Whether a batch includes operations created locally (`true`) or operations created on\n   * other, remote editors (`false`).\n   * @param {Boolean} [type.isUndo=false] Whether a batch was created by the undo feature and undoes other operations.\n   * @param {Boolean} [type.isTyping=false] Whether a batch includes operations connected with a typing action.\n   */\n  function Batch() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Batch);\n\n    if (typeof type === 'string') {\n      type = type === 'transparent' ? {\n        isUndoable: false\n      } : {};\n      /**\n       * The string value for a `type` property of the `Batch` constructor has been deprecated and will be removed in the near future.\n       * Please refer to the {@link module:engine/model/batch~Batch#constructor `Batch` constructor API documentation} for more\n       * information.\n       *\n       * @error batch-constructor-deprecated-string-type\n       */\n\n      logWarning('batch-constructor-deprecated-string-type');\n    }\n\n    var _type = type,\n        _type$isUndoable = _type.isUndoable,\n        isUndoable = _type$isUndoable === void 0 ? true : _type$isUndoable,\n        _type$isLocal = _type.isLocal,\n        isLocal = _type$isLocal === void 0 ? true : _type$isLocal,\n        _type$isUndo = _type.isUndo,\n        isUndo = _type$isUndo === void 0 ? false : _type$isUndo,\n        _type$isTyping = _type.isTyping,\n        isTyping = _type$isTyping === void 0 ? false : _type$isTyping;\n    /**\n     * An array of operations that compose this batch.\n     *\n     * @readonly\n     * @type {Array.<module:engine/model/operation/operation~Operation>}\n     */\n\n    this.operations = [];\n    /**\n     * Whether the batch can be undone through the undo feature.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n\n    this.isUndoable = isUndoable;\n    /**\n     * Whether the batch includes operations created locally (`true`) or operations created on other, remote editors (`false`).\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n\n    this.isLocal = isLocal;\n    /**\n     * Whether the batch was created by the undo feature and undoes other operations.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n\n    this.isUndo = isUndo;\n    /**\n     * Whether the batch includes operations connected with typing.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n\n    this.isTyping = isTyping;\n  }\n  /**\n   * The type of the batch.\n   *\n   * **This property has been deprecated and is always set to the `'default'` value.**\n   *\n   * It can be one of the following values:\n   * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n   * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n   * changes.\n   *\n   * @deprecated\n   * @type {'default'}\n   */\n\n\n  _createClass(Batch, [{\n    key: \"addOperation\",\n\n    /**\n     * Adds an operation to the batch instance.\n     *\n     * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n     * @returns {module:engine/model/operation/operation~Operation} The added operation.\n     */\n    value: function addOperation(operation) {\n      operation.batch = this;\n      this.operations.push(operation);\n      return operation;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      /**\n       * The {@link module:engine/model/batch~Batch#type `Batch#type` } property has been deprecated and will be removed in the near\n       * future. Use `Batch#isLocal`, `Batch#isUndoable`, `Batch#isUndo` and `Batch#isTyping` instead.\n       *\n       * @error batch-type-deprecated\n       */\n      logWarning('batch-type-deprecated');\n      return 'default';\n    }\n    /**\n     * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n     * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n     *\n     * @readonly\n     * @type {Number|null}\n     */\n\n  }, {\n    key: \"baseVersion\",\n    get: function get() {\n      var _iterator = _createForOfIteratorHelper(this.operations),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var op = _step.value;\n\n          if (op.baseVersion !== null) {\n            return op.baseVersion;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n  }]);\n\n  return Batch;\n}();\n\nexport { Batch as default };","map":null,"metadata":{},"sourceType":"module"}