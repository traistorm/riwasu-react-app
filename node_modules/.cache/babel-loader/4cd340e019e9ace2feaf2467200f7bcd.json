{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { MixedType } from './MixedType';\nexport var ArrayType = /*#__PURE__*/function (_MixedType) {\n  _inheritsLoose(ArrayType, _MixedType);\n\n  function ArrayType(errorMessage) {\n    var _this;\n\n    _this = _MixedType.call(this, 'array') || this;\n\n    _MixedType.prototype.pushRule.call(_assertThisInitialized(_this), {\n      onValid: function onValid(v) {\n        return Array.isArray(v);\n      },\n      errorMessage: errorMessage || _this.locale.type\n    });\n\n    return _this;\n  }\n\n  var _proto = ArrayType.prototype;\n\n  _proto.rangeLength = function rangeLength(minLength, maxLength, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.rangeLength;\n    }\n\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return value.length >= minLength && value.length <= maxLength;\n      },\n      errorMessage: errorMessage,\n      params: {\n        minLength: minLength,\n        maxLength: maxLength\n      }\n    });\n\n    return this;\n  };\n\n  _proto.minLength = function minLength(_minLength, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.minLength;\n    }\n\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return value.length >= _minLength;\n      },\n      errorMessage: errorMessage,\n      params: {\n        minLength: _minLength\n      }\n    });\n\n    return this;\n  };\n\n  _proto.maxLength = function maxLength(_maxLength, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.maxLength;\n    }\n\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return value.length <= _maxLength;\n      },\n      errorMessage: errorMessage,\n      params: {\n        maxLength: _maxLength\n      }\n    });\n\n    return this;\n  };\n\n  _proto.unrepeatable = function unrepeatable(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.unrepeatable;\n    }\n\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(items) {\n        var hash = {};\n\n        for (var i in items) {\n          if (hash[items[i]]) {\n            return false;\n          }\n\n          hash[items[i]] = true;\n        }\n\n        return true;\n      },\n      errorMessage: errorMessage\n    });\n\n    return this;\n  };\n\n  _proto.of = function of(type) {\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(items, data, filedName) {\n        var checkResults = items.map(function (value, index) {\n          var name = Array.isArray(filedName) ? [].concat(filedName, [\"[\" + index + \"]\"]) : [filedName, \"[\" + index + \"]\"];\n          return type.check(value, data, name);\n        });\n        var hasError = !!checkResults.find(function (item) {\n          return item === null || item === void 0 ? void 0 : item.hasError;\n        });\n        return {\n          hasError: hasError,\n          array: checkResults\n        };\n      }\n    });\n\n    return this;\n  };\n\n  return ArrayType;\n}(MixedType);\nexport default function getArrayType(errorMessage) {\n  return new ArrayType(errorMessage);\n}","map":null,"metadata":{},"sourceType":"module"}