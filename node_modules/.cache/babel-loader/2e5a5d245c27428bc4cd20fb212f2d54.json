{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\n(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error('SUNEDITOR_MODULES a window with a document');\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  }\n})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\n  var dialog = {\n    name: 'dialog',\n\n    /**\n     * @description Constructor\n     * @param {Object} core Core object \n     */\n    add: function add(core) {\n      var context = core.context;\n      context.dialog = {\n        kind: '',\n        updateModal: false,\n        _closeSignal: false\n      };\n      /** dialog */\n\n      var dialog_div = core.util.createElement('DIV');\n      dialog_div.className = 'se-dialog sun-editor-common';\n      var dialog_back = core.util.createElement('DIV');\n      dialog_back.className = 'se-dialog-back';\n      dialog_back.style.display = 'none';\n      var dialog_area = core.util.createElement('DIV');\n      dialog_area.className = 'se-dialog-inner';\n      dialog_area.style.display = 'none';\n      dialog_div.appendChild(dialog_back);\n      dialog_div.appendChild(dialog_area);\n      context.dialog.modalArea = dialog_div;\n      context.dialog.back = dialog_back;\n      context.dialog.modal = dialog_area;\n      /** add event listeners */\n\n      context.dialog.modal.addEventListener('mousedown', this._onMouseDown_dialog.bind(core));\n      context.dialog.modal.addEventListener('click', this._onClick_dialog.bind(core));\n      /** append html */\n\n      context.element.relative.appendChild(dialog_div);\n      /** empty memory */\n\n      dialog_div = null, dialog_back = null, dialog_area = null;\n    },\n\n    /**\n     * @description Event to control the behavior of closing the dialog\n     * @param {MouseEvent} e Event object\n     * @private\n     */\n    _onMouseDown_dialog: function _onMouseDown_dialog(e) {\n      if (/se-dialog-inner/.test(e.target.className)) {\n        this.context.dialog._closeSignal = true;\n      } else {\n        this.context.dialog._closeSignal = false;\n      }\n    },\n\n    /**\n     * @description Event to close the window when the outside area of the dialog or close button is click\n     * @param {MouseEvent} e Event object\n     * @private\n     */\n    _onClick_dialog: function _onClick_dialog(e) {\n      if (/close/.test(e.target.getAttribute('data-command')) || this.context.dialog._closeSignal) {\n        this.plugins.dialog.close.call(this);\n      }\n    },\n\n    /**\n     * @description Open a Dialog plugin\n     * @param {String} kind Dialog plugin name\n     * @param {Boolean} update Whether it will open for update ('image' === this.currentControllerName)\n     */\n    open: function open(kind, update) {\n      if (this.modalForm) return false;\n\n      if (this.plugins.dialog._bindClose) {\n        this._d.removeEventListener('keydown', this.plugins.dialog._bindClose);\n\n        this.plugins.dialog._bindClose = null;\n      }\n\n      this.plugins.dialog._bindClose = function (e) {\n        if (!/27/.test(e.keyCode)) return;\n        this.plugins.dialog.close.call(this);\n      }.bind(this);\n\n      this._d.addEventListener('keydown', this.plugins.dialog._bindClose);\n\n      this.context.dialog.updateModal = update;\n\n      if (this.options.popupDisplay === 'full') {\n        this.context.dialog.modalArea.style.position = 'fixed';\n      } else {\n        this.context.dialog.modalArea.style.position = 'absolute';\n      }\n\n      this.context.dialog.kind = kind;\n      this.modalForm = this.context[kind].modal;\n      var focusElement = this.context[kind].focusElement;\n      if (typeof this.plugins[kind].on === 'function') this.plugins[kind].on.call(this, update);\n      this.context.dialog.modalArea.style.display = 'block';\n      this.context.dialog.back.style.display = 'block';\n      this.context.dialog.modal.style.display = 'block';\n      this.modalForm.style.display = 'block';\n      if (focusElement) focusElement.focus();\n    },\n    _bindClose: null,\n\n    /**\n     * @description Close a Dialog plugin\n     * The plugin's \"init\" method is called.\n     */\n    close: function close() {\n      if (this.plugins.dialog._bindClose) {\n        this._d.removeEventListener('keydown', this.plugins.dialog._bindClose);\n\n        this.plugins.dialog._bindClose = null;\n      }\n\n      var kind = this.context.dialog.kind;\n      this.modalForm.style.display = 'none';\n      this.context.dialog.back.style.display = 'none';\n      this.context.dialog.modalArea.style.display = 'none';\n      this.context.dialog.updateModal = false;\n      if (typeof this.plugins[kind].init === 'function') this.plugins[kind].init.call(this);\n      this.context.dialog.kind = '';\n      this.modalForm = null;\n      this.focus();\n    }\n  };\n\n  if (typeof noGlobal === typeof undefined) {\n    if (!window.SUNEDITOR_MODULES) {\n      Object.defineProperty(window, 'SUNEDITOR_MODULES', {\n        enumerable: true,\n        writable: false,\n        configurable: false,\n        value: {}\n      });\n    }\n\n    Object.defineProperty(window.SUNEDITOR_MODULES, 'dialog', {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: dialog\n    });\n  }\n\n  return dialog;\n});","map":null,"metadata":{},"sourceType":"script"}