{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar getLanguage_1 = __importDefault(require(\"./misc/getLanguage\"));\n\nvar plugins_1 = __importDefault(require(\"suneditor/src/plugins\"));\n\nvar suneditor_1 = __importDefault(require(\"suneditor\"));\n\nvar SunEditor = function SunEditor(props) {\n  var name = props.name,\n      lang = props.lang,\n      _a = props.setOptions,\n      setOptions = _a === void 0 ? {} : _a,\n      placeholder = props.placeholder,\n      _b = props.width,\n      width = _b === void 0 ? \"100%\" : _b,\n      height = props.height,\n      defaultValue = props.defaultValue,\n      setContents = props.setContents,\n      onSave = props.onSave,\n      onSetToolbarButtons = props.onSetToolbarButtons,\n      setDefaultStyle = props.setDefaultStyle,\n      onResizeEditor = props.onResizeEditor,\n      getSunEditorInstance = props.getSunEditorInstance,\n      appendContents = props.appendContents,\n      _c = props.setAllPlugins,\n      setAllPlugins = _c === void 0 ? true : _c,\n      _d = props.disable,\n      disable = _d === void 0 ? false : _d,\n      _e = props.readOnly,\n      readOnly = _e === void 0 ? false : _e,\n      _f = props.hide,\n      hide = _f === void 0 ? false : _f,\n      _g = props.hideToolbar,\n      hideToolbar = _g === void 0 ? false : _g,\n      _h = props.disableToolbar,\n      disableToolbar = _h === void 0 ? false : _h,\n      onChange = props.onChange,\n      autoFocus = props.autoFocus,\n      onBlur = props.onBlur,\n      onLoad = props.onLoad,\n      toggleCodeView = props.toggleCodeView,\n      toggleFullScreen = props.toggleFullScreen,\n      showInline = props.showInline,\n      showController = props.showController,\n      imageUploadHandler = props.imageUploadHandler;\n  var txtArea = (0, react_1.useRef)(null);\n  var editor = (0, react_1.useRef)();\n  var initialEffect = (0, react_1.useRef)(true);\n  (0, react_1.useEffect)(function () {\n    setOptions.lang = setOptions.lang || (0, getLanguage_1.default)(lang);\n    setOptions.width = setOptions.width || width;\n    setOptions.placeholder = setOptions.placeholder || placeholder;\n    if (!setOptions.plugins && setAllPlugins) setOptions.plugins = plugins_1.default;\n    if (height) setOptions.height = height;\n    if (name && defaultValue) txtArea.current.value = defaultValue;\n    editor.current = suneditor_1.default.create(txtArea.current, __assign({\n      value: defaultValue\n    }, setOptions));\n    if (getSunEditorInstance) getSunEditorInstance(editor.current);\n\n    editor.current.onChange = function (content) {\n      if (name && txtArea.current) txtArea.current.value = content;\n      if (onChange) onChange(content);\n    };\n\n    if (onBlur) editor.current.onBlur = function (e) {\n      return editor.current && onBlur(e, editor.current.getContents(true));\n    };\n    if (onSave) editor.current.onSave = function (content) {\n      return onSave(content);\n    };\n    if (onSetToolbarButtons) editor.current.onSetToolbarButtons = function (buttonList) {\n      return onSetToolbarButtons(buttonList);\n    };\n    if (onResizeEditor) editor.current.onResizeEditor = function (height, prevHeight) {\n      return onResizeEditor(height, prevHeight);\n    };\n    var fromClipBoardEvents = [\"onCopy\", \"onCut\"];\n    var toClipBoardEvents = [\"onDrop\", \"onPaste\"];\n    var singleEvents = [\"onMouseDown\", \"onScroll\", \"onInput\", \"onClick\", \"onKeyUp\", \"onKeyDown\", \"onFocus\"];\n    var uploadBeforeEvents = [\"onImageUploadBefore\", \"onVideoUploadBefore\", \"onAudioUploadBefore\"];\n    var uploadEvents = [\"onImageUpload\", \"onImageUpload\", \"onAudioUpload\", \"onVideoUpload\"];\n    var uploadErrorEvents = [\"onImageUploadError\", \"onVideoUploadError\", \"onAudioUploadError\"];\n    fromClipBoardEvents.forEach(function (event) {\n      var value = props[event];\n      if (editor.current && event && value) editor.current[event] = function (e, clipboardData) {\n        return value(e, clipboardData);\n      };\n    });\n    singleEvents.forEach(function (event) {\n      var value = props[event];\n      if (editor.current && event && value) editor.current[event] = function (e) {\n        return value(e);\n      };\n    });\n    uploadBeforeEvents.forEach(function (event) {\n      var value = props[event];\n      if (editor.current && event && value) editor.current[event] = function (files, info, _, uploadHandler) {\n        return value(files, info, uploadHandler);\n      };\n    });\n    uploadEvents.forEach(function (event) {\n      var value = props[event];\n      if (editor.current && event && value) editor.current[event] = function (targetElement, index, state, info, remainingFilesCount) {\n        return value(targetElement, index, state, info, remainingFilesCount);\n      };\n    });\n    uploadErrorEvents.forEach(function (event) {\n      var value = props[event];\n      if (editor.current && event && value) editor.current[event] = function (errorMessage, result) {\n        return value(errorMessage, result);\n      };\n    });\n    toClipBoardEvents.forEach(function (event) {\n      var value = props[event];\n      if (editor.current && event && value) editor.current[event] = function (e, cleanData, maxCharCount) {\n        return value(e, cleanData, maxCharCount);\n      };\n    });\n\n    editor.current.onload = function (_, reload) {\n      if (reload === false) {\n        if (setContents) {\n          editor.current.setContents(setContents);\n          editor.current.core.focusEdge(null);\n        }\n\n        if (setDefaultStyle) editor.current.setDefaultStyle(setDefaultStyle);\n        if (appendContents) editor.current.appendContents(appendContents);\n        if (editor.current.util.isIE) editor.current.core._createDefaultRange();\n        if (disable === true) editor.current.disable();\n        if (readOnly === true) editor.current.readOnly(true);\n        if (hide === true) editor.current.hide();\n        if (hideToolbar === true) editor.current.toolbar.hide();\n        if (disableToolbar === true) editor.current.toolbar.disable();\n        if (autoFocus === false) editor.current.core.context.element.wysiwyg.blur();else if (autoFocus === true) editor.current.core.context.element.wysiwyg.focus();\n      }\n\n      if (onLoad) onLoad(reload);\n    };\n\n    if (imageUploadHandler && typeof imageUploadHandler === \"function\") editor.current.imageUploadHandler = imageUploadHandler;\n    if (toggleCodeView && typeof toggleCodeView === \"function\") editor.current.toggleCodeView = function (isCodeView) {\n      return toggleCodeView(isCodeView);\n    };\n    if (toggleFullScreen && typeof toggleFullScreen === \"function\") editor.current.toggleFullScreen = function (isFullScreen) {\n      return toggleFullScreen(isFullScreen);\n    };\n    if (showInline && typeof showInline === \"function\") editor.current.showInline = function (toolbar, context) {\n      return showInline(toolbar, context);\n    };\n    if (showController && typeof showController === \"function\") editor.current.showController = function (name, controllers) {\n      return showController(name, controllers);\n    };\n    return function () {\n      if (editor.current) editor.current.destroy();\n    };\n  }, []);\n  (0, react_1.useEffect)(function () {\n    var _a;\n\n    if (!initialEffect.current) {\n      (_a = editor.current) === null || _a === void 0 ? void 0 : _a.setOptions({\n        lang: (0, getLanguage_1.default)(lang),\n        placeholder: placeholder,\n        height: height,\n        width: width\n      });\n    }\n  }, [lang, placeholder, height, width]);\n  (0, react_1.useEffect)(function () {\n    var _a;\n\n    if (setDefaultStyle && !initialEffect.current) (_a = editor.current) === null || _a === void 0 ? void 0 : _a.setDefaultStyle(setDefaultStyle);\n  }, [setDefaultStyle]);\n  (0, react_1.useEffect)(function () {\n    var _a, _b;\n\n    if (!initialEffect.current) {\n      if (setContents !== undefined) !((_a = editor.current) === null || _a === void 0 ? void 0 : _a.core.hasFocus) && ((_b = editor.current) === null || _b === void 0 ? void 0 : _b.setContents(setContents));\n    }\n  }, [setContents]);\n  (0, react_1.useEffect)(function () {\n    var _a, _b;\n\n    if (!initialEffect.current) {\n      if (appendContents !== undefined) (_a = editor.current) === null || _a === void 0 ? void 0 : _a.appendContents(appendContents);\n      (_b = editor.current) === null || _b === void 0 ? void 0 : _b.core.focusEdge(null);\n    }\n  }, [appendContents]);\n  (0, react_1.useEffect)(function () {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n    if (!initialEffect.current) {\n      if (hideToolbar === true) (_a = editor.current) === null || _a === void 0 ? void 0 : _a.toolbar.hide();else (_b = editor.current) === null || _b === void 0 ? void 0 : _b.toolbar.show();\n      if (disableToolbar === true) (_c = editor.current) === null || _c === void 0 ? void 0 : _c.toolbar.disable();else (_d = editor.current) === null || _d === void 0 ? void 0 : _d.toolbar.enable();\n      if (disable === true) (_e = editor.current) === null || _e === void 0 ? void 0 : _e.disable();else (_f = editor.current) === null || _f === void 0 ? void 0 : _f.enable();\n      if (readOnly === true) (_g = editor.current) === null || _g === void 0 ? void 0 : _g.readOnly(true);else (_h = editor.current) === null || _h === void 0 ? void 0 : _h.readOnly(false);\n      if (hide === true) (_j = editor.current) === null || _j === void 0 ? void 0 : _j.hide();else (_k = editor.current) === null || _k === void 0 ? void 0 : _k.show();\n    }\n  }, [disable, hideToolbar, disableToolbar, hide, readOnly]);\n  (0, react_1.useEffect)(function () {\n    initialEffect.current = false;\n  }, []);\n  return react_1.default.createElement(\"textarea\", __assign({\n    style: {\n      visibility: \"hidden\"\n    },\n    ref: txtArea\n  }, {\n    name: name\n  }));\n};\n\nexports.default = SunEditor;","map":null,"metadata":{},"sourceType":"script"}