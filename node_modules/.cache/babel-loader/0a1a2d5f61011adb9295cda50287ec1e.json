{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/colorgrid/utils\n */\n\n/**\n * Returns color configuration options as defined in `editor.config.(fontColor|fontBackgroundColor).colors` or\n * `editor.config.table.(tableProperties|tableCellProperties).(background|border).colors\n * but processed to account for editor localization in the correct language.\n *\n * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n * when the user configuration is defined because the editor does not exist yet.\n *\n * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} options\n * @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}.\n */\nexport function getLocalizedColorOptions(locale, options) {\n  var t = locale.t;\n  var localizedColorNames = {\n    Black: t('Black'),\n    'Dim grey': t('Dim grey'),\n    Grey: t('Grey'),\n    'Light grey': t('Light grey'),\n    White: t('White'),\n    Red: t('Red'),\n    Orange: t('Orange'),\n    Yellow: t('Yellow'),\n    'Light green': t('Light green'),\n    Green: t('Green'),\n    Aquamarine: t('Aquamarine'),\n    Turquoise: t('Turquoise'),\n    'Light blue': t('Light blue'),\n    Blue: t('Blue'),\n    Purple: t('Purple')\n  };\n  return options.map(function (colorOption) {\n    var label = localizedColorNames[colorOption.label];\n\n    if (label && label != colorOption.label) {\n      colorOption.label = label;\n    }\n\n    return colorOption;\n  });\n}\n/**\n * Creates a unified color definition object from color configuration options.\n * The object contains the information necessary to both render the UI and initialize the conversion.\n *\n * @param {module:ui/colorgrid/colorgrid~ColorDefinition} options\n * @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}\n */\n\nexport function normalizeColorOptions(options) {\n  return options.map(normalizeSingleColorDefinition).filter(function (option) {\n    return !!option;\n  });\n} // Creates a normalized color definition from the user-defined configuration.\n// The \"normalization\" means it will create full\n// {@link module:ui/colorgrid/colorgrid~ColorDefinition `ColorDefinition-like`}\n// object for string values, and add a `view` property, for each definition.\n//\n// @param {String|module:ui/colorgrid/colorgrid~ColorDefinition}\n// @returns {module:ui/colorgrid/colorgrid~ColorDefinition}\n\nexport function normalizeSingleColorDefinition(color) {\n  if (typeof color === 'string') {\n    return {\n      model: color,\n      label: color,\n      hasBorder: false,\n      view: {\n        name: 'span',\n        styles: {\n          color: color\n        }\n      }\n    };\n  } else {\n    return {\n      model: color.color,\n      label: color.label || color.color,\n      hasBorder: color.hasBorder === undefined ? false : color.hasBorder,\n      view: {\n        name: 'span',\n        styles: {\n          color: \"\".concat(color.color)\n        }\n      }\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}