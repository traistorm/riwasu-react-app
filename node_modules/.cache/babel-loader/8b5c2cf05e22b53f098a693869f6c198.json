{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/styles/utils\n */\nvar HEX_COLOR_REGEXP = /^#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i;\nvar RGB_COLOR_REGEXP = /^rgb\\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}[0-9]{1,3}[ %]?\\)$/i;\nvar RGBA_COLOR_REGEXP = /^rgba\\([ ]?([0-9]{1,3}[ %]?,[ ]?){3}(1|[0-9]+%|[0]?\\.?[0-9]+)\\)$/i;\nvar HSL_COLOR_REGEXP = /^hsl\\([ ]?([0-9]{1,3}[ %]?[,]?[ ]*){3}(1|[0-9]+%|[0]?\\.?[0-9]+)?\\)$/i;\nvar HSLA_COLOR_REGEXP = /^hsla\\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}(1|[0-9]+%|[0]?\\.?[0-9]+)\\)$/i;\nvar COLOR_NAMES = new Set([// CSS Level 1\n'black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal', 'aqua', // CSS Level 2 (Revision 1)\n'orange', // CSS Color Module Level 3\n'aliceblue', 'antiquewhite', 'aquamarine', 'azure', 'beige', 'bisque', 'blanchedalmond', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'limegreen', 'linen', 'magenta', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'oldlace', 'olivedrab', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'whitesmoke', 'yellowgreen', // CSS Color Module Level 3 (System Colors)\n'activeborder', 'activecaption', 'appworkspace', 'background', 'buttonface', 'buttonhighlight', 'buttonshadow', 'buttontext', 'captiontext', 'graytext', 'highlight', 'highlighttext', 'inactiveborder', 'inactivecaption', 'inactivecaptiontext', 'infobackground', 'infotext', 'menu', 'menutext', 'scrollbar', 'threeddarkshadow', 'threedface', 'threedhighlight', 'threedlightshadow', 'threedshadow', 'window', 'windowframe', 'windowtext', // CSS Color Module Level 4\n'rebeccapurple', // Keywords\n'currentcolor', 'transparent']);\n/**\n * Checks if string contains [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS value.\n *\n *\t\tisColor( '#f00' );\t\t\t\t\t\t// true\n *\t\tisColor( '#AA00BB33' );\t\t\t\t\t// true\n *\t\tisColor( 'rgb(0, 0, 250)' );\t\t\t// true\n *\t\tisColor( 'hsla(240, 100%, 50%, .7)' );\t// true\n *\t\tisColor( 'deepskyblue' );\t\t\t\t// true\n *\n * **Note**: It does not support CSS Level 4 whitespace syntax, system colors and radius values for HSL colors.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isColor(string) {\n  // As far as I was able to test checking some pre-conditions is faster than joining each test with ||.\n  if (string.startsWith('#')) {\n    return HEX_COLOR_REGEXP.test(string);\n  }\n\n  if (string.startsWith('rgb')) {\n    return RGB_COLOR_REGEXP.test(string) || RGBA_COLOR_REGEXP.test(string);\n  }\n\n  if (string.startsWith('hsl')) {\n    return HSL_COLOR_REGEXP.test(string) || HSLA_COLOR_REGEXP.test(string);\n  } // Array check > RegExp test.\n\n\n  return COLOR_NAMES.has(string.toLowerCase());\n}\nvar lineStyleValues = ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];\n/**\n * Checks if string contains [line style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isLineStyle(string) {\n  return lineStyleValues.includes(string);\n}\nvar lengthRegExp = /^([+-]?[0-9]*([.][0-9]+)?(px|cm|mm|in|pc|pt|ch|em|ex|rem|vh|vw|vmin|vmax)|0)$/;\n/**\n * Checks if string contains [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isLength(string) {\n  return lengthRegExp.test(string);\n}\nvar PERCENTAGE_VALUE_REGEXP = /^[+-]?[0-9]*([.][0-9]+)?%$/;\n/**\n * Checks if string contains [percentage](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isPercentage(string) {\n  return PERCENTAGE_VALUE_REGEXP.test(string);\n}\nvar repeatValues = ['repeat-x', 'repeat-y', 'repeat', 'space', 'round', 'no-repeat'];\n/**\n * Checks if string contains [background repeat](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isRepeat(string) {\n  return repeatValues.includes(string);\n}\nvar positionValues = ['center', 'top', 'bottom', 'left', 'right'];\n/**\n * Checks if string contains [background position](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isPosition(string) {\n  return positionValues.includes(string);\n}\nvar attachmentValues = ['fixed', 'scroll', 'local'];\n/**\n * Checks if string contains [background attachment](https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isAttachment(string) {\n  return attachmentValues.includes(string);\n}\nvar urlRegExp = /^url\\(/;\n/**\n * Checks if string contains [URL](https://developer.mozilla.org/en-US/docs/Web/CSS/url) CSS value.\n *\n * @param {String} string\n * @returns {Boolean}\n */\n\nexport function isURL(string) {\n  return urlRegExp.test(string);\n}\nexport function getBoxSidesValues() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (value === '') {\n    return {\n      top: undefined,\n      right: undefined,\n      bottom: undefined,\n      left: undefined\n    };\n  }\n\n  var values = getShorthandValues(value);\n  var top = values[0];\n  var bottom = values[2] || top;\n  var right = values[1] || top;\n  var left = values[3] || right;\n  return {\n    top: top,\n    bottom: bottom,\n    right: right,\n    left: left\n  };\n}\n/**\n * Default reducer for CSS properties that concerns edges of a box\n * [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) notations:\n *\n *\t\tstylesProcessor.setReducer( 'padding', getBoxSidesValueReducer( 'padding' ) );\n *\n * @param {String} styleShorthand\n * @returns {Function}\n */\n\nexport function getBoxSidesValueReducer(styleShorthand) {\n  return function (value) {\n    var top = value.top,\n        right = value.right,\n        bottom = value.bottom,\n        left = value.left;\n    var reduced = [];\n\n    if (![top, right, left, bottom].every(function (value) {\n      return !!value;\n    })) {\n      if (top) {\n        reduced.push([styleShorthand + '-top', top]);\n      }\n\n      if (right) {\n        reduced.push([styleShorthand + '-right', right]);\n      }\n\n      if (bottom) {\n        reduced.push([styleShorthand + '-bottom', bottom]);\n      }\n\n      if (left) {\n        reduced.push([styleShorthand + '-left', left]);\n      }\n    } else {\n      reduced.push([styleShorthand, getBoxSidesShorthandValue(value)]);\n    }\n\n    return reduced;\n  };\n}\n/**\n * Returns a [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) notation\n * of a CSS property value.\n *\n *\t\tgetBoxSidesShorthandValue( { top: '1px', right: '1px', bottom: '2px', left: '1px' } );\n *\t\t// will return '1px 1px 2px'\n *\n * @param {module:engine/view/stylesmap~BoxSides} styleShorthand\n * @returns {String}\n */\n\nexport function getBoxSidesShorthandValue(_ref) {\n  var top = _ref.top,\n      right = _ref.right,\n      bottom = _ref.bottom,\n      left = _ref.left;\n  var out = [];\n\n  if (left !== right) {\n    out.push(top, right, bottom, left);\n  } else if (bottom !== top) {\n    out.push(top, right, bottom);\n  } else if (right !== top) {\n    out.push(top, right);\n  } else {\n    out.push(top);\n  }\n\n  return out.join(' ');\n}\n/**\n * Creates a normalizer for a [shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties) 1-to-4 value.\n *\n *\t\tstylesProcessor.setNormalizer( 'margin', getPositionShorthandNormalizer( 'margin' ) );\n *\n * @param {String} shorthand\n * @returns {Function}\n */\n\nexport function getPositionShorthandNormalizer(shorthand) {\n  return function (value) {\n    return {\n      path: shorthand,\n      value: getBoxSidesValues(value)\n    };\n  };\n}\n/**\n * Parses parts of a 1-to-4 value notation - handles some CSS values with spaces (like RGB()).\n *\n *\t\tgetShorthandValues( 'red blue RGB(0, 0, 0)');\n *\t\t// will return [ 'red', 'blue', 'RGB(0, 0, 0)' ]\n *\n * @param {String} string\n * @returns {Array.<String>}\n */\n\nexport function getShorthandValues(string) {\n  return string.replace(/, /g, ',') // Exclude comma from spaces evaluation as values are separated by spaces.\n  .split(' ').map(function (string) {\n    return string.replace(/,/g, ', ');\n  }); // Restore original notation.\n}","map":null,"metadata":{},"sourceType":"module"}