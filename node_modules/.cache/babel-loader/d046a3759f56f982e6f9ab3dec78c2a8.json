{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { RadioContext } from '../RadioGroup/RadioGroup';\nimport { useClassNames, useControlled, partitionHTMLProps, TypeChecker } from '../utils';\nvar Radio = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useContext = useContext(RadioContext),\n      groupValue = _useContext.value,\n      controlled = _useContext.controlled,\n      inlineContext = _useContext.inline,\n      nameContext = _useContext.name,\n      disabledContext = _useContext.disabled,\n      readOnlyContext = _useContext.readOnly,\n      plaintextContext = _useContext.plaintext,\n      onGroupChange = _useContext.onChange;\n\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      title = props.title,\n      className = props.className,\n      children = props.children,\n      checkedProp = props.checked,\n      defaultChecked = props.defaultChecked,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'radio' : _props$classPrefix,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n      inputRef = props.inputRef,\n      inputProps = props.inputProps,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? disabledContext : _props$disabled,\n      _props$readOnly = props.readOnly,\n      readOnly = _props$readOnly === void 0 ? readOnlyContext : _props$readOnly,\n      _props$plaintext = props.plaintext,\n      plaintext = _props$plaintext === void 0 ? plaintextContext : _props$plaintext,\n      _props$inline = props.inline,\n      inline = _props$inline === void 0 ? inlineContext : _props$inline,\n      _props$name = props.name,\n      name = _props$name === void 0 ? nameContext : _props$name,\n      value = props.value,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"title\", \"className\", \"children\", \"checked\", \"defaultChecked\", \"classPrefix\", \"tabIndex\", \"inputRef\", \"inputProps\", \"disabled\", \"readOnly\", \"plaintext\", \"inline\", \"name\", \"value\", \"onChange\", \"onClick\"]);\n\n  var _useControlled = useControlled(typeof groupValue !== 'undefined' ? groupValue === value : checkedProp, defaultChecked || false),\n      checked = _useControlled[0],\n      setChecked = _useControlled[1];\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      withClassPrefix = _useClassNames.withClassPrefix,\n      prefix = _useClassNames.prefix;\n\n  var classes = merge(className, withClassPrefix({\n    inline: inline,\n    disabled: disabled,\n    checked: checked\n  }));\n\n  var _partitionHTMLProps = partitionHTMLProps(rest),\n      htmlInputProps = _partitionHTMLProps[0],\n      restProps = _partitionHTMLProps[1];\n\n  var handleChange = useCallback(function (event) {\n    if (disabled || readOnly) {\n      return;\n    }\n\n    setChecked(true);\n    onGroupChange === null || onGroupChange === void 0 ? void 0 : onGroupChange(value, event);\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, true, event);\n  }, [disabled, onChange, onGroupChange, readOnly, setChecked, value]);\n\n  if (typeof controlled !== 'undefined') {\n    // In uncontrolled situations, use defaultChecked instead of checked\n    htmlInputProps[controlled ? 'checked' : 'defaultChecked'] = checked;\n  }\n\n  var input = /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('wrapper')\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({}, htmlInputProps, inputProps, {\n    ref: inputRef,\n    type: \"radio\",\n    name: name,\n    value: value,\n    tabIndex: tabIndex,\n    disabled: disabled,\n    onChange: handleChange,\n    onClick: useCallback(function (event) {\n      return event.stopPropagation();\n    }, [])\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('inner'),\n    \"aria-hidden\": true\n  }));\n\n  if (plaintext) {\n    return checked ? /*#__PURE__*/React.createElement(Component, _extends({}, restProps, {\n      ref: ref,\n      className: classes\n    }), children) : null;\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, restProps, {\n    ref: ref,\n    onClick: onClick,\n    className: classes,\n    \"aria-checked\": checked,\n    \"aria-disabled\": disabled\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('checker')\n  }, children ? /*#__PURE__*/React.createElement(\"label\", {\n    title: title\n  }, input, children) : input));\n});\nRadio.displayName = 'Radio';\nRadio.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  inline: PropTypes.bool,\n  title: PropTypes.string,\n  disabled: PropTypes.bool,\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  inputProps: PropTypes.any,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  value: PropTypes.any,\n  inputRef: TypeChecker.refType,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number\n};\nexport default Radio;","map":null,"metadata":{},"sourceType":"module"}