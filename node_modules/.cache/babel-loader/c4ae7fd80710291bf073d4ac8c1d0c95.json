{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'list',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    var context = core.context;\n    context.list = {\n      targetButton: targetElement,\n      _list: null,\n      currentList: '',\n      icons: {\n        bullets: core.icons.list_bullets,\n        number: core.icons.list_number\n      }\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    var listUl = listDiv.querySelector('ul');\n    /** add event listeners */\n\n    listUl.addEventListener('click', this.pickup.bind(core));\n    context.list._list = listUl.querySelectorAll('li button');\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** empty memory */\n\n    listDiv = null, listUl = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var lang = core.lang;\n    var listDiv = core.util.createElement('DIV');\n    listDiv.className = 'se-submenu se-list-layer';\n    listDiv.innerHTML = '' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"OL\" title=\"' + lang.toolbar.orderList + '\" aria-label=\"' + lang.toolbar.orderList + '\">' + core.icons.list_number + '</button></li>' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"UL\" title=\"' + lang.toolbar.unorderList + '\" aria-label=\"' + lang.toolbar.unorderList + '\">' + core.icons.list_bullets + '</button></li>' + '</ul>' + '</div>';\n    return listDiv;\n  },\n\n  /**\n  * @Override core\n  */\n  active: function active(element) {\n    var button = this.context.list.targetButton;\n    var icon = button.firstElementChild;\n    var util = this.util;\n\n    if (util.isList(element)) {\n      var nodeName = element.nodeName;\n      button.setAttribute('data-focus', nodeName);\n      util.addClass(button, 'active');\n\n      if (/UL/i.test(nodeName)) {\n        util.changeElement(icon, this.context.list.icons.bullets);\n      } else {\n        util.changeElement(icon, this.context.list.icons.number);\n      }\n\n      return true;\n    } else {\n      button.removeAttribute('data-focus');\n      util.changeElement(icon, this.context.list.icons.number);\n      util.removeClass(button, 'active');\n    }\n\n    return false;\n  },\n\n  /**\n  * @Override submenu\n  */\n  on: function on() {\n    var listContext = this.context.list;\n    var list = listContext._list;\n    var currentList = listContext.targetButton.getAttribute('data-focus') || '';\n\n    if (currentList !== listContext.currentList) {\n      for (var i = 0, len = list.length; i < len; i++) {\n        if (currentList === list[i].getAttribute('data-command')) {\n          this.util.addClass(list[i], 'active');\n        } else {\n          this.util.removeClass(list[i], 'active');\n        }\n      }\n\n      listContext.currentList = currentList;\n    }\n  },\n  editList: function editList(command, selectedCells, detach) {\n    var range = this.getRange();\n    var selectedFormats = !selectedCells ? this.getSelectedElementsAndComponents(false) : selectedCells;\n\n    if (selectedFormats.length === 0) {\n      if (selectedCells) return;\n      range = this.getRange_addLine(range, null);\n      selectedFormats = this.getSelectedElementsAndComponents(false);\n      if (selectedFormats.length === 0) return;\n    }\n\n    var util = this.util;\n    util.sortByDepth(selectedFormats, true); // merge\n\n    var firstSel = selectedFormats[0];\n    var lastSel = selectedFormats[selectedFormats.length - 1];\n    var topEl = (util.isListCell(firstSel) || util.isComponent(firstSel)) && !firstSel.previousElementSibling ? firstSel.parentNode.previousElementSibling : firstSel.previousElementSibling;\n    var bottomEl = (util.isListCell(lastSel) || util.isComponent(lastSel)) && !lastSel.nextElementSibling ? lastSel.parentNode.nextElementSibling : lastSel.nextElementSibling;\n    var originRange = {\n      sc: range.startContainer,\n      so: range.startContainer === range.endContainer && util.onlyZeroWidthSpace(range.startContainer) && range.startOffset === 0 && range.endOffset === 1 ? range.endOffset : range.startOffset,\n      ec: range.endContainer,\n      eo: range.endOffset\n    };\n    var isRemove = true;\n\n    var _loop = function _loop(i, len) {\n      if (!util.isList(util.getRangeFormatElement(selectedFormats[i], function (current) {\n        return this.getRangeFormatElement(current) && current !== selectedFormats[i];\n      }.bind(util)))) {\n        isRemove = false;\n        return \"break\";\n      }\n    };\n\n    for (var i = 0, len = selectedFormats.length; i < len; i++) {\n      var _ret = _loop(i, len);\n\n      if (_ret === \"break\") break;\n    }\n\n    if (isRemove && (!topEl || firstSel.tagName !== topEl.tagName || command !== topEl.tagName.toUpperCase()) && (!bottomEl || lastSel.tagName !== bottomEl.tagName || command !== bottomEl.tagName.toUpperCase())) {\n      if (detach) {\n        for (var _i = 0, _len = selectedFormats.length; _i < _len; _i++) {\n          for (var j = _i - 1; j >= 0; j--) {\n            if (selectedFormats[j].contains(selectedFormats[_i])) {\n              selectedFormats.splice(_i, 1);\n              _i--;\n              _len--;\n              break;\n            }\n          }\n        }\n      }\n\n      var currentFormat = util.getRangeFormatElement(firstSel);\n      var cancel = currentFormat && currentFormat.tagName === command;\n      var rangeArr, tempList;\n\n      var passComponent = function (current) {\n        return !this.isComponent(current);\n      }.bind(util);\n\n      if (!cancel) tempList = util.createElement(command);\n\n      for (var _i2 = 0, _len2 = selectedFormats.length, r, o; _i2 < _len2; _i2++) {\n        o = util.getRangeFormatElement(selectedFormats[_i2], passComponent);\n        if (!o || !util.isList(o)) continue;\n\n        if (!r) {\n          r = o;\n          rangeArr = {\n            r: r,\n            f: [util.getParentElement(selectedFormats[_i2], 'LI')]\n          };\n        } else {\n          if (r !== o) {\n            if (detach && util.isListCell(o.parentNode)) {\n              this.plugins.list._detachNested.call(this, rangeArr.f);\n            } else {\n              this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, tempList, false, true);\n            }\n\n            o = selectedFormats[_i2].parentNode;\n            if (!cancel) tempList = util.createElement(command);\n            r = o;\n            rangeArr = {\n              r: r,\n              f: [util.getParentElement(selectedFormats[_i2], 'LI')]\n            };\n          } else {\n            rangeArr.f.push(util.getParentElement(selectedFormats[_i2], 'LI'));\n          }\n        }\n\n        if (_i2 === _len2 - 1) {\n          if (detach && util.isListCell(o.parentNode)) {\n            this.plugins.list._detachNested.call(this, rangeArr.f);\n          } else {\n            this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, tempList, false, true);\n          }\n        }\n      }\n    } else {\n      var topElParent = topEl ? topEl.parentNode : topEl;\n      var bottomElParent = bottomEl ? bottomEl.parentNode : bottomEl;\n      topEl = topElParent && !util.isWysiwygDiv(topElParent) && topElParent.nodeName === command ? topElParent : topEl;\n      bottomEl = bottomElParent && !util.isWysiwygDiv(bottomElParent) && bottomElParent.nodeName === command ? bottomElParent : bottomEl;\n      var mergeTop = topEl && topEl.tagName === command;\n      var mergeBottom = bottomEl && bottomEl.tagName === command;\n      var list = mergeTop ? topEl : util.createElement(command);\n      var firstList = null;\n      var lastList = null;\n      var topNumber = null;\n      var bottomNumber = null;\n\n      var _passComponent = function (current) {\n        return !this.isComponent(current) && !this.isList(current);\n      }.bind(util);\n\n      for (var _i3 = 0, _len3 = selectedFormats.length, newCell, fTag, isCell, next, originParent, nextParent, parentTag, siblingTag, rangeTag; _i3 < _len3; _i3++) {\n        fTag = selectedFormats[_i3];\n\n        if (fTag.childNodes.length === 0 && !util._isIgnoreNodeChange(fTag)) {\n          util.removeItem(fTag);\n          continue;\n        }\n\n        next = selectedFormats[_i3 + 1];\n        originParent = fTag.parentNode;\n        nextParent = next ? next.parentNode : null;\n        isCell = util.isListCell(fTag);\n        rangeTag = util.isRangeFormatElement(originParent) ? originParent : null;\n        parentTag = isCell && !util.isWysiwygDiv(originParent) ? originParent.parentNode : originParent;\n        siblingTag = isCell && !util.isWysiwygDiv(originParent) ? !next || util.isListCell(parentTag) ? originParent : originParent.nextSibling : fTag.nextSibling;\n        newCell = util.createElement('LI');\n        util.copyFormatAttributes(newCell, fTag);\n\n        if (_i3 === 0 && originRange.sc === fTag) {\n          originRange.sc = newCell;\n        }\n\n        if (_i3 === _len3 - 1 && originRange.ec === fTag) {\n          originRange.ec = newCell;\n        }\n\n        if (util.isComponent(fTag)) {\n          var isHR = /^HR$/i.test(fTag.nodeName);\n          if (!isHR) newCell.innerHTML = '<br>';\n          newCell.innerHTML += fTag.outerHTML;\n          if (isHR) newCell.innerHTML += '<br>';\n        } else {\n          var fChildren = fTag.childNodes;\n\n          while (fChildren[0]) {\n            newCell.appendChild(fChildren[0]);\n          }\n        }\n\n        list.appendChild(newCell);\n        if (!next) lastList = list;\n\n        if (!next || parentTag !== nextParent || util.isRangeFormatElement(siblingTag)) {\n          if (!firstList) firstList = list;\n\n          if ((!mergeTop || !next || parentTag !== nextParent) && !(next && util.isList(nextParent) && nextParent === originParent)) {\n            if (list.parentNode !== parentTag) parentTag.insertBefore(list, siblingTag);\n          }\n        }\n\n        util.removeItem(fTag);\n        if (mergeTop && topNumber === null) topNumber = list.children.length - 1;\n\n        if (next && (util.getRangeFormatElement(nextParent, _passComponent) !== util.getRangeFormatElement(originParent, _passComponent) || util.isList(nextParent) && util.isList(originParent) && util.getElementDepth(nextParent) !== util.getElementDepth(originParent))) {\n          list = util.createElement(command);\n        }\n\n        if (rangeTag && rangeTag.children.length === 0) util.removeItem(rangeTag);\n      }\n\n      if (topNumber) {\n        firstList = firstList.children[topNumber];\n      }\n\n      if (mergeBottom) {\n        bottomNumber = list.children.length - 1;\n        list.innerHTML += bottomEl.innerHTML;\n        lastList = list.children[bottomNumber];\n        util.removeItem(bottomEl);\n      }\n    }\n\n    this.effectNode = null;\n    return originRange;\n  },\n  _detachNested: function _detachNested(cells) {\n    var first = cells[0];\n    var last = cells[cells.length - 1];\n    var next = last.nextElementSibling;\n    var originList = first.parentNode;\n    var sibling = originList.parentNode.nextElementSibling;\n    var parentNode = originList.parentNode.parentNode;\n\n    for (var c = 0, cLen = cells.length; c < cLen; c++) {\n      parentNode.insertBefore(cells[c], sibling);\n    }\n\n    if (next && originList.children.length > 0) {\n      var newList = originList.cloneNode(false);\n      var children = originList.childNodes;\n      var index = this.util.getPositionIndex(next);\n\n      while (children[index]) {\n        newList.appendChild(children[index]);\n      }\n\n      last.appendChild(newList);\n    }\n\n    if (originList.children.length === 0) this.util.removeItem(originList);\n    this.util.mergeSameTags(parentNode);\n    var edge = this.util.getEdgeChildNodes(first, last);\n    return {\n      cc: first.parentNode,\n      sc: edge.sc,\n      ec: edge.ec\n    };\n  },\n  editInsideList: function editInsideList(remove, selectedCells) {\n    selectedCells = !selectedCells ? this.getSelectedElements().filter(function (el) {\n      return this.isListCell(el);\n    }.bind(this.util)) : selectedCells;\n    var cellsLen = selectedCells.length;\n\n    if (cellsLen === 0 || !remove && !this.util.isListCell(selectedCells[0].previousElementSibling) && !this.util.isListCell(selectedCells[cellsLen - 1].nextElementSibling)) {\n      return {\n        sc: selectedCells[0],\n        so: 0,\n        ec: selectedCells[cellsLen - 1],\n        eo: 1\n      };\n    }\n\n    var originList = selectedCells[0].parentNode;\n    var lastCell = selectedCells[cellsLen - 1];\n    var range = null;\n\n    if (remove) {\n      if (originList !== lastCell.parentNode && this.util.isList(lastCell.parentNode.parentNode) && lastCell.nextElementSibling) {\n        lastCell = lastCell.nextElementSibling;\n\n        while (lastCell) {\n          selectedCells.push(lastCell);\n          lastCell = lastCell.nextElementSibling;\n        }\n      }\n\n      range = this.plugins.list.editList.call(this, originList.nodeName.toUpperCase(), selectedCells, true);\n    } else {\n      var innerList = this.util.createElement(originList.nodeName);\n      var prev = selectedCells[0].previousElementSibling;\n      var next = lastCell.nextElementSibling;\n      var nodePath = {\n        s: null,\n        e: null,\n        sl: originList,\n        el: originList\n      };\n\n      for (var i = 0, len = cellsLen, c; i < len; i++) {\n        c = selectedCells[i];\n\n        if (c.parentNode !== originList) {\n          this.plugins.list._insiedList.call(this, originList, innerList, prev, next, nodePath);\n\n          originList = c.parentNode;\n          innerList = this.util.createElement(originList.nodeName);\n        }\n\n        prev = c.previousElementSibling;\n        next = c.nextElementSibling;\n        innerList.appendChild(c);\n      }\n\n      this.plugins.list._insiedList.call(this, originList, innerList, prev, next, nodePath);\n\n      var sc = this.util.getNodeFromPath(nodePath.s, nodePath.sl);\n      var ec = this.util.getNodeFromPath(nodePath.e, nodePath.el);\n      range = {\n        sc: sc,\n        so: 0,\n        ec: ec,\n        eo: ec.textContent.length\n      };\n    }\n\n    return range;\n  },\n  _insiedList: function _insiedList(originList, innerList, prev, next, nodePath) {\n    var insertPrev = false;\n\n    if (prev && innerList.tagName === prev.tagName) {\n      var children = innerList.children;\n\n      while (children[0]) {\n        prev.appendChild(children[0]);\n      }\n\n      innerList = prev;\n      insertPrev = true;\n    }\n\n    if (next && innerList.tagName === next.tagName) {\n      var _children = next.children;\n\n      while (_children[0]) {\n        innerList.appendChild(_children[0]);\n      }\n\n      var temp = next.nextElementSibling;\n      next.parentNode.removeChild(next);\n      next = temp;\n    }\n\n    if (!insertPrev) {\n      if (this.util.isListCell(prev)) {\n        originList = prev;\n        next = null;\n      }\n\n      originList.insertBefore(innerList, next);\n\n      if (!nodePath.s) {\n        nodePath.s = this.util.getNodePath(innerList.firstElementChild.firstChild, originList, null);\n        nodePath.sl = originList;\n      }\n\n      var slPath = originList.contains(nodePath.sl) ? this.util.getNodePath(nodePath.sl, originList) : null;\n      nodePath.e = this.util.getNodePath(innerList.lastElementChild.firstChild, originList, null);\n      nodePath.el = originList;\n      this.util.mergeSameTags(originList, [nodePath.s, nodePath.e, slPath], false);\n      this.util.mergeNestedTags(originList);\n      if (slPath) nodePath.sl = this.util.getNodeFromPath(slPath, originList);\n    }\n\n    return innerList;\n  },\n  pickup: function pickup(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    var target = e.target;\n    var command = '';\n\n    while (!command && !/^UL$/i.test(target.tagName)) {\n      command = target.getAttribute('data-command');\n      target = target.parentNode;\n    }\n\n    if (!command) return;\n    var range = this.plugins.list.editList.call(this, command, null, false);\n    if (range) this.setRange(range.sc, range.so, range.ec, range.eo);\n    this.submenuOff(); // history stack\n\n    this.history.push(false);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}