{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/balloon/balloontoolbar\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '../../panel/balloon/contextualballoon';\nimport ToolbarView from '../toolbarview';\nimport BalloonPanelView, { generatePositions } from '../../panel/balloon/balloonpanelview.js';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nimport { debounce } from 'lodash-es';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport { env, global } from '@ckeditor/ckeditor5-utils';\nvar toPx = toUnit('px');\n/**\n * The contextual toolbar.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar BalloonToolbar = /*#__PURE__*/function (_Plugin) {\n  _inherits(BalloonToolbar, _Plugin);\n\n  _createClass(BalloonToolbar, null, [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'BalloonToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"requires\",\n    get: function get() {\n      return [ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }]);\n\n  function BalloonToolbar(editor) {\n    var _this;\n\n    _classCallCheck(this, BalloonToolbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BalloonToolbar).call(this, editor));\n    /**\n     * A cached and normalized `config.balloonToolbar` object.\n     *\n     * @type {module:core/editor/editorconfig~EditorConfig#balloonToolbar}\n     * @private\n     */\n\n    _this._balloonConfig = normalizeToolbarConfig(editor.config.get('balloonToolbar'));\n    /**\n     * The toolbar view displayed in the balloon.\n     *\n     * @type {module:ui/toolbar/toolbarview~ToolbarView}\n     */\n\n    _this.toolbarView = _this._createToolbarView();\n    /**\n     * Tracks the focus of the {@link module:core/editor/editorui~EditorUI#getEditableElement editable element}\n     * and the {@link #toolbarView}. When both are blurred then the toolbar should hide.\n     *\n     * @readonly\n     * @type {module:utils:focustracker~FocusTracker}\n     */\n\n    _this.focusTracker = new FocusTracker(); // Wait for the EditorUI#init. EditableElement is not available before.\n\n    editor.ui.once('ready', function () {\n      _this.focusTracker.add(editor.ui.getEditableElement());\n\n      _this.focusTracker.add(_this.toolbarView.element);\n    });\n    /**\n     * An instance of the resize observer that allows to respond to changes in editable's geometry\n     * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n     *\n     * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n     * {@link module:core/editor/editorconfig~EditorConfig#balloonToolbar configuration}.\n     *\n     * **Note:** Created in {@link #init}.\n     *\n     * @protected\n     * @member {module:utils/dom/resizeobserver~ResizeObserver}\n     */\n\n    _this._resizeObserver = null;\n    /**\n     * The contextual balloon plugin instance.\n     *\n     * @private\n     * @type {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n     */\n\n    _this._balloon = editor.plugins.get(ContextualBalloon);\n    /**\n     * Fires {@link #event:_selectionChangeDebounced} event using `lodash#debounce`.\n     *\n     * This function is stored as a plugin property to make possible to cancel\n     * trailing debounced invocation on destroy.\n     *\n     * @private\n     * @type {Function}\n     */\n\n    _this._fireSelectionChangeDebounced = debounce(function () {\n      return _this.fire('_selectionChangeDebounced');\n    }, 200); // The appearance of the BalloonToolbar method is eventâ€“driven.\n    // It is possible to stop the #show event and this prevent the toolbar from showing up.\n\n    _this.decorate('show');\n\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(BalloonToolbar, [{\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      var editor = this.editor;\n      var selection = editor.model.document.selection; // Show/hide the toolbar on editable focus/blur.\n\n      this.listenTo(this.focusTracker, 'change:isFocused', function (evt, name, isFocused) {\n        var isToolbarVisible = _this2._balloon.visibleView === _this2.toolbarView;\n\n        if (!isFocused && isToolbarVisible) {\n          _this2.hide();\n        } else if (isFocused) {\n          _this2.show();\n        }\n      }); // Hide the toolbar when the selection is changed by a direct change or has changed to collapsed.\n\n      this.listenTo(selection, 'change:range', function (evt, data) {\n        if (data.directChange || selection.isCollapsed) {\n          _this2.hide();\n        } // Fire internal `_selectionChangeDebounced` event to use it for showing\n        // the toolbar after the selection stops changing.\n\n\n        _this2._fireSelectionChangeDebounced();\n      }); // Show the toolbar when the selection stops changing.\n\n      this.listenTo(this, '_selectionChangeDebounced', function () {\n        if (_this2.editor.editing.view.document.isFocused) {\n          _this2.show();\n        }\n      });\n\n      if (!this._balloonConfig.shouldNotGroupWhenFull) {\n        this.listenTo(editor, 'ready', function () {\n          var editableElement = editor.ui.view.editable.element; // Set #toolbarView's max-width on the initialization and update it on the editable resize.\n\n          _this2._resizeObserver = new ResizeObserver(editableElement, function () {\n            // The max-width equals 90% of the editable's width for the best user experience.\n            // The value keeps the balloon very close to the boundaries of the editable and limits the cases\n            // when the balloon juts out from the editable element it belongs to.\n            _this2.toolbarView.maxWidth = toPx(new Rect(editableElement).width * .9);\n          });\n        });\n      } // Listen to the toolbar view and whenever it changes its geometry due to some items being\n      // grouped or ungrouped, update the position of the balloon because a shorter/longer toolbar\n      // means the balloon could be pointing at the wrong place. Once updated, the balloon will point\n      // at the right selection in the content again.\n      // https://github.com/ckeditor/ckeditor5/issues/6444\n\n\n      this.listenTo(this.toolbarView, 'groupedItemsUpdate', function () {\n        _this2._updatePosition();\n      });\n    }\n    /**\n     * Creates toolbar components based on given configuration.\n     * This needs to be done when all plugins are ready.\n     *\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"afterInit\",\n    value: function afterInit() {\n      var factory = this.editor.ui.componentFactory;\n      this.toolbarView.fillFromConfig(this._balloonConfig, factory);\n    }\n    /**\n     * Creates the toolbar view instance.\n     *\n     * @private\n     * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n     */\n\n  }, {\n    key: \"_createToolbarView\",\n    value: function _createToolbarView() {\n      var shouldGroupWhenFull = !this._balloonConfig.shouldNotGroupWhenFull;\n      var toolbarView = new ToolbarView(this.editor.locale, {\n        shouldGroupWhenFull: shouldGroupWhenFull,\n        isFloating: true\n      });\n      toolbarView.render();\n      return toolbarView;\n    }\n    /**\n     * Shows the toolbar and attaches it to the selection.\n     *\n     * Fires {@link #event:show} event which can be stopped to prevent the toolbar from showing up.\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this3 = this;\n\n      var editor = this.editor;\n      var selection = editor.model.document.selection;\n      var schema = editor.model.schema; // Do not add the toolbar to the balloon stack twice.\n\n      if (this._balloon.hasView(this.toolbarView)) {\n        return;\n      } // Do not show the toolbar when the selection is collapsed.\n\n\n      if (selection.isCollapsed) {\n        return;\n      } // Do not show the toolbar when there is more than one range in the selection and they fully contain selectable elements.\n      // See https://github.com/ckeditor/ckeditor5/issues/6443.\n\n\n      if (selectionContainsOnlyMultipleSelectables(selection, schema)) {\n        return;\n      } // Don not show the toolbar when all components inside are disabled\n      // see https://github.com/ckeditor/ckeditor5-ui/issues/269.\n\n\n      if (Array.from(this.toolbarView.items).every(function (item) {\n        return item.isEnabled !== undefined && !item.isEnabled;\n      })) {\n        return;\n      } // Update the toolbar position when the editor ui should be refreshed.\n\n\n      this.listenTo(this.editor.ui, 'update', function () {\n        _this3._updatePosition();\n      }); // Add the toolbar to the common editor contextual balloon.\n\n      this._balloon.add({\n        view: this.toolbarView,\n        position: this._getBalloonPositionData(),\n        balloonClassName: 'ck-toolbar-container'\n      });\n    }\n    /**\n     * Hides the toolbar.\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      if (this._balloon.hasView(this.toolbarView)) {\n        this.stopListening(this.editor.ui, 'update');\n\n        this._balloon.remove(this.toolbarView);\n      }\n    }\n    /**\n     * Returns positioning options for the {@link #_balloon}. They control the way balloon is attached\n     * to the selection.\n     *\n     * @private\n     * @returns {module:utils/dom/position~Options}\n     */\n\n  }, {\n    key: \"_getBalloonPositionData\",\n    value: function _getBalloonPositionData() {\n      var editor = this.editor;\n      var view = editor.editing.view;\n      var viewDocument = view.document;\n      var viewSelection = viewDocument.selection; // Get direction of the selection.\n\n      var isBackward = viewDocument.selection.isBackward;\n      return {\n        // Because the target for BalloonPanelView is a Rect (not DOMRange), it's geometry will stay fixed\n        // as the window scrolls. To let the BalloonPanelView follow such Rect, is must be continuously\n        // computed and hence, the target is defined as a function instead of a static value.\n        // https://github.com/ckeditor/ckeditor5-ui/issues/195\n        target: function target() {\n          var range = isBackward ? viewSelection.getFirstRange() : viewSelection.getLastRange();\n          var rangeRects = Rect.getDomRangeRects(view.domConverter.viewRangeToDom(range)); // Select the proper range rect depending on the direction of the selection.\n\n          if (isBackward) {\n            return rangeRects[0];\n          } else {\n            // Ditch the zero-width \"orphan\" rect in the next line for the forward selection if there's\n            // another one preceding it. It is not rendered as a selection by the web browser anyway.\n            // https://github.com/ckeditor/ckeditor5-ui/issues/308\n            if (rangeRects.length > 1 && rangeRects[rangeRects.length - 1].width === 0) {\n              rangeRects.pop();\n            }\n\n            return rangeRects[rangeRects.length - 1];\n          }\n        },\n        positions: this._getBalloonPositions(isBackward)\n      };\n    }\n    /**\n     * Updates the position of the {@link #_balloon} to make up for changes:\n     *\n     * * in the geometry of the selection it is attached to (e.g. the selection moved in the viewport or expanded or shrunk),\n     * * or the geometry of the balloon toolbar itself (e.g. the toolbar has grouped or ungrouped some items and it is shorter or longer).\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_updatePosition\",\n    value: function _updatePosition() {\n      this._balloon.updatePosition(this._getBalloonPositionData());\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(BalloonToolbar.prototype), \"destroy\", this).call(this);\n\n      this.stopListening();\n\n      this._fireSelectionChangeDebounced.cancel();\n\n      this.toolbarView.destroy();\n      this.focusTracker.destroy();\n\n      if (this._resizeObserver) {\n        this._resizeObserver.destroy();\n      }\n    }\n    /**\n     * This event is fired just before the toolbar shows up. Stopping this event will prevent this.\n     *\n     * @event show\n     */\n\n    /**\n     * This is internal plugin event which is fired 200 ms after model selection last change.\n     * This is to makes easy test debounced action without need to use `setTimeout`.\n     *\n     * @protected\n     * @event _selectionChangeDebounced\n     */\n\n    /**\n     * Returns toolbar positions for the given direction of the selection.\n     *\n     * @private\n     * @param {Boolean} isBackward\n     * @returns {Array.<module:utils/dom/position~Position>}\n     */\n\n  }, {\n    key: \"_getBalloonPositions\",\n    value: function _getBalloonPositions(isBackward) {\n      var isSafariIniOS = env.isSafari && env.isiOS; // https://github.com/ckeditor/ckeditor5/issues/7707\n\n      var positions = isSafariIniOS ? generatePositions({\n        // 20px when zoomed out. Less then 20px when zoomed in; the \"radius\" of the native selection handle gets\n        // smaller as the user zooms in. No less than the default v-offset, though.\n        verticalOffset: Math.max(BalloonPanelView.arrowVerticalOffset, Math.round(20 / global.window.visualViewport.scale))\n      }) : BalloonPanelView.defaultPositions;\n      return isBackward ? [positions.northWestArrowSouth, positions.northWestArrowSouthWest, positions.northWestArrowSouthEast, positions.northWestArrowSouthMiddleEast, positions.northWestArrowSouthMiddleWest, positions.southWestArrowNorth, positions.southWestArrowNorthWest, positions.southWestArrowNorthEast, positions.southWestArrowNorthMiddleWest, positions.southWestArrowNorthMiddleEast] : [positions.southEastArrowNorth, positions.southEastArrowNorthEast, positions.southEastArrowNorthWest, positions.southEastArrowNorthMiddleEast, positions.southEastArrowNorthMiddleWest, positions.northEastArrowSouth, positions.northEastArrowSouthEast, positions.northEastArrowSouthWest, positions.northEastArrowSouthMiddleEast, positions.northEastArrowSouthMiddleWest];\n    }\n  }]);\n\n  return BalloonToolbar;\n}(Plugin); // Returns \"true\" when the selection has multiple ranges and each range contains a selectable element\n// and nothing else.\n//\n// @private\n// @param {module:engine/model/selection~Selection} selection\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\n\nexport { BalloonToolbar as default };\n\nfunction selectionContainsOnlyMultipleSelectables(selection, schema) {\n  // It doesn't contain multiple objects if there is only one range.\n  if (selection.rangeCount === 1) {\n    return false;\n  }\n\n  return _toConsumableArray(selection.getRanges()).every(function (range) {\n    var element = range.getContainedElement();\n    return element && schema.isSelectable(element);\n  });\n}\n/**\n * Contextual toolbar configuration. Used by the {@link module:ui/toolbar/balloon/balloontoolbar~BalloonToolbar}\n * feature.\n *\n * ## Configuring toolbar items\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: [ 'bold', 'italic', 'undo', 'redo' ]\n *\t\t};\n *\n * You can also use `'|'` to create a separator between groups of items:\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: [ 'bold', 'italic', | 'undo', 'redo' ]\n *\t\t};\n *\n * Read also about configuring the main editor toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * ## Configuring items grouping\n *\n * You can prevent automatic items grouping by setting the `shouldNotGroupWhenFull` option:\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: {\n *\t\t\t\titems: [ 'bold', 'italic', 'undo', 'redo' ],\n *\t\t\t\tshouldNotGroupWhenFull: true\n *\t\t\t},\n *\t\t};\n *\n * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#balloonToolbar\n */","map":null,"metadata":{},"sourceType":"module"}