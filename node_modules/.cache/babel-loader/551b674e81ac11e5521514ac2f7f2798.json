{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/buttonview\n */\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport TooltipView from '../tooltip/tooltipview';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport '../../theme/components/button/button.css';\n/**\n * The button view class.\n *\n *\t\tconst view = new ButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true,\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/view~View\n * @implements module:ui/button/button~Button\n */\n\nvar ButtonView = /*#__PURE__*/function (_View) {\n  _inherits(ButtonView, _View);\n\n  /**\n   * @inheritDoc\n   */\n  function ButtonView(locale) {\n    var _this;\n\n    _classCallCheck(this, ButtonView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ButtonView).call(this, locale));\n    var bind = _this.bindTemplate;\n    var ariaLabelUid = uid(); // Implement the Button interface.\n\n    _this.set('class');\n\n    _this.set('labelStyle');\n\n    _this.set('icon');\n\n    _this.set('isEnabled', true);\n\n    _this.set('isOn', false);\n\n    _this.set('isVisible', true);\n\n    _this.set('isToggleable', false);\n\n    _this.set('keystroke');\n\n    _this.set('label');\n\n    _this.set('tabindex', -1);\n\n    _this.set('tooltip');\n\n    _this.set('tooltipPosition', 's');\n\n    _this.set('type', 'button');\n\n    _this.set('withText', false);\n\n    _this.set('withKeystroke', false);\n    /**\n     * Collection of the child views inside of the button {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n\n    _this.children = _this.createCollection();\n    /**\n     * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\n     *\n     * @readonly\n     * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\n     */\n\n    _this.tooltipView = _this._createTooltipView();\n    /**\n     * Label of the button view. It is configurable using the {@link #label label attribute}.\n     *\n     * @readonly\n     * @member {module:ui/view~View} #labelView\n     */\n\n    _this.labelView = _this._createLabelView(ariaLabelUid);\n    /**\n     * The icon view of the button. Will be added to {@link #children} when the\n     * {@link #icon icon attribute} is defined.\n     *\n     * @readonly\n     * @member {module:ui/icon/iconview~IconView} #iconView\n     */\n\n    _this.iconView = new IconView();\n\n    _this.iconView.extendTemplate({\n      attributes: {\n        class: 'ck-button__icon'\n      }\n    });\n    /**\n     * A view displaying the keystroke of the button next to the {@link #labelView label}.\n     * Added to {@link #children} when the {@link #withKeystroke `withKeystroke` attribute}\n     * is defined.\n     *\n     * @readonly\n     * @member {module:ui/view/view~View} #keystrokeView\n     */\n\n\n    _this.keystrokeView = _this._createKeystrokeView();\n    /**\n     * Tooltip of the button bound to the template.\n     *\n     * @see #tooltip\n     * @see #_getTooltipString\n     * @private\n     * @observable\n     * @member {Boolean} #_tooltipString\n     */\n\n    _this.bind('_tooltipString').to(_assertThisInitialized(_assertThisInitialized(_this)), 'tooltip', _assertThisInitialized(_assertThisInitialized(_this)), 'label', _assertThisInitialized(_assertThisInitialized(_this)), 'keystroke', _this._getTooltipString.bind(_assertThisInitialized(_assertThisInitialized(_this))));\n\n    _this.setTemplate({\n      tag: 'button',\n      attributes: {\n        class: ['ck', 'ck-button', bind.to('class'), bind.if('isEnabled', 'ck-disabled', function (value) {\n          return !value;\n        }), bind.if('isVisible', 'ck-hidden', function (value) {\n          return !value;\n        }), bind.to('isOn', function (value) {\n          return value ? 'ck-on' : 'ck-off';\n        }), bind.if('withText', 'ck-button_with-text'), bind.if('withKeystroke', 'ck-button_with-keystroke')],\n        type: bind.to('type', function (value) {\n          return value ? value : 'button';\n        }),\n        tabindex: bind.to('tabindex'),\n        'aria-labelledby': \"ck-editor__aria-label_\".concat(ariaLabelUid),\n        'aria-disabled': bind.if('isEnabled', true, function (value) {\n          return !value;\n        }),\n        'aria-pressed': bind.to('isOn', function (value) {\n          return _this.isToggleable ? String(value) : false;\n        })\n      },\n      children: _this.children,\n      on: {\n        mousedown: bind.to(function (evt) {\n          evt.preventDefault();\n        }),\n        click: bind.to(function (evt) {\n          // We can't make the button disabled using the disabled attribute, because it won't be focusable.\n          // Though, shouldn't this condition be moved to the button controller?\n          if (_this.isEnabled) {\n            _this.fire('execute');\n          } else {\n            // Prevent the default when button is disabled, to block e.g.\n            // automatic form submitting. See ckeditor/ckeditor5-link#74.\n            evt.preventDefault();\n          }\n        })\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(ButtonView, [{\n    key: \"render\",\n    value: function render() {\n      _get(_getPrototypeOf(ButtonView.prototype), \"render\", this).call(this);\n\n      if (this.icon) {\n        this.iconView.bind('content').to(this, 'icon');\n        this.children.add(this.iconView);\n      }\n\n      this.children.add(this.tooltipView);\n      this.children.add(this.labelView);\n\n      if (this.withKeystroke && this.keystroke) {\n        this.children.add(this.keystrokeView);\n      }\n    }\n    /**\n     * Focuses the {@link #element} of the button.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.element.focus();\n    }\n    /**\n     * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\n     * attributes.\n     *\n     * @private\n     * @returns {module:ui/tooltip/tooltipview~TooltipView}\n     */\n\n  }, {\n    key: \"_createTooltipView\",\n    value: function _createTooltipView() {\n      var tooltipView = new TooltipView();\n      tooltipView.bind('text').to(this, '_tooltipString');\n      tooltipView.bind('position').to(this, 'tooltipPosition');\n      return tooltipView;\n    }\n    /**\n     * Creates a label view instance and binds it with button attributes.\n     *\n     * @private\n     * @param {String} ariaLabelUid The aria label UID.\n     * @returns {module:ui/view~View}\n     */\n\n  }, {\n    key: \"_createLabelView\",\n    value: function _createLabelView(ariaLabelUid) {\n      var labelView = new View();\n      var bind = this.bindTemplate;\n      labelView.setTemplate({\n        tag: 'span',\n        attributes: {\n          class: ['ck', 'ck-button__label'],\n          style: bind.to('labelStyle'),\n          id: \"ck-editor__aria-label_\".concat(ariaLabelUid)\n        },\n        children: [{\n          text: this.bindTemplate.to('label')\n        }]\n      });\n      return labelView;\n    }\n    /**\n     * Creates a view that displays a keystroke next to a {@link #labelView label }\n     * and binds it with button attributes.\n     *\n     * @private\n     * @returns {module:ui/view~View}\n     */\n\n  }, {\n    key: \"_createKeystrokeView\",\n    value: function _createKeystrokeView() {\n      var keystrokeView = new View();\n      keystrokeView.setTemplate({\n        tag: 'span',\n        attributes: {\n          class: ['ck', 'ck-button__keystroke']\n        },\n        children: [{\n          text: this.bindTemplate.to('keystroke', function (text) {\n            return getEnvKeystrokeText(text);\n          })\n        }]\n      });\n      return keystrokeView;\n    }\n    /**\n     * Gets the text for the {@link #tooltipView} from the combination of\n     * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n     *\n     * @private\n     * @see #tooltip\n     * @see #_tooltipString\n     * @param {Boolean|String|Function} tooltip Button tooltip.\n     * @param {String} label Button label.\n     * @param {String} keystroke Button keystroke.\n     * @returns {String}\n     */\n\n  }, {\n    key: \"_getTooltipString\",\n    value: function _getTooltipString(tooltip, label, keystroke) {\n      if (tooltip) {\n        if (typeof tooltip == 'string') {\n          return tooltip;\n        } else {\n          if (keystroke) {\n            keystroke = getEnvKeystrokeText(keystroke);\n          }\n\n          if (tooltip instanceof Function) {\n            return tooltip(label, keystroke);\n          } else {\n            return \"\".concat(label).concat(keystroke ? \" (\".concat(keystroke, \")\") : '');\n          }\n        }\n      }\n\n      return '';\n    }\n  }]);\n\n  return ButtonView;\n}(View);\n\nexport { ButtonView as default };","map":null,"metadata":{},"sourceType":"module"}