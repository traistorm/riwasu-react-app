{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport pick from 'lodash/pick';\nimport MonthDropdown from './MonthDropdown';\nimport TimeDropdown from './TimeDropdown';\nimport View from './View';\nimport Header from './Header';\nimport { useClassNames, DateUtils, composeFunctions } from '../utils';\nimport { CalendarProvider } from './CalendarContext';\nexport var CalendarState;\n\n(function (CalendarState) {\n  CalendarState[\"DROP_TIME\"] = \"DROP_TIME\";\n  CalendarState[\"DROP_MONTH\"] = \"DROP_MONTH\";\n})(CalendarState || (CalendarState = {}));\n\nvar Calendar = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      className = props.className,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'calendar' : _props$classPrefix,\n      calendarState = props.calendarState,\n      dateRange = props.dateRange,\n      disabledBackward = props.disabledBackward,\n      disabledDate = props.disabledDate,\n      disabledForward = props.disabledForward,\n      format = props.format,\n      hoverRangeValue = props.hoverRangeValue,\n      inSameMonth = props.inSameMonth,\n      _props$isoWeek = props.isoWeek,\n      isoWeek = _props$isoWeek === void 0 ? false : _props$isoWeek,\n      limitEndYear = props.limitEndYear,\n      locale = props.locale,\n      onChangePageDate = props.onChangePageDate,\n      onChangePageTime = props.onChangePageTime,\n      onMouseMove = props.onMouseMove,\n      onMoveBackward = props.onMoveBackward,\n      onMoveForward = props.onMoveForward,\n      onSelect = props.onSelect,\n      onToggleMeridian = props.onToggleMeridian,\n      onToggleMonthDropdown = props.onToggleMonthDropdown,\n      onToggleTimeDropdown = props.onToggleTimeDropdown,\n      calendarDate = props.calendarDate,\n      renderCell = props.renderCell,\n      renderTitle = props.renderTitle,\n      renderToolbar = props.renderToolbar,\n      showMeridian = props.showMeridian,\n      showWeekNumbers = props.showWeekNumbers,\n      inline = props.inline,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"className\", \"classPrefix\", \"calendarState\", \"dateRange\", \"disabledBackward\", \"disabledDate\", \"disabledForward\", \"format\", \"hoverRangeValue\", \"inSameMonth\", \"isoWeek\", \"limitEndYear\", \"locale\", \"onChangePageDate\", \"onChangePageTime\", \"onMouseMove\", \"onMoveBackward\", \"onMoveForward\", \"onSelect\", \"onToggleMeridian\", \"onToggleMonthDropdown\", \"onToggleTimeDropdown\", \"calendarDate\", \"renderCell\", \"renderTitle\", \"renderToolbar\", \"showMeridian\", \"showWeekNumbers\", \"inline\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge;\n\n  var isDisabledDate = useCallback(function (date) {\n    var _disabledDate;\n\n    return (_disabledDate = disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date)) !== null && _disabledDate !== void 0 ? _disabledDate : false;\n  }, [disabledDate]);\n\n  var isTimeDisabled = function isTimeDisabled(date) {\n    return DateUtils.disabledTime(props, date);\n  };\n\n  var handleMoveForward = useCallback(function () {\n    onMoveForward === null || onMoveForward === void 0 ? void 0 : onMoveForward(DateUtils.addMonths(calendarDate, 1));\n  }, [onMoveForward, calendarDate]);\n  var handleMoveBackward = useCallback(function () {\n    onMoveBackward === null || onMoveBackward === void 0 ? void 0 : onMoveBackward(DateUtils.addMonths(calendarDate, -1));\n  }, [onMoveBackward, calendarDate]);\n  var showDate = DateUtils.shouldDate(format);\n  var showTime = DateUtils.shouldTime(format);\n  var showMonth = DateUtils.shouldMonth(format);\n  var onlyShowTime = showTime && !showDate && !showMonth;\n  var onlyShowMonth = showMonth && !showDate && !showTime;\n  var dropTime = calendarState === CalendarState.DROP_TIME || onlyShowTime;\n  var dropMonth = calendarState === CalendarState.DROP_MONTH || onlyShowMonth;\n  var inSameThisMonthDate = useCallback(function (date) {\n    return composeFunctions(function (d) {\n      return DateUtils.setDate(d, 1);\n    }, function (d) {\n      return DateUtils.isSameMonth(d, date);\n    })(date);\n  }, []);\n  var calendarClasses = merge(className, withClassPrefix({\n    'show-time-dropdown': dropTime,\n    'show-month-dropdown': dropMonth,\n    'show-week-numbers': showWeekNumbers\n  }));\n  var timeDropdownProps = pick(rest, DateUtils.calendarOnlyProps);\n  var contextValue = useMemo(function () {\n    return {\n      date: calendarDate,\n      dateRange: dateRange,\n      disabledDate: isDisabledDate,\n      format: format,\n      hoverRangeValue: hoverRangeValue,\n      inSameMonth: inSameMonth !== null && inSameMonth !== void 0 ? inSameMonth : inSameThisMonthDate,\n      isoWeek: isoWeek,\n      locale: locale,\n      onChangePageDate: onChangePageDate,\n      onChangePageTime: onChangePageTime,\n      onMouseMove: onMouseMove,\n      onSelect: onSelect,\n      renderCell: renderCell,\n      showWeekNumbers: showWeekNumbers,\n      inline: inline\n    };\n  }, [calendarDate, dateRange, format, hoverRangeValue, inSameMonth, inSameThisMonthDate, inline, isDisabledDate, isoWeek, locale, onChangePageDate, onChangePageTime, onMouseMove, onSelect, renderCell, showWeekNumbers]);\n  return /*#__PURE__*/React.createElement(CalendarProvider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, DateUtils.omitHideDisabledProps(rest), {\n    className: calendarClasses,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(Header, {\n    showMonth: showMonth,\n    showDate: showDate,\n    showTime: showTime,\n    showMeridian: showMeridian,\n    disabledTime: isTimeDisabled,\n    onMoveForward: handleMoveForward,\n    onMoveBackward: handleMoveBackward,\n    onToggleMonthDropdown: onToggleMonthDropdown,\n    onToggleTimeDropdown: onToggleTimeDropdown,\n    onToggleMeridian: onToggleMeridian,\n    renderTitle: renderTitle,\n    renderToolbar: renderToolbar,\n    disabledBackward: disabledBackward,\n    disabledForward: disabledForward\n  }), showDate && /*#__PURE__*/React.createElement(View, null), showMonth && /*#__PURE__*/React.createElement(MonthDropdown, {\n    show: dropMonth,\n    limitEndYear: limitEndYear,\n    disabledMonth: isDisabledDate\n  }), showTime && /*#__PURE__*/React.createElement(TimeDropdown, _extends({}, timeDropdownProps, {\n    show: dropTime,\n    showMeridian: showMeridian\n  }))));\n});\nCalendar.displayName = 'Calendar';\nCalendar.propTypes = {\n  calendarState: PropTypes.oneOf(Object.values(CalendarState)),\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  disabledDate: PropTypes.func,\n  disabledHours: PropTypes.func,\n  disabledMinutes: PropTypes.func,\n  disabledSeconds: PropTypes.func,\n  format: PropTypes.string,\n  hideHours: PropTypes.func,\n  hideMinutes: PropTypes.func,\n  hideSeconds: PropTypes.func,\n  inSameMonth: PropTypes.func,\n  isoWeek: PropTypes.bool,\n  limitEndYear: PropTypes.number,\n  locale: PropTypes.object,\n  onChangePageDate: PropTypes.func,\n  onChangePageTime: PropTypes.func,\n  onMoveBackward: PropTypes.func,\n  onMoveForward: PropTypes.func,\n  onSelect: PropTypes.func,\n  onToggleMeridian: PropTypes.func,\n  onToggleMonthDropdown: PropTypes.func,\n  onToggleTimeDropdown: PropTypes.func,\n  calendarDate: PropTypes.instanceOf(Date),\n  renderCell: PropTypes.func,\n  renderTitle: PropTypes.func,\n  renderToolbar: PropTypes.func,\n  showMeridian: PropTypes.bool,\n  showWeekNumbers: PropTypes.bool\n};\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}