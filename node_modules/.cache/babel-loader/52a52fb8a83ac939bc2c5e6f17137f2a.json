{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport React, { useRef, useMemo, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport pick from 'lodash/pick';\nimport on from 'dom-lib/on';\nimport getAnimationEnd from 'dom-lib/getAnimationEnd';\nimport BaseModal, { modalPropTypes } from '../Overlay/Modal';\nimport Bounce from '../Animation/Bounce';\nimport { useClassNames, mergeRefs, useWillUnmount } from '../utils';\nimport ModalDialog, { modalDialogPropTypes } from './ModalDialog';\nimport { ModalContext } from './ModalContext';\nimport ModalBody from './ModalBody';\nimport ModalHeader from './ModalHeader';\nimport ModalTitle from './ModalTitle';\nimport ModalFooter from './ModalFooter';\nimport { useBodyStyles } from './utils';\nimport useUniqueId from '../utils/useUniqueId';\nimport deprecatePropType from '../utils/deprecatePropType';\nvar modalSizes = ['xs', 'sm', 'md', 'lg', 'full'];\nvar Modal = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var className = props.className,\n      children = props.children,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'modal' : _props$classPrefix,\n      dialogClassName = props.dialogClassName,\n      backdropClassName = props.backdropClassName,\n      _props$backdrop = props.backdrop,\n      backdrop = _props$backdrop === void 0 ? true : _props$backdrop,\n      dialogStyle = props.dialogStyle,\n      _props$animation = props.animation,\n      animation = _props$animation === void 0 ? Bounce : _props$animation,\n      open = props.open,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'sm' : _props$size,\n      full = props.full,\n      _props$dialogAs = props.dialogAs,\n      Dialog = _props$dialogAs === void 0 ? ModalDialog : _props$dialogAs,\n      animationProps = props.animationProps,\n      _props$animationTimeo = props.animationTimeout,\n      animationTimeout = _props$animationTimeo === void 0 ? 300 : _props$animationTimeo,\n      _props$overflow = props.overflow,\n      overflow = _props$overflow === void 0 ? true : _props$overflow,\n      _props$drawer = props.drawer,\n      drawer = _props$drawer === void 0 ? false : _props$drawer,\n      onClose = props.onClose,\n      onEntered = props.onEntered,\n      onEntering = props.onEntering,\n      onExited = props.onExited,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'dialog' : _props$role,\n      idProp = props.id,\n      ariaLabelledby = props['aria-labelledby'],\n      ariaDescribedby = props['aria-describedby'],\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"classPrefix\", \"dialogClassName\", \"backdropClassName\", \"backdrop\", \"dialogStyle\", \"animation\", \"open\", \"size\", \"full\", \"dialogAs\", \"animationProps\", \"animationTimeout\", \"overflow\", \"drawer\", \"onClose\", \"onEntered\", \"onEntering\", \"onExited\", \"role\", \"id\", \"aria-labelledby\", \"aria-describedby\"]);\n\n  var inClass = {\n    in: open && !animation\n  };\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix;\n\n  var _useState = useState(false),\n      shake = _useState[0],\n      setShake = _useState[1];\n\n  var classes = merge(className, prefix(size, {\n    full: full\n  }));\n  var dialogRef = useRef(null);\n  var transitionEndListener = useRef(); // The style of the Modal body will be updated with the size of the window or container.\n\n  var _useBodyStyles = useBodyStyles(dialogRef, {\n    overflow: overflow,\n    drawer: drawer,\n    prefix: prefix\n  }),\n      bodyStyles = _useBodyStyles[0],\n      onChangeBodyStyles = _useBodyStyles[1],\n      onDestroyEvents = _useBodyStyles[2];\n\n  var dialogId = useUniqueId('dialog-', idProp);\n  var modalContextValue = useMemo(function () {\n    return {\n      dialogId: dialogId,\n      onModalClose: onClose,\n      getBodyStyles: function getBodyStyles() {\n        return bodyStyles;\n      },\n      isDrawer: drawer\n    };\n  }, [dialogId, onClose, bodyStyles, drawer]);\n  var handleExited = useCallback(function (node) {\n    var _transitionEndListene;\n\n    onExited === null || onExited === void 0 ? void 0 : onExited(node);\n    onDestroyEvents();\n    (_transitionEndListene = transitionEndListener.current) === null || _transitionEndListene === void 0 ? void 0 : _transitionEndListene.off();\n    transitionEndListener.current = null;\n  }, [onDestroyEvents, onExited]);\n  var handleEntered = useCallback(function (node) {\n    onEntered === null || onEntered === void 0 ? void 0 : onEntered(node);\n    onChangeBodyStyles();\n  }, [onChangeBodyStyles, onEntered]);\n  var handleEntering = useCallback(function (node) {\n    onEntering === null || onEntering === void 0 ? void 0 : onEntering(node);\n    onChangeBodyStyles(true);\n  }, [onChangeBodyStyles, onEntering]);\n  var handleBackdropClick = useCallback(function (e) {\n    if (e.target !== e.currentTarget) {\n      return;\n    } // When the value of `backdrop` is `static`, a jitter animation will be added to the dialog when clicked.\n\n\n    if (backdrop === 'static') {\n      setShake(true);\n\n      if (!transitionEndListener.current && dialogRef.current) {\n        //fix: https://github.com/rsuite/rsuite/blob/a93d13c14fb20cc58204babe3331d3c3da3fe1fd/src/Modal/styles/index.less#L59\n        transitionEndListener.current = on(dialogRef.current, getAnimationEnd(), function () {\n          setShake(false);\n        });\n      }\n\n      return;\n    }\n\n    onClose === null || onClose === void 0 ? void 0 : onClose(e);\n  }, [backdrop, onClose]);\n  var handleClick = useCallback(function (e) {\n    if (dialogRef.current && e.target !== dialogRef.current) {\n      handleBackdropClick(e);\n    }\n  }, [handleBackdropClick]);\n  useWillUnmount(function () {\n    var _transitionEndListene2;\n\n    (_transitionEndListene2 = transitionEndListener.current) === null || _transitionEndListene2 === void 0 ? void 0 : _transitionEndListene2.off();\n  });\n  return /*#__PURE__*/React.createElement(ModalContext.Provider, {\n    value: modalContextValue\n  }, /*#__PURE__*/React.createElement(BaseModal, _extends({}, rest, {\n    ref: ref,\n    backdrop: backdrop,\n    open: open,\n    onClose: onClose,\n    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"wrapper\"]))),\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExited: handleExited,\n    backdropClassName: merge(prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"backdrop\"]))), backdropClassName, inClass),\n    containerClassName: prefix({\n      open: open,\n      'has-backdrop': backdrop\n    }),\n    transition: animation ? animation : undefined,\n    animationProps: animationProps,\n    dialogTransitionTimeout: animationTimeout,\n    backdropTransitionTimeout: 150,\n    onClick: backdrop ? handleClick : undefined\n  }), function (transitionProps, transitionRef) {\n    var transitionClassName = transitionProps.className,\n        transitionRest = _objectWithoutPropertiesLoose(transitionProps, [\"className\"]);\n\n    return /*#__PURE__*/React.createElement(Dialog, _extends({\n      role: role,\n      id: dialogId,\n      \"aria-labelledby\": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : dialogId + \"-title\",\n      \"aria-describedby\": ariaDescribedby\n    }, transitionRest, pick(rest, Object.keys(modalDialogPropTypes)), {\n      ref: mergeRefs(dialogRef, transitionRef),\n      classPrefix: classPrefix,\n      className: merge(classes, transitionClassName, prefix({\n        shake: shake\n      })),\n      dialogClassName: dialogClassName,\n      dialogStyle: dialogStyle\n    }), children);\n  }));\n});\nModal.Body = ModalBody;\nModal.Header = ModalHeader;\nModal.Title = ModalTitle;\nModal.Footer = ModalFooter;\nModal.Dialog = ModalDialog;\nModal.displayName = 'Modal';\nModal.propTypes = _extends({}, modalPropTypes, {\n  animation: PropTypes.any,\n  animationTimeout: PropTypes.number,\n  classPrefix: PropTypes.string,\n  dialogClassName: PropTypes.string,\n  size: PropTypes.oneOf(modalSizes),\n  dialogStyle: PropTypes.object,\n  dialogAs: PropTypes.elementType,\n  full: deprecatePropType(PropTypes.bool, 'Use size=\"full\" instead.'),\n  overflow: PropTypes.bool,\n  drawer: PropTypes.bool\n});\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}