{"ast":null,"code":"import addClass from 'dom-lib/addClass';\nimport removeClass from 'dom-lib/removeClass';\nimport addStyle from 'dom-lib/addStyle';\nimport getStyle from 'dom-lib/getStyle';\nimport getScrollbarSize from 'dom-lib/getScrollbarSize';\nimport isOverflowing from 'dom-lib/isOverflowing';\n\nfunction findIndexOf(arr, cb) {\n  var index = -1;\n  arr.some(function (d, i) {\n    if (cb(d, i)) {\n      index = i;\n      return true;\n    }\n\n    return false;\n  });\n  return index;\n}\n\nfunction findContainer(data, modal) {\n  return findIndexOf(data, function (d) {\n    return d.modals.indexOf(modal) !== -1;\n  });\n}\n\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager() {\n    this.modals = [];\n    this.containers = [];\n    this.data = [];\n  }\n\n  var _proto = ModalManager.prototype;\n\n  _proto.add = function add(modal, container, className) {\n    var modalIndex = this.modals.indexOf(modal);\n    var containerIndex = this.containers.indexOf(container);\n\n    if (modalIndex !== -1) {\n      return modalIndex;\n    }\n\n    modalIndex = this.modals.length;\n    this.modals.push(modal);\n\n    if (containerIndex !== -1) {\n      this.data[containerIndex].modals.push(modal);\n      return modalIndex;\n    }\n\n    var containerState = {\n      modals: [modal],\n      classes: className ? className.split(/\\s+/) : [],\n      style: {\n        overflow: container.style.overflow,\n        paddingRight: container.style.paddingRight\n      },\n      overflowing: isOverflowing(container)\n    };\n\n    if (containerState.overflowing) {\n      var paddingRight = parseInt(getStyle(container, 'paddingRight') || 0, 10);\n      var barSize = getScrollbarSize();\n      addStyle(container, {\n        paddingRight: (barSize ? paddingRight + barSize : paddingRight) + 'px'\n      });\n    }\n\n    containerState.classes.forEach(addClass.bind(null, container));\n    this.containers.push(container);\n    this.data.push(containerState);\n    return modalIndex;\n  };\n\n  _proto.remove = function remove(modal) {\n    var modalIndex = this.modals.indexOf(modal);\n\n    if (modalIndex === -1) {\n      return;\n    }\n\n    var containerIndex = findContainer(this.data, modal);\n    var containerState = this.data[containerIndex];\n    var container = this.containers[containerIndex];\n    containerState.modals.splice(containerState.modals.indexOf(modal), 1);\n    this.modals.splice(modalIndex, 1);\n\n    if (containerState.modals.length === 0) {\n      Object.keys(containerState.style).forEach(function (key) {\n        return container.style[key] = containerState.style[key];\n      });\n      containerState.classes.forEach(removeClass.bind(null, container));\n      this.containers.splice(containerIndex, 1);\n      this.data.splice(containerIndex, 1);\n    }\n  };\n\n  _proto.isTopModal = function isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  };\n\n  return ModalManager;\n}();\n\nexport default ModalManager;","map":null,"metadata":{},"sourceType":"module"}