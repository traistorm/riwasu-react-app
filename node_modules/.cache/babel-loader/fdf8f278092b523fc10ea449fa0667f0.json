{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\n(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error('SUNEDITOR_MODULES a window with a document');\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  }\n})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\n  var fileManager = {\n    name: 'fileManager',\n    _xmlHttp: null,\n    _checkMediaComponent: function _checkMediaComponent(tag) {\n      if (/IMG/i.test(tag)) {\n        return !/FIGURE/i.test(tag.parentElement.nodeName) || !/FIGURE/i.test(tag.parentElement.parentElement.nodeName);\n      }\n\n      return true;\n    },\n\n    /**\n     * @description Upload the file to the server.\n     * @param {String} uploadUrl Upload server url\n     * @param {Object|null} uploadHeader Request header\n     * @param {FormData} formData FormData in body\n     * @param {Function|null} callBack Success call back function\n     * @param {Function|null} errorCallBack Error call back function\n     * @example this.plugins.fileManager.upload.call(this, imageUploadUrl, this.options.imageUploadHeader, formData, this.plugins.image.callBack_imgUpload.bind(this, info), this.functions.onImageUploadError);\n     */\n    upload: function upload(uploadUrl, uploadHeader, formData, callBack, errorCallBack) {\n      this.showLoading();\n      var filePlugin = this.plugins.fileManager;\n      var xmlHttp = filePlugin._xmlHttp = this.util.getXMLHttpRequest();\n      xmlHttp.onreadystatechange = filePlugin._callBackUpload.bind(this, xmlHttp, callBack, errorCallBack);\n      xmlHttp.open('post', uploadUrl, true);\n\n      if (uploadHeader !== null && typeof uploadHeader === 'object' && this._w.Object.keys(uploadHeader).length > 0) {\n        for (var key in uploadHeader) {\n          xmlHttp.setRequestHeader(key, uploadHeader[key]);\n        }\n      }\n\n      xmlHttp.send(formData);\n    },\n    _callBackUpload: function _callBackUpload(xmlHttp, callBack, errorCallBack) {\n      if (xmlHttp.readyState === 4) {\n        if (xmlHttp.status === 200) {\n          try {\n            callBack(xmlHttp);\n          } catch (e) {\n            throw Error('[SUNEDITOR.fileManager.upload.callBack.fail] cause : \"' + e.message + '\"');\n          } finally {\n            this.closeLoading();\n          }\n        } else {\n          // exception\n          this.closeLoading();\n          var res = !xmlHttp.responseText ? xmlHttp : JSON.parse(xmlHttp.responseText);\n\n          if (typeof errorCallBack !== 'function' || errorCallBack('', res, this)) {\n            var err = '[SUNEDITOR.fileManager.upload.serverException] status: ' + xmlHttp.status + ', response: ' + (res.errorMessage || xmlHttp.responseText);\n            this.functions.noticeOpen(err);\n            throw Error(err);\n          }\n        }\n      }\n    },\n\n    /**\n     * @description Checke the file's information and modify the tag that does not fit the format.\n     * @param {String} pluginName Plugin name\n     * @param {Array} tagNames Tag array to check\n     * @param {Function|null} uploadEventHandler Event handler to process updated file info after checking (used in \"setInfo\")\n     * @param {Function} modifyHandler A function to modify a tag that does not fit the format (Argument value: Tag element)\n     * @param {Boolean} resizing True if the plugin is using a resizing module\n     * @example \n     * const modifyHandler = function (tag) {\n     *      imagePlugin.onModifyMode.call(this, tag, null);\n     *      imagePlugin.openModify.call(this, true);\n     *      imagePlugin.update_image.call(this, true, false, true);\n     *  }.bind(this);\n     *  this.plugins.fileManager.checkInfo.call(this, 'image', ['img'], this.functions.onImageUpload, modifyHandler, true);\n     */\n    checkInfo: function checkInfo(pluginName, tagNames, uploadEventHandler, modifyHandler, resizing) {\n      var tags = [];\n\n      for (var i = 0, len = tagNames.length; i < len; i++) {\n        tags = tags.concat([].slice.call(this.context.element.wysiwyg.querySelectorAll(tagNames[i] + ':not([data-se-embed=\"true\"])')));\n      }\n\n      var fileManagerPlugin = this.plugins.fileManager;\n      var context = this.context[pluginName];\n      var infoList = context._infoList;\n      var setFileInfo = fileManagerPlugin.setInfo.bind(this);\n\n      if (tags.length === infoList.length) {\n        // reset\n        if (this._componentsInfoReset) {\n          for (var _i = 0, _len = tags.length; _i < _len; _i++) {\n            setFileInfo(pluginName, tags[_i], uploadEventHandler, null, resizing);\n          }\n\n          return;\n        } else {\n          var infoUpdate = false;\n\n          var _loop = function _loop(_info, _i2, _len2) {\n            _info = infoList[_i2];\n\n            if (tags.filter(function (t) {\n              info = _info;\n              return _info.src === t.src && _info.index.toString() === t.getAttribute('data-index');\n            }).length === 0) {\n              infoUpdate = true;\n              info = _info;\n              return \"break\";\n            }\n\n            info = _info;\n          };\n\n          for (var _i2 = 0, _len2 = infoList.length, info; _i2 < _len2; _i2++) {\n            var _ret = _loop(info, _i2, _len2);\n\n            if (_ret === \"break\") break;\n          } // pass\n\n\n          if (!infoUpdate) return;\n        }\n      } // check\n\n\n      var _resize_plugin = resizing ? this.context.resizing._resize_plugin : '';\n\n      if (resizing) this.context.resizing._resize_plugin = pluginName;\n      var currentTags = [];\n      var infoIndex = [];\n\n      for (var _i3 = 0, _len3 = infoList.length; _i3 < _len3; _i3++) {\n        infoIndex[_i3] = infoList[_i3].index;\n      }\n\n      for (var _i4 = 0, _len4 = tags.length, tag; _i4 < _len4; _i4++) {\n        tag = tags[_i4];\n\n        if (!this.util.getParentElement(tag, this.util.isMediaComponent) || !fileManagerPlugin._checkMediaComponent(tag)) {\n          currentTags.push(context._infoIndex);\n          modifyHandler(tag);\n        } else if (!tag.getAttribute('data-index') || infoIndex.indexOf(tag.getAttribute('data-index') * 1) < 0) {\n          currentTags.push(context._infoIndex);\n          tag.removeAttribute('data-index');\n          setFileInfo(pluginName, tag, uploadEventHandler, null, resizing);\n        } else {\n          currentTags.push(tag.getAttribute('data-index') * 1);\n        }\n      }\n\n      for (var _i5 = 0, dataIndex; _i5 < infoList.length; _i5++) {\n        dataIndex = infoList[_i5].index;\n        if (currentTags.indexOf(dataIndex) > -1) continue;\n        infoList.splice(_i5, 1);\n        if (typeof uploadEventHandler === 'function') uploadEventHandler(null, dataIndex, 'delete', null, 0, this);\n        _i5--;\n      }\n\n      if (resizing) this.context.resizing._resize_plugin = _resize_plugin;\n    },\n\n    /**\n     * @description Create info object of file and add it to \"_infoList\" (this.context[pluginName]._infoList[])\n     * @param {String} pluginName Plugin name \n     * @param {Element} element \n     * @param {Function|null} uploadEventHandler Event handler to process updated file info (created in setInfo)\n     * @param {Object|null} file \n     * @param {Boolean} resizing True if the plugin is using a resizing module\n     * @example \n     * uploadCallBack {.. file = { name: fileList[i].name, size: fileList[i].size };\n     * this.plugins.fileManager.setInfo.call(this, 'image', oImg, this.functions.onImageUpload, file, true);\n     */\n    setInfo: function setInfo(pluginName, element, uploadEventHandler, file, resizing) {\n      var _resize_plugin = resizing ? this.context.resizing._resize_plugin : '';\n\n      if (resizing) this.context.resizing._resize_plugin = pluginName;\n      var plguin = this.plugins[pluginName];\n      var context = this.context[pluginName];\n      var infoList = context._infoList;\n      var dataIndex = element.getAttribute('data-index');\n      var info = null;\n      var state = '';\n\n      if (!file) {\n        file = {\n          'name': element.getAttribute('data-file-name') || (typeof element.src === 'string' ? element.src.split('/').pop() : ''),\n          'size': element.getAttribute('data-file-size') || 0\n        };\n      } // create\n\n\n      if (!dataIndex || this._componentsInfoInit) {\n        state = 'create';\n        dataIndex = context._infoIndex++;\n        element.setAttribute('data-index', dataIndex);\n        element.setAttribute('data-file-name', file.name);\n        element.setAttribute('data-file-size', file.size);\n        info = {\n          src: element.src,\n          index: dataIndex * 1,\n          name: file.name,\n          size: file.size\n        };\n        infoList.push(info);\n      } else {\n        // update\n        state = 'update';\n        dataIndex *= 1;\n\n        for (var i = 0, len = infoList.length; i < len; i++) {\n          if (dataIndex === infoList[i].index) {\n            info = infoList[i];\n            break;\n          }\n        }\n\n        if (!info) {\n          dataIndex = context._infoIndex++;\n          info = {\n            index: dataIndex\n          };\n          infoList.push(info);\n        }\n\n        info.src = element.src;\n        info.name = element.getAttribute(\"data-file-name\");\n        info.size = element.getAttribute(\"data-file-size\") * 1;\n      } // method bind\n\n\n      info.element = element;\n      info.delete = plguin.destroy.bind(this, element);\n\n      info.select = function (element) {\n        element.scrollIntoView(true);\n\n        this._w.setTimeout(plguin.select.bind(this, element));\n      }.bind(this, element);\n\n      if (resizing) {\n        if (!element.getAttribute('origin-size') && element.naturalWidth) {\n          element.setAttribute('origin-size', element.naturalWidth + ',' + element.naturalHeight);\n        }\n\n        if (!element.getAttribute('data-origin')) {\n          var container = this.util.getParentElement(element, this.util.isMediaComponent);\n          var cover = this.util.getParentElement(element, 'FIGURE');\n\n          var w = this.plugins.resizing._module_getSizeX.call(this, context, element, cover, container);\n\n          var h = this.plugins.resizing._module_getSizeY.call(this, context, element, cover, container);\n\n          element.setAttribute('data-origin', w + ',' + h);\n          element.setAttribute('data-size', w + ',' + h);\n        }\n\n        if (!element.style.width) {\n          var size = (element.getAttribute('data-size') || element.getAttribute('data-origin') || '').split(',');\n          plguin.onModifyMode.call(this, element, null);\n          plguin.applySize.call(this, size[0], size[1]);\n        }\n\n        this.context.resizing._resize_plugin = _resize_plugin;\n      }\n\n      if (typeof uploadEventHandler === 'function') uploadEventHandler(element, dataIndex, state, info, --context._uploadFileLength < 0 ? 0 : context._uploadFileLength, this);\n    },\n\n    /**\n     * @description Delete info object at \"_infoList\"\n     * @param {String} pluginName Plugin name \n     * @param {Number} index index of info object (this.context[pluginName]._infoList[].index)\n     * @param {Function|null} uploadEventHandler Event handler to process updated file info (created in setInfo)\n     */\n    deleteInfo: function deleteInfo(pluginName, index, uploadEventHandler) {\n      if (index >= 0) {\n        var infoList = this.context[pluginName]._infoList;\n\n        for (var i = 0, len = infoList.length; i < len; i++) {\n          if (index === infoList[i].index) {\n            infoList.splice(i, 1);\n            if (typeof uploadEventHandler === 'function') uploadEventHandler(null, index, 'delete', null, 0, this);\n            return;\n          }\n        }\n      }\n    },\n\n    /**\n     * @description Reset info object and \"_infoList = []\", \"_infoIndex = 0\"\n     * @param {String} pluginName Plugin name \n     * @param {Function|null} uploadEventHandler Event handler to process updated file info (created in setInfo)\n     */\n    resetInfo: function resetInfo(pluginName, uploadEventHandler) {\n      var context = this.context[pluginName];\n\n      if (typeof uploadEventHandler === 'function') {\n        var infoList = context._infoList;\n\n        for (var i = 0, len = infoList.length; i < len; i++) {\n          uploadEventHandler(null, infoList[i].index, 'delete', null, 0, this);\n        }\n      }\n\n      context._infoList = [];\n      context._infoIndex = 0;\n    }\n  };\n\n  if (typeof noGlobal === typeof undefined) {\n    if (!window.SUNEDITOR_MODULES) {\n      Object.defineProperty(window, 'SUNEDITOR_MODULES', {\n        enumerable: true,\n        writable: false,\n        configurable: false,\n        value: {}\n      });\n    }\n\n    Object.defineProperty(window.SUNEDITOR_MODULES, 'fileManager', {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: fileManager\n    });\n  }\n\n  return fileManager;\n});","map":null,"metadata":{},"sourceType":"script"}