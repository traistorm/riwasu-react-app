{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widget\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport WidgetTypeAround from './widgettypearound/widgettypearound';\nimport Delete from '@ckeditor/ckeditor5-typing/src/delete';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport { getLocalizedArrowKeyCodeDirection } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport verticalNavigationHandler from './verticalnavigation';\nimport { getLabel, isWidget, WIDGET_SELECTED_CLASS_NAME } from './utils';\nimport '../theme/widget.css';\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar Widget = /*#__PURE__*/function (_Plugin) {\n  _inherits(Widget, _Plugin);\n\n  function Widget() {\n    _classCallCheck(this, Widget);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Widget).apply(this, arguments));\n  }\n\n  _createClass(Widget, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      var _this = this;\n\n      var editor = this.editor;\n      var view = editor.editing.view;\n      var viewDocument = view.document;\n      /**\n       * Holds previously selected widgets.\n       *\n       * @private\n       * @type {Set.<module:engine/view/element~Element>}\n       */\n\n      this._previouslySelected = new Set(); // Model to view selection converter.\n      // Converts selection placed over widget element to fake selection.\n      //\n      // By default, the selection is downcasted by the engine to surround the attribute element, even though its only\n      // child is an inline widget. A similar thing also happens when a collapsed marker is rendered as a UI element\n      // next to an inline widget: the view selection contains both the widget and the marker.\n      //\n      // This prevents creating a correct fake selection when this inline widget is selected. Normalize the selection\n      // in these cases based on the model:\n      //\n      //\t\t[<attributeElement><inlineWidget /></attributeElement>] -> <attributeElement>[<inlineWidget />]</attributeElement>\n      //\t\t[<uiElement></uiElement><inlineWidget />] -> <uiElement></uiElement>[<inlineWidget />]\n      //\n      // Thanks to this:\n      //\n      // * fake selection can be set correctly,\n      // * any logic depending on (View)Selection#getSelectedElement() also works OK.\n      //\n      // See https://github.com/ckeditor/ckeditor5/issues/9524.\n\n      this.editor.editing.downcastDispatcher.on('selection', function (evt, data, conversionApi) {\n        var viewWriter = conversionApi.writer;\n        var modelSelection = data.selection; // The collapsed selection can't contain any widget.\n\n        if (modelSelection.isCollapsed) {\n          return;\n        }\n\n        var selectedModelElement = modelSelection.getSelectedElement();\n\n        if (!selectedModelElement) {\n          return;\n        }\n\n        var selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n\n        if (!isWidget(selectedViewElement)) {\n          return;\n        }\n\n        if (!conversionApi.consumable.consume(modelSelection, 'selection')) {\n          return;\n        }\n\n        viewWriter.setSelection(viewWriter.createRangeOn(selectedViewElement), {\n          fake: true,\n          label: getLabel(selectedViewElement)\n        });\n      }); // Mark all widgets inside the selection with the css class.\n      // This handler is registered at the 'low' priority so it's triggered after the real selection conversion.\n\n      this.editor.editing.downcastDispatcher.on('selection', function (evt, data, conversionApi) {\n        // Remove selected class from previously selected widgets.\n        _this._clearPreviouslySelectedWidgets(conversionApi.writer);\n\n        var viewWriter = conversionApi.writer;\n        var viewSelection = viewWriter.document.selection;\n        var lastMarked = null;\n\n        var _iterator = _createForOfIteratorHelper(viewSelection.getRanges()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var range = _step.value;\n\n            // Note: There could be multiple selected widgets in a range but no fake selection.\n            // All of them must be marked as selected, for instance [<widget></widget><widget></widget>]\n            var _iterator2 = _createForOfIteratorHelper(range),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var value = _step2.value;\n                var node = value.item; // Do not mark nested widgets in selected one. See: #4594\n\n                if (isWidget(node) && !isChild(node, lastMarked)) {\n                  viewWriter.addClass(WIDGET_SELECTED_CLASS_NAME, node);\n\n                  _this._previouslySelected.add(node);\n\n                  lastMarked = node;\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }, {\n        priority: 'low'\n      }); // If mouse down is pressed on widget - create selection over whole widget.\n\n      view.addObserver(MouseObserver);\n      this.listenTo(viewDocument, 'mousedown', function () {\n        return _this._onMousedown.apply(_this, arguments);\n      }); // There are two keydown listeners working on different priorities. This allows other\n      // features such as WidgetTypeAround or TableKeyboard to attach their listeners in between\n      // and customize the behavior even further in different content/selection scenarios.\n      //\n      // * The first listener handles changing the selection on arrow key press\n      // if the widget is selected or if the selection is next to a widget and the widget\n      // should become selected upon the arrow key press.\n      //\n      // * The second (late) listener makes sure the default browser action on arrow key press is\n      // prevented when a widget is selected. This prevents the selection from being moved\n      // from a fake selection container.\n\n      this.listenTo(viewDocument, 'arrowKey', function () {\n        _this._handleSelectionChangeOnArrowKeyPress.apply(_this, arguments);\n      }, {\n        context: [isWidget, '$text']\n      });\n      this.listenTo(viewDocument, 'arrowKey', function () {\n        _this._preventDefaultOnArrowKeyPress.apply(_this, arguments);\n      }, {\n        context: '$root'\n      });\n      this.listenTo(viewDocument, 'arrowKey', verticalNavigationHandler(this.editor.editing), {\n        context: '$text'\n      }); // Handle custom delete behaviour.\n\n      this.listenTo(viewDocument, 'delete', function (evt, data) {\n        if (_this._handleDelete(data.direction == 'forward')) {\n          data.preventDefault();\n          evt.stop();\n        }\n      }, {\n        context: '$root'\n      });\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n     *\n     * @private\n     * @param {module:utils/eventinfo~EventInfo} eventInfo\n     * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n     */\n\n  }, {\n    key: \"_onMousedown\",\n    value: function _onMousedown(eventInfo, domEventData) {\n      var editor = this.editor;\n      var view = editor.editing.view;\n      var viewDocument = view.document;\n      var element = domEventData.target; // Do nothing for single or double click inside nested editable.\n\n      if (isInsideNestedEditable(element)) {\n        // But at least triple click inside nested editable causes broken selection in Safari.\n        // For such event, we select the entire nested editable element.\n        // See: https://github.com/ckeditor/ckeditor5/issues/1463.\n        if ((env.isSafari || env.isGecko) && domEventData.domEvent.detail >= 3) {\n          var mapper = editor.editing.mapper;\n          var viewElement = element.is('attributeElement') ? element.findAncestor(function (element) {\n            return !element.is('attributeElement');\n          }) : element;\n\n          var _modelElement = mapper.toModelElement(viewElement);\n\n          domEventData.preventDefault();\n          this.editor.model.change(function (writer) {\n            writer.setSelection(_modelElement, 'in');\n          });\n        }\n\n        return;\n      } // If target is not a widget element - check if one of the ancestors is.\n\n\n      if (!isWidget(element)) {\n        element = element.findAncestor(isWidget);\n\n        if (!element) {\n          return;\n        }\n      } // On Android selection would jump to the first table cell, on other devices\n      // we can't block it (and don't need to) because of drag and drop support.\n\n\n      if (env.isAndroid) {\n        domEventData.preventDefault();\n      } // Focus editor if is not focused already.\n\n\n      if (!viewDocument.isFocused) {\n        view.focus();\n      } // Create model selection over widget.\n\n\n      var modelElement = editor.editing.mapper.toModelElement(element);\n\n      this._setSelectionOverElement(modelElement);\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and changes\n     * the model selection when:\n     *\n     * * arrow key is pressed when the widget is selected,\n     * * the selection is next to a widget and the widget should become selected upon the arrow key press.\n     *\n     * See {@link #_preventDefaultOnArrowKeyPress}.\n     *\n     * @private\n     * @param {module:utils/eventinfo~EventInfo} eventInfo\n     * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n     */\n\n  }, {\n    key: \"_handleSelectionChangeOnArrowKeyPress\",\n    value: function _handleSelectionChangeOnArrowKeyPress(eventInfo, domEventData) {\n      var keyCode = domEventData.keyCode;\n      var model = this.editor.model;\n      var schema = model.schema;\n      var modelSelection = model.document.selection;\n      var objectElement = modelSelection.getSelectedElement();\n      var direction = getLocalizedArrowKeyCodeDirection(keyCode, this.editor.locale.contentLanguageDirection);\n      var isForward = direction == 'down' || direction == 'right';\n      var isVerticalNavigation = direction == 'up' || direction == 'down'; // If object element is selected.\n\n      if (objectElement && schema.isObject(objectElement)) {\n        var position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n        var newRange = schema.getNearestSelectionRange(position, isForward ? 'forward' : 'backward');\n\n        if (newRange) {\n          model.change(function (writer) {\n            writer.setSelection(newRange);\n          });\n          domEventData.preventDefault();\n          eventInfo.stop();\n        }\n\n        return;\n      } // Handle collapsing of the selection when there is any widget on the edge of selection.\n      // This is needed because browsers have problems with collapsing such selection.\n\n\n      if (!modelSelection.isCollapsed && !domEventData.shiftKey) {\n        var firstPosition = modelSelection.getFirstPosition();\n        var lastPosition = modelSelection.getLastPosition();\n        var firstSelectedNode = firstPosition.nodeAfter;\n        var lastSelectedNode = lastPosition.nodeBefore;\n\n        if (firstSelectedNode && schema.isObject(firstSelectedNode) || lastSelectedNode && schema.isObject(lastSelectedNode)) {\n          model.change(function (writer) {\n            writer.setSelection(isForward ? lastPosition : firstPosition);\n          });\n          domEventData.preventDefault();\n          eventInfo.stop();\n        }\n\n        return;\n      } // Return if not collapsed.\n\n\n      if (!modelSelection.isCollapsed) {\n        return;\n      } // If selection is next to object element.\n\n\n      var objectElementNextToSelection = this._getObjectElementNextToSelection(isForward);\n\n      if (objectElementNextToSelection && schema.isObject(objectElementNextToSelection)) {\n        // Do not select an inline widget while handling up/down arrow.\n        if (schema.isInline(objectElementNextToSelection) && isVerticalNavigation) {\n          return;\n        }\n\n        this._setSelectionOverElement(objectElementNextToSelection);\n\n        domEventData.preventDefault();\n        eventInfo.stop();\n      }\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and prevents\n     * the default browser behavior to make sure the fake selection is not being moved from a fake selection\n     * container.\n     *\n     * See {@link #_handleSelectionChangeOnArrowKeyPress}.\n     *\n     * @private\n     * @param {module:utils/eventinfo~EventInfo} eventInfo\n     * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n     */\n\n  }, {\n    key: \"_preventDefaultOnArrowKeyPress\",\n    value: function _preventDefaultOnArrowKeyPress(eventInfo, domEventData) {\n      var model = this.editor.model;\n      var schema = model.schema;\n      var objectElement = model.document.selection.getSelectedElement(); // If object element is selected.\n\n      if (objectElement && schema.isObject(objectElement)) {\n        domEventData.preventDefault();\n        eventInfo.stop();\n      }\n    }\n    /**\n     * Handles delete keys: backspace and delete.\n     *\n     * @private\n     * @param {Boolean} isForward Set to true if delete was performed in forward direction.\n     * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n     */\n\n  }, {\n    key: \"_handleDelete\",\n    value: function _handleDelete(isForward) {\n      var _this2 = this;\n\n      // Do nothing when the read only mode is enabled.\n      if (this.editor.isReadOnly) {\n        return;\n      }\n\n      var modelDocument = this.editor.model.document;\n      var modelSelection = modelDocument.selection; // Do nothing on non-collapsed selection.\n\n      if (!modelSelection.isCollapsed) {\n        return;\n      }\n\n      var objectElement = this._getObjectElementNextToSelection(isForward);\n\n      if (objectElement) {\n        this.editor.model.change(function (writer) {\n          var previousNode = modelSelection.anchor.parent; // Remove previous element if empty.\n\n          while (previousNode.isEmpty) {\n            var nodeToRemove = previousNode;\n            previousNode = nodeToRemove.parent;\n            writer.remove(nodeToRemove);\n          }\n\n          _this2._setSelectionOverElement(objectElement);\n        });\n        return true;\n      }\n    }\n    /**\n     * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n     *\n     * @protected\n     * @param {module:engine/model/element~Element} element\n     */\n\n  }, {\n    key: \"_setSelectionOverElement\",\n    value: function _setSelectionOverElement(element) {\n      this.editor.model.change(function (writer) {\n        writer.setSelection(writer.createRangeOn(element));\n      });\n    }\n    /**\n     * Checks if {@link module:engine/model/element~Element element} placed next to the current\n     * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n     * {@link module:engine/model/schema~Schema schema} as `object`.\n     *\n     * @protected\n     * @param {Boolean} forward Direction of checking.\n     * @returns {module:engine/model/element~Element|null}\n     */\n\n  }, {\n    key: \"_getObjectElementNextToSelection\",\n    value: function _getObjectElementNextToSelection(forward) {\n      var model = this.editor.model;\n      var schema = model.schema;\n      var modelSelection = model.document.selection; // Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n      // to its current state after undo.\n\n      var probe = model.createSelection(modelSelection);\n      model.modifySelection(probe, {\n        direction: forward ? 'forward' : 'backward'\n      }); // The selection didn't change so there is nothing there.\n\n      if (probe.isEqual(modelSelection)) {\n        return null;\n      }\n\n      var objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n\n      if (!!objectElement && schema.isObject(objectElement)) {\n        return objectElement;\n      }\n\n      return null;\n    }\n    /**\n     * Removes CSS class from previously selected widgets.\n     *\n     * @private\n     * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n     */\n\n  }, {\n    key: \"_clearPreviouslySelectedWidgets\",\n    value: function _clearPreviouslySelectedWidgets(writer) {\n      var _iterator3 = _createForOfIteratorHelper(this._previouslySelected),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var widget = _step3.value;\n          writer.removeClass(WIDGET_SELECTED_CLASS_NAME, widget);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._previouslySelected.clear();\n    }\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'Widget';\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"requires\",\n    get: function get() {\n      return [WidgetTypeAround, Delete];\n    }\n  }]);\n\n  return Widget;\n}(Plugin); // Returns `true` when element is a nested editable or is placed inside one.\n//\n// @param {module:engine/view/element~Element}\n// @returns {Boolean}\n\n\nexport { Widget as default };\n\nfunction isInsideNestedEditable(element) {\n  while (element) {\n    if (element.is('editableElement') && !element.is('rootElement')) {\n      return true;\n    } // Click on nested widget should select it.\n\n\n    if (isWidget(element)) {\n      return false;\n    }\n\n    element = element.parent;\n  }\n\n  return false;\n} // Checks whether the specified `element` is a child of the `parent` element.\n//\n// @param {module:engine/view/element~Element} element An element to check.\n// @param {module:engine/view/element~Element|null} parent A parent for the element.\n// @returns {Boolean}\n\n\nfunction isChild(element, parent) {\n  if (!parent) {\n    return false;\n  }\n\n  return Array.from(element.getAncestors()).includes(parent);\n}","map":null,"metadata":{},"sourceType":"module"}