{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/delete\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar Delete = /*#__PURE__*/function (_Plugin) {\n  _inherits(Delete, _Plugin);\n\n  function Delete() {\n    _classCallCheck(this, Delete);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Delete).apply(this, arguments));\n  }\n\n  _createClass(Delete, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      var editor = this.editor;\n      var view = editor.editing.view;\n      var viewDocument = view.document;\n      var modelDocument = editor.model.document;\n      view.addObserver(DeleteObserver);\n      this._undoOnBackspace = false;\n      var deleteForwardCommand = new DeleteCommand(editor, 'forward'); // Register `deleteForward` command and add `forwardDelete` command as an alias for backward compatibility.\n\n      editor.commands.add('deleteForward', deleteForwardCommand);\n      editor.commands.add('forwardDelete', deleteForwardCommand);\n      editor.commands.add('delete', new DeleteCommand(editor, 'backward'));\n      this.listenTo(viewDocument, 'delete', function (evt, data) {\n        var deleteCommandParams = {\n          unit: data.unit,\n          sequence: data.sequence\n        }; // If a specific (view) selection to remove was set, convert it to a model selection and set as a parameter for `DeleteCommand`.\n\n        if (data.selectionToRemove) {\n          var modelSelection = editor.model.createSelection();\n          var ranges = [];\n\n          var _iterator = _createForOfIteratorHelper(data.selectionToRemove.getRanges()),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var viewRange = _step.value;\n              ranges.push(editor.editing.mapper.toModelRange(viewRange));\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          modelSelection.setTo(ranges);\n          deleteCommandParams.selection = modelSelection;\n        }\n\n        editor.execute(data.direction == 'forward' ? 'deleteForward' : 'delete', deleteCommandParams);\n        data.preventDefault();\n        view.scrollToTheSelection();\n      }, {\n        priority: 'low'\n      }); // Android IMEs have a quirk - they change DOM selection after the input changes were performed by the browser.\n      // This happens on `keyup` event. Android doesn't know anything about our deletion and selection handling. Even if the selection\n      // was changed during input events, IME remembers the position where the selection \"should\" be placed and moves it there.\n      //\n      // To prevent incorrect selection, we save the selection after deleting here and then re-set it on `keyup`. This has to be done\n      // on DOM selection level, because on `keyup` the model selection is still the same as it was just after deletion, so it\n      // wouldn't be changed and the fix would do nothing.\n      //\n\n      if (env.isAndroid) {\n        var domSelectionAfterDeletion = null;\n        this.listenTo(viewDocument, 'delete', function (evt, data) {\n          var domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n          domSelectionAfterDeletion = {\n            anchorNode: domSelection.anchorNode,\n            anchorOffset: domSelection.anchorOffset,\n            focusNode: domSelection.focusNode,\n            focusOffset: domSelection.focusOffset\n          };\n        }, {\n          priority: 'lowest'\n        });\n        this.listenTo(viewDocument, 'keyup', function (evt, data) {\n          if (domSelectionAfterDeletion) {\n            var domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n            domSelection.collapse(domSelectionAfterDeletion.anchorNode, domSelectionAfterDeletion.anchorOffset);\n            domSelection.extend(domSelectionAfterDeletion.focusNode, domSelectionAfterDeletion.focusOffset);\n            domSelectionAfterDeletion = null;\n          }\n        });\n      }\n\n      if (this.editor.plugins.has('UndoEditing')) {\n        this.listenTo(viewDocument, 'delete', function (evt, data) {\n          if (_this._undoOnBackspace && data.direction == 'backward' && data.sequence == 1 && data.unit == 'codePoint') {\n            _this._undoOnBackspace = false;\n            editor.execute('undo');\n            data.preventDefault();\n            evt.stop();\n          }\n        }, {\n          context: '$capture'\n        });\n        this.listenTo(modelDocument, 'change', function () {\n          _this._undoOnBackspace = false;\n        });\n      }\n    }\n    /**\n     * If the next user action after calling this method is pressing backspace, it would undo the last change.\n     *\n     * Requires {@link module:undo/undoediting~UndoEditing} plugin. If not loaded, does nothing.\n     */\n\n  }, {\n    key: \"requestUndoOnBackspace\",\n    value: function requestUndoOnBackspace() {\n      if (this.editor.plugins.has('UndoEditing')) {\n        this._undoOnBackspace = true;\n      }\n    }\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * Whether pressing backspace should trigger undo action\n     *\n     * @private\n     * @member {Boolean} #_undoOnBackspace\n     */\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'Delete';\n    }\n  }]);\n\n  return Delete;\n}(Plugin);\n\nexport { Delete as default };","map":null,"metadata":{},"sourceType":"module"}