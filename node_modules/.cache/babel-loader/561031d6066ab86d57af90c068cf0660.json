{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/insertparagraphcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n/**\n * The insert paragraph command. It inserts a new paragraph at a specific\n * {@link module:engine/model/position~Position document position}.\n *\n *\t\t// Insert a new paragraph before an element in the document.\n *\t\teditor.execute( 'insertParagraph', {\n *\t\t\tposition: editor.model.createPositionBefore( element )\n *\t\t} );\n *\n * If a paragraph is disallowed in the context of the specific position, the command\n * will attempt to split position ancestors to find a place where it is possible\n * to insert a paragraph.\n *\n * **Note**: This command moves the selection to the inserted paragraph.\n *\n * @extends module:core/command~Command\n */\n\nvar InsertParagraphCommand = /*#__PURE__*/function (_Command) {\n  _inherits(InsertParagraphCommand, _Command);\n\n  function InsertParagraphCommand() {\n    _classCallCheck(this, InsertParagraphCommand);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InsertParagraphCommand).apply(this, arguments));\n  }\n\n  _createClass(InsertParagraphCommand, [{\n    key: \"execute\",\n\n    /**\n     * Executes the command.\n     *\n     * @param {Object} options Options for the executed command.\n     * @param {module:engine/model/position~Position} options.position The model position at which\n     * the new paragraph will be inserted.\n     * @param {Object} attributes Attributes keys and values to set on a inserted paragraph\n     * @fires execute\n     */\n    value: function execute(options) {\n      var model = this.editor.model;\n      var attributes = options.attributes;\n      var position = options.position;\n      model.change(function (writer) {\n        var paragraph = writer.createElement('paragraph');\n\n        if (attributes) {\n          model.schema.setAllowedAttributes(paragraph, attributes, writer);\n        }\n\n        if (!model.schema.checkChild(position.parent, paragraph)) {\n          var allowedParent = model.schema.findAllowedParent(position, paragraph); // It could be there's no ancestor limit that would allow paragraph.\n          // In theory, \"paragraph\" could be disallowed even in the \"$root\".\n\n          if (!allowedParent) {\n            return;\n          }\n\n          position = writer.split(position, allowedParent).position;\n        }\n\n        model.insertContent(paragraph, position);\n        writer.setSelection(paragraph, 'in');\n      });\n    }\n  }]);\n\n  return InsertParagraphCommand;\n}(Command);\n\nexport { InsertParagraphCommand as default };","map":null,"metadata":{},"sourceType":"module"}