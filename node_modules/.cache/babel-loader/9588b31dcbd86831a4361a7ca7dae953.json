{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nimport dialog from '../modules/dialog';\nimport component from '../modules/component';\nimport resizing from '../modules/resizing';\nimport fileManager from '../modules/fileManager';\nexport default {\n  name: 'video',\n  display: 'dialog',\n  add: function add(core) {\n    core.addModule([dialog, component, resizing, fileManager]);\n    var options = core.options;\n    var context = core.context;\n    var contextVideo = context.video = {\n      _infoList: [],\n      // @Override fileManager\n      _infoIndex: 0,\n      // @Override fileManager\n      _uploadFileLength: 0,\n      // @Override fileManager\n      focusElement: null,\n      // @Override dialog // This element has focus when the dialog is opened.\n      sizeUnit: options._videoSizeUnit,\n      _align: 'none',\n      _floatClassRegExp: '__se__float\\\\-[a-z]+',\n      _youtubeQuery: options.youtubeQuery,\n      _videoRatio: options.videoRatio * 100 + '%',\n      _defaultRatio: options.videoRatio * 100 + '%',\n      _linkValue: '',\n      // @require @Override component\n      _element: null,\n      _cover: null,\n      _container: null,\n      // @Override resizing properties\n      inputX: null,\n      inputY: null,\n      _element_w: 1,\n      _element_h: 1,\n      _element_l: 0,\n      _element_t: 0,\n      _defaultSizeX: '100%',\n      _defaultSizeY: options.videoRatio * 100 + '%',\n      _origin_w: options.videoWidth === '100%' ? '' : options.videoWidth,\n      _origin_h: options.videoHeight === '56.25%' ? '' : options.videoHeight,\n      _proportionChecked: true,\n      _resizing: options.videoResizing,\n      _resizeDotHide: !options.videoHeightShow,\n      _rotation: options.videoRotation,\n      _alignHide: !options.videoAlignShow,\n      _onlyPercentage: options.videoSizeOnlyPercentage,\n      _ratio: false,\n      _ratioX: 1,\n      _ratioY: 1,\n      _captionShow: false\n    };\n    /** video dialog */\n\n    var video_dialog = this.setDialog(core);\n    contextVideo.modal = video_dialog;\n    contextVideo.videoInputFile = video_dialog.querySelector('._se_video_file');\n    contextVideo.videoUrlFile = video_dialog.querySelector('.se-input-url');\n    contextVideo.focusElement = contextVideo.videoUrlFile || contextVideo.videoInputFile;\n    contextVideo.preview = video_dialog.querySelector('.se-link-preview');\n    /** add event listeners */\n\n    video_dialog.querySelector('form').addEventListener('submit', this.submit.bind(core));\n    if (contextVideo.videoInputFile) video_dialog.querySelector('.se-dialog-files-edge-button').addEventListener('click', this._removeSelectedFiles.bind(contextVideo.videoInputFile, contextVideo.videoUrlFile, contextVideo.preview));\n    if (contextVideo.videoInputFile && contextVideo.videoUrlFile) contextVideo.videoInputFile.addEventListener('change', this._fileInputChange.bind(contextVideo));\n    if (contextVideo.videoUrlFile) contextVideo.videoUrlFile.addEventListener('input', this._onLinkPreview.bind(contextVideo.preview, contextVideo, options.linkProtocol));\n    contextVideo.proportion = {};\n    contextVideo.videoRatioOption = {};\n    contextVideo.inputX = {};\n    contextVideo.inputY = {};\n\n    if (options.videoResizing) {\n      contextVideo.proportion = video_dialog.querySelector('._se_video_check_proportion');\n      contextVideo.videoRatioOption = video_dialog.querySelector('.se-video-ratio');\n      contextVideo.inputX = video_dialog.querySelector('._se_video_size_x');\n      contextVideo.inputY = video_dialog.querySelector('._se_video_size_y');\n      contextVideo.inputX.value = options.videoWidth;\n      contextVideo.inputY.value = options.videoHeight;\n      contextVideo.inputX.addEventListener('keyup', this.setInputSize.bind(core, 'x'));\n      contextVideo.inputY.addEventListener('keyup', this.setInputSize.bind(core, 'y'));\n      contextVideo.inputX.addEventListener('change', this.setRatio.bind(core));\n      contextVideo.inputY.addEventListener('change', this.setRatio.bind(core));\n      contextVideo.proportion.addEventListener('change', this.setRatio.bind(core));\n      contextVideo.videoRatioOption.addEventListener('change', this.setVideoRatio.bind(core));\n      video_dialog.querySelector('.se-dialog-btn-revert').addEventListener('click', this.sizeRevert.bind(core));\n    }\n    /** append html */\n\n\n    context.dialog.modal.appendChild(video_dialog);\n    /** empty memory */\n\n    video_dialog = null;\n  },\n\n  /** dialog */\n  setDialog: function setDialog(core) {\n    var option = core.options;\n    var lang = core.lang;\n    var dialog = core.util.createElement('DIV');\n    dialog.className = 'se-dialog-content';\n    dialog.style.display = 'none';\n    var html = '' + '<form method=\"post\" enctype=\"multipart/form-data\">' + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + core.icons.cancel + '</button>' + '<span class=\"se-modal-title\">' + lang.dialogBox.videoBox.title + '</span>' + '</div>' + '<div class=\"se-dialog-body\">';\n\n    if (option.videoFileInput) {\n      html += '' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.videoBox.file + '</label>' + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form _se_video_file\" type=\"file\" accept=\"' + option.videoAccept + '\"' + (option.videoMultipleFile ? ' multiple=\"multiple\"' : '') + '/>' + '<button type=\"button\" data-command=\"filesRemove\" class=\"se-btn se-dialog-files-edge-button se-file-remove\" title=\"' + lang.controller.remove + '\" aria-label=\"' + lang.controller.remove + '\">' + core.icons.cancel + '</button>' + '</div>' + '</div>';\n    }\n\n    if (option.videoUrlInput) {\n      html += '' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.videoBox.url + '</label>' + '<input class=\"se-input-form se-input-url\" type=\"text\" />' + '<pre class=\"se-link-preview\"></pre>' + '</div>';\n    }\n\n    if (option.videoResizing) {\n      var ratioList = option.videoRatioList || [{\n        name: '16:9',\n        value: 0.5625\n      }, {\n        name: '4:3',\n        value: 0.75\n      }, {\n        name: '21:9',\n        value: 0.4285\n      }];\n      var ratio = option.videoRatio;\n      var onlyPercentage = option.videoSizeOnlyPercentage;\n      var onlyPercentDisplay = onlyPercentage ? ' style=\"display: none !important;\"' : '';\n      var heightDisplay = !option.videoHeightShow ? ' style=\"display: none !important;\"' : '';\n      var ratioDisplay = !option.videoRatioShow ? ' style=\"display: none !important;\"' : '';\n      var onlyWidthDisplay = !onlyPercentage && !option.videoHeightShow && !option.videoRatioShow ? ' style=\"display: none !important;\"' : '';\n      html += '' + '<div class=\"se-dialog-form\">' + '<div class=\"se-dialog-size-text\">' + '<label class=\"size-w\">' + lang.dialogBox.width + '</label>' + '<label class=\"se-dialog-size-x\">&nbsp;</label>' + '<label class=\"size-h\"' + heightDisplay + '>' + lang.dialogBox.height + '</label>' + '<label class=\"size-h\"' + ratioDisplay + '>(' + lang.dialogBox.ratio + ')</label>' + '</div>' + '<input class=\"se-input-control _se_video_size_x\" placeholder=\"100%\"' + (onlyPercentage ? ' type=\"number\" min=\"1\"' : 'type=\"text\"') + (onlyPercentage ? ' max=\"100\"' : '') + '/>' + '<label class=\"se-dialog-size-x\"' + onlyWidthDisplay + '>' + (onlyPercentage ? '%' : 'x') + '</label>' + '<input class=\"se-input-control _se_video_size_y\" placeholder=\"' + option.videoRatio * 100 + '%\"' + (onlyPercentage ? ' type=\"number\" min=\"1\"' : 'type=\"text\"') + (onlyPercentage ? ' max=\"100\"' : '') + heightDisplay + '/>' + '<select class=\"se-input-select se-video-ratio\" title=\"' + lang.dialogBox.ratio + '\" aria-label=\"' + lang.dialogBox.ratio + '\"' + ratioDisplay + '>';\n      if (!heightDisplay) html += '<option value=\"\"> - </option>';\n\n      for (var i = 0, len = ratioList.length; i < len; i++) {\n        html += '<option value=\"' + ratioList[i].value + '\"' + (ratio.toString() === ratioList[i].value.toString() ? ' selected' : '') + '>' + ratioList[i].name + '</option>';\n      }\n\n      html += '</select>' + '<button type=\"button\" title=\"' + lang.dialogBox.revertButton + '\" aria-label=\"' + lang.dialogBox.revertButton + '\" class=\"se-btn se-dialog-btn-revert\" style=\"float: right;\">' + core.icons.revert + '</button>' + '</div>' + '<div class=\"se-dialog-form se-dialog-form-footer\"' + onlyPercentDisplay + onlyWidthDisplay + '>' + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_video_check_proportion\" checked/>&nbsp;' + lang.dialogBox.proportion + '</label>' + '</div>';\n    }\n\n    html += '' + '</div>' + '<div class=\"se-dialog-footer\">' + '<div' + (option.videoAlignShow ? '' : ' style=\"display: none\"') + '>' + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"none\" checked>' + lang.dialogBox.basic + '</label>' + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"left\">' + lang.dialogBox.left + '</label>' + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"center\">' + lang.dialogBox.center + '</label>' + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"right\">' + lang.dialogBox.right + '</label>' + '</div>' + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + '</span></button>' + '</div>' + '</form>';\n    dialog.innerHTML = html;\n    return dialog;\n  },\n  _fileInputChange: function _fileInputChange() {\n    if (!this.videoInputFile.value) {\n      this.videoUrlFile.removeAttribute('disabled');\n      this.preview.style.textDecoration = '';\n    } else {\n      this.videoUrlFile.setAttribute('disabled', true);\n      this.preview.style.textDecoration = 'line-through';\n    }\n  },\n  _removeSelectedFiles: function _removeSelectedFiles(urlInput, preview) {\n    this.value = '';\n\n    if (urlInput) {\n      urlInput.removeAttribute('disabled');\n      preview.style.textDecoration = '';\n    }\n  },\n  _onLinkPreview: function _onLinkPreview(context, protocol, e) {\n    var value = e.target.value.trim();\n\n    if (/^<iframe.*\\/iframe>$/.test(value)) {\n      context._linkValue = value;\n      this.textContent = '<IFrame :src=\"..\"></IFrame>';\n    } else {\n      context._linkValue = this.textContent = !value ? '' : protocol && value.indexOf('://') === -1 && value.indexOf('#') !== 0 ? protocol + value : value.indexOf('://') === -1 ? '/' + value : value;\n    }\n  },\n  _setTagAttrs: function _setTagAttrs(element) {\n    element.setAttribute('controls', true);\n    var attrs = this.options.videoTagAttrs;\n    if (!attrs) return;\n\n    for (var key in attrs) {\n      if (!this.util.hasOwn(attrs, key)) continue;\n      element.setAttribute(key, attrs[key]);\n    }\n  },\n  createVideoTag: function createVideoTag() {\n    var videoTag = this.util.createElement('VIDEO');\n\n    this.plugins.video._setTagAttrs.call(this, videoTag);\n\n    return videoTag;\n  },\n  _setIframeAttrs: function _setIframeAttrs(element) {\n    element.frameBorder = '0';\n    element.allowFullscreen = true;\n    var attrs = this.options.videoIframeAttrs;\n    if (!attrs) return;\n\n    for (var key in attrs) {\n      if (!this.util.hasOwn(attrs, key)) continue;\n      element.setAttribute(key, attrs[key]);\n    }\n  },\n  createIframeTag: function createIframeTag() {\n    var iframeTag = this.util.createElement('IFRAME');\n\n    this.plugins.video._setIframeAttrs.call(this, iframeTag);\n\n    return iframeTag;\n  },\n\n  /**\n   * @Override @Required fileManager\n   */\n  fileTags: ['iframe', 'video'],\n\n  /**\n   * @Override core, resizing, fileManager\n   * @description It is called from core.selectComponent.\n   * @param {Element} element Target element\n   */\n  select: function select(element) {\n    this.plugins.video.onModifyMode.call(this, element, this.plugins.resizing.call_controller_resize.call(this, element, 'video'));\n  },\n\n  /**\n   * @Override fileManager, resizing\n   */\n  destroy: function destroy(element) {\n    var frame = element || this.context.video._element;\n    var container = this.context.video._container;\n    var dataIndex = frame.getAttribute('data-index') * 1;\n    var focusEl = container.previousElementSibling || container.nextElementSibling;\n    var emptyDiv = container.parentNode;\n    this.util.removeItem(container);\n    this.plugins.video.init.call(this);\n    this.controllersOff();\n    if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function (current) {\n      return current.childNodes.length === 0;\n    }, null); // focus\n\n    this.focusEdge(focusEl); // event\n\n    this.plugins.fileManager.deleteInfo.call(this, 'video', dataIndex, this.functions.onVideoUpload); // history stack\n\n    this.history.push(false);\n  },\n\n  /**\n   * @Required @Override dialog\n   */\n  on: function on(update) {\n    var contextVideo = this.context.video;\n\n    if (!update) {\n      contextVideo.inputX.value = contextVideo._origin_w = this.options.videoWidth === contextVideo._defaultSizeX ? '' : this.options.videoWidth;\n      contextVideo.inputY.value = contextVideo._origin_h = this.options.videoHeight === contextVideo._defaultSizeY ? '' : this.options.videoHeight;\n      contextVideo.proportion.disabled = true;\n      if (contextVideo.videoInputFile && this.options.videoMultipleFile) contextVideo.videoInputFile.setAttribute('multiple', 'multiple');\n    } else {\n      if (contextVideo.videoInputFile && this.options.videoMultipleFile) contextVideo.videoInputFile.removeAttribute('multiple');\n    }\n\n    if (contextVideo._resizing) {\n      this.plugins.video.setVideoRatioSelect.call(this, contextVideo._origin_h || contextVideo._defaultRatio);\n    }\n  },\n\n  /**\n   * @Required @Override dialog\n   */\n  open: function open() {\n    this.plugins.dialog.open.call(this, 'video', 'video' === this.currentControllerName);\n  },\n  setVideoRatio: function setVideoRatio(e) {\n    var contextVideo = this.context.video;\n    var value = e.target.options[e.target.selectedIndex].value;\n    contextVideo._defaultSizeY = contextVideo._videoRatio = !value ? contextVideo._defaultSizeY : value * 100 + '%';\n    contextVideo.inputY.placeholder = !value ? '' : value * 100 + '%';\n    contextVideo.inputY.value = '';\n  },\n\n  /**\n   * @Override resizing\n   * @param {String} xy 'x': width, 'y': height\n   * @param {KeyboardEvent} e Event object\n   */\n  setInputSize: function setInputSize(xy, e) {\n    if (e && e.keyCode === 32) {\n      e.preventDefault();\n      return;\n    }\n\n    var contextVideo = this.context.video;\n\n    this.plugins.resizing._module_setInputSize.call(this, contextVideo, xy);\n\n    if (xy === 'y') {\n      this.plugins.video.setVideoRatioSelect.call(this, e.target.value || contextVideo._defaultRatio);\n    }\n  },\n\n  /**\n   * @Override resizing\n   */\n  setRatio: function setRatio() {\n    this.plugins.resizing._module_setRatio.call(this, this.context.video);\n  },\n  submit: function submit(e) {\n    var contextVideo = this.context.video;\n    var videoPlugin = this.plugins.video;\n    e.preventDefault();\n    e.stopPropagation();\n    contextVideo._align = contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"]:checked').value;\n\n    try {\n      if (contextVideo.videoInputFile && contextVideo.videoInputFile.files.length > 0) {\n        this.showLoading();\n        videoPlugin.submitAction.call(this, this.context.video.videoInputFile.files);\n      } else if (contextVideo.videoUrlFile && contextVideo._linkValue.length > 0) {\n        this.showLoading();\n        videoPlugin.setup_url.call(this, contextVideo._linkValue);\n      }\n    } catch (error) {\n      this.closeLoading();\n      throw Error('[SUNEDITOR.video.submit.fail] cause : \"' + error.message + '\"');\n    } finally {\n      this.plugins.dialog.close.call(this);\n    }\n\n    return false;\n  },\n  submitAction: function submitAction(fileList) {\n    if (fileList.length === 0) return;\n    var fileSize = 0;\n    var files = [];\n\n    for (var i = 0, len = fileList.length; i < len; i++) {\n      if (/video/i.test(fileList[i].type)) {\n        files.push(fileList[i]);\n        fileSize += fileList[i].size;\n      }\n    }\n\n    var limitSize = this.options.videoUploadSizeLimit;\n\n    if (limitSize > 0) {\n      var infoSize = 0;\n      var videosInfo = this.context.video._infoList;\n\n      for (var _i = 0, _len = videosInfo.length; _i < _len; _i++) {\n        infoSize += videosInfo[_i].size * 1;\n      }\n\n      if (fileSize + infoSize > limitSize) {\n        this.closeLoading();\n        var err = '[SUNEDITOR.videoUpload.fail] Size of uploadable total videos: ' + limitSize / 1000 + 'KB';\n\n        if (typeof this.functions.onVideoUploadError !== 'function' || this.functions.onVideoUploadError(err, {\n          'limitSize': limitSize,\n          'currentSize': infoSize,\n          'uploadSize': fileSize\n        }, this)) {\n          this.functions.noticeOpen(err);\n        }\n\n        return;\n      }\n    }\n\n    var contextVideo = this.context.video;\n    contextVideo._uploadFileLength = files.length;\n    var info = {\n      inputWidth: contextVideo.inputX.value,\n      inputHeight: contextVideo.inputY.value,\n      align: contextVideo._align,\n      isUpdate: this.context.dialog.updateModal,\n      element: contextVideo._element\n    };\n\n    if (typeof this.functions.onVideoUploadBefore === 'function') {\n      var result = this.functions.onVideoUploadBefore(files, info, this, function (data) {\n        if (data && this._w.Array.isArray(data.result)) {\n          this.plugins.video.register.call(this, info, data);\n        } else {\n          this.plugins.video.upload.call(this, info, data);\n        }\n      }.bind(this));\n      if (typeof result === 'undefined') return;\n\n      if (!result) {\n        this.closeLoading();\n        return;\n      }\n\n      if (typeof result === 'object' && result.length > 0) files = result;\n    }\n\n    this.plugins.video.upload.call(this, info, files);\n  },\n  error: function error(message, response) {\n    this.closeLoading();\n\n    if (typeof this.functions.onVideoUploadError !== 'function' || this.functions.onVideoUploadError(message, response, this)) {\n      this.functions.noticeOpen(message);\n      throw Error('[SUNEDITOR.plugin.video.error] response: ' + message);\n    }\n  },\n  upload: function upload(info, files) {\n    if (!files) {\n      this.closeLoading();\n      return;\n    }\n\n    if (typeof files === 'string') {\n      this.plugins.video.error.call(this, files, null);\n      return;\n    }\n\n    var videoUploadUrl = this.options.videoUploadUrl;\n    var filesLen = this.context.dialog.updateModal ? 1 : files.length; // server upload\n\n    if (typeof videoUploadUrl === 'string' && videoUploadUrl.length > 0) {\n      var formData = new FormData();\n\n      for (var i = 0; i < filesLen; i++) {\n        formData.append('file-' + i, files[i]);\n      }\n\n      this.plugins.fileManager.upload.call(this, videoUploadUrl, this.options.videoUploadHeader, formData, this.plugins.video.callBack_videoUpload.bind(this, info), this.functions.onVideoUploadError);\n    } else {\n      throw Error('[SUNEDITOR.videoUpload.fail] cause : There is no \"videoUploadUrl\" option.');\n    }\n  },\n  callBack_videoUpload: function callBack_videoUpload(info, xmlHttp) {\n    if (typeof this.functions.videoUploadHandler === 'function') {\n      this.functions.videoUploadHandler(xmlHttp, info, this);\n    } else {\n      var response = JSON.parse(xmlHttp.responseText);\n\n      if (response.errorMessage) {\n        this.plugins.video.error.call(this, response.errorMessage, response);\n      } else {\n        this.plugins.video.register.call(this, info, response);\n      }\n    }\n  },\n  register: function register(info, response) {\n    var fileList = response.result;\n    var videoTag = this.plugins.video.createVideoTag.call(this);\n\n    for (var i = 0, len = fileList.length, file; i < len; i++) {\n      file = {\n        name: fileList[i].name,\n        size: fileList[i].size\n      };\n      this.plugins.video.create_video.call(this, info.isUpdate ? info.element : videoTag.cloneNode(false), fileList[i].url, info.inputWidth, info.inputHeight, info.align, file, info.isUpdate);\n    }\n\n    this.closeLoading();\n  },\n  setup_url: function setup_url(url) {\n    try {\n      var contextVideo = this.context.video;\n      if (!url) url = contextVideo._linkValue;\n      if (!url) return false;\n      /** iframe source */\n\n      if (/^<iframe.*\\/iframe>$/.test(url)) {\n        var oIframe = new this._w.DOMParser().parseFromString(url, 'text/html').querySelector('iframe');\n        url = oIframe.src;\n        if (url.length === 0) return false;\n      }\n      /** youtube */\n\n\n      if (/youtu\\.?be/.test(url)) {\n        if (!/^http/.test(url)) url = 'https://' + url;\n        url = url.replace('watch?v=', '');\n\n        if (!/^\\/\\/.+\\/embed\\//.test(url)) {\n          url = url.replace(url.match(/\\/\\/.+\\//)[0], '//www.youtube.com/embed/').replace('&', '?&');\n        }\n\n        if (contextVideo._youtubeQuery.length > 0) {\n          if (/\\?/.test(url)) {\n            var splitUrl = url.split('?');\n            url = splitUrl[0] + '?' + contextVideo._youtubeQuery + '&' + splitUrl[1];\n          } else {\n            url += '?' + contextVideo._youtubeQuery;\n          }\n        }\n      } else if (/vimeo\\.com/.test(url)) {\n        if (url.endsWith('/')) {\n          url = url.slice(0, -1);\n        }\n\n        url = 'https://player.vimeo.com/video/' + url.slice(url.lastIndexOf('/') + 1);\n      }\n\n      this.plugins.video.create_video.call(this, this.plugins.video[!/youtu\\.?be/.test(url) && !/vimeo\\.com/.test(url) ? \"createVideoTag\" : \"createIframeTag\"].call(this), url, contextVideo.inputX.value, contextVideo.inputY.value, contextVideo._align, null, this.context.dialog.updateModal);\n    } catch (error) {\n      throw Error('[SUNEDITOR.video.upload.fail] cause : \"' + error.message + '\"');\n    } finally {\n      this.closeLoading();\n    }\n  },\n  create_video: function create_video(oFrame, src, width, height, align, file, isUpdate) {\n    this.context.resizing._resize_plugin = 'video';\n    var contextVideo = this.context.video;\n    var cover = null;\n    var container = null;\n    var init = false;\n    /** update */\n\n    if (isUpdate) {\n      oFrame = contextVideo._element;\n\n      if (oFrame.src !== src) {\n        init = true;\n        var isYoutube = /youtu\\.?be/.test(src);\n        var isVimeo = /vimeo\\.com/.test(src);\n\n        if ((isYoutube || isVimeo) && !/^iframe$/i.test(oFrame.nodeName)) {\n          var newTag = this.plugins.video.createIframeTag.call(this);\n          newTag.src = src;\n          oFrame.parentNode.replaceChild(newTag, oFrame);\n          contextVideo._element = oFrame = newTag;\n        } else if (!isYoutube && !isVimeo && !/^videoo$/i.test(oFrame.nodeName)) {\n          var _newTag = this.plugins.video.createVideoTag.call(this);\n\n          _newTag.src = src;\n          oFrame.parentNode.replaceChild(_newTag, oFrame);\n          contextVideo._element = oFrame = _newTag;\n        } else {\n          oFrame.src = src;\n        }\n      }\n\n      container = contextVideo._container;\n      cover = this.util.getParentElement(oFrame, 'FIGURE');\n    }\n    /** create */\n    else {\n      init = true;\n      oFrame.src = src;\n      contextVideo._element = oFrame;\n      cover = this.plugins.component.set_cover.call(this, oFrame);\n      container = this.plugins.component.set_container.call(this, cover, 'se-video-container');\n    }\n    /** rendering */\n\n\n    contextVideo._cover = cover;\n    contextVideo._container = container;\n\n    var inputUpdate = this.plugins.resizing._module_getSizeX.call(this, contextVideo) !== (width || contextVideo._defaultSizeX) || this.plugins.resizing._module_getSizeY.call(this, contextVideo) !== (height || contextVideo._videoRatio);\n\n    var changeSize = !isUpdate || inputUpdate;\n\n    if (contextVideo._resizing) {\n      this.context.video._proportionChecked = contextVideo.proportion.checked;\n      oFrame.setAttribute('data-proportion', contextVideo._proportionChecked);\n    } // size\n\n\n    var isPercent = false;\n\n    if (changeSize) {\n      isPercent = this.plugins.video.applySize.call(this);\n    } // align\n\n\n    if (!(isPercent && align === 'center')) {\n      this.plugins.video.setAlign.call(this, null, oFrame, cover, container);\n    }\n\n    var changed = true;\n\n    if (!isUpdate) {\n      changed = this.insertComponent(container, false, true, !this.options.mediaAutoSelect);\n\n      if (!this.options.mediaAutoSelect) {\n        var line = this.appendFormatTag(container, null);\n        if (line) this.setRange(line, 0, line, 0);\n      }\n    } else if (contextVideo._resizing && this.context.resizing._rotateVertical && changeSize) {\n      this.plugins.resizing.setTransformSize.call(this, oFrame, null, null);\n    }\n\n    if (changed) {\n      if (init) {\n        this.plugins.fileManager.setInfo.call(this, 'video', oFrame, this.functions.onVideoUpload, file, true);\n      }\n\n      if (isUpdate) {\n        this.selectComponent(oFrame, 'video'); // history stack\n\n        this.history.push(false);\n      }\n    }\n\n    this.context.resizing._resize_plugin = '';\n  },\n  _update_videoCover: function _update_videoCover(oFrame) {\n    if (!oFrame) return;\n    var contextVideo = this.context.video;\n    if (/^video$/i.test(oFrame.nodeName)) this.plugins.video._setTagAttrs.call(this, oFrame);else this.plugins.video._setIframeAttrs.call(this, oFrame);\n    var existElement = this.util.isRangeFormatElement(oFrame.parentNode) || this.util.isWysiwygDiv(oFrame.parentNode) ? oFrame : this.util.getFormatElement(oFrame) || oFrame;\n    var prevFrame = oFrame;\n    contextVideo._element = oFrame = oFrame.cloneNode(true);\n    var cover = contextVideo._cover = this.plugins.component.set_cover.call(this, oFrame);\n    var container = contextVideo._container = this.plugins.component.set_container.call(this, cover, 'se-video-container');\n\n    try {\n      var figcaption = existElement.querySelector('figcaption');\n      var caption = null;\n\n      if (!!figcaption) {\n        caption = this.util.createElement('DIV');\n        caption.innerHTML = figcaption.innerHTML;\n        this.util.removeItem(figcaption);\n      } // size\n\n\n      var size = (oFrame.getAttribute('data-size') || oFrame.getAttribute('data-origin') || '').split(',');\n      this.plugins.video.applySize.call(this, size[0] || prevFrame.style.width || prevFrame.width || '', size[1] || prevFrame.style.height || prevFrame.height || ''); // align\n\n      var format = this.util.getFormatElement(prevFrame);\n      if (format) contextVideo._align = format.style.textAlign || format.style.float;\n      this.plugins.video.setAlign.call(this, null, oFrame, cover, container);\n\n      if (this.util.isListCell(existElement) || this.util.isFormatElement(existElement)) {\n        prevFrame.parentNode.replaceChild(container, prevFrame);\n      } else if (this.util.isFormatElement(existElement) && existElement.childNodes.length > 0) {\n        existElement.parentNode.insertBefore(container, existElement);\n        this.util.removeItem(prevFrame); // clean format tag\n\n        this.util.removeEmptyNode(existElement, null);\n        if (existElement.children.length === 0) existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);\n      } else {\n        existElement.parentNode.replaceChild(container, existElement);\n      }\n\n      if (!!caption) existElement.parentNode.insertBefore(caption, container.nextElementSibling);\n    } catch (error) {\n      console.warn('[SUNEDITOR.video.error] Maybe the video tag is nested.', error);\n    }\n\n    this.plugins.fileManager.setInfo.call(this, 'video', oFrame, this.functions.onVideoUpload, null, true);\n    this.plugins.video.init.call(this);\n  },\n\n  /**\n   * @Required @Override fileManager, resizing\n   */\n  onModifyMode: function onModifyMode(element, size) {\n    var contextVideo = this.context.video;\n    contextVideo._element = element;\n    contextVideo._cover = this.util.getParentElement(element, 'FIGURE');\n    contextVideo._container = this.util.getParentElement(element, this.util.isMediaComponent);\n    contextVideo._align = element.style.float || element.getAttribute('data-align') || 'none';\n    element.style.float = '';\n\n    if (size) {\n      contextVideo._element_w = size.w;\n      contextVideo._element_h = size.h;\n      contextVideo._element_t = size.t;\n      contextVideo._element_l = size.l;\n    }\n\n    var origin = contextVideo._element.getAttribute('data-size') || contextVideo._element.getAttribute('data-origin');\n\n    var w, h;\n\n    if (origin) {\n      origin = origin.split(',');\n      w = origin[0];\n      h = origin[1];\n    } else if (size) {\n      w = size.w;\n      h = size.h;\n    }\n\n    contextVideo._origin_w = w || element.style.width || element.width || '';\n    contextVideo._origin_h = h || element.style.height || element.height || '';\n  },\n\n  /**\n   * @Required @Override fileManager, resizing\n   */\n  openModify: function openModify(notOpen) {\n    var contextVideo = this.context.video;\n    if (contextVideo.videoUrlFile) contextVideo._linkValue = contextVideo.preview.textContent = contextVideo.videoUrlFile.value = contextVideo._element.src || (contextVideo._element.querySelector('source') || '').src || '';\n    (contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"][value=\"' + contextVideo._align + '\"]') || contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"][value=\"none\"]')).checked = true;\n\n    if (contextVideo._resizing) {\n      this.plugins.resizing._module_setModifyInputSize.call(this, contextVideo, this.plugins.video);\n\n      var y = contextVideo._videoRatio = this.plugins.resizing._module_getSizeY.call(this, contextVideo);\n\n      var ratioSelected = this.plugins.video.setVideoRatioSelect.call(this, y);\n      if (!ratioSelected) contextVideo.inputY.value = contextVideo._onlyPercentage ? this.util.getNumber(y, 2) : y;\n    }\n\n    if (!notOpen) this.plugins.dialog.open.call(this, 'video', true);\n  },\n  setVideoRatioSelect: function setVideoRatioSelect(value) {\n    var ratioSelected = false;\n    var contextVideo = this.context.video;\n    var ratioOptions = contextVideo.videoRatioOption.options;\n    if (/%$/.test(value) || contextVideo._onlyPercentage) value = this.util.getNumber(value, 2) / 100 + '';else if (!this.util.isNumber(value) || value * 1 >= 1) value = '';\n    contextVideo.inputY.placeholder = '';\n\n    for (var i = 0, len = ratioOptions.length; i < len; i++) {\n      if (ratioOptions[i].value === value) {\n        ratioSelected = ratioOptions[i].selected = true;\n        contextVideo.inputY.placeholder = !value ? '' : value * 100 + '%';\n      } else ratioOptions[i].selected = false;\n    }\n\n    return ratioSelected;\n  },\n\n  /**\n   * @Override fileManager\n   */\n  checkFileInfo: function checkFileInfo() {\n    this.plugins.fileManager.checkInfo.call(this, 'video', ['iframe', 'video'], this.functions.onVideoUpload, this.plugins.video._update_videoCover.bind(this), true);\n  },\n\n  /**\n   * @Override fileManager\n   */\n  resetFileInfo: function resetFileInfo() {\n    this.plugins.fileManager.resetInfo.call(this, 'video', this.functions.onVideoUpload);\n  },\n\n  /**\n   * @Override fileManager\n   */\n  applySize: function applySize(w, h) {\n    var contextVideo = this.context.video;\n    if (!w) w = contextVideo.inputX.value || this.options.videoWidth;\n    if (!h) h = contextVideo.inputY.value || this.options.videoHeight;\n\n    if (contextVideo._onlyPercentage || /%$/.test(w) || !w) {\n      this.plugins.video.setPercentSize.call(this, w || '100%', h || (/%$/.test(contextVideo._videoRatio) ? contextVideo._videoRatio : contextVideo._defaultRatio));\n      return true;\n    } else if ((!w || w === 'auto') && (!h || h === 'auto')) {\n      this.plugins.video.setAutoSize.call(this);\n    } else {\n      this.plugins.video.setSize.call(this, w, h || contextVideo._videoRatio || contextVideo._defaultRatio, false);\n    }\n\n    return false;\n  },\n\n  /**\n   * @Override resizing\n   */\n  sizeRevert: function sizeRevert() {\n    this.plugins.resizing._module_sizeRevert.call(this, this.context.video);\n  },\n\n  /**\n   * @Override resizing\n   */\n  setSize: function setSize(w, h, notResetPercentage, direction) {\n    var contextVideo = this.context.video;\n    var onlyW = /^(rw|lw)$/.test(direction);\n    var onlyH = /^(th|bh)$/.test(direction);\n    if (!onlyH) w = this.util.getNumber(w, 0);\n    if (!onlyW) h = this.util.isNumber(h) ? h + contextVideo.sizeUnit : !h ? '' : h;\n    w = w ? w + contextVideo.sizeUnit : '';\n    if (!onlyH) contextVideo._element.style.width = w;\n    if (!onlyW) contextVideo._cover.style.paddingBottom = contextVideo._cover.style.height = h;\n\n    if (!onlyH && !/%$/.test(w)) {\n      contextVideo._cover.style.width = w;\n      contextVideo._container.style.width = '';\n    }\n\n    if (!onlyW && !/%$/.test(h)) {\n      contextVideo._element.style.height = h;\n    } else {\n      contextVideo._element.style.height = '';\n    }\n\n    if (!notResetPercentage) contextVideo._element.removeAttribute('data-percentage'); // save current size\n\n    this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);\n  },\n\n  /**\n   * @Override resizing\n   */\n  setAutoSize: function setAutoSize() {\n    this.plugins.video.setPercentSize.call(this, 100, this.context.video._defaultRatio);\n  },\n\n  /**\n   * @Override resizing\n   */\n  setOriginSize: function setOriginSize(dataSize) {\n    var contextVideo = this.context.video;\n\n    contextVideo._element.removeAttribute('data-percentage');\n\n    this.plugins.resizing.resetTransform.call(this, contextVideo._element);\n    this.plugins.video.cancelPercentAttr.call(this);\n    var originSize = ((dataSize ? contextVideo._element.getAttribute('data-size') : '') || contextVideo._element.getAttribute('data-origin') || '').split(',');\n\n    if (originSize) {\n      var w = originSize[0];\n      var h = originSize[1];\n\n      if (contextVideo._onlyPercentage || /%$/.test(w) && (/%$/.test(h) || !/\\d/.test(h))) {\n        this.plugins.video.setPercentSize.call(this, w, h);\n      } else {\n        this.plugins.video.setSize.call(this, w, h);\n      } // save current size\n\n\n      this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);\n    }\n  },\n\n  /**\n   * @Override resizing\n   */\n  setPercentSize: function setPercentSize(w, h) {\n    var contextVideo = this.context.video;\n    h = !!h && !/%$/.test(h) && !this.util.getNumber(h, 0) ? this.util.isNumber(h) ? h + '%' : h : this.util.isNumber(h) ? h + contextVideo.sizeUnit : h || contextVideo._defaultRatio;\n    contextVideo._container.style.width = this.util.isNumber(w) ? w + '%' : w;\n    contextVideo._container.style.height = '';\n    contextVideo._cover.style.width = '100%';\n    contextVideo._cover.style.height = h;\n    contextVideo._cover.style.paddingBottom = h;\n    contextVideo._element.style.width = '100%';\n    contextVideo._element.style.height = '100%';\n    contextVideo._element.style.maxWidth = '';\n    if (contextVideo._align === 'center') this.plugins.video.setAlign.call(this, null, null, null, null);\n\n    contextVideo._element.setAttribute('data-percentage', w + ',' + h); // save current size\n\n\n    this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);\n  },\n\n  /**\n   * @Override resizing\n   */\n  cancelPercentAttr: function cancelPercentAttr() {\n    var contextVideo = this.context.video;\n    contextVideo._cover.style.width = '';\n    contextVideo._cover.style.height = '';\n    contextVideo._cover.style.paddingBottom = '';\n    contextVideo._container.style.width = '';\n    contextVideo._container.style.height = '';\n    this.util.removeClass(contextVideo._container, this.context.video._floatClassRegExp);\n    this.util.addClass(contextVideo._container, '__se__float-' + contextVideo._align);\n    if (contextVideo._align === 'center') this.plugins.video.setAlign.call(this, null, null, null, null);\n  },\n\n  /**\n   * @Override resizing\n   */\n  setAlign: function setAlign(align, element, cover, container) {\n    var contextVideo = this.context.video;\n    if (!align) align = contextVideo._align;\n    if (!element) element = contextVideo._element;\n    if (!cover) cover = contextVideo._cover;\n    if (!container) container = contextVideo._container;\n\n    if (align && align !== 'none') {\n      cover.style.margin = 'auto';\n    } else {\n      cover.style.margin = '0';\n    }\n\n    if (/%$/.test(element.style.width) && align === 'center') {\n      container.style.minWidth = '100%';\n      cover.style.width = container.style.width;\n      cover.style.height = cover.style.height;\n      cover.style.paddingBottom = !/%$/.test(cover.style.height) ? cover.style.height : this.util.getNumber(this.util.getNumber(cover.style.height, 2) / 100 * this.util.getNumber(cover.style.width, 2), 2) + '%';\n    } else {\n      container.style.minWidth = '';\n      cover.style.width = this.context.resizing._rotateVertical ? element.style.height || element.offsetHeight : element.style.width || '100%';\n      cover.style.paddingBottom = cover.style.height;\n    }\n\n    if (!this.util.hasClass(container, '__se__float-' + align)) {\n      this.util.removeClass(container, contextVideo._floatClassRegExp);\n      this.util.addClass(container, '__se__float-' + align);\n    }\n\n    element.setAttribute('data-align', align);\n  },\n\n  /**\n   * @Override dialog\n   */\n  init: function init() {\n    var contextVideo = this.context.video;\n    if (contextVideo.videoInputFile) contextVideo.videoInputFile.value = '';\n    if (contextVideo.videoUrlFile) contextVideo._linkValue = contextVideo.preview.textContent = contextVideo.videoUrlFile.value = '';\n\n    if (contextVideo.videoInputFile && contextVideo.videoUrlFile) {\n      contextVideo.videoUrlFile.removeAttribute('disabled');\n      contextVideo.preview.style.textDecoration = '';\n    }\n\n    contextVideo._origin_w = this.options.videoWidth;\n    contextVideo._origin_h = this.options.videoHeight;\n    contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"][value=\"none\"]').checked = true;\n\n    if (contextVideo._resizing) {\n      contextVideo.inputX.value = this.options.videoWidth === contextVideo._defaultSizeX ? '' : this.options.videoWidth;\n      contextVideo.inputY.value = this.options.videoHeight === contextVideo._defaultSizeY ? '' : this.options.videoHeight;\n      contextVideo.proportion.checked = true;\n      contextVideo.proportion.disabled = true;\n      this.plugins.video.setVideoRatioSelect.call(this, contextVideo._defaultRatio);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}