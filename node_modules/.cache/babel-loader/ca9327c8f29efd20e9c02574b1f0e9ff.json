{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useContext } from 'react';\nimport isNil from 'lodash/isNil';\nimport { createChainedFunction, shallowEqual, useClassNames } from '../utils';\nimport { SidenavContext } from './Sidenav';\nimport PropTypes from 'prop-types';\nimport Ripple from '../Ripple';\nimport SafeAnchor from '../SafeAnchor';\nimport NavContext from '../Nav/NavContext';\nimport DropdownContext from '../Dropdown/DropdownContext';\nimport { useRenderDropdownItem } from '../Dropdown/useRenderDropdownItem';\n/**\n * Tree View Node\n * @see https://www.w3.org/TR/wai-aria-practices-1.2/#TreeView\n */\n\nvar SidenavDropdownItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'li' : _props$as,\n      activeProp = props.active,\n      children = props.children,\n      disabled = props.disabled,\n      divider = props.divider,\n      panel = props.panel,\n      className = props.className,\n      style = props.style,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'dropdown-item' : _props$classPrefix,\n      icon = props.icon,\n      eventKey = props.eventKey,\n      onClick = props.onClick,\n      onSelect = props.onSelect,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"active\", \"children\", \"disabled\", \"divider\", \"panel\", \"className\", \"style\", \"classPrefix\", \"icon\", \"eventKey\", \"onClick\", \"onSelect\"]);\n\n  var sidenavContext = useContext(SidenavContext);\n  var dropdown = useContext(DropdownContext);\n\n  if (!sidenavContext || !dropdown) {\n    throw new Error('<SidenavDropdownItem> component is not supposed to be used standalone. Use <Dropdown.Item> within <Sidenav> instead.');\n  }\n\n  var activeKey = sidenavContext.activeKey,\n      onSidenavSelect = sidenavContext.onSelect;\n  var nav = useContext(NavContext);\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      withClassPrefix = _useClassNames.withClassPrefix,\n      prefix = _useClassNames.prefix;\n\n  var selected = activeProp !== null && activeProp !== void 0 ? activeProp : !isNil(eventKey) && (shallowEqual(eventKey, activeKey) || shallowEqual(nav === null || nav === void 0 ? void 0 : nav.activeKey, eventKey));\n  var classes = merge(className, withClassPrefix({\n    'with-icon': icon,\n    active: selected,\n    disabled: disabled\n  }));\n  var handleClick = useCallback(function (event) {\n    var _dropdown$onSelect;\n\n    if (disabled) return;\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n    (_dropdown$onSelect = dropdown.onSelect) === null || _dropdown$onSelect === void 0 ? void 0 : _dropdown$onSelect.call(dropdown, eventKey, event);\n    onSidenavSelect === null || onSidenavSelect === void 0 ? void 0 : onSidenavSelect(eventKey, event);\n  }, [disabled, onSelect, onSidenavSelect, eventKey, dropdown]);\n  var menuitemEventHandlers = {\n    onClick: createChainedFunction(handleClick, onClick)\n  };\n  var renderDropdownItem = useRenderDropdownItem(Component);\n\n  if (divider) {\n    return renderDropdownItem(_extends({\n      ref: ref,\n      role: 'separator',\n      style: style,\n      className: merge(prefix('divider'), className)\n    }, rest));\n  }\n\n  if (panel) {\n    return renderDropdownItem(_extends({\n      ref: ref,\n      role: 'none presentation',\n      style: style,\n      className: merge(prefix('panel'), className)\n    }, rest, {\n      children: children\n    }));\n  }\n\n  return renderDropdownItem(_extends({\n    ref: ref\n  }, rest, {\n    style: style,\n    className: classes,\n    'aria-current': selected || undefined\n  }, menuitemEventHandlers, {\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, icon && /*#__PURE__*/React.cloneElement(icon, {\n      className: prefix('menu-icon')\n    }), children, /*#__PURE__*/React.createElement(Ripple, null))\n  }), SafeAnchor);\n});\nSidenavDropdownItem.displayName = 'Sidenav.Dropdown.Item';\nSidenavDropdownItem.propTypes = {\n  as: PropTypes.elementType,\n  expanded: PropTypes.bool,\n  active: PropTypes.bool,\n  divider: PropTypes.bool,\n  panel: PropTypes.bool,\n  disabled: PropTypes.bool,\n  submenu: PropTypes.element,\n  onSelect: PropTypes.func,\n  onClick: PropTypes.func,\n  icon: PropTypes.node,\n  eventKey: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  tabIndex: PropTypes.number,\n  title: PropTypes.node,\n  onMouseOver: PropTypes.func,\n  onMouseOut: PropTypes.func\n};\nexport default SidenavDropdownItem;","map":null,"metadata":{},"sourceType":"module"}