{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport Ripple from '../Ripple';\nimport SafeAnchor from '../SafeAnchor';\nimport { shallowEqual, useClassNames } from '../utils';\nimport NavContext from '../Nav/NavContext';\nvar NavbarItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? SafeAnchor : _props$as,\n      activeProp = props.active,\n      disabled = props.disabled,\n      eventKey = props.eventKey,\n      className = props.className,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'navbar-item' : _props$classPrefix,\n      style = props.style,\n      children = props.children,\n      icon = props.icon,\n      onClick = props.onClick,\n      onSelectProp = props.onSelect,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"active\", \"disabled\", \"eventKey\", \"className\", \"classPrefix\", \"style\", \"children\", \"icon\", \"onClick\", \"onSelect\"]);\n\n  var _useContext = useContext(NavContext),\n      activeKey = _useContext.activeKey,\n      onSelectFromNav = _useContext.onSelect;\n\n  var active = activeProp !== null && activeProp !== void 0 ? activeProp : !isNil(eventKey) && shallowEqual(eventKey, activeKey);\n  var emitSelect = useCallback(function (event) {\n    onSelectProp === null || onSelectProp === void 0 ? void 0 : onSelectProp(eventKey, event);\n    onSelectFromNav === null || onSelectFromNav === void 0 ? void 0 : onSelectFromNav(eventKey, event);\n  }, [eventKey, onSelectProp, onSelectFromNav]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge;\n\n  var classes = merge(className, withClassPrefix({\n    active: active,\n    disabled: disabled\n  }));\n  var handleClick = useCallback(function (event) {\n    if (!disabled) {\n      emitSelect(event);\n      onClick === null || onClick === void 0 ? void 0 : onClick(event);\n    }\n  }, [disabled, emitSelect, onClick]);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    \"aria-selected\": active || undefined\n  }, rest, {\n    className: classes,\n    onClick: handleClick,\n    style: style\n  }), icon, children, /*#__PURE__*/React.createElement(Ripple, null));\n});\nNavbarItem.displayName = 'Navbar.Item';\nNavbarItem.propTypes = {\n  as: PropTypes.elementType,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  onClick: PropTypes.func,\n  style: PropTypes.object,\n  icon: PropTypes.node,\n  onSelect: PropTypes.func,\n  children: PropTypes.node,\n  eventKey: PropTypes.any\n};\nexport default NavbarItem;","map":null,"metadata":{},"sourceType":"module"}