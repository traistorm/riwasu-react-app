{"ast":null,"code":"/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2018 JiHong Lee.\r\n * MIT license.\r\n */\n'use strict';\n\nexport default {\n  name: 'colorPicker',\n\n  /**\r\n   * @description Constructor\r\n   * @param {Object} core Core object \r\n   */\n  add: function add(core) {\n    var context = core.context;\n    context.colorPicker = {\n      colorListHTML: '',\n      _colorInput: '',\n      _defaultColor: '#000',\n      _styleProperty: 'color',\n      _currentColor: '',\n      _colorList: []\n    };\n    /** set submenu */\n\n    context.colorPicker.colorListHTML = this.createColorList(core, this._makeColorList);\n  },\n\n  /**\r\n   * @description Create color list\r\n   * @param {Object} core Core object \r\n   * @param {Function} makeColor this._makeColorList\r\n   * @returns {String} HTML string\r\n   */\n  createColorList: function createColorList(core, makeColor) {\n    var option = core.options;\n    var lang = core.lang;\n    var colorList = !option.colorList || option.colorList.length === 0 ? ['#ff0000', '#ff5e00', '#ffe400', '#abf200', '#00d8ff', '#0055ff', '#6600ff', '#ff00dd', '#000000', '#ffd8d8', '#fae0d4', '#faf4c0', '#e4f7ba', '#d4f4fa', '#d9e5ff', '#e8d9ff', '#ffd9fa', '#f1f1f1', '#ffa7a7', '#ffc19e', '#faed7d', '#cef279', '#b2ebf4', '#b2ccff', '#d1b2ff', '#ffb2f5', '#bdbdbd', '#f15f5f', '#f29661', '#e5d85c', '#bce55c', '#5cd1e5', '#6699ff', '#a366ff', '#f261df', '#8c8c8c', '#980000', '#993800', '#998a00', '#6b9900', '#008299', '#003399', '#3d0099', '#990085', '#353535', '#670000', '#662500', '#665c00', '#476600', '#005766', '#002266', '#290066', '#660058', '#222222'] : option.colorList;\n    var colorArr = [];\n    var list = '<div class=\"se-list-inner\">';\n\n    for (var i = 0, len = colorList.length, color; i < len; i++) {\n      color = colorList[i];\n      if (!color) continue;\n\n      if (typeof color === 'string') {\n        colorArr.push(color);\n        if (i < len - 1) continue;\n      }\n\n      if (colorArr.length > 0) {\n        list += '<div class=\"se-selector-color\">' + makeColor(colorArr) + '</div>';\n        colorArr = [];\n      }\n\n      if (typeof color === 'object') {\n        list += '<div class=\"se-selector-color\">' + makeColor(color) + '</div>';\n      }\n    }\n\n    list += '' + '<form class=\"se-form-group\">' + '<input type=\"text\" maxlength=\"9\" class=\"_se_color_picker_input se-color-input\"/>' + '<button type=\"submit\" class=\"se-btn-primary _se_color_picker_submit\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\">' + core.icons.checked + '</button>' + '<button type=\"button\" class=\"se-btn _se_color_picker_remove\" title=\"' + lang.toolbar.removeFormat + '\" aria-label=\"' + lang.toolbar.removeFormat + '\">' + core.icons.erase + '</button>' + '</form>' + '</div>';\n    return list;\n  },\n\n  /**\r\n   * @description Internal function used by this.createColorList\r\n   * @param {Array} colorList Color list\r\n   * @private\r\n   */\n  _makeColorList: function _makeColorList(colorList) {\n    var list = '';\n    list += '<ul class=\"se-color-pallet\">';\n\n    for (var i = 0, len = colorList.length, color; i < len; i++) {\n      color = colorList[i];\n\n      if (typeof color === 'string') {\n        list += '<li>' + '<button type=\"button\" data-value=\"' + color + '\" title=\"' + color + '\" aria-label=\"' + color + '\" style=\"background-color:' + color + ';\"></button>' + '</li>';\n      }\n    }\n\n    list += '</ul>';\n    return list;\n  },\n\n  /**\r\n   * @description Displays or resets the currently selected color at color list.\r\n   * @param {Node} node Current Selected node\r\n   * @param {String|null} color Color value\r\n   */\n  init: function init(node, color) {\n    var colorPicker = this.plugins.colorPicker;\n    var fillColor = color ? color : colorPicker.getColorInNode.call(this, node) || this.context.colorPicker._defaultColor;\n    fillColor = colorPicker.isHexColor(fillColor) ? fillColor : colorPicker.rgb2hex(fillColor) || fillColor;\n    var colorList = this.context.colorPicker._colorList;\n\n    if (colorList) {\n      for (var i = 0, len = colorList.length; i < len; i++) {\n        if (fillColor.toLowerCase() === colorList[i].getAttribute('data-value').toLowerCase()) {\n          this.util.addClass(colorList[i], 'active');\n        } else {\n          this.util.removeClass(colorList[i], 'active');\n        }\n      }\n    }\n\n    colorPicker.setInputText.call(this, colorPicker.colorName2hex.call(this, fillColor));\n  },\n\n  /**\r\n   * @description Store color values\r\n   * @param {String} hexColorStr Hax color value\r\n   */\n  setCurrentColor: function setCurrentColor(hexColorStr) {\n    this.context.colorPicker._currentColor = hexColorStr;\n    this.context.colorPicker._colorInput.style.borderColor = hexColorStr;\n  },\n\n  /**\r\n   * @description Set color at input element\r\n   * @param {String} hexColorStr Hax color value\r\n   */\n  setInputText: function setInputText(hexColorStr) {\n    hexColorStr = /^#/.test(hexColorStr) ? hexColorStr : '#' + hexColorStr;\n    this.context.colorPicker._colorInput.value = hexColorStr;\n    this.plugins.colorPicker.setCurrentColor.call(this, hexColorStr);\n  },\n\n  /**\r\n   * @description Gets color value at color property of node\r\n   * @param {Node} node Selected node \r\n   * @returns {String}\r\n   */\n  getColorInNode: function getColorInNode(node) {\n    var findColor = '';\n    var styleProperty = this.context.colorPicker._styleProperty;\n\n    while (node && !this.util.isWysiwygDiv(node) && findColor.length === 0) {\n      if (node.nodeType === 1 && node.style[styleProperty]) findColor = node.style[styleProperty];\n      node = node.parentNode;\n    }\n\n    return findColor;\n  },\n\n  /**\r\n   * @description Function to check hex format color\r\n   * @param {String} str Color value\r\n   */\n  isHexColor: function isHexColor(str) {\n    return /^#[0-9a-f]{3}(?:[0-9a-f]{3})?$/i.test(str);\n  },\n\n  /**\r\n   * @description Function to convert hex format to a rgb color\r\n   * @param {String} rgb RGB color format\r\n   * @returns {String}\r\n   */\n  rgb2hex: function rgb2hex(rgb) {\n    var rgbMatch = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n    return rgbMatch && rgbMatch.length === 4 ? \"#\" + (\"0\" + parseInt(rgbMatch[1], 10).toString(16)).slice(-2) + (\"0\" + parseInt(rgbMatch[2], 10).toString(16)).slice(-2) + (\"0\" + parseInt(rgbMatch[3], 10).toString(16)).slice(-2) : '';\n  },\n\n  /**\r\n   * @description Converts color values of other formats to hex color values and returns.\r\n   * @param {String} colorName Color value\r\n   * @returns {String}\r\n   */\n  colorName2hex: function colorName2hex(colorName) {\n    if (/^#/.test(colorName)) return colorName;\n    var temp = this.util.createElement('div');\n    temp.style.display = 'none';\n    temp.style.color = colorName;\n\n    var colors = this._w.getComputedStyle(this._d.body.appendChild(temp)).color.match(/\\d+/g).map(function (a) {\n      return parseInt(a, 10);\n    });\n\n    this.util.removeItem(temp);\n    return colors.length >= 3 ? '#' + ((1 << 24) + (colors[0] << 16) + (colors[1] << 8) + colors[2]).toString(16).substr(1) : false;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}