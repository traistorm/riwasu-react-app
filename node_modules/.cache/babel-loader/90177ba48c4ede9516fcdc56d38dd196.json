{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/rawelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n/**\n * The raw element class.\n *\n * The raw elements work as data containers (\"wrappers\", \"sandboxes\") but their children are not managed or\n * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures\n * in the editor content without, for instance, worrying about compatibility with other editor features.\n * Raw elements are a perfect tool for integration with external frameworks and data sources.\n *\n * Unlike {@link module:engine/view/uielement~UIElement UI elements}, raw elements act like real editor\n * content (similar to {@link module:engine/view/containerelement~ContainerElement} or\n * {@link module:engine/view/emptyelement~EmptyElement}), they are considered by the editor selection and\n * {@link module:widget/utils~toWidget they can work as widgets}.\n *\n * To create a new raw element, use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createRawElement `downcastWriter#createRawElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\n\nvar RawElement = /*#__PURE__*/function (_Element) {\n  _inherits(RawElement, _Element);\n\n  /**\n   * Creates a new instance of a raw element.\n   *\n   * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} when the `children`\n   * parameter is passed to inform that the usage of `RawElement` is incorrect (adding child nodes to `RawElement` is forbidden).\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createRawElement\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name A node name.\n   * @param {Object|Iterable} [attrs] The collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into the created element.\n   */\n  function RawElement(document, name, attrs, children) {\n    var _this;\n\n    _classCallCheck(this, RawElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RawElement).call(this, document, name, attrs, children));\n    /**\n     * Returns `null` because filler is not needed for raw elements.\n     *\n     * @method #getFillerOffset\n     * @returns {null} Always returns null.\n     */\n\n    _this.getFillerOffset = getFillerOffset;\n    return _this;\n  }\n  /**\n   * Checks whether this object is of the given type or name.\n   *\n   *\t\trawElement.is( 'rawElement' ); // -> true\n   *\t\trawElement.is( 'element' ); // -> true\n   *\t\trawElement.is( 'node' ); // -> true\n   *\t\trawElement.is( 'view:rawElement' ); // -> true\n   *\t\trawElement.is( 'view:element' ); // -> true\n   *\t\trawElement.is( 'view:node' ); // -> true\n   *\n   *\t\trawElement.is( 'model:element' ); // -> false\n   *\t\trawElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is a raw element, you can also check its\n   * {@link module:engine/view/rawelement~RawElement#name name}:\n   *\n   *\t\trawElement.is( 'img' ); // -> true if this is an img element\n   *\t\trawElement.is( 'rawElement', 'img' ); // -> same as above\n   *\t\ttext.is( 'img' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type The type to check when the `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] The element name.\n   * @returns {Boolean}\n   */\n\n\n  _createClass(RawElement, [{\n    key: \"is\",\n    value: function is(type) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!name) {\n        return type === 'rawElement' || type === 'view:rawElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === this.name || type === 'view:' + this.name || type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n      } else {\n        return name === this.name && (type === 'rawElement' || type === 'view:rawElement' || type === 'element' || type === 'view:element');\n      }\n    }\n    /**\n     * Overrides the {@link module:engine/view/element~Element#_insertChild} method.\n     * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} to prevent\n     * adding any child nodes to a raw element.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"_insertChild\",\n    value: function _insertChild(index, nodes) {\n      if (nodes && (nodes instanceof Node || Array.from(nodes).length > 0)) {\n        /**\n         * Cannot add children to a {@link module:engine/view/rawelement~RawElement} instance.\n         *\n         * @error view-rawelement-cannot-add\n         */\n        throw new CKEditorError('view-rawelement-cannot-add', [this, nodes]);\n      }\n    }\n    /**\n     * This allows rendering the children of a {@link module:engine/view/rawelement~RawElement} on the DOM level.\n     * This method is called by the {@link module:engine/view/domconverter~DomConverter} with the raw DOM element\n     * passed as an argument, leaving the number and shape of the children up to the integrator.\n     *\n     * This method **must be defined** for the raw element to work:\n     *\n     *\t\tconst myRawElement = downcastWriter.createRawElement( 'div' );\n     *\n     *\t\tmyRawElement.render = function( domElement, domConverter ) {\n     *\t\t\tdomConverter.setContentOf( domElement, '<b>This is the raw content of myRawElement.</b>' );\n     *\t\t};\n     *\n     * @method #render\n     * @param {HTMLElement} domElement The native DOM element representing the raw view element.\n     * @param {module:engine/view/domconverter~DomConverter} domConverter Instance of the DomConverter used to optimize the output.\n     */\n\n  }]);\n\n  return RawElement;\n}(Element); // Returns `null` because block filler is not needed for raw elements.\n//\n// @returns {null}\n\n\nexport { RawElement as default };\n\nfunction getFillerOffset() {\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}