{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/iframe/iframeview\n */\nimport View from '../view';\n/**\n * The iframe view class.\n *\n * \t\tconst iframe = new IframeView();\n *\n *\t\tiframe.render();\n *\t\tdocument.body.appendChild( iframe.element );\n *\n * \t\tiframe.on( 'loaded', () => {\n *\t\t\tconsole.log( 'The iframe has loaded', iframe.element.contentWindow );\n *\t\t} );\n *\n * \t\tiframe.element.src = 'https://ckeditor.com';\n *\n * @extends module:ui/view~View\n */\n\nvar IframeView = /*#__PURE__*/function (_View) {\n  _inherits(IframeView, _View);\n\n  /**\n   * Creates a new instance of the iframe view.\n   *\n   * @param {module:utils/locale~Locale} [locale] The locale instance.\n   */\n  function IframeView(locale) {\n    var _this;\n\n    _classCallCheck(this, IframeView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IframeView).call(this, locale));\n    var bind = _this.bindTemplate;\n\n    _this.setTemplate({\n      tag: 'iframe',\n      attributes: {\n        class: ['ck', 'ck-reset_all'],\n        // It seems that we need to allow scripts in order to be able to listen to events.\n        // TODO: Research that. Perhaps the src must be set?\n        sandbox: 'allow-same-origin allow-scripts'\n      },\n      on: {\n        load: bind.to('loaded')\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * Renders the iframe's {@link #element} and returns a `Promise` for asynchronous\n   * child `contentDocument` loading process.\n   *\n   * @returns {Promise} A promise which resolves once the iframe `contentDocument` has\n   * been {@link #event:loaded}.\n   */\n\n\n  _createClass(IframeView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.on('loaded', resolve);\n\n        _get(_getPrototypeOf(IframeView.prototype), \"render\", _this2).call(_this2);\n      });\n    }\n  }]);\n\n  return IframeView;\n}(View);\n/**\n * Fired when the DOM iframe's `contentDocument` finished loading.\n *\n * @event loaded\n */\n\n\nexport { IframeView as default };","map":null,"metadata":{},"sourceType":"module"}