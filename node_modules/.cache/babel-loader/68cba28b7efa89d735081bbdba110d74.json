{"ast":null,"code":"import { useRef, useCallback, useState, useEffect } from 'react';\nimport WheelHandler from 'dom-lib/WheelHandler';\nimport scrollLeft from 'dom-lib/scrollLeft';\nimport scrollTop from 'dom-lib/scrollTop';\nimport on from 'dom-lib/on';\nimport removeStyle from 'dom-lib/removeStyle';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from './requestAnimationTimeout';\nimport useUpdateEffect from './useUpdateEffect';\nimport useMount from './useMount';\nimport { SCROLLBAR_WIDTH, TRANSITION_DURATION, BEZIER } from '../constants';\nimport isSupportTouchEvent from './isSupportTouchEvent'; // Inertial sliding start time threshold\n\nvar momentumTimeThreshold = 300; // Inertial sliding start vertical distance threshold\n\nvar momentumYThreshold = 15;\n/**\n * Calculate the distance of inertial sliding.\n */\n\nvar momentum = function momentum(current, start, duration) {\n  // Inertial sliding acceleration.\n  var deceleration = 0.003;\n  var distance = current - start;\n  var speed = 2 * Math.abs(distance) / duration;\n  var destination = current + speed / deceleration * (distance < 0 ? -1 : 1);\n  return {\n    delta: current - destination,\n    duration: TRANSITION_DURATION,\n    bezier: BEZIER\n  };\n};\n/**\n * Add scroll, touch, and wheel monitoring events to the table,\n * and update the scroll position of the table.\n * @param props\n * @returns\n */\n\n\nvar useScrollListener = function useScrollListener(props) {\n  var data = props.data,\n      autoHeight = props.autoHeight,\n      tableBodyRef = props.tableBodyRef,\n      scrollbarXRef = props.scrollbarXRef,\n      scrollbarYRef = props.scrollbarYRef,\n      disabledScroll = props.disabledScroll,\n      loading = props.loading,\n      tableRef = props.tableRef,\n      contentWidth = props.contentWidth,\n      tableWidth = props.tableWidth,\n      scrollY = props.scrollY,\n      minScrollY = props.minScrollY,\n      minScrollX = props.minScrollX,\n      scrollX = props.scrollX,\n      setScrollX = props.setScrollX,\n      setScrollY = props.setScrollY,\n      virtualized = props.virtualized,\n      forceUpdatePosition = props.forceUpdatePosition,\n      onScroll = props.onScroll,\n      onTouchMove = props.onTouchMove,\n      onTouchStart = props.onTouchStart,\n      onTouchEnd = props.onTouchEnd,\n      height = props.height,\n      getTableHeight = props.getTableHeight,\n      contentHeight = props.contentHeight,\n      headerHeight = props.headerHeight,\n      rtl = props.rtl;\n  var wheelListener = useRef();\n  var touchStartListener = useRef();\n  var touchMoveListener = useRef();\n  var touchEndListener = useRef();\n\n  var _useState = useState(false),\n      isScrolling = _useState[0],\n      setScrolling = _useState[1];\n\n  var touchX = useRef(0);\n  var touchY = useRef(0);\n  var disableEventsTimeoutId = useRef(null);\n  var isTouching = useRef(false); // The start time within the inertial sliding range.\n\n  var momentumStartTime = useRef(0); // The vertical starting value within the inertial sliding range.\n\n  var momentumStartY = useRef(0);\n  var shouldHandleWheelX = useCallback(function (delta) {\n    if (delta === 0 || disabledScroll || loading) {\n      return false;\n    }\n\n    return true;\n  }, [disabledScroll, loading]);\n  var shouldHandleWheelY = useCallback(function (delta) {\n    if (delta === 0 || disabledScroll || loading) {\n      return false;\n    }\n\n    if (typeof scrollY.current === 'number' && typeof minScrollY.current === 'number') {\n      return delta >= 0 && scrollY.current > minScrollY.current || delta < 0 && scrollY.current < 0;\n    }\n  }, [disabledScroll, loading, minScrollY, scrollY]);\n  var debounceScrollEndedCallback = useCallback(function () {\n    disableEventsTimeoutId.current = null;\n    setScrolling(false);\n  }, []);\n  /**\n   * Triggered when scrolling, including: wheel/touch/scroll\n   * @param deltaX\n   * @param deltaY\n   * @param momentumOptions The configuration of inertial scrolling is used for the touch event.\n   */\n\n  var handleWheel = useCallback(function (deltaX, deltaY, momentumOptions, event) {\n    if (!tableRef.current) {\n      return;\n    }\n\n    var nextScrollX = contentWidth.current <= tableWidth.current ? 0 : scrollX.current - deltaX;\n    var nextScrollY = scrollY.current - deltaY;\n    var y = Math.min(0, nextScrollY < minScrollY.current ? minScrollY.current : nextScrollY);\n    var x = Math.min(0, nextScrollX < minScrollX.current ? minScrollX.current : nextScrollX);\n    setScrollX(x);\n    setScrollY(y);\n    onScroll === null || onScroll === void 0 ? void 0 : onScroll(Math.abs(x), Math.abs(y));\n\n    if (virtualized) {\n      // Add a state to the table during virtualized scrolling.\n      // Make it set CSS `pointer-events:none` on the DOM to avoid wrong event interaction.\n      setScrolling(true);\n\n      if (disableEventsTimeoutId.current) {\n        cancelAnimationTimeout(disableEventsTimeoutId.current);\n      }\n\n      disableEventsTimeoutId.current = requestAnimationTimeout(debounceScrollEndedCallback, // When momentum is enabled, set a delay of 50ms rendering.\n      momentumOptions !== null && momentumOptions !== void 0 && momentumOptions.duration ? 50 : 0);\n    } // When the user clicks on the scrollbar, the scrollbar will be moved to the clicked position.\n\n\n    if ((event === null || event === void 0 ? void 0 : event.type) === 'click') {\n      /**\n       * With virtualized enabled, the list will be re-rendered on every scroll.\n       * Update the position of the rendered list with a delay.\n       * fix: https://github.com/rsuite/rsuite/issues/2378\n       */\n      setTimeout(function () {\n        return forceUpdatePosition(momentumOptions === null || momentumOptions === void 0 ? void 0 : momentumOptions.duration, momentumOptions === null || momentumOptions === void 0 ? void 0 : momentumOptions.bezier);\n      }, 0);\n      return;\n    }\n\n    forceUpdatePosition(momentumOptions === null || momentumOptions === void 0 ? void 0 : momentumOptions.duration, momentumOptions === null || momentumOptions === void 0 ? void 0 : momentumOptions.bezier);\n  }, [tableRef, contentWidth, tableWidth, scrollX, scrollY, minScrollY, minScrollX, setScrollX, setScrollY, onScroll, forceUpdatePosition, virtualized, debounceScrollEndedCallback]);\n  var onWheel = useCallback(function (deltaX, deltaY, momentumOptions) {\n    var _scrollbarXRef$curren, _scrollbarXRef$curren2, _scrollbarYRef$curren, _scrollbarYRef$curren2;\n\n    handleWheel(deltaX, deltaY, momentumOptions);\n    (_scrollbarXRef$curren = scrollbarXRef.current) === null || _scrollbarXRef$curren === void 0 ? void 0 : (_scrollbarXRef$curren2 = _scrollbarXRef$curren.onWheelScroll) === null || _scrollbarXRef$curren2 === void 0 ? void 0 : _scrollbarXRef$curren2.call(_scrollbarXRef$curren, deltaX);\n    (_scrollbarYRef$curren = scrollbarYRef.current) === null || _scrollbarYRef$curren === void 0 ? void 0 : (_scrollbarYRef$curren2 = _scrollbarYRef$curren.onWheelScroll) === null || _scrollbarYRef$curren2 === void 0 ? void 0 : _scrollbarYRef$curren2.call(_scrollbarYRef$curren, deltaY, momentumOptions !== null && momentumOptions !== void 0 && momentumOptions.duration ? true : false);\n  }, [handleWheel, scrollbarXRef, scrollbarYRef]);\n  var wheelHandler = useRef(); // Stop unending scrolling and remove transition\n\n  var stopScroll = useCallback(function () {\n    var _tableBodyRef$current, _scrollbarYRef$curren3;\n\n    var wheelElement = (_tableBodyRef$current = tableBodyRef.current) === null || _tableBodyRef$current === void 0 ? void 0 : _tableBodyRef$current.querySelector('.rs-table-body-wheel-area');\n    var handleElement = (_scrollbarYRef$curren3 = scrollbarYRef.current) === null || _scrollbarYRef$curren3 === void 0 ? void 0 : _scrollbarYRef$curren3.handle;\n    var transitionCSS = ['transition-duration', 'transition-timing-function'];\n\n    if (!virtualized && wheelElement) {\n      // Get the current translate position.\n      var matrix = window.getComputedStyle(wheelElement).getPropertyValue('transform');\n      var offsetY = Math.round(+matrix.split(')')[0].split(', ')[5]);\n      setScrollY(offsetY);\n    }\n\n    if (wheelElement) {\n      removeStyle(wheelElement, transitionCSS);\n    }\n\n    if (handleElement) {\n      removeStyle(handleElement, transitionCSS);\n    }\n  }, [scrollbarYRef, setScrollY, tableBodyRef, virtualized]); // Handle the Touch event and initialize it when touchstart is triggered.\n\n  var handleTouchStart = useCallback(function (event) {\n    var _event$touches$ = event.touches[0],\n        pageX = _event$touches$.pageX,\n        pageY = _event$touches$.pageY;\n    touchX.current = pageX;\n    touchY.current = pageY;\n    momentumStartTime.current = new Date().getTime();\n    momentumStartY.current = scrollY.current;\n    isTouching.current = true;\n    onTouchStart === null || onTouchStart === void 0 ? void 0 : onTouchStart(event); // Stop unfinished scrolling when Touch starts.\n\n    stopScroll();\n  }, [onTouchStart, scrollY, stopScroll]); // Handle the Touch event and update the scroll when touchmove is triggered.\n\n  var handleTouchMove = useCallback(function (event) {\n    if (!isTouching.current) {\n      return;\n    }\n\n    var _event$touches$2 = event.touches[0],\n        pageX = _event$touches$2.pageX,\n        pageY = _event$touches$2.pageY;\n    var deltaX = touchX.current - pageX;\n    var deltaY = autoHeight ? 0 : touchY.current - pageY;\n\n    if (!shouldHandleWheelY(deltaY) && !shouldHandleWheelX(deltaX)) {\n      return;\n    }\n    /**\n     * Prevent the default touch event when the table is scrollable.\n     * fix: https://github.com/rsuite/rsuite-table/commit/21785fc18f430519ab5885c44540d9ffc30de366#commitcomment-36236425\n     */\n\n\n    if (!autoHeight && shouldHandleWheelY(deltaY)) {\n      var _event$preventDefault;\n\n      (_event$preventDefault = event.preventDefault) === null || _event$preventDefault === void 0 ? void 0 : _event$preventDefault.call(event);\n    }\n\n    var now = new Date().getTime();\n    onWheel(deltaX, deltaY);\n    touchX.current = pageX;\n    touchY.current = pageY; // Record the offset value and time under the condition of triggering inertial scrolling.\n\n    if (now - momentumStartTime.current > momentumTimeThreshold) {\n      momentumStartY.current = scrollY.current;\n      momentumStartTime.current = now;\n    }\n\n    onTouchMove === null || onTouchMove === void 0 ? void 0 : onTouchMove(event);\n  }, [autoHeight, onWheel, onTouchMove, scrollY, shouldHandleWheelX, shouldHandleWheelY]);\n  var handleTouchEnd = useCallback(function (event) {\n    if (!isTouching.current) {\n      return;\n    }\n\n    isTouching.current = false;\n    var touchDuration = new Date().getTime() - momentumStartTime.current;\n    var absDeltaY = Math.abs(scrollY.current - momentumStartY.current); // Enable inertial sliding.\n\n    if (touchDuration < momentumTimeThreshold && absDeltaY > momentumYThreshold) {\n      var _momentum = momentum(scrollY.current, momentumStartY.current, touchDuration),\n          delta = _momentum.delta,\n          duration = _momentum.duration,\n          bezier = _momentum.bezier;\n\n      onWheel(0, delta, {\n        duration: duration,\n        bezier: bezier\n      });\n      onTouchEnd === null || onTouchEnd === void 0 ? void 0 : onTouchEnd(event);\n    }\n  }, [onWheel, onTouchEnd, scrollY]);\n  /**\n   * When the user uses the tab key in the Table, the onScroll event is triggered,\n   * and the scroll bar position should be updated at the same time.\n   * https://github.com/rsuite/rsuite/issues/234\n   */\n\n  var onScrollBody = useCallback(function (event) {\n    if (event.target !== tableBodyRef.current) {\n      return;\n    }\n\n    var left = scrollLeft(event.target);\n    var top = scrollTop(event.target);\n\n    if (top === 0 && left === 0) {\n      return;\n    }\n\n    onWheel(left, top);\n    scrollLeft(event.target, 0);\n    scrollTop(event.target, 0);\n  }, [onWheel, tableBodyRef]);\n  var getControlledScrollTopValue = useCallback(function (value) {\n    if (autoHeight) {\n      return [0, 0];\n    }\n\n    var height = getTableHeight(); // The maximum range of scrolling value is judged.\n\n    value = Math.min(value, Math.max(0, contentHeight.current - (height - headerHeight))); // The value is a value of the theoretical scroll position of the table,\n    // and the scrollY coordinate value and the value of the scroll bar position are calculated by value.\n\n    return [-value, value / contentHeight.current * (height - headerHeight)];\n  }, [autoHeight, contentHeight, getTableHeight, headerHeight]);\n\n  var rerender = function rerender() {\n    setScrolling(true);\n    setTimeout(function () {\n      if (tableBodyRef.current) {\n        setScrolling(false);\n      }\n    }, 0);\n  };\n\n  var getControlledScrollLeftValue = function getControlledScrollLeftValue(value) {\n    // The maximum range of scrolling value is judged.\n    value = Math.min(value, Math.max(0, contentWidth.current - tableWidth.current));\n    return [-value, value / contentWidth.current * tableWidth.current];\n  };\n\n  var onScrollTop = function onScrollTop(top) {\n    var _scrollbarYRef$curren4, _scrollbarYRef$curren5;\n\n    if (top === void 0) {\n      top = 0;\n    }\n\n    var _getControlledScrollT = getControlledScrollTopValue(top),\n        nextScrollY = _getControlledScrollT[0],\n        handleScrollY = _getControlledScrollT[1];\n\n    var height = getTableHeight();\n    setScrollY(nextScrollY);\n    scrollbarYRef === null || scrollbarYRef === void 0 ? void 0 : (_scrollbarYRef$curren4 = scrollbarYRef.current) === null || _scrollbarYRef$curren4 === void 0 ? void 0 : (_scrollbarYRef$curren5 = _scrollbarYRef$curren4.resetScrollBarPosition) === null || _scrollbarYRef$curren5 === void 0 ? void 0 : _scrollbarYRef$curren5.call(_scrollbarYRef$curren4, handleScrollY);\n    forceUpdatePosition();\n    !loading && (onScroll === null || onScroll === void 0 ? void 0 : onScroll(Math.abs(scrollX.current), Math.abs(nextScrollY)));\n    /**\n     * After calling `scrollTop`, a white screen will appear when `virtualized` is true.\n     * The reason is that the coordinates of the DOM are directly manipulated,\n     * but the component is not re-rendered. Need to call `rerender`.\n     * Fix: rsuite#1044\n     */\n\n    if (virtualized && contentHeight.current > height) {\n      rerender();\n    }\n  };\n\n  var onScrollLeft = function onScrollLeft(left) {\n    var _scrollbarXRef$curren3, _scrollbarXRef$curren4;\n\n    if (left === void 0) {\n      left = 0;\n    }\n\n    var _getControlledScrollL = getControlledScrollLeftValue(left),\n        nextScrollX = _getControlledScrollL[0],\n        scrollbarX = _getControlledScrollL[1];\n\n    setScrollX(nextScrollX);\n    !loading && (onScroll === null || onScroll === void 0 ? void 0 : onScroll(Math.abs(nextScrollX), Math.abs(scrollY.current)));\n    scrollbarXRef === null || scrollbarXRef === void 0 ? void 0 : (_scrollbarXRef$curren3 = scrollbarXRef.current) === null || _scrollbarXRef$curren3 === void 0 ? void 0 : (_scrollbarXRef$curren4 = _scrollbarXRef$curren3.resetScrollBarPosition) === null || _scrollbarXRef$curren4 === void 0 ? void 0 : _scrollbarXRef$curren4.call(_scrollbarXRef$curren3, scrollbarX);\n    forceUpdatePosition();\n  };\n\n  var onScrollTo = function onScrollTo(coord) {\n    var _ref = coord || {},\n        x = _ref.x,\n        y = _ref.y;\n\n    if (typeof x === 'number') {\n      onScrollLeft(x);\n    }\n\n    if (typeof y === 'number') {\n      onScrollTop(y);\n    }\n  };\n\n  useUpdateEffect(function () {\n    if (scrollY.current !== 0) {\n      onScrollTop(Math.abs(scrollY.current));\n    }\n  }, [height, data]);\n  var releaseListeners = useCallback(function () {\n    var _wheelListener$curren, _touchStartListener$c, _touchMoveListener$cu, _touchEndListener$cur;\n\n    wheelHandler.current = null;\n    (_wheelListener$curren = wheelListener.current) === null || _wheelListener$curren === void 0 ? void 0 : _wheelListener$curren.off();\n    (_touchStartListener$c = touchStartListener.current) === null || _touchStartListener$c === void 0 ? void 0 : _touchStartListener$c.off();\n    (_touchMoveListener$cu = touchMoveListener.current) === null || _touchMoveListener$cu === void 0 ? void 0 : _touchMoveListener$cu.off();\n    (_touchEndListener$cur = touchEndListener.current) === null || _touchEndListener$cur === void 0 ? void 0 : _touchEndListener$cur.off();\n  }, []);\n  useEffect(function () {\n    var options = {\n      passive: false\n    };\n    var tableBody = tableBodyRef.current;\n\n    if (tableBody) {\n      // Reset the listener after props is updated.\n      releaseListeners();\n      wheelHandler.current = new WheelHandler(onWheel, shouldHandleWheelX, shouldHandleWheelY, false);\n      wheelListener.current = on(tableBody, 'wheel', wheelHandler.current.onWheel, options);\n\n      if (isSupportTouchEvent()) {\n        touchStartListener.current = on(tableBody, 'touchstart', handleTouchStart, options);\n        touchMoveListener.current = on(tableBody, 'touchmove', handleTouchMove, options);\n        touchEndListener.current = on(tableBody, 'touchend', handleTouchEnd, options);\n      }\n    }\n\n    return releaseListeners;\n  }, [handleTouchEnd, handleTouchMove, handleTouchStart, onWheel, releaseListeners, shouldHandleWheelX, shouldHandleWheelY, tableBodyRef]);\n  useMount(function () {\n    if (rtl) {\n      var _scrollbarXRef$curren5, _scrollbarXRef$curren6; // Initialize scroll position\n\n\n      setScrollX(tableWidth.current - contentWidth.current - SCROLLBAR_WIDTH);\n      scrollbarXRef === null || scrollbarXRef === void 0 ? void 0 : (_scrollbarXRef$curren5 = scrollbarXRef.current) === null || _scrollbarXRef$curren5 === void 0 ? void 0 : (_scrollbarXRef$curren6 = _scrollbarXRef$curren5.resetScrollBarPosition) === null || _scrollbarXRef$curren6 === void 0 ? void 0 : _scrollbarXRef$curren6.call(_scrollbarXRef$curren5, -scrollX.current);\n      forceUpdatePosition();\n    }\n  });\n  var onScrollHorizontal = useCallback(function (delta) {\n    return handleWheel(delta, 0);\n  }, [handleWheel]);\n  var onScrollVertical = useCallback(function (delta, event) {\n    return handleWheel(0, delta, undefined, event);\n  }, [handleWheel]);\n  return {\n    isScrolling: isScrolling,\n    onScrollHorizontal: onScrollHorizontal,\n    onScrollVertical: onScrollVertical,\n    onScrollBody: onScrollBody,\n    onScrollTop: onScrollTop,\n    onScrollLeft: onScrollLeft,\n    onScrollTo: onScrollTo\n  };\n};\n\nexport default useScrollListener;","map":null,"metadata":{},"sourceType":"module"}