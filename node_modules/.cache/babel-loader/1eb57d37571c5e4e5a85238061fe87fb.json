{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from '../utils';\nimport { precisionMath } from './utils';\nimport Mark from './Mark';\nvar Graduated = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      step = props.step,\n      min = props.min,\n      max = props.max,\n      count = props.count,\n      value = props.value,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'slider' : _props$classPrefix,\n      className = props.className,\n      renderMark = props.renderMark;\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix;\n\n  var activeIndexs = [];\n  var startIndex = 0;\n  var endIndex = 0;\n\n  if (Array.isArray(value)) {\n    var start = value[0],\n        end = value[1];\n    startIndex = precisionMath(start / step - min / step);\n    endIndex = precisionMath(end / step - min / step);\n    activeIndexs.push(precisionMath(Math.ceil((start - min) / (max - min) * count)));\n    activeIndexs.push(precisionMath(Math.ceil((end - min) / (max - min) * count)));\n  } else {\n    endIndex = precisionMath(value / step - min / step);\n    activeIndexs.push(precisionMath(Math.ceil((value - min) / (max - min) * count)));\n  }\n\n  var graduatedItems = [];\n\n  for (var i = 0; i < count; i += 1) {\n    var _classes = prefix({\n      pass: i >= startIndex && i <= endIndex,\n      active: ~activeIndexs.indexOf(i)\n    });\n\n    var _mark = precisionMath(i * step + min);\n\n    var lastMark = Math.min(max, _mark + step);\n    var last = i === count - 1;\n    graduatedItems.push( /*#__PURE__*/React.createElement(\"li\", {\n      className: _classes,\n      key: i\n    }, /*#__PURE__*/React.createElement(Mark, {\n      mark: _mark,\n      renderMark: renderMark\n    }), last ? /*#__PURE__*/React.createElement(Mark, {\n      mark: lastMark,\n      renderMark: renderMark,\n      last: last\n    }) : null));\n  }\n\n  var classes = merge(className, prefix('graduator'));\n  return /*#__PURE__*/React.createElement(Component, {\n    ref: ref,\n    className: classes\n  }, /*#__PURE__*/React.createElement(\"ol\", null, graduatedItems));\n});\nGraduated.displayName = 'Graduated';\nGraduated.propTypes = {\n  step: PropTypes.number,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  count: PropTypes.number,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n  renderMark: PropTypes.func\n};\nexport default Graduated;","map":null,"metadata":{},"sourceType":"module"}