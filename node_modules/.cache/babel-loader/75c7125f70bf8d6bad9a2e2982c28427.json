{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/pendingactions\n */\nimport ContextPlugin from './contextplugin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The list of pending editor actions.\n *\n * This plugin should be used to synchronise plugins that execute long-lasting actions\n * (e.g. file upload) with the editor integration. It gives the developer who integrates the editor\n * an easy way to check if there are any actions pending whenever such information is needed.\n * All plugins that register a pending action also provide a message about the action that is ongoing\n * which can be displayed to the user. This lets them decide if they want to interrupt the action or wait.\n *\n * Adding and updating a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Upload in progress: 0%.' );\n *\n *\t\t// You can update the message:\n * \t\taction.message = 'Upload in progress: 10%.';\n *\n * Removing a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Unsaved changes.' );\n *\n * \t\tpendingActions.remove( action );\n *\n * Getting pending actions:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n *\n * \t\tconst action1 = pendingActions.add( 'Action 1' );\n * \t\tconst action2 = pendingActions.add( 'Action 2' );\n *\n * \t\tpendingActions.first; // Returns action1\n * \t\tArray.from( pendingActions ); // Returns [ action1, action2 ]\n *\n * This plugin is used by features like {@link module:upload/filerepository~FileRepository} to register their ongoing actions\n * and by features like {@link module:autosave/autosave~Autosave} to detect whether there are any ongoing actions.\n * Read more about saving the data in the {@glink installation/advanced/saving-data Saving and getting data} guide.\n *\n * @extends module:core/contextplugin~ContextPlugin\n */\n\nvar PendingActions = /*#__PURE__*/function (_ContextPlugin) {\n  _inherits(PendingActions, _ContextPlugin);\n\n  function PendingActions() {\n    _classCallCheck(this, PendingActions);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PendingActions).apply(this, arguments));\n  }\n\n  _createClass(PendingActions, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      /**\n       * Defines whether there is any registered pending action.\n       *\n       * @readonly\n       * @observable\n       * @member {Boolean} #hasAny\n       */\n      this.set('hasAny', false);\n      /**\n       * A list of pending actions.\n       *\n       * @private\n       * @type {module:utils/collection~Collection}\n       */\n\n      this._actions = new Collection({\n        idProperty: '_id'\n      });\n\n      this._actions.delegate('add', 'remove').to(this);\n    }\n    /**\n     * Adds an action to the list of pending actions.\n     *\n     * This method returns an action object with an observable message property.\n     * The action object can be later used in the {@link #remove} method. It also allows you to change the message.\n     *\n     * @param {String} message The action message.\n     * @returns {Object} An observable object that represents a pending action.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(message) {\n      if (typeof message !== 'string') {\n        /**\n         * The message must be a string.\n         *\n         * @error pendingactions-add-invalid-message\n         */\n        throw new CKEditorError('pendingactions-add-invalid-message', this);\n      }\n\n      var action = Object.create(ObservableMixin);\n      action.set('message', message);\n\n      this._actions.add(action);\n\n      this.hasAny = true;\n      return action;\n    }\n    /**\n     * Removes an action from the list of pending actions.\n     *\n     * @param {Object} action An action object.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(action) {\n      this._actions.remove(action);\n\n      this.hasAny = !!this._actions.length;\n    }\n    /**\n     * Returns the first action from the list or null when list is empty\n     *\n     * returns {Object|null} The pending action object.\n     */\n\n  }, {\n    key: Symbol.iterator,\n\n    /**\n     * Iterable interface.\n     *\n     * @returns {Iterable.<*>}\n     */\n    value: function value() {\n      return this._actions[Symbol.iterator]();\n    }\n    /**\n     * Fired when an action is added to the list.\n     *\n     * @event add\n     * @param {Object} action The added action.\n     */\n\n    /**\n     * Fired when an action is removed from the list.\n     *\n     * @event remove\n     * @param {Object} action The removed action.\n     */\n\n  }, {\n    key: \"first\",\n    get: function get() {\n      return this._actions.get(0);\n    }\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'PendingActions';\n    }\n  }]);\n\n  return PendingActions;\n}(ContextPlugin);\n\nexport { PendingActions as default };","map":null,"metadata":{},"sourceType":"module"}