{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/findoptimalinsertionrange\n */\nimport first from '@ckeditor/ckeditor5-utils/src/first'; // Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n//\n// For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n// will be returned so that it is not split. If the selection is at the end of a paragraph,\n// the collapsed range after this paragraph will be returned.\n//\n// Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n// is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n// by the inserted widget block.\n//\n// **Note:** Use {@link module:widget/utils#findOptimalInsertionRange} instead of this function outside engine.\n// This function is only exposed to be used by {@link module:widget/utils#findOptimalInsertionRange findOptimalInsertionRange()}\n// in the `widget` package and inside the `engine` package.\n//\n// @private\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// The selection based on which the insertion position should be calculated.\n// @param {module:engine/model/model~Model} model Model instance.\n// @param {'auto'|'before'|'after'} [place='auto'] The place where to look for optimal insertion range.\n// The default `auto` value will determine itself the best position for insertion.\n// The `before` value will try to find a position before selection.\n// The `after` value will try to find a position after selection.\n// @returns {module:engine/model/range~Range} The optimal range.\n\nexport function findOptimalInsertionRange(selection, model) {\n  var place = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'auto';\n  var selectedElement = selection.getSelectedElement();\n\n  if (selectedElement && model.schema.isObject(selectedElement) && !model.schema.isInline(selectedElement)) {\n    if (['before', 'after'].includes(place)) {\n      return model.createRange(model.createPositionAt(selectedElement, place));\n    }\n\n    return model.createRangeOn(selectedElement);\n  }\n\n  var firstBlock = first(selection.getSelectedBlocks()); // There are no block elements within ancestors (in the current limit element).\n\n  if (!firstBlock) {\n    return model.createRange(selection.focus);\n  } // If inserting into an empty block â€“ return position in that block. It will get\n  // replaced with the image by insertContent(). #42.\n\n\n  if (firstBlock.isEmpty) {\n    return model.createRange(model.createPositionAt(firstBlock, 0));\n  }\n\n  var positionAfter = model.createPositionAfter(firstBlock); // If selection is at the end of the block - return position after the block.\n\n  if (selection.focus.isTouching(positionAfter)) {\n    return model.createRange(positionAfter);\n  } // Otherwise, return position before the block.\n\n\n  return model.createRange(model.createPositionBefore(firstBlock));\n}","map":null,"metadata":{},"sourceType":"module"}