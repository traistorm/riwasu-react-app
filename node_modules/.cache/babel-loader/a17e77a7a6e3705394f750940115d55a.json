{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useState, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport isFunction from 'lodash/isFunction';\nimport isNil from 'lodash/isNil';\nimport DropdownMenu from './DropdownMenu';\nimport Checkbox from '../Checkbox';\nimport { useCascadeValue, useColumnData, useFlattenData, isSomeChildChecked } from './utils';\nimport { getNodeParents, findNodeOfTree } from '../utils/treeUtils';\nimport { getColumnsAndPaths } from '../Cascader/utils';\nimport { createChainedFunction, mergeRefs, getSafeRegExpString, useClassNames, useCustom, useUpdateEffect } from '../utils';\nimport { PickerToggle, PickerOverlay, SearchBar, SelectedElement, PickerToggleTrigger, usePickerClassName, usePublicMethods, useToggleKeyDownEvent, useFocusItemValue, pickTriggerPropKeys, omitTriggerPropKeys, listPickerPropTypes } from '../Picker';\nvar emptyArray = [];\nvar MultiCascader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _selectedPaths;\n\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$data = props.data,\n      data = _props$data === void 0 ? emptyArray : _props$data,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,\n      defaultValue = props.defaultValue,\n      valueProp = props.value,\n      _props$valueKey = props.valueKey,\n      valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n      _props$labelKey = props.labelKey,\n      labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n      _props$childrenKey = props.childrenKey,\n      childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n      disabled = props.disabled,\n      _props$disabledItemVa = props.disabledItemValues,\n      disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n      _props$cleanable = props.cleanable,\n      cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n      overrideLocale = props.locale,\n      toggleAs = props.toggleAs,\n      style = props.style,\n      _props$countable = props.countable,\n      countable = _props$countable === void 0 ? true : _props$countable,\n      _props$cascade = props.cascade,\n      cascade = _props$cascade === void 0 ? true : _props$cascade,\n      inline = props.inline,\n      placeholder = props.placeholder,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      menuWidth = props.menuWidth,\n      menuHeight = props.menuHeight,\n      menuClassName = props.menuClassName,\n      menuStyle = props.menuStyle,\n      _props$searchable = props.searchable,\n      searchable = _props$searchable === void 0 ? true : _props$searchable,\n      _props$uncheckableIte = props.uncheckableItemValues,\n      uncheckableItemValues = _props$uncheckableIte === void 0 ? emptyArray : _props$uncheckableIte,\n      id = props.id,\n      getChildren = props.getChildren,\n      renderValue = props.renderValue,\n      renderMenu = props.renderMenu,\n      renderMenuItem = props.renderMenuItem,\n      renderExtraFooter = props.renderExtraFooter,\n      onEnter = props.onEnter,\n      onExit = props.onExit,\n      onExited = props.onExited,\n      onClean = props.onClean,\n      onSearch = props.onSearch,\n      onSelect = props.onSelect,\n      onChange = props.onChange,\n      onOpen = props.onOpen,\n      onClose = props.onClose,\n      onCheck = props.onCheck,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"data\", \"classPrefix\", \"defaultValue\", \"value\", \"valueKey\", \"labelKey\", \"childrenKey\", \"disabled\", \"disabledItemValues\", \"cleanable\", \"locale\", \"toggleAs\", \"style\", \"countable\", \"cascade\", \"inline\", \"placeholder\", \"placement\", \"appearance\", \"menuWidth\", \"menuHeight\", \"menuClassName\", \"menuStyle\", \"searchable\", \"uncheckableItemValues\", \"id\", \"getChildren\", \"renderValue\", \"renderMenu\", \"renderMenuItem\", \"renderExtraFooter\", \"onEnter\", \"onExit\", \"onExited\", \"onClean\", \"onSearch\", \"onSelect\", \"onChange\", \"onOpen\", \"onClose\", \"onCheck\"]);\n\n  var itemKeys = {\n    childrenKey: childrenKey,\n    labelKey: labelKey,\n    valueKey: valueKey\n  };\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useFlattenData = useFlattenData(data, itemKeys),\n      flattenData = _useFlattenData.flattenData,\n      addFlattenData = _useFlattenData.addFlattenData;\n\n  var _useCascadeValue = useCascadeValue(_extends({}, itemKeys, {\n    uncheckableItemValues: uncheckableItemValues,\n    cascade: cascade,\n    value: valueProp || defaultValue\n  }), flattenData),\n      value = _useCascadeValue.value,\n      setValue = _useCascadeValue.setValue,\n      splitValue = _useCascadeValue.splitValue; // The columns displayed in the cascading panel.\n\n\n  var _useColumnData = useColumnData(flattenData),\n      columnData = _useColumnData.columnData,\n      setColumnData = _useColumnData.setColumnData,\n      addColumn = _useColumnData.addColumn,\n      enforceUpdateColumnData = _useColumnData.enforceUpdateColumnData;\n\n  useUpdateEffect(function () {\n    enforceUpdateColumnData(data);\n  }, [data]); // The path after cascading data selection.\n\n  var _useState2 = useState(),\n      selectedPaths = _useState2[0],\n      setSelectedPaths = _useState2[1];\n\n  var triggerRef = useRef(null);\n  var overlayRef = useRef(null);\n  var targetRef = useRef(null);\n  var searchInputRef = useRef(null);\n  usePublicMethods(ref, {\n    triggerRef: triggerRef,\n    overlayRef: overlayRef,\n    targetRef: targetRef\n  });\n\n  var _useCustom = useCustom('Picker', overrideLocale),\n      locale = _useCustom.locale,\n      rtl = _useCustom.rtl;\n\n  var selectedItems = flattenData.filter(function (item) {\n    return value.some(function (v) {\n      return v === item[valueKey];\n    });\n  }) || []; // Used to hover the focuse item  when trigger `onKeydown`\n\n  var _useFocusItemValue = useFocusItemValue(selectedPaths === null || selectedPaths === void 0 ? void 0 : (_selectedPaths = selectedPaths[selectedPaths.length - 1]) === null || _selectedPaths === void 0 ? void 0 : _selectedPaths[valueKey], {\n    rtl: rtl,\n    data: flattenData,\n    valueKey: valueKey,\n    defaultLayer: selectedPaths !== null && selectedPaths !== void 0 && selectedPaths.length ? selectedPaths.length - 1 : 0,\n    target: function target() {\n      return overlayRef.current;\n    },\n    callback: useCallback(function (value) {\n      var _getColumnsAndPaths = getColumnsAndPaths(data, value, {\n        valueKey: valueKey,\n        childrenKey: childrenKey,\n        isAttachChildren: true\n      }),\n          columns = _getColumnsAndPaths.columns,\n          paths = _getColumnsAndPaths.paths;\n\n      setColumnData(columns);\n      setSelectedPaths(paths);\n    }, [childrenKey, data, setColumnData, valueKey])\n  }),\n      focusItemValue = _useFocusItemValue.focusItemValue,\n      setLayer = _useFocusItemValue.setLayer,\n      setKeys = _useFocusItemValue.setKeys,\n      onFocusItem = _useFocusItemValue.onKeyDown;\n  /**\n   * 1.Have a value and the value is valid.\n   * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n   */\n\n\n  var hasValue = selectedItems.length > 0 || Number(valueProp === null || valueProp === void 0 ? void 0 : valueProp.length) > 0 && isFunction(renderValue);\n\n  var _useClassNames = useClassNames(classPrefix),\n      prefix = _useClassNames.prefix,\n      merge = _useClassNames.merge;\n\n  var _useState3 = useState(''),\n      searchKeyword = _useState3[0],\n      setSearchKeyword = _useState3[1];\n\n  var handleEntered = useCallback(function () {\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n    setActive(true);\n  }, [onOpen]);\n  var handleExited = useCallback(function () {\n    setActive(false);\n    setSearchKeyword('');\n  }, []);\n  var handleSelect = useCallback(function (node, cascadePaths, event) {\n    var _node$childrenKey, _node$childrenKey2, _triggerRef$current, _triggerRef$current$u;\n\n    setSelectedPaths(cascadePaths);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, cascadePaths, event); // Lazy load node's children\n\n    if (typeof getChildren === 'function' && ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) === 0) {\n      node.loading = true;\n      var children = getChildren(node);\n\n      if (children instanceof Promise) {\n        children.then(function (data) {\n          node.loading = false;\n          node[childrenKey] = data;\n\n          if (targetRef.current) {\n            addFlattenData(data, node);\n            addColumn(data, cascadePaths.length);\n          }\n        });\n      } else {\n        node.loading = false;\n        node[childrenKey] = children;\n        addFlattenData(children, node);\n        addColumn(children, cascadePaths.length);\n      }\n    } else if ((_node$childrenKey2 = node[childrenKey]) !== null && _node$childrenKey2 !== void 0 && _node$childrenKey2.length) {\n      addColumn(node[childrenKey], cascadePaths.length);\n    }\n\n    (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : (_triggerRef$current$u = _triggerRef$current.updatePosition) === null || _triggerRef$current$u === void 0 ? void 0 : _triggerRef$current$u.call(_triggerRef$current);\n  }, [onSelect, getChildren, childrenKey, addColumn, addFlattenData]);\n  var handleCheck = useCallback(function (node, event, checked) {\n    var nodeValue = node[valueKey];\n    var nextValue = [];\n\n    if (cascade) {\n      nextValue = splitValue(node, checked, value).value;\n    } else {\n      nextValue = [].concat(value);\n\n      if (checked) {\n        nextValue.push(nodeValue);\n      } else {\n        nextValue = nextValue.filter(function (n) {\n          return n !== nodeValue;\n        });\n      }\n    }\n\n    setValue(nextValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    onCheck === null || onCheck === void 0 ? void 0 : onCheck(nextValue, node, checked, event);\n  }, [cascade, onChange, onCheck, setValue, splitValue, value, valueKey]);\n  var handleClean = useCallback(function (event) {\n    if (disabled || !targetRef.current) {\n      return;\n    }\n\n    setSelectedPaths([]);\n    setValue([]);\n    setColumnData([data]);\n    onChange === null || onChange === void 0 ? void 0 : onChange([], event);\n  }, [data, disabled, onChange, setColumnData, setValue]);\n  var handleMenuPressEnter = useCallback(function (event) {\n    var _overlayRef$current;\n\n    var focusItem = findNodeOfTree(data, function (item) {\n      return item[valueKey] === focusItemValue;\n    });\n    var checkbox = (_overlayRef$current = overlayRef.current) === null || _overlayRef$current === void 0 ? void 0 : _overlayRef$current.querySelector(\"[data-key=\\\"\" + focusItemValue + \"\\\"] [type=\\\"checkbox\\\"]\");\n\n    if (checkbox) {\n      handleCheck(focusItem, event, (checkbox === null || checkbox === void 0 ? void 0 : checkbox.getAttribute('aria-checked')) !== 'true');\n    }\n  }, [data, focusItemValue, handleCheck, valueKey]);\n  var onPickerKeyDown = useToggleKeyDownEvent(_extends({\n    toggle: !focusItemValue || !active,\n    triggerRef: triggerRef,\n    targetRef: targetRef,\n    overlayRef: overlayRef,\n    searchInputRef: searchInputRef,\n    active: active,\n    onExit: handleClean,\n    onMenuKeyDown: onFocusItem,\n    onMenuPressEnter: handleMenuPressEnter\n  }, rest));\n  var handleSearch = useCallback(function (value, event) {\n    setSearchKeyword(value);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value, event);\n\n    if (value) {\n      setLayer(0);\n    } else if (selectedPaths !== null && selectedPaths !== void 0 && selectedPaths.length) {\n      setLayer(selectedPaths.length - 1);\n    }\n\n    setKeys([]);\n  }, [onSearch, selectedPaths, setKeys, setLayer]);\n  var getSearchResult = useCallback(function () {\n    var items = [];\n    var result = flattenData.filter(function (item) {\n      if (uncheckableItemValues.some(function (value) {\n        return item[valueKey] === value;\n      })) {\n        return false;\n      }\n\n      if (item[labelKey].match(new RegExp(getSafeRegExpString(searchKeyword), 'i'))) {\n        return true;\n      }\n\n      return false;\n    });\n\n    for (var i = 0; i < result.length; i++) {\n      items.push(result[i]); // A maximum of 100 search results are returned.\n\n      if (i === 99) {\n        return items;\n      }\n    }\n\n    return items;\n  }, [flattenData, labelKey, searchKeyword, uncheckableItemValues, valueKey]);\n\n  var renderSearchRow = function renderSearchRow(item, key) {\n    var _extends2;\n\n    var nodes = getNodeParents(item);\n    var regx = new RegExp(getSafeRegExpString(searchKeyword), 'ig');\n    var labelElements = [];\n    var a = item[labelKey].split(regx);\n    var b = item[labelKey].match(regx);\n\n    for (var i = 0; i < a.length; i++) {\n      labelElements.push(a[i]);\n\n      if (b[i]) {\n        labelElements.push( /*#__PURE__*/React.createElement(\"span\", {\n          key: i,\n          className: prefix('cascader-search-match')\n        }, b[i]));\n      }\n    }\n\n    nodes.push(_extends({}, item, (_extends2 = {}, _extends2[labelKey] = labelElements, _extends2)));\n    var active = value.some(function (value) {\n      if (cascade) {\n        return nodes.some(function (node) {\n          return node[valueKey] === value;\n        });\n      }\n\n      return item[valueKey] === value;\n    });\n    var disabled = disabledItemValues.some(function (value) {\n      return nodes.some(function (node) {\n        return node[valueKey] === value;\n      });\n    });\n    var itemClasses = prefix('cascader-row', {\n      'cascader-row-disabled': disabled,\n      'cascader-row-focus': item[valueKey] === focusItemValue\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      className: itemClasses,\n      \"aria-disabled\": disabled,\n      \"data-key\": item[valueKey]\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      disabled: disabled,\n      checked: active,\n      value: item[valueKey],\n      indeterminate: cascade && !active && isSomeChildChecked(item, value, {\n        valueKey: valueKey,\n        childrenKey: childrenKey\n      }),\n      onChange: function onChange(_value, checked, event) {\n        handleCheck(item, event, checked);\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: prefix('cascader-cols')\n    }, nodes.map(function (node, index) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        key: \"col-\" + index,\n        className: prefix('cascader-col')\n      }, node[labelKey]);\n    }))));\n  };\n\n  var renderSearchResultPanel = function renderSearchResultPanel() {\n    if (searchKeyword === '') {\n      return null;\n    }\n\n    var items = getSearchResult();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('cascader-search-panel'),\n      \"data-layer\": 0\n    }, items.length ? items.map(renderSearchRow) : /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('none')\n    }, locale.noResultsText));\n  };\n\n  var renderDropdownMenu = function renderDropdownMenu(positionProps, speakerRef) {\n    var _ref = positionProps || {},\n        left = _ref.left,\n        top = _ref.top,\n        className = _ref.className;\n\n    var styles = _extends({}, menuStyle, {\n      left: left,\n      top: top\n    });\n\n    var classes = merge(className, menuClassName, prefix('cascader-menu', 'multi-cascader-menu', {\n      inline: inline\n    }));\n    return /*#__PURE__*/React.createElement(PickerOverlay, {\n      ref: mergeRefs(overlayRef, speakerRef),\n      className: classes,\n      style: styles,\n      target: triggerRef,\n      onKeyDown: onPickerKeyDown\n    }, searchable && /*#__PURE__*/React.createElement(SearchBar, {\n      placeholder: locale === null || locale === void 0 ? void 0 : locale.searchPlaceholder,\n      onChange: handleSearch,\n      value: searchKeyword,\n      inputRef: searchInputRef\n    }), renderSearchResultPanel(), searchKeyword === '' && /*#__PURE__*/React.createElement(DropdownMenu, {\n      id: id ? id + \"-listbox\" : undefined,\n      cascade: cascade,\n      menuWidth: menuWidth,\n      menuHeight: menuHeight,\n      uncheckableItemValues: uncheckableItemValues,\n      disabledItemValues: disabledItemValues,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      childrenKey: childrenKey,\n      classPrefix: 'picker-cascader-menu',\n      cascadeData: columnData,\n      cascadePaths: selectedPaths,\n      value: value,\n      onSelect: handleSelect,\n      onCheck: handleCheck,\n      renderMenu: renderMenu,\n      renderMenuItem: renderMenuItem\n    }), renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n\n  var selectedElement = placeholder;\n\n  if (selectedItems.length > 0) {\n    selectedElement = /*#__PURE__*/React.createElement(SelectedElement, {\n      selectedItems: selectedItems,\n      countable: countable,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      childrenKey: childrenKey,\n      prefix: prefix,\n      cascade: cascade,\n      locale: locale\n    });\n  }\n\n  if (hasValue && isFunction(renderValue)) {\n    selectedElement = renderValue(value.length ? value : valueProp !== null && valueProp !== void 0 ? valueProp : [], selectedItems, selectedElement); // If renderValue returns null or undefined, hasValue is false.\n\n    if (isNil(selectedElement)) {\n      hasValue = false;\n    }\n  }\n\n  var _usePickerClassName = usePickerClassName(_extends({}, props, {\n    classPrefix: classPrefix,\n    hasValue: hasValue,\n    countable: countable,\n    name: 'cascader',\n    appearance: appearance,\n    cleanable: cleanable\n  })),\n      classes = _usePickerClassName[0],\n      usedClassNamePropKeys = _usePickerClassName[1];\n\n  if (inline) {\n    return renderDropdownMenu();\n  }\n\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    pickerProps: pick(props, pickTriggerPropKeys),\n    ref: triggerRef,\n    placement: placement,\n    onEnter: createChainedFunction(handleEntered, onEnter),\n    onExited: createChainedFunction(handleExited, onExited),\n    onExit: createChainedFunction(onClose, onExit),\n    speaker: renderDropdownMenu\n  }, /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    style: style\n  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys)), {\n    id: id,\n    as: toggleAs,\n    appearance: appearance,\n    disabled: disabled,\n    ref: targetRef,\n    onClean: createChainedFunction(handleClean, onClean),\n    onKeyDown: onPickerKeyDown,\n    cleanable: cleanable && !disabled,\n    hasValue: hasValue,\n    active: active,\n    placement: placement,\n    inputValue: value\n  }), selectedElement || locale.placeholder)));\n});\nMultiCascader.displayName = 'MultiCascader';\nMultiCascader.propTypes = _extends({}, listPickerPropTypes, {\n  value: PropTypes.array,\n  disabledItemValues: PropTypes.array,\n  locale: PropTypes.any,\n  appearance: PropTypes.oneOf(['default', 'subtle']),\n  cascade: PropTypes.bool,\n  inline: PropTypes.bool,\n  countable: PropTypes.bool,\n  menuWidth: PropTypes.number,\n  menuHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  uncheckableItemValues: PropTypes.array,\n  searchable: PropTypes.bool,\n  renderMenuItem: PropTypes.func,\n  renderMenu: PropTypes.func,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onCheck: PropTypes.func\n});\nexport default MultiCascader;","map":null,"metadata":{},"sourceType":"module"}