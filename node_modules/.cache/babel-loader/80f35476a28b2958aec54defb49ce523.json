{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useState } from 'react';\nimport { addMonths, isAfter, isSameMonth, setDate } from '../utils/dateUtils';\nimport CalendarCore, { CalendarState } from '../Calendar/Calendar';\nimport { DATERANGE_DISABLED_TARGET } from '../utils';\n/**\n * Omit the time in the date, which is used to compare and judge the date.\n * eg: isAfter/isBefore\n */\n\nfunction omitTime(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\nvar Calendar = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? CalendarCore : _props$as,\n      _props$calendarDate = props.calendarDate,\n      calendarDate = _props$calendarDate === void 0 ? [new Date(), addMonths(new Date(), 1)] : _props$calendarDate,\n      _props$format = props.format,\n      format = _props$format === void 0 ? 'yyyy-MM-dd' : _props$format,\n      disabledDate = props.disabledDate,\n      _props$index = props.index,\n      index = _props$index === void 0 ? 0 : _props$index,\n      limitEndYear = props.limitEndYear,\n      onChangeCalendarDate = props.onChangeCalendarDate,\n      onChangeCalendarTime = props.onChangeCalendarTime,\n      onToggleMeridian = props.onToggleMeridian,\n      showOneCalendar = props.showOneCalendar,\n      _props$value = props.value,\n      value = _props$value === void 0 ? [] : _props$value,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"calendarDate\", \"format\", \"disabledDate\", \"index\", \"limitEndYear\", \"onChangeCalendarDate\", \"onChangeCalendarTime\", \"onToggleMeridian\", \"showOneCalendar\", \"value\"]);\n\n  var _useState = useState(),\n      calendarState = _useState[0],\n      setCalendarState = _useState[1];\n\n  var onMoveForward = useCallback(function (nextPageDate) {\n    onChangeCalendarDate === null || onChangeCalendarDate === void 0 ? void 0 : onChangeCalendarDate(index, nextPageDate);\n  }, [index, onChangeCalendarDate]);\n  var onMoveBackward = useCallback(function (nextPageDate) {\n    onChangeCalendarDate === null || onChangeCalendarDate === void 0 ? void 0 : onChangeCalendarDate(index, nextPageDate);\n  }, [index, onChangeCalendarDate]);\n  var handleChangePageDate = useCallback(function (nextPageDate) {\n    onChangeCalendarDate === null || onChangeCalendarDate === void 0 ? void 0 : onChangeCalendarDate(index, nextPageDate);\n    setCalendarState(undefined);\n  }, [index, onChangeCalendarDate]);\n  var handleChangePageTime = useCallback(function (nextPageDate) {\n    onChangeCalendarTime === null || onChangeCalendarTime === void 0 ? void 0 : onChangeCalendarTime(index, nextPageDate);\n  }, [index, onChangeCalendarTime]);\n  var handleToggleMeridian = useCallback(function (event) {\n    onToggleMeridian(index, event);\n  }, [index, onToggleMeridian]);\n  var toggleMonthDropdown = useCallback(function () {\n    setCalendarState(calendarState === CalendarState.DROP_MONTH ? undefined : CalendarState.DROP_MONTH);\n  }, [calendarState]);\n  var toggleTimeDropdown = useCallback(function () {\n    setCalendarState(calendarState === CalendarState.DROP_TIME ? undefined : CalendarState.DROP_TIME);\n  }, [calendarState]);\n  var inSameMonth = useCallback(function (date) {\n    return isSameMonth(date, calendarDate[index]);\n  }, [calendarDate, index]);\n  var getCalendarDate = useCallback(function () {\n    return calendarDate[index];\n  }, [calendarDate, index]);\n  var handleMoveForward = useCallback(function () {\n    onMoveForward === null || onMoveForward === void 0 ? void 0 : onMoveForward(addMonths(getCalendarDate(), 1));\n  }, [getCalendarDate, onMoveForward]);\n  var handleMoveBackward = useCallback(function () {\n    onMoveBackward === null || onMoveBackward === void 0 ? void 0 : onMoveBackward(addMonths(getCalendarDate(), -1));\n  }, [getCalendarDate, onMoveBackward]);\n  var disabledBackward = useCallback(function () {\n    // Do not disable the Backward button on the first calendar.\n    if (index === 0) {\n      return false;\n    }\n\n    var startDate = setDate(addMonths(calendarDate[0], 1), 1);\n    var endDate = setDate(omitTime(calendarDate[1]), 1);\n    var after = isAfter(endDate, startDate);\n    return !after;\n  }, [calendarDate, index]);\n  var disabledForward = useCallback(function () {\n    // If only one calendar is displayed, do not disable\n    if (showOneCalendar) {\n      return false;\n    } // Do not disable the Forward button on the second calendar.\n\n\n    if (index === 1) {\n      return false;\n    }\n\n    var startDate = setDate(addMonths(omitTime(calendarDate[0]), 1), 1);\n    var endDate = setDate(omitTime(calendarDate[1]), 1);\n    var after = isAfter(endDate, startDate);\n    return !after;\n  }, [calendarDate, index, showOneCalendar]);\n  var disabledMonth = useCallback(function (date) {\n    return disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date, value, DATERANGE_DISABLED_TARGET.CALENDAR);\n  }, [disabledDate, value]);\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    format: format,\n    calendarState: calendarState,\n    dateRange: value,\n    disabledBackward: disabledBackward(),\n    disabledDate: disabledMonth,\n    disabledForward: disabledForward(),\n    inSameMonth: inSameMonth,\n    index: index,\n    limitEndYear: limitEndYear,\n    onChangePageDate: handleChangePageDate,\n    onChangePageTime: handleChangePageTime,\n    onMoveBackward: handleMoveBackward,\n    onMoveForward: handleMoveForward,\n    onToggleMonthDropdown: toggleMonthDropdown,\n    onToggleTimeDropdown: toggleTimeDropdown,\n    onToggleMeridian: handleToggleMeridian,\n    calendarDate: getCalendarDate(),\n    ref: ref\n  }));\n});\nCalendar.displayName = 'DateRangePicker.Calendar';\nCalendar.propTypes = {\n  value: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  hoverValue: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  calendarDate: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  index: PropTypes.number,\n  format: PropTypes.string,\n  isoWeek: PropTypes.bool,\n  limitEndYear: PropTypes.number,\n  classPrefix: PropTypes.string,\n  disabledDate: PropTypes.func,\n  onSelect: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onChangeCalendarDate: PropTypes.func\n};\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}