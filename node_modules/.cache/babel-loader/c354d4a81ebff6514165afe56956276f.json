{"ast":null,"code":"import _get from \"lodash/get\";\nimport { flattenTree } from '../utils/treeUtils';\nvar hasSymbol = typeof Symbol === 'function';\nexport var KEY_GROUP = hasSymbol ? Symbol('_$grouped') : '_$grouped';\nexport var KEY_GROUP_TITLE = 'groupTitle';\nexport default function getDataGroupBy(data, key, sort) {\n  if (data === void 0) {\n    data = [];\n  }\n\n  var tempData = {};\n  var isSort = typeof sort === 'function';\n  data.forEach(function (item) {\n    // this will allow getting data using dot notation\n    // i.e groupBy=\"country.name\" as country will be a nested object\n    // to the item and the name will be nested key to the country object\n    // can be used with values in arrays, i.e groupBy=\"addresses.0.country.name\"\n    var groupByValue = _get(item, key, '');\n\n    if (!tempData[groupByValue]) {\n      tempData[groupByValue] = [];\n    }\n\n    tempData[groupByValue].push(item);\n  });\n  var nextData = Object.entries(tempData).map(function (_ref) {\n    var _ref2;\n\n    var groupTitle = _ref[0],\n        children = _ref[1];\n    return _ref2 = {\n      children: isSort ? children.sort(sort(false)) : children\n    }, _ref2[KEY_GROUP_TITLE] = groupTitle, _ref2[KEY_GROUP] = true, _ref2;\n  });\n\n  if (isSort) {\n    nextData = nextData.sort(sort(true));\n  }\n\n  return flattenTree(nextData);\n}","map":null,"metadata":{},"sourceType":"module"}