{"ast":null,"code":"import _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/converters\n */\nimport { first } from 'ckeditor5/src/utils';\n/**\n * Returns a function that converts the image view representation:\n *\n *\t\t<figure class=\"image\"><img src=\"...\" alt=\"...\"></img></figure>\n *\n * to the model representation:\n *\n *\t\t<imageBlock src=\"...\" alt=\"...\"></imageBlock>\n *\n * The entire content of the `<figure>` element except the first `<img>` is being converted as children\n * of the `<imageBlock>` model element.\n *\n * @protected\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @returns {Function}\n */\n\nexport function upcastImageFigure(imageUtils) {\n  return function (dispatcher) {\n    dispatcher.on('element:figure', converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    // Do not convert if this is not an \"image figure\".\n    if (!conversionApi.consumable.test(data.viewItem, {\n      name: true,\n      classes: 'image'\n    })) {\n      return;\n    } // Find an image element inside the figure element.\n\n\n    var viewImage = imageUtils.findViewImgElement(data.viewItem); // Do not convert if image element is absent or was already converted.\n\n    if (!viewImage || !conversionApi.consumable.test(viewImage, {\n      name: true\n    })) {\n      return;\n    } // Consume the figure to prevent other converters from processing it again.\n\n\n    conversionApi.consumable.consume(data.viewItem, {\n      name: true,\n      classes: 'image'\n    }); // Convert view image to model image.\n\n    var conversionResult = conversionApi.convertItem(viewImage, data.modelCursor); // Get image element from conversion result.\n\n    var modelImage = first(conversionResult.modelRange.getItems()); // When image wasn't successfully converted then finish conversion.\n\n    if (!modelImage) {\n      // Revert consumed figure so other features can convert it.\n      conversionApi.consumable.revert(data.viewItem, {\n        name: true,\n        classes: 'image'\n      });\n      return;\n    } // Convert rest of the figure element's children as an image children.\n\n\n    conversionApi.convertChildren(data.viewItem, modelImage);\n    conversionApi.updateConversionResult(modelImage, data);\n  }\n}\n/**\n * Returns a function that converts the image view representation:\n *\n *\t\t<picture><source ... /><source ... />...<img ... /></picture>\n *\n * to the model representation as the `sources` attribute:\n *\n *\t\t<image[Block|Inline] ... sources=\"...\"></image[Block|Inline]>\n *\n * @protected\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @returns {Function}\n */\n\nexport function upcastPicture(imageUtils) {\n  var sourceAttributeNames = ['srcset', 'media', 'type', 'sizes'];\n  return function (dispatcher) {\n    dispatcher.on('element:picture', converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    var pictureViewElement = data.viewItem; // Do not convert <picture> if already consumed.\n\n    if (!conversionApi.consumable.test(pictureViewElement, {\n      name: true\n    })) {\n      return;\n    }\n\n    var sources = new Map(); // Collect all <source /> elements attribute values.\n\n    var _iterator = _createForOfIteratorHelper(pictureViewElement.getChildren()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var childSourceElement = _step.value;\n\n        if (childSourceElement.is('element', 'source')) {\n          var attributes = {};\n\n          var _iterator3 = _createForOfIteratorHelper(sourceAttributeNames),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var name = _step3.value;\n\n              if (childSourceElement.hasAttribute(name)) {\n                // Don't collect <source /> attribute if already consumed somewhere else.\n                if (conversionApi.consumable.test(childSourceElement, {\n                  attributes: name\n                })) {\n                  attributes[name] = childSourceElement.getAttribute(name);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          if (Object.keys(attributes).length) {\n            sources.set(childSourceElement, attributes);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var imgViewElement = imageUtils.findViewImgElement(pictureViewElement); // Don't convert when a picture has no <img/> inside (it is broken).\n\n    if (!imgViewElement) {\n      return;\n    }\n\n    var modelImage = data.modelCursor.parent; // - In case of an inline image (cursor parent in a <paragraph>), the <img/> must be converted right away\n    // because no converter handled it yet and otherwise there would be no model element to set the sources attribute on.\n    // - In case of a block image, the <figure class=\"image\"> converter (in ImageBlockEditing) converts the\n    // <img/> right away on its own and the modelCursor is already inside an imageBlock and there's nothing special\n    // to do here.\n\n    if (!modelImage.is('element', 'imageBlock')) {\n      var conversionResult = conversionApi.convertItem(imgViewElement, data.modelCursor); // Set image range as conversion result.\n\n      data.modelRange = conversionResult.modelRange; // Continue conversion where image conversion ends.\n\n      data.modelCursor = conversionResult.modelCursor;\n      modelImage = first(conversionResult.modelRange.getItems());\n    }\n\n    conversionApi.consumable.consume(pictureViewElement, {\n      name: true\n    }); // Consume only these <source/> attributes that were actually collected and will be passed on\n    // to the image model element.\n\n    var _iterator2 = _createForOfIteratorHelper(sources),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            sourceElement = _step2$value[0],\n            _attributes = _step2$value[1];\n\n        conversionApi.consumable.consume(sourceElement, {\n          attributes: Object.keys(_attributes)\n        });\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    if (sources.size) {\n      conversionApi.writer.setAttribute('sources', Array.from(sources.values()), modelImage);\n    } // Convert rest of the <picture> children as an image children. Other converters may want to consume them.\n\n\n    conversionApi.convertChildren(pictureViewElement, modelImage);\n  }\n}\n/**\n * Converter used to convert the `srcset` model image attribute to the `srcset`, `sizes` and `width` attributes in the view.\n *\n * @protected\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @param {'imageBlock'|'imageInline'} imageType The type of the image.\n * @returns {Function}\n */\n\nexport function downcastSrcsetAttribute(imageUtils, imageType) {\n  return function (dispatcher) {\n    dispatcher.on(\"attribute:srcset:\".concat(imageType), converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    var writer = conversionApi.writer;\n    var element = conversionApi.mapper.toViewElement(data.item);\n    var img = imageUtils.findViewImgElement(element);\n\n    if (data.attributeNewValue === null) {\n      var srcset = data.attributeOldValue;\n\n      if (srcset.data) {\n        writer.removeAttribute('srcset', img);\n        writer.removeAttribute('sizes', img);\n\n        if (srcset.width) {\n          writer.removeAttribute('width', img);\n        }\n      }\n    } else {\n      var _srcset = data.attributeNewValue;\n\n      if (_srcset.data) {\n        writer.setAttribute('srcset', _srcset.data, img); // Always outputting `100vw`. See https://github.com/ckeditor/ckeditor5-image/issues/2.\n\n        writer.setAttribute('sizes', '100vw', img);\n\n        if (_srcset.width) {\n          writer.setAttribute('width', _srcset.width, img);\n        }\n      }\n    }\n  }\n}\n/**\n * Converts the `source` model attribute to the `<picture><source /><source />...<img /></picture>`\n * view structure.\n *\n * @protected\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @returns {Function}\n */\n\nexport function downcastSourcesAttribute(imageUtils) {\n  return function (dispatcher) {\n    dispatcher.on('attribute:sources:imageBlock', converter);\n    dispatcher.on('attribute:sources:imageInline', converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    var viewWriter = conversionApi.writer;\n    var element = conversionApi.mapper.toViewElement(data.item);\n    var imgElement = imageUtils.findViewImgElement(element);\n\n    if (data.attributeNewValue && data.attributeNewValue.length) {\n      // Make sure <picture> does not break attribute elements, for instance <a> in linked images.\n      var pictureElement = viewWriter.createContainerElement('picture', null, data.attributeNewValue.map(function (sourceAttributes) {\n        return viewWriter.createEmptyElement('source', sourceAttributes);\n      })); // Collect all wrapping attribute elements.\n\n      var attributeElements = [];\n      var viewElement = imgElement.parent;\n\n      while (viewElement && viewElement.is('attributeElement')) {\n        var parentElement = viewElement.parent;\n        viewWriter.unwrap(viewWriter.createRangeOn(imgElement), viewElement);\n        attributeElements.unshift(viewElement);\n        viewElement = parentElement;\n      } // Insert the picture and move img into it.\n\n\n      viewWriter.insert(viewWriter.createPositionBefore(imgElement), pictureElement);\n      viewWriter.move(viewWriter.createRangeOn(imgElement), viewWriter.createPositionAt(pictureElement, 'end')); // Apply collected attribute elements over the new picture element.\n\n      for (var _i = 0, _attributeElements = attributeElements; _i < _attributeElements.length; _i++) {\n        var attributeElement = _attributeElements[_i];\n        viewWriter.wrap(viewWriter.createRangeOn(pictureElement), attributeElement);\n      }\n    } // Both setting \"sources\" to an empty array and removing the attribute should unwrap the <img />.\n    // Unwrap once if the latter followed the former, though.\n    else if (imgElement.parent.is('element', 'picture')) {\n      var _pictureElement = imgElement.parent;\n      viewWriter.move(viewWriter.createRangeOn(imgElement), viewWriter.createPositionBefore(_pictureElement));\n      viewWriter.remove(_pictureElement);\n    }\n  }\n}\n/**\n * Converter used to convert a given image attribute from the model to the view.\n *\n * @protected\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @param {'imageBlock'|'imageInline'} imageType The type of the image.\n * @param {String} attributeKey The name of the attribute to convert.\n * @returns {Function}\n */\n\nexport function downcastImageAttribute(imageUtils, imageType, attributeKey) {\n  return function (dispatcher) {\n    dispatcher.on(\"attribute:\".concat(attributeKey, \":\").concat(imageType), converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    var viewWriter = conversionApi.writer;\n    var element = conversionApi.mapper.toViewElement(data.item);\n    var img = imageUtils.findViewImgElement(element);\n    viewWriter.setAttribute(data.attributeKey, data.attributeNewValue || '', img);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}