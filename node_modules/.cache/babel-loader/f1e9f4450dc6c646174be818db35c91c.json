{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/template\n */\n\n/* global document */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport { isObject, cloneDeepWith } from 'lodash-es';\nimport toArray from '@ckeditor/ckeditor5-utils/src/toarray';\nvar xhtmlNs = 'http://www.w3.org/1999/xhtml';\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\tclass: 'foo',\n *\t\t\t\tstyle: {\n *\t\t\t\t\tbackgroundColor: 'yellow'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t'A paragraph.'\n *\t\t\t]\n *\t\t} ).render();\n *\n * and it will render the following HTML element:\n *\n *\t\t<p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n *\n* @mixes module:utils/emittermixin~EmitterMixin\n */\n\nvar Template = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of the {@link ~Template} class.\n   *\n   * @param {module:ui/template~TemplateDefinition} def The definition of the template.\n   */\n  function Template(def) {\n    _classCallCheck(this, Template);\n\n    Object.assign(this, normalize(clone(def)));\n    /**\n     * Indicates whether this particular Template instance has been\n     * {@link #render rendered}.\n     *\n     * @readonly\n     * @protected\n     * @member {Boolean}\n     */\n\n    this._isRendered = false;\n    /**\n     * The tag (`tagName`) of this template, e.g. `div`. It also indicates that the template\n     * renders to an HTML element.\n     *\n     * @member {String} #tag\n     */\n\n    /**\n     * The text of the template. It also indicates that the template renders to a DOM text node.\n     *\n     * @member {Array.<String|module:ui/template~TemplateValueSchema>} #text\n     */\n\n    /**\n     * The attributes of the template, e.g. `{ id: [ 'ck-id' ] }`, corresponding with\n     * the attributes of an HTML element.\n     *\n     * **Note**: This property only makes sense when {@link #tag} is defined.\n     *\n     * @member {Object} #attributes\n     */\n\n    /**\n     * The children of the template. They can be either:\n     * * independent instances of {@link ~Template} (subâ€“templates),\n     * * native DOM Nodes.\n     *\n     * **Note**: This property only makes sense when {@link #tag} is defined.\n     *\n     * @member {Array.<module:ui/template~Template|Node>} #children\n     */\n\n    /**\n     * The DOM event listeners of the template.\n     *\n     * @member {Object} #eventListeners\n     */\n\n    /**\n     * The data used by the {@link #revert} method to restore a node to its original state.\n     *\n     * See: {@link #apply}.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/template~RenderData}\n     */\n\n    this._revertData = null;\n  }\n  /**\n   * Renders a DOM Node (an HTML element or text) out of the template.\n   *\n   *\t\tconst domNode = new Template( { ... } ).render();\n   *\n   * See: {@link #apply}.\n   *\n   * @returns {HTMLElement|Text}\n   */\n\n\n  _createClass(Template, [{\n    key: \"render\",\n    value: function render() {\n      var node = this._renderNode({\n        intoFragment: true\n      });\n\n      this._isRendered = true;\n      return node;\n    }\n    /**\n     * Applies the template to an existing DOM Node, either HTML element or text.\n     *\n     * **Note:** No new DOM nodes will be created. Applying extends:\n     *\n     * {@link module:ui/template~TemplateDefinition attributes},\n     * {@link module:ui/template~TemplateDefinition event listeners}, and\n     * `textContent` of {@link module:ui/template~TemplateDefinition children} only.\n     *\n     * **Note:** Existing `class` and `style` attributes are extended when a template\n     * is applied to an HTML element, while other attributes and `textContent` are overridden.\n     *\n     * **Note:** The process of applying a template can be easily reverted using the\n     * {@link module:ui/template~Template#revert} method.\n     *\n     *\t\tconst element = document.createElement( 'div' );\n     *\t\tconst observable = new Model( { divClass: 'my-div' } );\n     *\t\tconst emitter = Object.create( EmitterMixin );\n     *\t\tconst bind = Template.bind( observable, emitter );\n     *\n     *\t\tnew Template( {\n     *\t\t\tattributes: {\n     *\t\t\t\tid: 'first-div',\n     *\t\t\t\tclass: bind.to( 'divClass' )\n     *\t\t\t},\n     *\t\t\ton: {\n     *\t\t\t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n     *\t\t\t},\n     *\t\t\tchildren: [\n     *\t\t\t\t'Div text.'\n     *\t\t\t]\n     *\t\t} ).apply( element );\n     *\n     *\t\tconsole.log( element.outerHTML ); // -> '<div id=\"first-div\" class=\"my-div\"></div>'\n     *\n     * @see module:ui/template~Template#render\n     * @see module:ui/template~Template#revert\n     * @param {Node} node Root node for the template to apply.\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply(node) {\n      this._revertData = getEmptyRevertData();\n\n      this._renderNode({\n        node: node,\n        isApplying: true,\n        revertData: this._revertData\n      });\n\n      return node;\n    }\n    /**\n     * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n     *\n     * @param {Node} node The root node for the template to revert. In most of the cases, it is the\n     * same node used by {@link module:ui/template~Template#apply}.\n     */\n\n  }, {\n    key: \"revert\",\n    value: function revert(node) {\n      if (!this._revertData) {\n        /**\n         * Attempting to revert a template which has not been applied yet.\n         *\n         * @error ui-template-revert-not-applied\n         */\n        throw new CKEditorError('ui-template-revert-not-applied', [this, node]);\n      }\n\n      this._revertTemplateFromNode(node, this._revertData);\n    }\n    /**\n     * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n     * instances and returns them one by one.\n     *\n     *\t\tconst viewFoo = new View();\n     *\t\tconst viewBar = new View();\n     *\t\tconst viewBaz = new View();\n     *\t\tconst template = new Template( {\n     *\t\t\ttag: 'div',\n     *\t\t\tchildren: [\n     *\t\t\t\tviewFoo,\n     *\t\t\t\t{\n     *\t\t\t\t\ttag: 'div',\n     *\t\t\t\t\tchildren: [\n     *\t\t\t\t\t\tviewBar\n     *\t\t\t\t\t]\n     *\t\t\t\t},\n     *\t\t\t\tviewBaz\n     *\t\t\t]\n     *\t\t} );\n     *\n     *\t\t// Logs: viewFoo, viewBar, viewBaz\n     *\t\tfor ( const view of template.getViews() ) {\n     *\t\t\tconsole.log( view );\n     *\t\t}\n     *\n     * @returns {Iterable.<module:ui/view~View>}\n     */\n\n  }, {\n    key: \"getViews\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function getViews() {\n      var _marked, search;\n\n      return _regeneratorRuntime.wrap(function getViews$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              search = function _search(def) {\n                var _iterator, _step, child;\n\n                return _regeneratorRuntime.wrap(function search$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!def.children) {\n                          _context.next = 23;\n                          break;\n                        }\n\n                        _iterator = _createForOfIteratorHelper(def.children);\n                        _context.prev = 2;\n\n                        _iterator.s();\n\n                      case 4:\n                        if ((_step = _iterator.n()).done) {\n                          _context.next = 15;\n                          break;\n                        }\n\n                        child = _step.value;\n\n                        if (!isView(child)) {\n                          _context.next = 11;\n                          break;\n                        }\n\n                        _context.next = 9;\n                        return child;\n\n                      case 9:\n                        _context.next = 13;\n                        break;\n\n                      case 11:\n                        if (!isTemplate(child)) {\n                          _context.next = 13;\n                          break;\n                        }\n\n                        return _context.delegateYield(search(child), \"t0\", 13);\n\n                      case 13:\n                        _context.next = 4;\n                        break;\n\n                      case 15:\n                        _context.next = 20;\n                        break;\n\n                      case 17:\n                        _context.prev = 17;\n                        _context.t1 = _context[\"catch\"](2);\n\n                        _iterator.e(_context.t1);\n\n                      case 20:\n                        _context.prev = 20;\n\n                        _iterator.f();\n\n                        return _context.finish(20);\n\n                      case 23:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _marked, null, [[2, 17, 20, 23]]);\n              };\n\n              _marked = /*#__PURE__*/_regeneratorRuntime.mark(search);\n              return _context2.delegateYield(search(this), \"t0\", 3);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, getViews, this);\n    })\n    /**\n     * An entry point to the interface which binds DOM nodes to\n     * {@link module:utils/observablemixin~Observable observables}.\n     * There are two types of bindings:\n     *\n     * * HTML element attributes or text `textContent` synchronized with attributes of an\n     * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n     * and {@link module:ui/template~BindChain#if}.\n     *\n     *\t\tconst bind = Template.bind( observable, emitter );\n     *\n     *\t\tnew Template( {\n     *\t\t\tattributes: {\n     *\t\t\t\t// Binds the element \"class\" attribute to observable#classAttribute.\n     *\t\t\t\tclass: bind.to( 'classAttribute' )\n     *\t\t\t}\n     *\t\t} ).render();\n     *\n     * * DOM events fired on HTML element propagated through\n     * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n     *\n     *\t\tconst bind = Template.bind( observable, emitter );\n     *\n     *\t\tnew Template( {\n     *\t\t\ton: {\n     *\t\t\t\t// Will be fired by the observable.\n     *\t\t\t\tclick: bind( 'elementClicked' )\n     *\t\t\t}\n     *\t\t} ).render();\n     *\n     * Also see {@link module:ui/view~View#bindTemplate}.\n     *\n     * @param {module:utils/observablemixin~Observable} observable An observable which provides boundable attributes.\n     * @param {module:utils/emittermixin~Emitter} emitter An emitter that listens to observable attribute\n     * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n     * @returns {module:ui/template~BindChain}\n     */\n\n  }, {\n    key: \"_renderNode\",\n\n    /**\n     * Renders a DOM Node (either an HTML element or text) out of the template.\n     *\n     * @protected\n     * @param {module:ui/template~RenderData} data Rendering data.\n     */\n    value: function _renderNode(data) {\n      var isInvalid;\n\n      if (data.node) {\n        // When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n        isInvalid = this.tag && this.text;\n      } else {\n        // When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n        isInvalid = this.tag ? this.text : !this.text;\n      }\n\n      if (isInvalid) {\n        /**\n         * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n         * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n         *\n         * @error ui-template-wrong-syntax\n         */\n        throw new CKEditorError('ui-template-wrong-syntax', this);\n      }\n\n      if (this.text) {\n        return this._renderText(data);\n      } else {\n        return this._renderElement(data);\n      }\n    }\n    /**\n     * Renders an HTML element out of the template.\n     *\n     * @protected\n     * @param {module:ui/template~RenderData} data Rendering data.\n     */\n\n  }, {\n    key: \"_renderElement\",\n    value: function _renderElement(data) {\n      var node = data.node;\n\n      if (!node) {\n        node = data.node = document.createElementNS(this.ns || xhtmlNs, this.tag);\n      }\n\n      this._renderAttributes(data);\n\n      this._renderElementChildren(data);\n\n      this._setUpListeners(data);\n\n      return node;\n    }\n    /**\n     * Renders a text node out of {@link module:ui/template~Template#text}.\n     *\n     * @protected\n     * @param {module:ui/template~RenderData} data Rendering data.\n     */\n\n  }, {\n    key: \"_renderText\",\n    value: function _renderText(data) {\n      var node = data.node; // Save the original textContent to revert it in #revert().\n\n      if (node) {\n        data.revertData.text = node.textContent;\n      } else {\n        node = data.node = document.createTextNode('');\n      } // Check if this Text Node is bound to Observable. Cases:\n      //\n      //\t\ttext: [ Template.bind( ... ).to( ... ) ]\n      //\n      //\t\ttext: [\n      //\t\t\t'foo',\n      //\t\t\tTemplate.bind( ... ).to( ... ),\n      //\t\t\t...\n      //\t\t]\n      //\n\n\n      if (hasTemplateBinding(this.text)) {\n        this._bindToObservable({\n          schema: this.text,\n          updater: getTextUpdater(node),\n          data: data\n        });\n      } // Simply set text. Cases:\n      //\n      //\t\ttext: [ 'all', 'are', 'static' ]\n      //\n      //\t\ttext: [ 'foo' ]\n      //\n      else {\n        node.textContent = this.text.join('');\n      }\n\n      return node;\n    }\n    /**\n     * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n     *\n     * @protected\n     * @param {module:ui/template~RenderData} data Rendering data.\n     */\n\n  }, {\n    key: \"_renderAttributes\",\n    value: function _renderAttributes(data) {\n      var attrName, attrValue, domAttrValue, attrNs;\n\n      if (!this.attributes) {\n        return;\n      }\n\n      var node = data.node;\n      var revertData = data.revertData;\n\n      for (attrName in this.attributes) {\n        // Current attribute value in DOM.\n        domAttrValue = node.getAttribute(attrName); // The value to be set.\n\n        attrValue = this.attributes[attrName]; // Save revert data.\n\n        if (revertData) {\n          revertData.attributes[attrName] = domAttrValue;\n        } // Detect custom namespace:\n        //\n        //\t\tclass: {\n        //\t\t\tns: 'abc',\n        //\t\t\tvalue: Template.bind( ... ).to( ... )\n        //\t\t}\n        //\n\n\n        attrNs = isObject(attrValue[0]) && attrValue[0].ns ? attrValue[0].ns : null; // Activate binding if one is found. Cases:\n        //\n        //\t\tclass: [\n        //\t\t\tTemplate.bind( ... ).to( ... )\n        //\t\t]\n        //\n        //\t\tclass: [\n        //\t\t\t'bar',\n        //\t\t\tTemplate.bind( ... ).to( ... ),\n        //\t\t\t'baz'\n        //\t\t]\n        //\n        //\t\tclass: {\n        //\t\t\tns: 'abc',\n        //\t\t\tvalue: Template.bind( ... ).to( ... )\n        //\t\t}\n        //\n\n        if (hasTemplateBinding(attrValue)) {\n          // Normalize attributes with additional data like namespace:\n          //\n          //\t\tclass: {\n          //\t\t\tns: 'abc',\n          //\t\t\tvalue: [ ... ]\n          //\t\t}\n          //\n          var valueToBind = attrNs ? attrValue[0].value : attrValue; // Extend the original value of attributes like \"style\" and \"class\",\n          // don't override them.\n\n          if (revertData && shouldExtend(attrName)) {\n            valueToBind.unshift(domAttrValue);\n          }\n\n          this._bindToObservable({\n            schema: valueToBind,\n            updater: getAttributeUpdater(node, attrName, attrNs),\n            data: data\n          });\n        } // Style attribute could be an Object so it needs to be parsed in a specific way.\n        //\n        //\t\tstyle: {\n        //\t\t\twidth: '100px',\n        //\t\t\theight: Template.bind( ... ).to( ... )\n        //\t\t}\n        //\n        else if (attrName == 'style' && typeof attrValue[0] !== 'string') {\n          this._renderStyleAttribute(attrValue[0], data);\n        } // Otherwise simply set the static attribute:\n        //\n        //\t\tclass: [ 'foo' ]\n        //\n        //\t\tclass: [ 'all', 'are', 'static' ]\n        //\n        //\t\tclass: [\n        //\t\t\t{\n        //\t\t\t\tns: 'abc',\n        //\t\t\t\tvalue: [ 'foo' ]\n        //\t\t\t}\n        //\t\t]\n        //\n        else {\n          // Extend the original value of attributes like \"style\" and \"class\",\n          // don't override them.\n          if (revertData && domAttrValue && shouldExtend(attrName)) {\n            attrValue.unshift(domAttrValue);\n          }\n\n          attrValue = attrValue // Retrieve \"values\" from:\n          //\n          //\t\tclass: [\n          //\t\t\t{\n          //\t\t\t\tns: 'abc',\n          //\t\t\t\tvalue: [ ... ]\n          //\t\t\t}\n          //\t\t]\n          //\n          .map(function (val) {\n            return val ? val.value || val : val;\n          }) // Flatten the array.\n          .reduce(function (prev, next) {\n            return prev.concat(next);\n          }, []) // Convert into string.\n          .reduce(arrayValueReducer, '');\n\n          if (!isFalsy(attrValue)) {\n            node.setAttributeNS(attrNs, attrName, attrValue);\n          }\n        }\n      }\n    }\n    /**\n     * Renders the `style` attribute of an HTML element based on\n     * {@link module:ui/template~Template#attributes}.\n     *\n     * A style attribute is an {Object} with static values:\n     *\n     *\t\tattributes: {\n     *\t\t\tstyle: {\n     *\t\t\t\tcolor: 'red'\n     *\t\t\t}\n     *\t\t}\n     *\n     * or values bound to {@link module:ui/model~Model} properties:\n     *\n     *\t\tattributes: {\n     *\t\t\tstyle: {\n     *\t\t\t\tcolor: bind.to( ... )\n     *\t\t\t}\n     *\t\t}\n     *\n     * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n     * needed.\n     *\n     * @private\n     * @param {Object} styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n     * @param {module:ui/template~RenderData} data Rendering data.\n     */\n\n  }, {\n    key: \"_renderStyleAttribute\",\n    value: function _renderStyleAttribute(styles, data) {\n      var node = data.node;\n\n      for (var styleName in styles) {\n        var styleValue = styles[styleName]; // Cases:\n        //\n        //\t\tstyle: {\n        //\t\t\tcolor: bind.to( 'attribute' )\n        //\t\t}\n        //\n\n        if (hasTemplateBinding(styleValue)) {\n          this._bindToObservable({\n            schema: [styleValue],\n            updater: getStyleUpdater(node, styleName),\n            data: data\n          });\n        } // Cases:\n        //\n        //\t\tstyle: {\n        //\t\t\tcolor: 'red'\n        //\t\t}\n        //\n        else {\n          node.style[styleName] = styleValue;\n        }\n      }\n    }\n    /**\n     * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n     *\n     * @protected\n     * @param {module:ui/template~RenderData} data Rendering data.\n     */\n\n  }, {\n    key: \"_renderElementChildren\",\n    value: function _renderElementChildren(data) {\n      var node = data.node;\n      var container = data.intoFragment ? document.createDocumentFragment() : node;\n      var isApplying = data.isApplying;\n      var childIndex = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(this.children),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n\n          if (isViewCollection(child)) {\n            if (!isApplying) {\n              child.setParent(node); // Note: ViewCollection renders its children.\n\n              var _iterator3 = _createForOfIteratorHelper(child),\n                  _step3;\n\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var view = _step3.value;\n                  container.appendChild(view.element);\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            }\n          } else if (isView(child)) {\n            if (!isApplying) {\n              if (!child.isRendered) {\n                child.render();\n              }\n\n              container.appendChild(child.element);\n            }\n          } else if (isNode(child)) {\n            container.appendChild(child);\n          } else {\n            if (isApplying) {\n              var revertData = data.revertData;\n              var childRevertData = getEmptyRevertData();\n              revertData.children.push(childRevertData);\n\n              child._renderNode({\n                node: container.childNodes[childIndex++],\n                isApplying: true,\n                revertData: childRevertData\n              });\n            } else {\n              container.appendChild(child.render());\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (data.intoFragment) {\n        node.appendChild(container);\n      }\n    }\n    /**\n     * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n     * on an HTML element.\n     *\n     * @protected\n     * @param {module:ui/template~RenderData} data Rendering data.\n     */\n\n  }, {\n    key: \"_setUpListeners\",\n    value: function _setUpListeners(data) {\n      var _this = this;\n\n      if (!this.eventListeners) {\n        return;\n      }\n\n      var _loop = function _loop(key) {\n        var revertBindings = _this.eventListeners[key].map(function (schemaItem) {\n          var _key$split = key.split('@'),\n              _key$split2 = _slicedToArray(_key$split, 2),\n              domEvtName = _key$split2[0],\n              domSelector = _key$split2[1];\n\n          return schemaItem.activateDomEventListener(domEvtName, domSelector, data);\n        });\n\n        if (data.revertData) {\n          data.revertData.bindings.push(revertBindings);\n        }\n      };\n\n      for (var key in this.eventListeners) {\n        _loop(key);\n      }\n    }\n    /**\n     * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n     * activates the binding and sets its initial value.\n     *\n     * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n     * text node `textContent`.\n     *\n     * @protected\n     * @param {Object} options Binding options.\n     * @param {module:ui/template~TemplateValueSchema} options.schema\n     * @param {Function} options.updater A function which updates the DOM (like attribute or text).\n     * @param {module:ui/template~RenderData} options.data Rendering data.\n     */\n\n  }, {\n    key: \"_bindToObservable\",\n    value: function _bindToObservable(_ref) {\n      var schema = _ref.schema,\n          updater = _ref.updater,\n          data = _ref.data;\n      var revertData = data.revertData; // Set initial values.\n\n      syncValueSchemaValue(schema, updater, data);\n      var revertBindings = schema // Filter \"falsy\" (false, undefined, null, '') value schema components out.\n      .filter(function (item) {\n        return !isFalsy(item);\n      }) // Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n      .filter(function (item) {\n        return item.observable;\n      }) // Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n      // TODO: Reduce the number of listeners attached as many bindings may listen\n      // to the same observable attribute.\n      .map(function (templateBinding) {\n        return templateBinding.activateAttributeListener(schema, updater, data);\n      });\n\n      if (revertData) {\n        revertData.bindings.push(revertBindings);\n      }\n    }\n    /**\n     * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n     * return it to the original state.\n     *\n     * @protected\n     * @param {HTMLElement|Text} node A node to be reverted.\n     * @param {Object} revertData An object that stores information about what changes have been made by\n     * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.\n     */\n\n  }, {\n    key: \"_revertTemplateFromNode\",\n    value: function _revertTemplateFromNode(node, revertData) {\n      var _iterator4 = _createForOfIteratorHelper(revertData.bindings),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var binding = _step4.value;\n\n          // Each binding may consist of several observable+observable#attribute.\n          // like the following has 2:\n          //\n          //\t\tclass: [\n          //\t\t\t'x',\n          //\t\t\tbind.to( 'foo' ),\n          //\t\t\t'y',\n          //\t\t\tbind.to( 'bar' )\n          //\t\t]\n          //\n          var _iterator5 = _createForOfIteratorHelper(binding),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var revertBinding = _step5.value;\n              revertBinding();\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      if (revertData.text) {\n        node.textContent = revertData.text;\n        return;\n      }\n\n      for (var attrName in revertData.attributes) {\n        var attrValue = revertData.attributes[attrName]; // When the attribute has **not** been set before #apply().\n\n        if (attrValue === null) {\n          node.removeAttribute(attrName);\n        } else {\n          node.setAttribute(attrName, attrValue);\n        }\n      }\n\n      for (var i = 0; i < revertData.children.length; ++i) {\n        this._revertTemplateFromNode(node.childNodes[i], revertData.children[i]);\n      }\n    }\n  }], [{\n    key: \"bind\",\n    value: function bind(observable, emitter) {\n      return {\n        to: function to(eventNameOrFunctionOrAttribute, callback) {\n          return new TemplateToBinding({\n            eventNameOrFunction: eventNameOrFunctionOrAttribute,\n            attribute: eventNameOrFunctionOrAttribute,\n            observable: observable,\n            emitter: emitter,\n            callback: callback\n          });\n        },\n        if: function _if(attribute, valueIfTrue, callback) {\n          return new TemplateIfBinding({\n            observable: observable,\n            emitter: emitter,\n            attribute: attribute,\n            valueIfTrue: valueIfTrue,\n            callback: callback\n          });\n        }\n      };\n    }\n    /**\n     * Extends an existing {@link module:ui/template~Template} instance with some additional content\n     * from another {@link module:ui/template~TemplateDefinition}.\n     *\n     *\t\tconst bind = Template.bind( observable, emitter );\n     *\n     *\t\tconst template = new Template( {\n     *\t\t\ttag: 'p',\n     *\t\t\tattributes: {\n     *\t\t\t\tclass: 'a',\n     *\t\t\t\tdata-x: bind.to( 'foo' )\n     *\t\t\t},\n     *\t\t\tchildren: [\n     *\t\t\t\t{\n     *\t\t\t\t\ttag: 'span',\n     *\t\t\t\t\tattributes: {\n     *\t\t\t\t\t\tclass: 'b'\n     *\t\t\t\t\t},\n     *\t\t\t\t\tchildren: [\n     *\t\t\t\t\t\t'Span'\n     *\t\t\t\t\t]\n     *\t\t\t\t}\n     *\t\t\t]\n     *\t\t } );\n     *\n     *\t\t// Instance-level extension.\n     *\t\tTemplate.extend( template, {\n     *\t\t\tattributes: {\n     *\t\t\t\tclass: 'b',\n     *\t\t\t\tdata-x: bind.to( 'bar' )\n     *\t\t\t},\n     *\t\t\tchildren: [\n     *\t\t\t\t{\n     *\t\t\t\t\tattributes: {\n     *\t\t\t\t\t\tclass: 'c'\n     *\t\t\t\t\t}\n     *\t\t\t\t}\n     *\t\t\t]\n     *\t\t} );\n     *\n     *\t\t// Child extension.\n     *\t\tTemplate.extend( template.children[ 0 ], {\n     *\t\t\tattributes: {\n     *\t\t\t\tclass: 'd'\n     *\t\t\t}\n     *\t\t} );\n     *\n     * the `outerHTML` of `template.render()` is:\n     *\n     *\t\t<p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n     *\t\t\t<span class=\"b c d\">Span</span>\n     *\t\t</p>\n     *\n     * @param {module:ui/template~Template} template An existing template instance to be extended.\n     * @param {module:ui/template~TemplateDefinition} def Additional definition to be applied to a template.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function extend(template, def) {\n      if (template._isRendered) {\n        /**\n         * Extending a template after rendering may not work as expected. To make sure\n         * the {@link module:ui/template~Template.extend extending} works for an element,\n         * make sure it happens before {@link #render} is called.\n         *\n         * @error template-extend-render\n         */\n        throw new CKEditorError('template-extend-render', [this, template]);\n      }\n\n      extendTemplate(template, normalize(clone(def)));\n    }\n  }]);\n\n  return Template;\n}();\n\nexport { Template as default };\nmix(Template, EmitterMixin);\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @protected\n */\n\nexport var TemplateBinding = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n   *\n   * @param {module:ui/template~TemplateDefinition} def The definition of the binding.\n   */\n  function TemplateBinding(def) {\n    _classCallCheck(this, TemplateBinding);\n\n    Object.assign(this, def);\n    /**\n     * An observable instance of the binding. It either:\n     *\n     * * provides the attribute with the value,\n     * * or passes the event when a corresponding DOM event is fired.\n     *\n     * @member {module:utils/observablemixin~ObservableMixin} module:ui/template~TemplateBinding#observable\n     */\n\n    /**\n     * An {@link module:utils/emittermixin~Emitter} used by the binding to:\n     *\n     * * listen to the attribute change in the {@link module:ui/template~TemplateBinding#observable},\n     * * or listen to the event in the DOM.\n     *\n     * @member {module:utils/emittermixin~EmitterMixin} module:ui/template~TemplateBinding#emitter\n     */\n\n    /**\n     * The name of the {@link module:ui/template~TemplateBinding#observable observed attribute}.\n     *\n     * @member {String} module:ui/template~TemplateBinding#attribute\n     */\n\n    /**\n     * A custom function to process the value of the {@link module:ui/template~TemplateBinding#attribute}.\n     *\n     * @member {Function} [module:ui/template~TemplateBinding#callback]\n     */\n  }\n  /**\n   * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n   * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n   * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n   *\n   * @param {Node} [node] A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n   * @returns {*} The value of {@link module:ui/template~TemplateBinding#attribute} in\n   * {@link module:ui/template~TemplateBinding#observable}.\n   */\n\n\n  _createClass(TemplateBinding, [{\n    key: \"getValue\",\n    value: function getValue(node) {\n      var value = this.observable[this.attribute];\n      return this.callback ? this.callback(value, node) : value;\n    }\n    /**\n     * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n     * value of {@link module:ui/template~TemplateValueSchema}.\n     *\n     * @param {module:ui/template~TemplateValueSchema} schema A full schema to generate an attribute or text in the DOM.\n     * @param {Function} updater A DOM updater function used to update the native DOM attribute or text.\n     * @param {module:ui/template~RenderData} data Rendering data.\n     * @returns {Function} A function to sever the listener binding.\n     */\n\n  }, {\n    key: \"activateAttributeListener\",\n    value: function activateAttributeListener(schema, updater, data) {\n      var _this2 = this;\n\n      var callback = function callback() {\n        return syncValueSchemaValue(schema, updater, data);\n      };\n\n      this.emitter.listenTo(this.observable, 'change:' + this.attribute, callback); // Allows revert of the listener.\n\n      return function () {\n        _this2.emitter.stopListening(_this2.observable, 'change:' + _this2.attribute, callback);\n      };\n    }\n  }]);\n\n  return TemplateBinding;\n}();\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @protected\n */\n\nexport var TemplateToBinding = /*#__PURE__*/function (_TemplateBinding) {\n  _inherits(TemplateToBinding, _TemplateBinding);\n\n  function TemplateToBinding() {\n    _classCallCheck(this, TemplateToBinding);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TemplateToBinding).apply(this, arguments));\n  }\n\n  _createClass(TemplateToBinding, [{\n    key: \"activateDomEventListener\",\n\n    /**\n     * Activates the listener for the native DOM event, which when fired, is propagated by\n     * the {@link module:ui/template~TemplateBinding#emitter}.\n     *\n     * @param {String} domEvtName The name of the native DOM event.\n     * @param {String} domSelector The selector in the DOM to filter delegated events.\n     * @param {module:ui/template~RenderData} data Rendering data.\n     * @returns {Function} A function to sever the listener binding.\n     */\n    value: function activateDomEventListener(domEvtName, domSelector, data) {\n      var _this3 = this;\n\n      var callback = function callback(evt, domEvt) {\n        if (!domSelector || domEvt.target.matches(domSelector)) {\n          if (typeof _this3.eventNameOrFunction == 'function') {\n            _this3.eventNameOrFunction(domEvt);\n          } else {\n            _this3.observable.fire(_this3.eventNameOrFunction, domEvt);\n          }\n        }\n      };\n\n      this.emitter.listenTo(data.node, domEvtName, callback); // Allows revert of the listener.\n\n      return function () {\n        _this3.emitter.stopListening(data.node, domEvtName, callback);\n      };\n    }\n  }]);\n\n  return TemplateToBinding;\n}(TemplateBinding);\n/**\n * Describes a binding to {@link module:utils/observablemixin~ObservableMixin} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @protected\n */\n\nexport var TemplateIfBinding = /*#__PURE__*/function (_TemplateBinding2) {\n  _inherits(TemplateIfBinding, _TemplateBinding2);\n\n  function TemplateIfBinding() {\n    _classCallCheck(this, TemplateIfBinding);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TemplateIfBinding).apply(this, arguments));\n  }\n\n  _createClass(TemplateIfBinding, [{\n    key: \"getValue\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function getValue(node) {\n      var value = _get(_getPrototypeOf(TemplateIfBinding.prototype), \"getValue\", this).call(this, node);\n\n      return isFalsy(value) ? false : this.valueIfTrue || true;\n    }\n    /**\n     * The value of the DOM attribute or text to be set if the {@link module:ui/template~TemplateBinding#attribute} in\n     * {@link module:ui/template~TemplateBinding#observable} is `true`.\n     *\n     * @member {String} [module:ui/template~TemplateIfBinding#valueIfTrue]\n     */\n\n  }]);\n\n  return TemplateIfBinding;\n}(TemplateBinding); // Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n// {@link module:ui/template~TemplateBinding}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @returns {Boolean}\n\nfunction hasTemplateBinding(schema) {\n  if (!schema) {\n    return false;\n  } // Normalize attributes with additional data like namespace:\n  //\n  //\t\tclass: {\n  //\t\t\tns: 'abc',\n  //\t\t\tvalue: [ ... ]\n  //\t\t}\n  //\n\n\n  if (schema.value) {\n    schema = schema.value;\n  }\n\n  if (Array.isArray(schema)) {\n    return schema.some(hasTemplateBinding);\n  } else if (schema instanceof TemplateBinding) {\n    return true;\n  }\n\n  return false;\n} // Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n// an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n// items.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n// @returns {Array}\n\n\nfunction getValueSchemaValue(schema, node) {\n  return schema.map(function (schemaItem) {\n    // Process {@link module:ui/template~TemplateBinding} bindings.\n    if (schemaItem instanceof TemplateBinding) {\n      return schemaItem.getValue(node);\n    } // All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n\n\n    return schemaItem;\n  });\n} // A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n// constructed from {@link module:ui/template~TemplateValueSchema}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Function} updater A function which updates the DOM (like attribute or text).\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n\n\nfunction syncValueSchemaValue(schema, updater, _ref2) {\n  var node = _ref2.node;\n  var value = getValueSchemaValue(schema, node); // Check if schema is a single Template.bind.if, like:\n  //\n  //\t\tclass: Template.bind.if( 'foo' )\n  //\n\n  if (schema.length == 1 && schema[0] instanceof TemplateIfBinding) {\n    value = value[0];\n  } else {\n    value = value.reduce(arrayValueReducer, '');\n  }\n\n  if (isFalsy(value)) {\n    updater.remove();\n  } else {\n    updater.set(value);\n  }\n} // Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset `textContent`.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @returns {Object}\n\n\nfunction getTextUpdater(node) {\n  return {\n    set: function set(value) {\n      node.textContent = value;\n    },\n    remove: function remove() {\n      node.textContent = '';\n    }\n  };\n} // Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset an attribute.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} attrName Name of the attribute to be modified.\n// @param {String} [ns=null] Namespace to use.\n// @returns {Object}\n\n\nfunction getAttributeUpdater(el, attrName, ns) {\n  return {\n    set: function set(value) {\n      el.setAttributeNS(ns, attrName, value);\n    },\n    remove: function remove() {\n      el.removeAttributeNS(ns, attrName);\n    }\n  };\n} // Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of CSSStyleDeclaration to set or remove a style.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} styleName Name of the style to be modified.\n// @returns {Object}\n\n\nfunction getStyleUpdater(el, styleName) {\n  return {\n    set: function set(value) {\n      el.style[styleName] = value;\n    },\n    remove: function remove() {\n      el.style[styleName] = null;\n    }\n  };\n} // Clones definition of the template.\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition}\n\n\nfunction clone(def) {\n  var clone = cloneDeepWith(def, function (value) {\n    // Don't clone the `Template.bind`* bindings because of the references to Observable\n    // and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n    // cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n    // along with the definition.\n    //\n    // Don't clone Template instances if provided as a child. They're simply #render()ed\n    // and nothing should interfere.\n    //\n    // Also don't clone View instances if provided as a child of the Template. The template\n    // instance will be extracted from the View during the normalization and there's no need\n    // to clone it.\n    if (value && (value instanceof TemplateBinding || isTemplate(value) || isView(value) || isViewCollection(value))) {\n      return value;\n    }\n  });\n  return clone;\n} // Normalizes given {@link module:ui/template~TemplateDefinition}.\n//\n// See:\n//  * {@link normalizeAttributes}\n//  * {@link normalizeListeners}\n//  * {@link normalizePlainTextDefinition}\n//  * {@link normalizeTextDefinition}\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition} Normalized definition.\n\n\nfunction normalize(def) {\n  if (typeof def == 'string') {\n    def = normalizePlainTextDefinition(def);\n  } else if (def.text) {\n    normalizeTextDefinition(def);\n  }\n\n  if (def.on) {\n    def.eventListeners = normalizeListeners(def.on); // Template mixes EmitterMixin, so delete #on to avoid collision.\n\n    delete def.on;\n  }\n\n  if (!def.text) {\n    if (def.attributes) {\n      normalizeAttributes(def.attributes);\n    }\n\n    var children = [];\n\n    if (def.children) {\n      if (isViewCollection(def.children)) {\n        children.push(def.children);\n      } else {\n        var _iterator6 = _createForOfIteratorHelper(def.children),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var child = _step6.value;\n\n            if (isTemplate(child) || isView(child) || isNode(child)) {\n              children.push(child);\n            } else {\n              children.push(new Template(child));\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n    }\n\n    def.children = children;\n  }\n\n  return def;\n} // Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tattributes: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: {\n//\t\t\t\tvalue: 'bar'\n//\t\t\t}\n//\t\t}\n//\n// becomes\n//\n//\t\tattributes: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: {\n//\t\t\t\tvalue: [ 'bar' ]\n//\t\t\t}\n//\t\t}\n//\n// @param {Object} attributes\n\n\nfunction normalizeAttributes(attributes) {\n  for (var a in attributes) {\n    if (attributes[a].value) {\n      attributes[a].value = toArray(attributes[a].value);\n    }\n\n    arrayify(attributes, a);\n  }\n} // Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\ton: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// becomes\n//\n//\t\ton: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// @param {Object} listeners\n// @returns {Object} Object containing normalized listeners.\n\n\nfunction normalizeListeners(listeners) {\n  for (var l in listeners) {\n    arrayify(listeners, l);\n  }\n\n  return listeners;\n} // Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n//\n//\t\t\"foo\"\n//\n// becomes\n//\n//\t\t{ text: [ 'foo' ] },\n//\n// @param {String} def\n// @returns {module:ui/template~TemplateDefinition} Normalized template definition.\n\n\nfunction normalizePlainTextDefinition(def) {\n  return {\n    text: [def]\n  };\n} // Normalizes text {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tchildren: [\n//\t\t\t{ text: 'def' },\n//\t\t\t{ text: {@link module:ui/template~TemplateBinding} }\n//\t\t]\n//\n// becomes\n//\n//\t\tchildren: [\n//\t\t\t{ text: [ 'def' ] },\n//\t\t\t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n//\t\t]\n//\n// @param {module:ui/template~TemplateDefinition} def\n\n\nfunction normalizeTextDefinition(def) {\n  def.text = toArray(def.text);\n} // Wraps an entry in Object in an Array, if not already one.\n//\n//\t\t{\n//\t\t\tx: 'y',\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// becomes\n//\n//\t\t{\n//\t\t\tx: [ 'y' ],\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// @param {Object} obj\n// @param {String} key\n\n\nfunction arrayify(obj, key) {\n  obj[key] = toArray(obj[key]);\n} // A helper which concatenates the value avoiding unwanted\n// leading white spaces.\n//\n// @param {String} prev\n// @param {String} cur\n// @returns {String}\n\n\nfunction arrayValueReducer(prev, cur) {\n  if (isFalsy(cur)) {\n    return prev;\n  } else if (isFalsy(prev)) {\n    return cur;\n  } else {\n    return \"\".concat(prev, \" \").concat(cur);\n  }\n} // Extends one object defined in the following format:\n//\n//\t\t{\n//\t\t\tkey1: [Array1],\n//\t\t\tkey2: [Array2],\n//\t\t\t...\n//\t\t\tkeyN: [ArrayN]\n//\t\t}\n//\n// with another object of the same data format.\n//\n// @param {Object} obj Base object.\n// @param {Object} ext Object extending base.\n// @returns {String}\n\n\nfunction extendObjectValueArray(obj, ext) {\n  for (var a in ext) {\n    if (obj[a]) {\n      var _obj$a;\n\n      (_obj$a = obj[a]).push.apply(_obj$a, _toConsumableArray(ext[a]));\n    } else {\n      obj[a] = ext[a];\n    }\n  }\n} // A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n// with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n//\n// @param {module:ui/template~Template} def A template instance to be extended.\n// @param {module:ui/template~TemplateDefinition} def A definition which is to extend the template instance.\n// @param {Object} Error context.\n\n\nfunction extendTemplate(template, def) {\n  if (def.attributes) {\n    if (!template.attributes) {\n      template.attributes = {};\n    }\n\n    extendObjectValueArray(template.attributes, def.attributes);\n  }\n\n  if (def.eventListeners) {\n    if (!template.eventListeners) {\n      template.eventListeners = {};\n    }\n\n    extendObjectValueArray(template.eventListeners, def.eventListeners);\n  }\n\n  if (def.text) {\n    var _template$text;\n\n    (_template$text = template.text).push.apply(_template$text, _toConsumableArray(def.text));\n  }\n\n  if (def.children && def.children.length) {\n    if (template.children.length != def.children.length) {\n      /**\n       * The number of children in extended definition does not match.\n       *\n       * @error ui-template-extend-children-mismatch\n       */\n      throw new CKEditorError('ui-template-extend-children-mismatch', template);\n    }\n\n    var childIndex = 0;\n\n    var _iterator7 = _createForOfIteratorHelper(def.children),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var childDef = _step7.value;\n        extendTemplate(template.children[childIndex++], childDef);\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n  }\n} // Checks if value is \"falsy\".\n// Note: 0 (Number) is not \"falsy\" in this context.\n//\n// @private\n// @param {*} value Value to be checked.\n\n\nfunction isFalsy(value) {\n  return !value && value !== 0;\n} // Checks if the item is an instance of {@link module:ui/view~View}\n//\n// @private\n// @param {*} value Value to be checked.\n\n\nfunction isView(item) {\n  return item instanceof View;\n} // Checks if the item is an instance of {@link module:ui/template~Template}\n//\n// @private\n// @param {*} value Value to be checked.\n\n\nfunction isTemplate(item) {\n  return item instanceof Template;\n} // Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n//\n// @private\n// @param {*} value Value to be checked.\n\n\nfunction isViewCollection(item) {\n  return item instanceof ViewCollection;\n} // Creates an empty skeleton for {@link module:ui/template~Template#revert}\n// data.\n//\n// @private\n\n\nfunction getEmptyRevertData() {\n  return {\n    children: [],\n    bindings: [],\n    attributes: {}\n  };\n} // Checks whether an attribute should be extended when\n// {@link module:ui/template~Template#apply} is called.\n//\n// @private\n// @param {String} attrName Attribute name to check.\n\n\nfunction shouldExtend(attrName) {\n  return attrName == 'class' || attrName == 'style';\n}\n/**\n * A definition of the {@link module:ui/template~Template}. It describes what kind of\n * node a template will render (HTML element or text), attributes of an element, DOM event\n * listeners and children.\n *\n * Also see:\n * * {@link module:ui/template~TemplateValueSchema} to learn about HTML element attributes,\n * * {@link module:ui/template~TemplateListenerSchema} to learn about DOM event listeners.\n *\n * A sample definition on an HTML element can look like this:\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\ttag: 'span',\n *\t\t\t\t\tattributes: { ... },\n *\t\t\t\t\tchildren: [ ... ],\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\ttext: 'staticâ€“text'\n *\t\t\t\t},\n *\t\t\t\t'also-staticâ€“text',\n *\t\t\t],\n *\t\t\tattributes: {\n *\t\t\t\tclass: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tid: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tstyle: {@link module:ui/template~TemplateValueSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\t'click': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// Document.querySelector format is also accepted.\n *\t\t\t\t'keyup@a.some-class': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t}\n *\t\t} );\n *\n * A {@link module:ui/view~View}, another {@link module:ui/template~Template} or a native DOM node\n * can also become a child of a template. When a view is passed, its {@link module:ui/view~View#element} is used:\n *\n *\t\tconst view = new SomeView();\n *\t\tconst childTemplate = new Template( { ... } );\n *\t\tconst childNode = document.createElement( 'b' );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: [\n *\t\t\t\t// view#element will be added as a child of this <p>.\n *\t\t\t\tview,\n *\n * \t\t\t\t// The output of childTemplate.render() will be added here.\n *\t\t\t\tchildTemplate,\n *\n *\t\t\t\t// Native DOM nodes are included directly in the rendered output.\n *\t\t\t\tchildNode\n *\t\t\t]\n *\t\t} );\n *\n * An entire {@link module:ui/viewcollection~ViewCollection} can be used as a child in the definition:\n *\n *\t\tconst collection = new ViewCollection();\n *\t\tcollection.add( someView );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: collection\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateDefinition\n * @type Object\n *\n * @property {String} tag See the template {@link module:ui/template~Template#tag} property.\n *\n * @property {Array.<module:ui/template~TemplateDefinition>} [children]\n * See the template {@link module:ui/template~Template#children} property.\n *\n * @property {Object.<String, module:ui/template~TemplateValueSchema>} [attributes]\n * See the template {@link module:ui/template~Template#attributes} property.\n *\n * @property {String|module:ui/template~TemplateValueSchema|Array.<String|module:ui/template~TemplateValueSchema>} [text]\n * See the template {@link module:ui/template~Template#text} property.\n *\n * @property {Object.<String, module:ui/template~TemplateListenerSchema>} [on]\n * See the template {@link module:ui/template~Template#eventListeners} property.\n */\n\n/**\n * Describes a value of an HTML element attribute or `textContent`. It allows combining multiple\n * data sources like static values and {@link module:utils/observablemixin~Observable} attributes.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn where to use it,\n * * {@link module:ui/template~Template.bind} to learn how to configure\n * {@link module:utils/observablemixin~Observable} attribute bindings,\n * * {@link module:ui/template~Template#render} to learn how to render a template,\n * * {@link module:ui/template~BindChain#to `to()`} and {@link module:ui/template~BindChain#if `if()`}\n * methods to learn more about bindings.\n *\n * Attribute values can be described in many different ways:\n *\n *\t\t// Bind helper will create bindings to attributes of the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// A plain string schema.\n *\t\t\t\t'class': 'static-text',\n *\n *\t\t\t\t// An object schema, binds to the \"foo\" attribute of the\n *\t\t\t\t// observable and follows its value.\n *\t\t\t\t'class': bind.to( 'foo' ),\n *\n *\t\t\t\t// An array schema, combines the above.\n *\t\t\t\t'class': [\n *\t\t\t\t\t'static-text',\n *\t\t\t\t\tbind.to( 'bar', () => { ... } ),\n *\n * \t\t\t\t\t// Bindings can also be conditional.\n *\t\t\t\t\tbind.if( 'baz', 'class-when-baz-is-true' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema, with a custom namespace, e.g. useful for creating SVGs.\n *\t\t\t\t'class': {\n *\t\t\t\t\tns: 'http://ns.url',\n *\t\t\t\t\tvalue: [\n *\t\t\t\t\t\tbind.if( 'baz', 'value-when-true' ),\n *\t\t\t\t\t\t'static-text'\n *\t\t\t\t\t]\n *\t\t\t\t},\n *\n *\t\t\t\t// An object schema, specific for styles.\n *\t\t\t\tstyle: {\n *\t\t\t\t\tcolor: 'red',\n *\t\t\t\t\tbackgroundColor: bind.to( 'qux', () => { ... } )\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * Text nodes can also have complex values:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\t// Will render a \"foo\" text node.\n *\t\tnew Template( {\n *\t\t\ttext: 'foo'\n *\t\t} );\n *\n *\t\t// Will render a \"static text: {observable.foo}\" text node.\n *\t\t// The text of the node will be updated as the \"foo\" attribute changes.\n *\t\tnew Template( {\n *\t\t\ttext: [\n *\t\t\t\t'static text: ',\n *\t\t\t\tbind.to( 'foo', () => { ... } )\n *\t\t\t]\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateValueSchema\n * @type {Object|String|Array}\n */\n\n/**\n * Describes an event listener attached to an HTML element. Such listener can propagate DOM events\n * through an {@link module:utils/observablemixin~Observable} instance, execute custom callbacks\n * or both, if necessary.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn more about template definitions,\n * * {@link module:ui/template~BindChain#to `to()`} method to learn more about bindings.\n *\n * Check out different ways of attaching event listeners below:\n *\n *\t\t// Bind helper will propagate events through the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\ton: {\n *\t\t\t\t// An object schema. The observable will fire the \"clicked\" event upon DOM \"click\".\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\n *\t\t\t\t// An object schema. It will work for \"click\" event on \"a.foo\" children only.\n *\t\t\t\t'click@a.foo': bind.to( 'clicked' )\n *\n *\t\t\t\t// An array schema, makes the observable propagate multiple events.\n *\t\t\t\tclick: [\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( 'executed' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema with a custom callback.\n *\t\t\t\t'click@a.foo': {\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( evt => {\n *\t\t\t\t\t\tconsole.log( `${ evt.target } has been clicked!` );\n *\t\t\t\t\t} }\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateListenerSchema\n * @type {Object|String|Array}\n */\n\n/**\n * The return value of {@link ~Template.bind `Template.bind()`}. It provides `to()` and `if()`\n * methods to create the {@link module:utils/observablemixin~Observable observable} attribute and event bindings.\n *\n * @interface module:ui/template~BindChain\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to either:\n *\n * * an HTML element attribute or a text node `textContent`, so it remains in sync with the observable\n * attribute as it changes,\n * * or an HTML element DOM event, so the DOM events are propagated through an observable.\n *\n * Some common use cases of `to()` bindings are presented below:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// class=\"...\" attribute gets bound to `observable#a`\n *\t\t\t\tclass: bind.to( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t// <p>...</p> gets bound to observable#b; always `toUpperCase()`.\n *\t\t\t\t{\n *\t\t\t\t\ttext: bind.to( 'b', ( value, node ) => value.toUpperCase() )\n *\t\t\t\t}\n *\t\t\t],\n *\t\t\ton: {\n *\t\t\t\tclick: [\n *\t\t\t\t\t// An observable will fire \"clicked\" upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\n *\t\t\t\t\t// A custom callback will be executed upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( () => {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t} )\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} ).render();\n *\n * Learn more about using `to()` in the {@link module:ui/template~TemplateValueSchema} and\n * {@link module:ui/template~TemplateListenerSchema}.\n *\n * @method #to\n * @param {String|Function} eventNameOrFunctionOrAttribute An attribute name of\n * {@link module:utils/observablemixin~Observable} or a DOM event name or an event callback.\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to an HTML element attribute or a text\n * node `textContent` so it remains in sync with the observable attribute as it changes.\n *\n * Unlike {@link module:ui/template~BindChain#to}, it controls the presence of the attribute or `textContent`\n * depending on the \"falseness\" of an {@link module:utils/observablemixin~Observable} attribute.\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'input',\n *\t\t\tattributes: {\n *\t\t\t\t// <input checked> when `observable#a` is not undefined/null/false/''\n *\t\t\t\t// <input> when `observable#a` is undefined/null/false\n *\t\t\t\tchecked: bind.if( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\t// <input>\"b-is-not-set\"</input> when `observable#b` is undefined/null/false/''\n *\t\t\t\t\t// <input></input> when `observable#b` is not \"falsy\"\n *\t\t\t\t\ttext: bind.if( 'b', 'b-is-not-set', ( value, node ) => !value )\n *\t\t\t\t}\n *\t\t\t]\n *\t\t} ).render();\n *\n * Learn more about using `if()` in the {@link module:ui/template~TemplateValueSchema}.\n *\n * @method #if\n * @param {String} attribute An attribute name of {@link module:utils/observablemixin~Observable} used in the binding.\n * @param {String} [valueIfTrue] Value set when the {@link module:utils/observablemixin~Observable} attribute is not\n * undefined/null/false/'' (empty string).\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * The {@link module:ui/template~Template#_renderNode} configuration.\n *\n * @private\n * @interface module:ui/template~RenderData\n */\n\n/**\n * Tells {@link module:ui/template~Template#_renderNode} to render\n * children into `DocumentFragment` first and then append the fragment\n * to the parent element. It is a speed optimization.\n *\n * @member {Boolean} #intoFragment\n */\n\n/**\n * A node which is being rendered.\n *\n * @member {HTMLElement|Text} #node\n */\n\n/**\n * Indicates whether the {@module:ui/template~RenderNodeOptions#node} has\n * been provided by {@module:ui/template~Template#apply}.\n *\n * @member {Boolean} #isApplying\n */\n\n/**\n * An object storing the data that helps {@module:ui/template~Template#revert}\n * bringing back an element to its initial state, i.e. before\n * {@module:ui/template~Template#apply} was called.\n *\n * @member {Object} #revertData\n */","map":null,"metadata":{},"sourceType":"module"}