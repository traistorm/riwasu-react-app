{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapNativeSuper\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/* globals console */\n\n/**\n * URL to the documentation with error codes.\n */\nexport var DOCUMENTATION_URL = 'https://ckeditor.com/docs/ckeditor5/latest/support/error-codes.html';\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use\n * {@link module:utils/ckeditorerror~logWarning `logWarning()`} and\n * {@link module:utils/ckeditorerror~logError `logError()`}\n * to improve developers experience and let them see the a working editor as soon as possible.\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tthrow new CKEditorError( 'plugin-load', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * @extends Error\n */\n\nvar CKEditorError = /*#__PURE__*/function (_Error) {\n  _inherits(CKEditorError, _Error);\n\n  /**\n   * Creates an instance of the CKEditorError class.\n   *\n   * @param {String} errorName The error id in an `error-name` format. A link to this error documentation page will be added\n   * to the thrown error's `message`.\n   * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n   * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n   * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n   * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n   * to check if the object works as the context.\n   * @param {Object} [data] Additional data describing the error. A stringified version of this object\n   * will be appended to the error message, so the data are quickly visible in the console. The original\n   * data object will also be later available under the {@link #data} property.\n   */\n  function CKEditorError(errorName, context, data) {\n    var _this;\n\n    _classCallCheck(this, CKEditorError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CKEditorError).call(this, getErrorMessage(errorName, data)));\n    /**\n     * @type {String}\n     */\n\n    _this.name = 'CKEditorError';\n    /**\n     * A context of the error by which the Watchdog is able to determine which editor crashed.\n     *\n     * @type {Object|null}\n     */\n\n    _this.context = context;\n    /**\n     * The additional error data passed to the constructor. Undefined if none was passed.\n     *\n     * @type {Object|undefined}\n     */\n\n    _this.data = data;\n    return _this;\n  }\n  /**\n   * Checks if the error is of the `CKEditorError` type.\n   * @returns {Boolean}\n   */\n\n\n  _createClass(CKEditorError, [{\n    key: \"is\",\n    value: function is(type) {\n      return type === 'CKEditorError';\n    }\n    /**\n     * A utility that ensures that the thrown error is a {@link module:utils/ckeditorerror~CKEditorError} one.\n     * It is useful when combined with the {@link module:watchdog/watchdog~Watchdog} feature, which can restart the editor in case\n     * of a {@link module:utils/ckeditorerror~CKEditorError} error.\n     *\n     * @static\n     * @param {Error} err The error to rethrow.\n     * @param {Object} context An object connected through properties with the editor instance. This context will be used\n     * by the watchdog to verify which editor should be restarted.\n     */\n\n  }], [{\n    key: \"rethrowUnexpectedError\",\n    value: function rethrowUnexpectedError(err, context) {\n      if (err.is && err.is('CKEditorError')) {\n        throw err;\n      }\n      /**\n       * An unexpected error occurred inside the CKEditor 5 codebase. This error will look like the original one\n       * to make the debugging easier.\n       *\n       * This error is only useful when the editor is initialized using the {@link module:watchdog/watchdog~Watchdog} feature.\n       * In case of such error (or any {@link module:utils/ckeditorerror~CKEditorError} error) the watchdog should restart the editor.\n       *\n       * @error unexpected-error\n       */\n\n\n      var error = new CKEditorError(err.message, context); // Restore the original stack trace to make the error look like the original one.\n      // See https://github.com/ckeditor/ckeditor5/issues/5595 for more details.\n\n      error.stack = err.stack;\n      throw error;\n    }\n  }]);\n\n  return CKEditorError;\n}(_wrapNativeSuper(Error));\n/**\n * Logs a warning to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log a warning to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\tlogWarning( 'toolbarview-item-unavailable', { name } );\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to throw an error and when to log\n * a warning or an error to the console.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\n\n\nexport { CKEditorError as default };\nexport function logWarning(errorName, data) {\n  var _console;\n\n  (_console = console).warn.apply(_console, _toConsumableArray(formatConsoleArguments(errorName, data)));\n}\n/**\n * Logs an error to the console with a properly formatted message and adds a link to the documentation.\n * Use whenever you want to log an error to the console.\n *\n *\t\t/**\n *\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t * name does not exist, so it was omitted when rendering the toolbar.\n *\t\t *\n *\t\t * @error toolbarview-item-unavailable\n *\t\t * @param {String} name The name of the component.\n *\t\t * /\n *\t\t logError( 'toolbarview-item-unavailable', { name } );\n *\n * **Note**: In most cases logging a warning using {@link module:utils/ckeditorerror~logWarning} is enough.\n *\n * See also {@link module:utils/ckeditorerror~CKEditorError} for an explanation when to use each method.\n *\n * @param {String} errorName The error name to be logged.\n * @param {Object} [data] Additional data to be logged.\n */\n\nexport function logError(errorName, data) {\n  var _console2;\n\n  (_console2 = console).error.apply(_console2, _toConsumableArray(formatConsoleArguments(errorName, data)));\n} // Returns formatted link to documentation message.\n//\n// @private\n// @param {String} errorName\n// @returns {string}\n\nfunction getLinkToDocumentationMessage(errorName) {\n  return \"\\nRead more: \".concat(DOCUMENTATION_URL, \"#error-\").concat(errorName);\n} // Returns formatted error message.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {string}\n\n\nfunction getErrorMessage(errorName, data) {\n  var processedObjects = new WeakSet();\n\n  var circularReferencesReplacer = function circularReferencesReplacer(key, value) {\n    if (typeof value === 'object' && value !== null) {\n      if (processedObjects.has(value)) {\n        return \"[object \".concat(value.constructor.name, \"]\");\n      }\n\n      processedObjects.add(value);\n    }\n\n    return value;\n  };\n\n  var stringifiedData = data ? \" \".concat(JSON.stringify(data, circularReferencesReplacer)) : '';\n  var documentationLink = getLinkToDocumentationMessage(errorName);\n  return errorName + stringifiedData + documentationLink;\n} // Returns formatted console error arguments.\n//\n// @private\n// @param {String} errorName\n// @param {Object} [data]\n// @returns {Array}\n\n\nfunction formatConsoleArguments(errorName, data) {\n  var documentationMessage = getLinkToDocumentationMessage(errorName);\n  return data ? [errorName, data, documentationMessage] : [errorName, documentationMessage];\n}","map":null,"metadata":{},"sourceType":"module"}