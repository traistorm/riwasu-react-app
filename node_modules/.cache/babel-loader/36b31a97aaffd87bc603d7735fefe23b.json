{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'formatBlock',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    var context = core.context;\n    context.formatBlock = {\n      targetText: targetElement.querySelector('.txt'),\n      targetTooltip: targetElement.parentNode.querySelector('.se-tooltip-text'),\n      _formatList: null,\n      currentFormat: ''\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    /** add event listeners */\n\n    listDiv.querySelector('ul').addEventListener('click', this.pickUp.bind(core));\n    context.formatBlock._formatList = listDiv.querySelectorAll('li button');\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** empty memory */\n\n    listDiv = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var option = core.options;\n    var lang_toolbar = core.lang.toolbar;\n    var listDiv = core.util.createElement('DIV');\n    listDiv.className = 'se-submenu se-list-layer se-list-format';\n    var defaultFormats = ['p', 'div', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n    var formatList = !option.formats || option.formats.length === 0 ? defaultFormats : option.formats;\n    var list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n\n    for (var i = 0, len = formatList.length, format, tagName, command, name, h, attrs, className; i < len; i++) {\n      format = formatList[i];\n\n      if (typeof format === 'string' && defaultFormats.indexOf(format) > -1) {\n        tagName = format.toLowerCase();\n        command = tagName === 'blockquote' ? 'range' : tagName === 'pre' ? 'free' : 'replace';\n        h = /^h/.test(tagName) ? tagName.match(/\\d+/)[0] : '';\n        name = lang_toolbar['tag_' + (h ? 'h' : tagName)] + h;\n        className = '';\n        attrs = '';\n      } else {\n        tagName = format.tag.toLowerCase();\n        command = format.command;\n        name = format.name || tagName;\n        className = format.class;\n        attrs = className ? ' class=\"' + className + '\"' : '';\n      }\n\n      list += '<li>' + '<button type=\"button\" class=\"se-btn-list\" data-command=\"' + command + '\" data-value=\"' + tagName + '\" data-class=\"' + className + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + '<' + tagName + attrs + '>' + name + '</' + tagName + '>' + '</button></li>';\n    }\n\n    list += '</ul></div>';\n    listDiv.innerHTML = list;\n    return listDiv;\n  },\n\n  /**\n  * @Override core\n  */\n  active: function active(element) {\n    var formatTitle = this.lang.toolbar.formats;\n    var target = this.context.formatBlock.targetText;\n\n    if (!element) {\n      this.util.changeTxt(target, formatTitle);\n    } else if (this.util.isFormatElement(element)) {\n      var formatContext = this.context.formatBlock;\n      var formatList = formatContext._formatList;\n      var nodeName = element.nodeName.toLowerCase();\n      var className = (element.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim();\n\n      for (var i = 0, len = formatList.length, f; i < len; i++) {\n        f = formatList[i];\n\n        if (nodeName === f.getAttribute('data-value') && className === f.getAttribute('data-class')) {\n          formatTitle = f.title;\n          break;\n        }\n      }\n\n      this.util.changeTxt(target, formatTitle);\n      target.setAttribute('data-value', nodeName);\n      target.setAttribute('data-class', className);\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n  * @Override submenu\n  */\n  on: function on() {\n    var formatContext = this.context.formatBlock;\n    var formatList = formatContext._formatList;\n    var target = formatContext.targetText;\n    var currentFormat = (target.getAttribute('data-value') || '') + (target.getAttribute('data-class') || '');\n\n    if (currentFormat !== formatContext.currentFormat) {\n      for (var i = 0, len = formatList.length, f; i < len; i++) {\n        f = formatList[i];\n\n        if (currentFormat === f.getAttribute('data-value') + f.getAttribute('data-class')) {\n          this.util.addClass(f, 'active');\n        } else {\n          this.util.removeClass(f, 'active');\n        }\n      }\n\n      formatContext.currentFormat = currentFormat;\n    }\n  },\n  pickUp: function pickUp(e) {\n    var _this = this;\n\n    e.preventDefault();\n    e.stopPropagation();\n    var target = e.target;\n    var command = null,\n        value = null,\n        tag = null,\n        className = '';\n\n    while (!command && !/UL/i.test(target.tagName)) {\n      command = target.getAttribute('data-command');\n      value = target.getAttribute('data-value');\n      className = target.getAttribute('data-class');\n\n      if (command) {\n        tag = target.firstChild;\n        break;\n      }\n\n      target = target.parentNode;\n    }\n\n    if (!command) return; // blockquote\n\n    if (command === 'range') {\n      var rangeElement = tag.cloneNode(false);\n      this.applyRangeFormatElement(rangeElement);\n    } // free, replace\n    else {\n      var range = this.getRange();\n      var selectedFormsts = this.getSelectedElementsAndComponents(false);\n\n      if (selectedFormsts.length === 0) {\n        range = this.getRange_addLine(range, null);\n        selectedFormsts = this.getSelectedElementsAndComponents(false);\n        if (selectedFormsts.length === 0) return;\n      }\n\n      var startOffset = range.startOffset;\n      var endOffset = range.endOffset;\n      var util = this.util;\n      var first = selectedFormsts[0];\n      var last = selectedFormsts[selectedFormsts.length - 1];\n      var firstPath = util.getNodePath(range.startContainer, first, null, null);\n      var lastPath = util.getNodePath(range.endContainer, last, null, null); // remove selected list\n\n      var rlist = this.detachList(selectedFormsts, false);\n      if (rlist.sc) first = rlist.sc;\n      if (rlist.ec) last = rlist.ec; // change format tag\n\n      this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n      var modifiedFormsts = this.getSelectedElementsAndComponents(false); // free format\n\n      if (command === 'free') {\n        (function () {\n          var len = modifiedFormsts.length - 1;\n          var parentNode = modifiedFormsts[len].parentNode;\n          var freeElement = tag.cloneNode(false);\n          var focusElement = freeElement;\n\n          for (var i = len, f, html, before, next, inner, isComp, _first = true; i >= 0; i--) {\n            f = modifiedFormsts[i];\n            if (f === (!modifiedFormsts[i + 1] ? null : modifiedFormsts[i + 1].parentNode)) continue;\n            isComp = util.isComponent(f);\n            html = isComp ? '' : f.innerHTML.replace(/(?!>)\\s+(?=<)|\\n/g, ' ');\n            before = util.getParentElement(f, function (current) {\n              return current.parentNode === parentNode;\n            });\n\n            if (parentNode !== f.parentNode || isComp) {\n              if (util.isFormatElement(parentNode)) {\n                parentNode.parentNode.insertBefore(freeElement, parentNode.nextSibling);\n                parentNode = parentNode.parentNode;\n              } else {\n                parentNode.insertBefore(freeElement, before ? before.nextSibling : null);\n                parentNode = f.parentNode;\n              }\n\n              next = freeElement.nextSibling;\n\n              if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                freeElement.innerHTML += '<BR>' + next.innerHTML;\n                util.removeItem(next);\n              }\n\n              freeElement = tag.cloneNode(false);\n              _first = true;\n            }\n\n            inner = freeElement.innerHTML;\n            freeElement.innerHTML = (_first || !html || !inner || /<br>$/i.test(html) ? html : html + '<BR>') + inner;\n\n            if (i === 0) {\n              parentNode.insertBefore(freeElement, f);\n              next = f.nextSibling;\n\n              if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                freeElement.innerHTML += '<BR>' + next.innerHTML;\n                util.removeItem(next);\n              }\n\n              var prev = freeElement.previousSibling;\n\n              if (prev && freeElement.nodeName === prev.nodeName && util.isSameAttributes(freeElement, prev)) {\n                prev.innerHTML += '<BR>' + freeElement.innerHTML;\n                util.removeItem(freeElement);\n              }\n            }\n\n            if (!isComp) util.removeItem(f);\n            if (!!html) _first = false;\n          }\n\n          _this.setRange(focusElement, 0, focusElement, 0);\n        })();\n      } // replace format\n      else {\n        for (var i = 0, len = modifiedFormsts.length, node, newFormat; i < len; i++) {\n          node = modifiedFormsts[i];\n\n          if ((node.nodeName.toLowerCase() !== value.toLowerCase() || (node.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim() !== className) && !util.isComponent(node)) {\n            newFormat = tag.cloneNode(false);\n            util.copyFormatAttributes(newFormat, node);\n            newFormat.innerHTML = node.innerHTML;\n            node.parentNode.replaceChild(newFormat, node);\n          }\n\n          if (i === 0) first = newFormat || node;\n          if (i === len - 1) last = newFormat || node;\n          newFormat = null;\n        }\n\n        this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n      } // history stack\n\n\n      this.history.push(false);\n    }\n\n    this.submenuOff();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}