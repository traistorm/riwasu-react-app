{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/styles/background\n */\nimport { getShorthandValues, isAttachment, isColor, isPosition, isRepeat, isURL } from './utils';\n/**\n * Adds a background CSS styles processing rules.\n *\n *\t\teditor.data.addStyleProcessorRules( addBackgroundRules );\n *\n * The normalized value is stored as:\n *\n *\t\tconst styles = {\n *\t\t\tbackground: {\n *\t\t\t\tcolor,\n *\t\t\t\trepeat,\n *\t\t\t\tposition,\n *\t\t\t\tattachment,\n *\t\t\t\timage\n *\t\t\t}\n *\t\t};\n *\n * **Note**: Currently only `'background-color'` longhand value is parsed besides `'background'` shorthand. The reducer also supports only\n * `'background-color'` value.\n *\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n */\n\nexport function addBackgroundRules(stylesProcessor) {\n  stylesProcessor.setNormalizer('background', normalizeBackground);\n  stylesProcessor.setNormalizer('background-color', function (value) {\n    return {\n      path: 'background.color',\n      value: value\n    };\n  });\n  stylesProcessor.setReducer('background', function (value) {\n    var ret = [];\n    ret.push(['background-color', value.color]);\n    return ret;\n  });\n  stylesProcessor.setStyleRelation('background', ['background-color']);\n}\n\nfunction normalizeBackground(value) {\n  var background = {};\n  var parts = getShorthandValues(value);\n\n  var _iterator = _createForOfIteratorHelper(parts),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var part = _step.value;\n\n      if (isRepeat(part)) {\n        background.repeat = background.repeat || [];\n        background.repeat.push(part);\n      } else if (isPosition(part)) {\n        background.position = background.position || [];\n        background.position.push(part);\n      } else if (isAttachment(part)) {\n        background.attachment = part;\n      } else if (isColor(part)) {\n        background.color = part;\n      } else if (isURL(part)) {\n        background.image = part;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    path: 'background',\n    value: background\n  };\n}","map":null,"metadata":{},"sourceType":"module"}