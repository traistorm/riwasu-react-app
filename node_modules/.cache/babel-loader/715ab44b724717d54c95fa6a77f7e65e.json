{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/emptyelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\n\nvar EmptyElement = /*#__PURE__*/function (_Element) {\n  _inherits(EmptyElement, _Element);\n\n  /**\n   * Creates new instance of EmptyElement.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n   * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attrs] Collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into created element.\n   */\n  function EmptyElement(document, name, attrs, children) {\n    var _this;\n\n    _classCallCheck(this, EmptyElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EmptyElement).call(this, document, name, attrs, children));\n    /**\n     * Returns `null` because filler is not needed for EmptyElements.\n     *\n     * @method #getFillerOffset\n     * @returns {null} Always returns null.\n     */\n\n    _this.getFillerOffset = getFillerOffset;\n    return _this;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\temptyElement.is( 'emptyElement' ); // -> true\n   *\t\temptyElement.is( 'element' ); // -> true\n   *\t\temptyElement.is( 'node' ); // -> true\n   *\t\temptyElement.is( 'view:emptyElement' ); // -> true\n   *\t\temptyElement.is( 'view:element' ); // -> true\n   *\t\temptyElement.is( 'view:node' ); // -> true\n   *\n   *\t\temptyElement.is( 'model:element' ); // -> false\n   *\t\temptyElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an empty element, you can also check its\n   * {@link module:engine/view/emptyelement~EmptyElement#name name}:\n   *\n   *\t\temptyElement.is( 'element', 'img' ); // -> true if this is a img element\n   *\t\temptyElement.is( 'emptyElement', 'img' ); // -> same as above\n   *\t\ttext.is( 'element', 'img' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  _createClass(EmptyElement, [{\n    key: \"is\",\n    value: function is(type) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!name) {\n        return type === 'emptyElement' || type === 'view:emptyElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n      } else {\n        return name === this.name && (type === 'emptyElement' || type === 'view:emptyElement' || type === 'element' || type === 'view:element');\n      }\n    }\n    /**\n     * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n     * adding any child nodes to EmptyElement.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"_insertChild\",\n    value: function _insertChild(index, nodes) {\n      if (nodes && (nodes instanceof Node || Array.from(nodes).length > 0)) {\n        /**\n         * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n         *\n         * @error view-emptyelement-cannot-add\n         */\n        throw new CKEditorError('view-emptyelement-cannot-add', [this, nodes]);\n      }\n    }\n  }]);\n\n  return EmptyElement;\n}(Element); // Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\n\n\nexport { EmptyElement as default };\n\nfunction getFillerOffset() {\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}