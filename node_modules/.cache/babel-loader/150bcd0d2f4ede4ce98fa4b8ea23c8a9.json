{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/toggleimagecaptioncommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport ImageBlockEditing from '../image/imageblockediting';\n/**\n * The toggle image caption command.\n *\n * This command is registered by {@link module:image/imagecaption/imagecaptionediting~ImageCaptionEditing} as the\n * `'toggleImageCaption'` editor command.\n *\n * Executing this command:\n *\n * * either adds or removes the image caption of a selected image (depending on whether the caption is present or not),\n * * removes the image caption if the selection is anchored in one.\n *\n *\t\t// Toggle the presence of the caption.\n *\t\teditor.execute( 'toggleImageCaption' );\n *\n * **Note**: Upon executing this command, the selection will be set on the image if previously anchored in the caption element.\n *\n * **Note**: You can move the selection to the caption right away as it shows up upon executing this command by using\n * the `focusCaptionOnShow` option:\n *\n *\t\teditor.execute( 'toggleImageCaption', { focusCaptionOnShow: true } );\n *\n * @extends module:core/command~Command\n */\n\nvar ToggleImageCaptionCommand = /*#__PURE__*/function (_Command) {\n  _inherits(ToggleImageCaptionCommand, _Command);\n\n  function ToggleImageCaptionCommand() {\n    _classCallCheck(this, ToggleImageCaptionCommand);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ToggleImageCaptionCommand).apply(this, arguments));\n  }\n\n  _createClass(ToggleImageCaptionCommand, [{\n    key: \"refresh\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function refresh() {\n      var editor = this.editor;\n      var imageCaptionUtils = editor.plugins.get('ImageCaptionUtils'); // Only block images can get captions.\n\n      if (!editor.plugins.has(ImageBlockEditing)) {\n        this.isEnabled = false;\n        this.value = false;\n        return;\n      }\n\n      var selection = editor.model.document.selection;\n      var selectedElement = selection.getSelectedElement();\n\n      if (!selectedElement) {\n        var ancestorCaptionElement = imageCaptionUtils.getCaptionFromModelSelection(selection);\n        this.isEnabled = !!ancestorCaptionElement;\n        this.value = !!ancestorCaptionElement;\n        return;\n      } // Block images support captions by default but the command should also be enabled for inline\n      // images because toggling the caption when one is selected should convert it into a block image.\n\n\n      this.isEnabled = this.editor.plugins.get('ImageUtils').isImage(selectedElement);\n\n      if (!this.isEnabled) {\n        this.value = false;\n      } else {\n        this.value = !!imageCaptionUtils.getCaptionFromImageModelElement(selectedElement);\n      }\n    }\n    /**\n     * Executes the command.\n     *\n     *\t\teditor.execute( 'toggleImageCaption' );\n     *\n     * @param {Object} [options] Options for the executed command.\n     * @param {String} [options.focusCaptionOnShow] When true and the caption shows up, the selection will be moved into it straight away.\n     * @fires execute\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var focusCaptionOnShow = options.focusCaptionOnShow;\n      this.editor.model.change(function (writer) {\n        if (_this.value) {\n          _this._hideImageCaption(writer);\n        } else {\n          _this._showImageCaption(writer, focusCaptionOnShow);\n        }\n      });\n    }\n    /**\n     * Shows the caption of the `<imageBlock>` or `<imageInline>`. Also:\n     *\n     * * it converts `<imageInline>` to `<imageBlock>` to show the caption,\n     * * it attempts to restore the caption content from the `ImageCaptionEditing` caption registry,\n     * * it moves the selection to the caption right away, it the `focusCaptionOnShow` option was set.\n     *\n     * @private\n     * @param {module:engine/model/writer~Writer} writer\n     */\n\n  }, {\n    key: \"_showImageCaption\",\n    value: function _showImageCaption(writer, focusCaptionOnShow) {\n      var model = this.editor.model;\n      var selection = model.document.selection;\n      var imageCaptionEditing = this.editor.plugins.get('ImageCaptionEditing');\n      var selectedImage = selection.getSelectedElement();\n\n      var savedCaption = imageCaptionEditing._getSavedCaption(selectedImage); // Convert imageInline -> image first.\n\n\n      if (this.editor.plugins.get('ImageUtils').isInlineImage(selectedImage)) {\n        this.editor.execute('imageTypeBlock'); // Executing the command created a new model element. Let's pick it again.\n\n        selectedImage = selection.getSelectedElement();\n      } // Try restoring the caption from the ImageCaptionEditing plugin storage.\n\n\n      var newCaptionElement = savedCaption || writer.createElement('caption');\n      writer.append(newCaptionElement, selectedImage);\n\n      if (focusCaptionOnShow) {\n        writer.setSelection(newCaptionElement, 'in');\n      }\n    }\n    /**\n     * Hides the caption of a selected image (or an image caption the selection is anchored to).\n     *\n     * The content of the caption is stored in the `ImageCaptionEditing` caption registry to make this\n     * a reversible action.\n     *\n     * @private\n     * @param {module:engine/model/writer~Writer} writer\n     */\n\n  }, {\n    key: \"_hideImageCaption\",\n    value: function _hideImageCaption(writer) {\n      var editor = this.editor;\n      var selection = editor.model.document.selection;\n      var imageCaptionEditing = editor.plugins.get('ImageCaptionEditing');\n      var imageCaptionUtils = editor.plugins.get('ImageCaptionUtils');\n      var selectedImage = selection.getSelectedElement();\n      var captionElement;\n\n      if (selectedImage) {\n        captionElement = imageCaptionUtils.getCaptionFromImageModelElement(selectedImage);\n      } else {\n        captionElement = imageCaptionUtils.getCaptionFromModelSelection(selection);\n        selectedImage = captionElement.parent;\n      } // Store the caption content so it can be restored quickly if the user changes their mind even if they toggle image<->imageInline.\n\n\n      imageCaptionEditing._saveCaption(selectedImage, captionElement);\n\n      writer.setSelection(selectedImage, 'on');\n      writer.remove(captionElement);\n    }\n  }]);\n\n  return ToggleImageCaptionCommand;\n}(Command);\n\nexport { ToggleImageCaptionCommand as default };","map":null,"metadata":{},"sourceType":"module"}