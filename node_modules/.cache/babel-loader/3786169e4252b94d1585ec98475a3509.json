{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageinsert/ui/imageinsertpanelview\n */\nimport { icons } from 'ckeditor5/src/core';\nimport { ButtonView, View, SplitButtonView, ViewCollection, submitHandler, createDropdown, FocusCycler } from 'ckeditor5/src/ui';\nimport { Collection, FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport ImageInsertFormRowView from './imageinsertformrowview';\nimport '../../../theme/imageinsert.css';\n/**\n * The insert an image via URL view controller class.\n *\n * See {@link module:image/imageinsert/ui/imageinsertpanelview~ImageInsertPanelView}.\n *\n * @extends module:ui/view~View\n */\n\nvar ImageInsertPanelView = /*#__PURE__*/function (_View) {\n  _inherits(ImageInsertPanelView, _View);\n\n  /**\n   * Creates a view for the dropdown panel of {@link module:image/imageinsert/imageinsertui~ImageInsertUI}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {Object} [integrations] An integrations object that contains\n   * components (or tokens for components) to be shown in the panel view.\n   */\n  function ImageInsertPanelView(locale, integrations) {\n    var _this;\n\n    _classCallCheck(this, ImageInsertPanelView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageInsertPanelView).call(this, locale));\n\n    var _this$_createActionBu = _this._createActionButtons(locale),\n        insertButtonView = _this$_createActionBu.insertButtonView,\n        cancelButtonView = _this$_createActionBu.cancelButtonView;\n    /**\n     * The \"insert/update\" button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n\n    _this.insertButtonView = insertButtonView;\n    /**\n     * The \"cancel\" button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    _this.cancelButtonView = cancelButtonView;\n    /**\n     * The dropdown view.\n     *\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n    _this.dropdownView = _this._createDropdownView(locale);\n    /**\n     * The value of the URL input.\n     *\n     * @member {String} #imageURLInputValue\n     * @observable\n     */\n\n    _this.set('imageURLInputValue', '');\n    /**\n     * Tracks information about DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n\n    _this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    _this.keystrokes = new KeystrokeHandler();\n    /**\n     * A collection of views that can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    _this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    _this._focusCycler = new FocusCycler({\n      focusables: _this._focusables,\n      focusTracker: _this.focusTracker,\n      keystrokeHandler: _this.keystrokes,\n      actions: {\n        // Navigate form fields backwards using the Shift + Tab keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the Tab key.\n        focusNext: 'tab'\n      }\n    });\n    /**\n     * A collection of the defined integrations for inserting the images.\n     *\n     * @private\n     * @member {module:utils/collection~Collection}\n     */\n\n    _this.set('_integrations', new Collection());\n\n    if (integrations) {\n      var _loop = function _loop() {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            integration = _Object$entries$_i[0],\n            integrationView = _Object$entries$_i[1];\n\n        if (integration === 'insertImageViaUrl') {\n          integrationView.fieldView.bind('value').to(_assertThisInitialized(_assertThisInitialized(_this)), 'imageURLInputValue', function (value) {\n            return value || '';\n          });\n          integrationView.fieldView.on('input', function () {\n            _this.imageURLInputValue = integrationView.fieldView.element.value.trim();\n          });\n        }\n\n        integrationView.name = integration;\n\n        _this._integrations.add(integrationView);\n      };\n\n      for (var _i = 0, _Object$entries = Object.entries(integrations); _i < _Object$entries.length; _i++) {\n        _loop();\n      }\n    }\n\n    _this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-image-insert-form'],\n        tabindex: '-1'\n      },\n      children: [].concat(_toConsumableArray(_this._integrations), [new ImageInsertFormRowView(locale, {\n        children: [_this.insertButtonView, _this.cancelButtonView],\n        class: 'ck-image-insert-form__action-row'\n      })])\n    });\n\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(ImageInsertPanelView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(ImageInsertPanelView.prototype), \"render\", this).call(this);\n\n      submitHandler({\n        view: this\n      });\n      var childViews = [].concat(_toConsumableArray(this._integrations), [this.insertButtonView, this.cancelButtonView]);\n      childViews.forEach(function (v) {\n        // Register the view as focusable.\n        _this2._focusables.add(v); // Register the view in the focus tracker.\n\n\n        _this2.focusTracker.add(v.element);\n      }); // Start listening for the keystrokes coming from #element.\n\n      this.keystrokes.listenTo(this.element);\n\n      var stopPropagation = function stopPropagation(data) {\n        return data.stopPropagation();\n      }; // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n      // keystroke handler would take over the key management in the URL input. We need to prevent\n      // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n\n\n      this.keystrokes.set('arrowright', stopPropagation);\n      this.keystrokes.set('arrowleft', stopPropagation);\n      this.keystrokes.set('arrowup', stopPropagation);\n      this.keystrokes.set('arrowdown', stopPropagation); // Intercept the \"selectstart\" event, which is blocked by default because of the default behavior\n      // of the DropdownView#panelView.\n      // TODO: blocking \"selectstart\" in the #panelView should be configurable per–drop–down instance.\n\n      this.listenTo(childViews[0].element, 'selectstart', function (evt, domEvt) {\n        domEvt.stopPropagation();\n      }, {\n        priority: 'high'\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(ImageInsertPanelView.prototype), \"destroy\", this).call(this);\n\n      this.focusTracker.destroy();\n      this.keystrokes.destroy();\n    }\n    /**\n     * Returns a view of the integration.\n     *\n     * @param {String} name The name of the integration.\n     * @returns {module:ui/view~View}\n     */\n\n  }, {\n    key: \"getIntegration\",\n    value: function getIntegration(name) {\n      return this._integrations.find(function (integration) {\n        return integration.name === name;\n      });\n    }\n    /**\n     * Creates the dropdown view.\n     *\n     * @param {module:utils/locale~Locale} locale The localization services instance.\n     *\n     * @private\n     * @returns {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n  }, {\n    key: \"_createDropdownView\",\n    value: function _createDropdownView(locale) {\n      var t = locale.t;\n      var dropdownView = createDropdown(locale, SplitButtonView);\n      var splitButtonView = dropdownView.buttonView;\n      var panelView = dropdownView.panelView;\n      splitButtonView.set({\n        label: t('Insert image'),\n        icon: icons.image,\n        tooltip: true\n      });\n      panelView.extendTemplate({\n        attributes: {\n          class: 'ck-image-insert__panel'\n        }\n      });\n      return dropdownView;\n    }\n    /**\n     * Creates the following form controls:\n     *\n     * * {@link #insertButtonView},\n     * * {@link #cancelButtonView}.\n     *\n     * @param {module:utils/locale~Locale} locale The localization services instance.\n     *\n     * @private\n     * @returns {Object.<String,module:ui/view~View>}\n     */\n\n  }, {\n    key: \"_createActionButtons\",\n    value: function _createActionButtons(locale) {\n      var t = locale.t;\n      var insertButtonView = new ButtonView(locale);\n      var cancelButtonView = new ButtonView(locale);\n      insertButtonView.set({\n        label: t('Insert'),\n        icon: icons.check,\n        class: 'ck-button-save',\n        type: 'submit',\n        withText: true,\n        isEnabled: this.imageURLInputValue\n      });\n      cancelButtonView.set({\n        label: t('Cancel'),\n        icon: icons.cancel,\n        class: 'ck-button-cancel',\n        withText: true\n      });\n      insertButtonView.bind('isEnabled').to(this, 'imageURLInputValue', function (value) {\n        return !!value;\n      });\n      insertButtonView.delegate('execute').to(this, 'submit');\n      cancelButtonView.delegate('execute').to(this, 'cancel');\n      return {\n        insertButtonView: insertButtonView,\n        cancelButtonView: cancelButtonView\n      };\n    }\n    /**\n     * Focuses the first {@link #_focusables focusable} in the form.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._focusCycler.focusFirst();\n    }\n  }]);\n\n  return ImageInsertPanelView;\n}(View);\n/**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * e.g. by a click on {@link #insertButtonView}.\n *\n * @event submit\n */\n\n/**\n * Fired when the form view is canceled, e.g. by a click on {@link #cancelButtonView}.\n *\n * @event cancel\n */\n\n\nexport { ImageInsertPanelView as default };","map":null,"metadata":{},"sourceType":"module"}