{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { forwardRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowDown from '@rsuite/icons/legacy/ArrowDown';\nimport Spinner from '@rsuite/icons/legacy/Spinner';\nimport DropdownMenuCheckItem from '../Picker/DropdownMenuCheckItem';\nimport { getTreeNodeIndent } from '../utils/treeUtils';\nimport { useClassNames, CHECK_STATE, reactToString } from '../utils';\nvar CheckTreeNode = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      style = _ref.style,\n      className = _ref.className,\n      _ref$classPrefix = _ref.classPrefix,\n      classPrefix = _ref$classPrefix === void 0 ? 'check-tree-node' : _ref$classPrefix,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      layer = _ref.layer,\n      disabled = _ref.disabled,\n      allUncheckable = _ref.allUncheckable,\n      rtl = _ref.rtl,\n      loading = _ref.loading,\n      expand = _ref.expand,\n      hasChildren = _ref.hasChildren,\n      nodeData = _ref.nodeData,\n      focus = _ref.focus,\n      label = _ref.label,\n      uncheckable = _ref.uncheckable,\n      checkState = _ref.checkState,\n      onExpand = _ref.onExpand,\n      onSelect = _ref.onSelect,\n      onRenderTreeIcon = _ref.onRenderTreeIcon,\n      onRenderTreeNode = _ref.onRenderTreeNode,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"as\", \"style\", \"className\", \"classPrefix\", \"visible\", \"layer\", \"disabled\", \"allUncheckable\", \"rtl\", \"loading\", \"expand\", \"hasChildren\", \"nodeData\", \"focus\", \"label\", \"uncheckable\", \"checkState\", \"onExpand\", \"onSelect\", \"onRenderTreeIcon\", \"onRenderTreeNode\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      prefix = _useClassNames.prefix,\n      merge = _useClassNames.merge,\n      withClassPrefix = _useClassNames.withClassPrefix;\n\n  var getTitle = function getTitle() {\n    if (typeof label === 'string') {\n      return label;\n    } else if ( /*#__PURE__*/React.isValidElement(label)) {\n      var nodes = reactToString(label);\n      return nodes.join('');\n    }\n  };\n\n  var handleExpand = useCallback(function (event) {\n    var _event$nativeEvent, _event$nativeEvent$st; // stop propagation when using custom loading icon\n\n\n    event === null || event === void 0 ? void 0 : (_event$nativeEvent = event.nativeEvent) === null || _event$nativeEvent === void 0 ? void 0 : (_event$nativeEvent$st = _event$nativeEvent.stopImmediatePropagation) === null || _event$nativeEvent$st === void 0 ? void 0 : _event$nativeEvent$st.call(_event$nativeEvent);\n    onExpand === null || onExpand === void 0 ? void 0 : onExpand(nodeData);\n  }, [nodeData, onExpand]);\n  var handleSelect = useCallback(function (_value, event) {\n    if (disabled || uncheckable) {\n      return;\n    }\n\n    var isChecked = false;\n\n    if (checkState === CHECK_STATE.UNCHECK || checkState === CHECK_STATE.INDETERMINATE) {\n      isChecked = true;\n    }\n\n    if (checkState === CHECK_STATE.CHECK) {\n      isChecked = false;\n    }\n\n    var nextNodeData = _extends({}, nodeData, {\n      check: isChecked\n    });\n\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nextNodeData, event);\n  }, [disabled, checkState, uncheckable, nodeData, onSelect]);\n\n  var renderIcon = function renderIcon() {\n    var expandIconClasses = prefix('expand-icon', 'icon', {\n      expanded: expand\n    });\n    var expandIcon = /*#__PURE__*/React.createElement(ArrowDown, {\n      className: expandIconClasses\n    });\n\n    if (loading) {\n      expandIcon = /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('loading-icon')\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        spin: true\n      }));\n    }\n\n    if (typeof onRenderTreeIcon === 'function') {\n      var customIcon = onRenderTreeIcon(nodeData);\n      expandIcon = customIcon !== null ? /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('custom-icon')\n      }, customIcon) : expandIcon;\n    }\n\n    return hasChildren ? /*#__PURE__*/React.createElement(\"div\", {\n      role: \"button\",\n      tabIndex: -1,\n      \"data-ref\": nodeData.refKey,\n      className: prefix('expand-icon-wrapper'),\n      onClick: handleExpand\n    }, expandIcon) : null;\n  };\n\n  var renderLabel = function renderLabel() {\n    return /*#__PURE__*/React.createElement(DropdownMenuCheckItem, {\n      as: \"div\",\n      active: checkState === CHECK_STATE.CHECK,\n      indeterminate: checkState === CHECK_STATE.INDETERMINATE,\n      focus: focus,\n      checkable: !uncheckable,\n      disabled: disabled,\n      \"data-layer\": layer,\n      value: nodeData.refKey,\n      className: prefix('label'),\n      title: getTitle(),\n      onSelect: handleSelect\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: prefix('text-wrapper')\n    }, typeof onRenderTreeNode === 'function' ? onRenderTreeNode(nodeData) : label));\n  };\n\n  var classes = merge(className, withClassPrefix({\n    disabled: disabled,\n    'all-uncheckable': !!allUncheckable,\n    'text-muted': disabled,\n    focus: focus\n  }));\n\n  var styles = _extends({}, style, getTreeNodeIndent(rtl, layer - 1));\n\n  return visible ? /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"treeitem\",\n    \"aria-label\": label,\n    \"aria-expanded\": expand,\n    \"aria-selected\": checkState === CHECK_STATE.CHECK,\n    \"aria-disabled\": disabled,\n    \"aria-level\": layer\n  }, rest, {\n    style: styles,\n    className: classes,\n    ref: ref\n  }), renderIcon(), renderLabel()) : null;\n});\nCheckTreeNode.displayName = 'CheckTreeNode';\nCheckTreeNode.propTypes = {\n  as: PropTypes.elementType,\n  rtl: PropTypes.bool,\n  classPrefix: PropTypes.string,\n  visible: PropTypes.bool,\n  style: PropTypes.object,\n  label: PropTypes.any,\n  layer: PropTypes.number,\n  loading: PropTypes.bool,\n  value: PropTypes.any,\n  focus: PropTypes.bool,\n  expand: PropTypes.bool,\n  nodeData: PropTypes.object,\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  checkState: PropTypes.oneOf([CHECK_STATE.UNCHECK, CHECK_STATE.CHECK, CHECK_STATE.INDETERMINATE]),\n  hasChildren: PropTypes.bool,\n  uncheckable: PropTypes.bool,\n  allUncheckable: PropTypes.bool,\n  onExpand: PropTypes.func,\n  onSelect: PropTypes.func,\n  onRenderTreeIcon: PropTypes.func,\n  onRenderTreeNode: PropTypes.func\n};\nexport default CheckTreeNode;","map":null,"metadata":{},"sourceType":"module"}