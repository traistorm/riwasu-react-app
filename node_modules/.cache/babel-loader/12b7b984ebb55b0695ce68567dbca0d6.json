{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport kebabCase from 'lodash/kebabCase';\nimport { placementPolyfill, useClassNames } from '../utils';\nvar FormErrorMessage = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _prefix;\n\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'form-error-message' : _props$classPrefix,\n      className = props.className,\n      show = props.show,\n      children = props.children,\n      placement = props.placement,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"classPrefix\", \"className\", \"show\", \"children\", \"placement\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      prefix = _useClassNames.prefix,\n      merge = _useClassNames.merge;\n\n  var classes = withClassPrefix('show');\n  var wrapperClasses = merge(className, prefix('wrapper', (_prefix = {}, _prefix[\"placement-\" + kebabCase(placementPolyfill(placement))] = placement, _prefix)));\n\n  if (!show) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: wrapperClasses\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"arrow\"])))\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"inner\"])))\n  }, children)));\n});\nFormErrorMessage.displayName = 'FormErrorMessage';\nFormErrorMessage.propTypes = {\n  show: PropTypes.bool,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  placement: PropTypes.oneOf(['bottomStart', 'bottomEnd', 'topStart', 'topEnd', 'leftStart', 'rightStart', 'leftEnd', 'rightEnd'])\n};\nexport default FormErrorMessage;","map":null,"metadata":{},"sourceType":"module"}