{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/utils\n */\n\n/* global fetch, File */\nimport { global } from 'ckeditor5/src/utils';\n/**\n * Creates a regular expression used to test for image files.\n *\n *\t\tconst imageType = createImageTypeRegExp( [ 'png', 'jpeg', 'svg+xml', 'vnd.microsoft.icon' ] );\n *\n *\t\tconsole.log( 'is supported image', imageType.test( file.type ) );\n *\n * @param {Array.<String>} types\n * @returns {RegExp}\n */\n\nexport function createImageTypeRegExp(types) {\n  // Sanitize the MIME type name which may include: \"+\", \"-\" or \".\".\n  var regExpSafeNames = types.map(function (type) {\n    return type.replace('+', '\\\\+');\n  });\n  return new RegExp(\"^image\\\\/(\".concat(regExpSafeNames.join('|'), \")$\"));\n}\n/**\n * Creates a promise that fetches the image local source (Base64 or blob) and resolves with a `File` object.\n *\n * @param {module:engine/view/element~Element} image Image whose source to fetch.\n * @returns {Promise.<File>} A promise which resolves when an image source is fetched and converted to a `File` instance.\n * It resolves with a `File` object. If there were any errors during file processing, the promise will be rejected.\n */\n\nexport function fetchLocalImage(image) {\n  return new Promise(function (resolve, reject) {\n    var imageSrc = image.getAttribute('src'); // Fetch works asynchronously and so does not block browser UI when processing data.\n\n    fetch(imageSrc).then(function (resource) {\n      return resource.blob();\n    }).then(function (blob) {\n      var mimeType = getImageMimeType(blob, imageSrc);\n      var ext = mimeType.replace('image/', '');\n      var filename = \"image.\".concat(ext);\n      var file = new File([blob], filename, {\n        type: mimeType\n      });\n      resolve(file);\n    }).catch(function (err) {\n      // Fetch fails only, if it can't make a request due to a network failure or if anything prevented the request\n      // from completing, i.e. the Content Security Policy rules. It is not possible to detect the exact cause of failure,\n      // so we are just trying the fallback solution, if general TypeError is thrown.\n      return err && err.name === 'TypeError' ? convertLocalImageOnCanvas(imageSrc).then(resolve).catch(reject) : reject(err);\n    });\n  });\n}\n/**\n * Checks whether a given node is an image element with a local source (Base64 or blob).\n *\n * @param {module:image/imageutils~ImageUtils} imageUtils\n * @param {module:engine/view/node~Node} node The node to check.\n * @returns {Boolean}\n */\n\nexport function isLocalImage(imageUtils, node) {\n  if (!imageUtils.isInlineImageView(node) || !node.getAttribute('src')) {\n    return false;\n  }\n\n  return node.getAttribute('src').match(/^data:image\\/\\w+;base64,/g) || node.getAttribute('src').match(/^blob:/g);\n} // Extracts an image type based on its blob representation or its source.\n//\n// @param {String} src Image `src` attribute value.\n// @param {Blob} blob Image blob representation.\n// @returns {String}\n\nfunction getImageMimeType(blob, src) {\n  if (blob.type) {\n    return blob.type;\n  } else if (src.match(/data:(image\\/\\w+);base64/)) {\n    return src.match(/data:(image\\/\\w+);base64/)[1].toLowerCase();\n  } else {\n    // Fallback to 'jpeg' as common extension.\n    return 'image/jpeg';\n  }\n} // Creates a promise that converts the image local source (Base64 or blob) to a blob using canvas and resolves\n// with a `File` object.\n//\n// @param {String} imageSrc Image `src` attribute value.\n// @returns {Promise.<File>} A promise which resolves when an image source is converted to a `File` instance.\n// It resolves with a `File` object. If there were any errors during file processing, the promise will be rejected.\n\n\nfunction convertLocalImageOnCanvas(imageSrc) {\n  return getBlobFromCanvas(imageSrc).then(function (blob) {\n    var mimeType = getImageMimeType(blob, imageSrc);\n    var ext = mimeType.replace('image/', '');\n    var filename = \"image.\".concat(ext);\n    return new File([blob], filename, {\n      type: mimeType\n    });\n  });\n} // Creates a promise that resolves with a `Blob` object converted from the image source (Base64 or blob).\n//\n// @param {String} imageSrc Image `src` attribute value.\n// @returns {Promise.<Blob>}\n\n\nfunction getBlobFromCanvas(imageSrc) {\n  return new Promise(function (resolve, reject) {\n    var image = global.document.createElement('img');\n    image.addEventListener('load', function () {\n      var canvas = global.document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(image, 0, 0);\n      canvas.toBlob(function (blob) {\n        return blob ? resolve(blob) : reject();\n      });\n    });\n    image.addEventListener('error', function () {\n      return reject();\n    });\n    image.src = imageSrc;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}