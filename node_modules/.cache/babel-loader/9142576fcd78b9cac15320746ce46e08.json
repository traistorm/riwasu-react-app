{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativeui\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, ContextualBalloon, clickOutsideHandler } from 'ckeditor5/src/ui';\nimport TextAlternativeFormView from './ui/textalternativeformview';\nimport { repositionContextualBalloon, getBalloonPositionData } from '../image/ui/utils';\n/**\n * The image text alternative UI plugin.\n *\n * The plugin uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar ImageTextAlternativeUI = /*#__PURE__*/function (_Plugin) {\n  _inherits(ImageTextAlternativeUI, _Plugin);\n\n  function ImageTextAlternativeUI() {\n    _classCallCheck(this, ImageTextAlternativeUI);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageTextAlternativeUI).apply(this, arguments));\n  }\n\n  _createClass(ImageTextAlternativeUI, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      this._createButton();\n\n      this._createForm();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(ImageTextAlternativeUI.prototype), \"destroy\", this).call(this); // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\n\n      this._form.destroy();\n    }\n    /**\n     * Creates a button showing the balloon panel for changing the image text alternative and\n     * registers it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_createButton\",\n    value: function _createButton() {\n      var _this = this;\n\n      var editor = this.editor;\n      var t = editor.t;\n      editor.ui.componentFactory.add('imageTextAlternative', function (locale) {\n        var command = editor.commands.get('imageTextAlternative');\n        var view = new ButtonView(locale);\n        view.set({\n          label: t('Change image text alternative'),\n          icon: icons.lowVision,\n          tooltip: true\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n\n        _this.listenTo(view, 'execute', function () {\n          _this._showForm();\n        });\n\n        return view;\n      });\n    }\n    /**\n     * Creates the {@link module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n     * form.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_createForm\",\n    value: function _createForm() {\n      var _this2 = this;\n\n      var editor = this.editor;\n      var view = editor.editing.view;\n      var viewDocument = view.document;\n      var imageUtils = editor.plugins.get('ImageUtils');\n      /**\n       * The contextual balloon plugin instance.\n       *\n       * @private\n       * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n       */\n\n      this._balloon = this.editor.plugins.get('ContextualBalloon');\n      /**\n       * A form containing a textarea and buttons, used to change the `alt` text value.\n       *\n       * @member {module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n       */\n\n      this._form = new TextAlternativeFormView(editor.locale); // Render the form so its #element is available for clickOutsideHandler.\n\n      this._form.render();\n\n      this.listenTo(this._form, 'submit', function () {\n        editor.execute('imageTextAlternative', {\n          newValue: _this2._form.labeledInput.fieldView.element.value\n        });\n\n        _this2._hideForm(true);\n      });\n      this.listenTo(this._form, 'cancel', function () {\n        _this2._hideForm(true);\n      }); // Close the form on Esc key press.\n\n      this._form.keystrokes.set('Esc', function (data, cancel) {\n        _this2._hideForm(true);\n\n        cancel();\n      }); // Reposition the balloon or hide the form if an image widget is no longer selected.\n\n\n      this.listenTo(editor.ui, 'update', function () {\n        if (!imageUtils.getClosestSelectedImageWidget(viewDocument.selection)) {\n          _this2._hideForm(true);\n        } else if (_this2._isVisible) {\n          repositionContextualBalloon(editor);\n        }\n      }); // Close on click outside of balloon panel element.\n\n      clickOutsideHandler({\n        emitter: this._form,\n        activator: function activator() {\n          return _this2._isVisible;\n        },\n        contextElements: [this._balloon.view.element],\n        callback: function callback() {\n          return _this2._hideForm();\n        }\n      });\n    }\n    /**\n     * Shows the {@link #_form} in the {@link #_balloon}.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_showForm\",\n    value: function _showForm() {\n      if (this._isVisible) {\n        return;\n      }\n\n      var editor = this.editor;\n      var command = editor.commands.get('imageTextAlternative');\n      var labeledInput = this._form.labeledInput;\n\n      this._form.disableCssTransitions();\n\n      if (!this._isInBalloon) {\n        this._balloon.add({\n          view: this._form,\n          position: getBalloonPositionData(editor)\n        });\n      } // Make sure that each time the panel shows up, the field remains in sync with the value of\n      // the command. If the user typed in the input, then canceled the balloon (`labeledInput#value`\n      // stays unaltered) and re-opened it without changing the value of the command, they would see the\n      // old value instead of the actual value of the command.\n      // https://github.com/ckeditor/ckeditor5-image/issues/114\n\n\n      labeledInput.fieldView.value = labeledInput.fieldView.element.value = command.value || '';\n\n      this._form.labeledInput.fieldView.select();\n\n      this._form.enableCssTransitions();\n    }\n    /**\n     * Removes the {@link #_form} from the {@link #_balloon}.\n     *\n     * @param {Boolean} [focusEditable=false] Controls whether the editing view is focused afterwards.\n     * @private\n     */\n\n  }, {\n    key: \"_hideForm\",\n    value: function _hideForm(focusEditable) {\n      if (!this._isInBalloon) {\n        return;\n      } // Blur the input element before removing it from DOM to prevent issues in some browsers.\n      // See https://github.com/ckeditor/ckeditor5/issues/1501.\n\n\n      if (this._form.focusTracker.isFocused) {\n        this._form.saveButtonView.focus();\n      }\n\n      this._balloon.remove(this._form);\n\n      if (focusEditable) {\n        this.editor.editing.view.focus();\n      }\n    }\n    /**\n     * Returns `true` when the {@link #_form} is the visible view in the {@link #_balloon}.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n  }, {\n    key: \"_isVisible\",\n    get: function get() {\n      return this._balloon.visibleView === this._form;\n    }\n    /**\n     * Returns `true` when the {@link #_form} is in the {@link #_balloon}.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n  }, {\n    key: \"_isInBalloon\",\n    get: function get() {\n      return this._balloon.hasView(this._form);\n    }\n  }], [{\n    key: \"requires\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return [ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"pluginName\",\n    get: function get() {\n      return 'ImageTextAlternativeUI';\n    }\n  }]);\n\n  return ImageTextAlternativeUI;\n}(Plugin);\n\nexport { ImageTextAlternativeUI as default };","map":null,"metadata":{},"sourceType":"module"}