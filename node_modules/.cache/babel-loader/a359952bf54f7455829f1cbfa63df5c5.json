{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default function (core, change) {\n  var _w = core._w;\n  var util = core.util;\n  var delayTime = core.options.historyStackDelayTime;\n  var editor = core.context.element;\n  var undo = core.context.tool.undo;\n  var redo = core.context.tool.redo;\n  var pushDelay = null;\n  var stackIndex = 0;\n  var stack = [];\n\n  function setContentsFromStack() {\n    var item = stack[stackIndex];\n    editor.wysiwyg.innerHTML = item.contents;\n    core.setRange(util.getNodeFromPath(item.s.path, editor.wysiwyg), item.s.offset, util.getNodeFromPath(item.e.path, editor.wysiwyg), item.e.offset);\n    core.focus();\n\n    if (stack.length <= 1) {\n      if (undo) undo.setAttribute('disabled', true);\n      if (redo) redo.setAttribute('disabled', true);\n    } else {\n      if (stackIndex === 0) {\n        if (undo) undo.setAttribute('disabled', true);\n        if (redo) redo.removeAttribute('disabled');\n      } else if (stackIndex === stack.length - 1) {\n        if (undo) undo.removeAttribute('disabled');\n        if (redo) redo.setAttribute('disabled', true);\n      } else {\n        if (undo) undo.removeAttribute('disabled');\n        if (redo) redo.removeAttribute('disabled');\n      }\n    }\n\n    core.controllersOff();\n\n    core._checkComponents();\n\n    core._setCharCount();\n\n    core._resourcesStateChange(); // onChange\n\n\n    change();\n  }\n\n  function pushStack() {\n    core._checkComponents();\n\n    var current = core.getContents(true);\n    if (!current || !!stack[stackIndex] && current === stack[stackIndex].contents) return;\n    stackIndex++;\n    var range = core._variable._range;\n\n    if (stack.length > stackIndex) {\n      stack = stack.slice(0, stackIndex);\n      if (redo) redo.setAttribute('disabled', true);\n    }\n\n    if (!range) {\n      stack[stackIndex] = {\n        contents: current,\n        s: {\n          path: [0, 0],\n          offset: [0, 0]\n        },\n        e: {\n          path: 0,\n          offset: 0\n        }\n      };\n    } else {\n      stack[stackIndex] = {\n        contents: current,\n        s: {\n          path: util.getNodePath(range.startContainer, null, null),\n          offset: range.startOffset\n        },\n        e: {\n          path: util.getNodePath(range.endContainer, null, null),\n          offset: range.endOffset\n        }\n      };\n    }\n\n    if (stackIndex === 1 && undo) undo.removeAttribute('disabled');\n\n    core._setCharCount(); // onChange\n\n\n    change();\n  }\n\n  return {\n    /**\n     * @description History stack\n     */\n    stack: stack,\n\n    /**\n     * @description Saving the current status to the history object stack\n     * If \"delay\" is true, it will be saved after (options.historyStackDelayTime || 400) miliseconds\n     * If the function is called again with the \"delay\" argument true before it is saved, the delay time is renewal\n     * You can specify the delay time by sending a number.\n     * @param {Boolean|Number} delay If true, Add stack without delay time.\n     */\n    push: function push(delay) {\n      _w.setTimeout(core._resourcesStateChange.bind(core));\n\n      var time = typeof delay === 'number' ? delay > 0 ? delay : 0 : !delay ? 0 : delayTime;\n\n      if (!time || pushDelay) {\n        _w.clearTimeout(pushDelay);\n\n        if (!time) {\n          pushStack();\n          return;\n        }\n      }\n\n      pushDelay = _w.setTimeout(function () {\n        _w.clearTimeout(pushDelay);\n\n        pushDelay = null;\n        pushStack();\n      }, time);\n    },\n\n    /**\n     * @description Undo function\n     */\n    undo: function undo() {\n      if (stackIndex > 0) {\n        stackIndex--;\n        setContentsFromStack();\n      }\n    },\n\n    /**\n     * @description Redo function\n     */\n    redo: function redo() {\n      if (stack.length - 1 > stackIndex) {\n        stackIndex++;\n        setContentsFromStack();\n      }\n    },\n\n    /**\n     * @description Go to the history stack for that index.\n     * If \"index\" is -1, go to the last stack\n     */\n    go: function go(index) {\n      stackIndex = index < 0 ? stack.length - 1 : index;\n      setContentsFromStack();\n    },\n\n    /**\n     * @description Get the current history stack index.\n     * @returns {Number} Current Stack index\n     */\n    getCurrentIndex: function getCurrentIndex() {\n      return stackIndex;\n    },\n\n    /**\n     * @description Reset the history object\n     */\n    reset: function reset(ignoreChangeEvent) {\n      if (undo) undo.setAttribute('disabled', true);\n      if (redo) redo.setAttribute('disabled', true);\n      core._variable.isChanged = false;\n      if (core.context.tool.save) core.context.tool.save.setAttribute('disabled', true);\n      stack.splice(0);\n      stackIndex = 0; // pushStack\n\n      stack[stackIndex] = {\n        contents: core.getContents(true),\n        s: {\n          path: [0, 0],\n          offset: 0\n        },\n        e: {\n          path: [0, 0],\n          offset: 0\n        }\n      };\n      if (!ignoreChangeEvent) change();\n    },\n\n    /**\n     * @description Reset the disabled state of the buttons to fit the current stack.\n     * @private\n     */\n    _resetCachingButton: function _resetCachingButton() {\n      editor = core.context.element;\n      undo = core.context.tool.undo;\n      redo = core.context.tool.redo;\n\n      if (stackIndex === 0) {\n        if (undo) undo.setAttribute('disabled', true);\n        if (redo && stackIndex === stack.length - 1) redo.setAttribute('disabled', true);\n        core._variable.isChanged = false;\n        if (core.context.tool.save) core.context.tool.save.setAttribute('disabled', true);\n      } else if (stackIndex === stack.length - 1) {\n        if (redo) redo.setAttribute('disabled', true);\n      }\n    },\n\n    /**\n     * @description Remove all stacks and remove the timeout function.\n     * @private\n     */\n    _destroy: function _destroy() {\n      if (pushDelay) _w.clearTimeout(pushDelay);\n      stack = null;\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}