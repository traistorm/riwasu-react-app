{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/findattributerange\n */\n\n/**\n * Returns a model range that covers all consecutive nodes with the same `attributeName` and its `value`\n * that intersect the given `position`.\n *\n * It can be used e.g. to get the entire range on which the `linkHref` attribute needs to be changed when having a\n * selection inside a link.\n *\n * @param {module:engine/model/position~Position} position The start position.\n * @param {String} attributeName The attribute name.\n * @param {String} value The attribute value.\n * @param {module:engine/model/model~Model} model The model instance.\n * @returns {module:engine/model/range~Range} The link range.\n */\nexport default function findAttributeRange(position, attributeName, value, model) {\n  return model.createRange(_findBound(position, attributeName, value, true, model), _findBound(position, attributeName, value, false, model));\n} // Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same attribute value\n// and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n//\n// @param {module:engine/model/position~Position} position The start position.\n// @param {String} attributeName The attribute name.\n// @param {String} value The attribute value.\n// @param {Boolean} lookBack Whether the walk direction is forward (`false`) or backward (`true`).\n// @returns {module:engine/model/position~Position} The position just before the last matched node.\n\nfunction _findBound(position, attributeName, value, lookBack, model) {\n  // Get node before or after position (depends on `lookBack` flag).\n  // When position is inside text node then start searching from text node.\n  var node = position.textNode || (lookBack ? position.nodeBefore : position.nodeAfter);\n  var lastNode = null;\n\n  while (node && node.getAttribute(attributeName) == value) {\n    lastNode = node;\n    node = lookBack ? node.previousSibling : node.nextSibling;\n  }\n\n  return lastNode ? model.createPositionAt(lastNode, lookBack ? 'before' : 'after') : position;\n}","map":null,"metadata":{},"sourceType":"module"}