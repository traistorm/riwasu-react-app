{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledfield/utils\n */\nimport InputTextView from '../inputtext/inputtextview';\nimport InputNumberView from '../inputnumber/inputnumberview';\nimport { createDropdown } from '../dropdown/utils';\n/**\n * A helper for creating labeled inputs.\n *\n * It creates an instance of a {@link module:ui/inputtext/inputtextview~InputTextView input text} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledInputText );\n *\t\tconsole.log( labeledInputView.fieldView ); // A text input instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns {module:ui/inputtext/inputtextview~InputTextView} The input text view instance.\n */\n\nexport function createLabeledInputText(labeledFieldView, viewUid, statusUid) {\n  var inputView = new InputTextView(labeledFieldView.locale);\n  inputView.set({\n    id: viewUid,\n    ariaDescribedById: statusUid\n  });\n  inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', function (value) {\n    return !value;\n  });\n  inputView.bind('hasError').to(labeledFieldView, 'errorText', function (value) {\n    return !!value;\n  });\n  inputView.on('input', function () {\n    // UX: Make the error text disappear and disable the error indicator as the user\n    // starts fixing the errors.\n    labeledFieldView.errorText = null;\n  });\n  labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(inputView);\n  return inputView;\n}\n/**\n * A helper for creating labeled number inputs.\n *\n * It creates an instance of a {@link module:ui/inputnumber/inputnumberview~InputNumberView input number} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in DOM.\n *\n * The helper does the following:\n *\n * * It sets input's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isReadOnly` to the labeled view.\n * * It binds input's `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when user starts typing in the input.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledInputNumber );\n *\t\tconsole.log( labeledInputView.fieldView ); // A number input instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view's label} and the input.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view's status} and the input.\n * @returns {module:ui/inputnumber/inputnumberview~InputNumberView} The input number view instance.\n */\n\nexport function createLabeledInputNumber(labeledFieldView, viewUid, statusUid) {\n  var inputView = new InputNumberView(labeledFieldView.locale);\n  inputView.set({\n    id: viewUid,\n    ariaDescribedById: statusUid,\n    inputMode: 'numeric'\n  });\n  inputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', function (value) {\n    return !value;\n  });\n  inputView.bind('hasError').to(labeledFieldView, 'errorText', function (value) {\n    return !!value;\n  });\n  inputView.on('input', function () {\n    // UX: Make the error text disappear and disable the error indicator as the user\n    // starts fixing the errors.\n    labeledFieldView.errorText = null;\n  });\n  labeledFieldView.bind('isEmpty', 'isFocused', 'placeholder').to(inputView);\n  return inputView;\n}\n/**\n * A helper for creating labeled dropdowns.\n *\n * It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown} that is\n * logically related to a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled field view}.\n *\n * The helper does the following:\n *\n * * It sets dropdown's `id` and `ariaDescribedById` attributes.\n * * It binds input's `isEnabled` to the labeled view.\n *\n * Usage:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, createLabeledDropdown );\n *\t\tconsole.log( labeledInputView.fieldView ); // A dropdown instance.\n *\n * @param {module:ui/labeledfield/labeledfieldview~LabeledFieldView} labeledFieldView The instance of the labeled field view.\n * @param {String} viewUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#labelView labeled view label} and the dropdown.\n * @param {String} statusUid An UID string that allows DOM logical connection between the\n * {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView#statusView labeled view status} and the dropdown.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\n\nexport function createLabeledDropdown(labeledFieldView, viewUid, statusUid) {\n  var dropdownView = createDropdown(labeledFieldView.locale);\n  dropdownView.set({\n    id: viewUid,\n    ariaDescribedById: statusUid\n  });\n  dropdownView.bind('isEnabled').to(labeledFieldView);\n  return dropdownView;\n}","map":null,"metadata":{},"sourceType":"module"}