{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/elementreplacer\n */\n\n/**\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\n * the original elements from the DOM.\n */\nvar ElementReplacer = /*#__PURE__*/function () {\n  function ElementReplacer() {\n    _classCallCheck(this, ElementReplacer);\n\n    /**\n     * The elements replaced by {@link #replace} and their replacements.\n     *\n     * @private\n     * @member {Array.<Object>}\n     */\n    this._replacedElements = [];\n  }\n  /**\n   * Hides the `element` and, if specified, inserts the the given element next to it.\n   *\n   * The effect of this method can be reverted by {@link #restore}.\n   *\n   * @param {HTMLElement} element The element to replace.\n   * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\n   */\n\n\n  _createClass(ElementReplacer, [{\n    key: \"replace\",\n    value: function replace(element, newElement) {\n      this._replacedElements.push({\n        element: element,\n        newElement: newElement\n      });\n\n      element.style.display = 'none';\n\n      if (newElement) {\n        element.parentNode.insertBefore(newElement, element.nextSibling);\n      }\n    }\n    /**\n     * Restores what {@link #replace} did.\n     */\n\n  }, {\n    key: \"restore\",\n    value: function restore() {\n      this._replacedElements.forEach(function (_ref) {\n        var element = _ref.element,\n            newElement = _ref.newElement;\n        element.style.display = '';\n\n        if (newElement) {\n          newElement.remove();\n        }\n      });\n\n      this._replacedElements = [];\n    }\n  }]);\n\n  return ElementReplacer;\n}();\n\nexport { ElementReplacer as default };","map":null,"metadata":{},"sourceType":"module"}