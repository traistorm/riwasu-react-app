{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/rooteditableelement\n */\nimport EditableElement from './editableelement';\nvar rootNameSymbol = Symbol('rootName');\n/**\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\n * but in both cases it is called \"an editable\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\n * editable elements} making them \"nested editables\".\n *\n * @extends module:engine/view/editableelement~EditableElement\n */\n\nvar RootEditableElement = /*#__PURE__*/function (_EditableElement) {\n  _inherits(RootEditableElement, _EditableElement);\n\n  /**\n   * Creates root editable element.\n   *\n   * @param {module:engine/view/document~Document} document The document instance to which this element belongs.\n   * @param {String} name Node name.\n   */\n  function RootEditableElement(document, name) {\n    var _this;\n\n    _classCallCheck(this, RootEditableElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RootEditableElement).call(this, document, name));\n    /**\n     * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\n     * other name is set, `main` name is used.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    _this.rootName = 'main';\n    return _this;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\trootEditableElement.is( 'rootElement' ); // -> true\n   *\t\trootEditableElement.is( 'editableElement' ); // -> true\n   *\t\trootEditableElement.is( 'element' ); // -> true\n   *\t\trootEditableElement.is( 'node' ); // -> true\n   *\t\trootEditableElement.is( 'view:editableElement' ); // -> true\n   *\t\trootEditableElement.is( 'view:element' ); // -> true\n   *\t\trootEditableElement.is( 'view:node' ); // -> true\n   *\n   *\t\trootEditableElement.is( 'model:element' ); // -> false\n   *\t\trootEditableElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is a root editable element, you can also check its\n   * {@link module:engine/view/rooteditableelement~RootEditableElement#name name}:\n   *\n   *\t\trootEditableElement.is( 'element', 'div' ); // -> true if this is a div root editable element\n   *\t\trootEditableElement.is( 'rootElement', 'div' ); // -> same as above\n   *\t\ttext.is( 'element', 'div' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  _createClass(RootEditableElement, [{\n    key: \"is\",\n    value: function is(type) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!name) {\n        return type === 'rootElement' || type === 'view:rootElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'editableElement' || type === 'view:editableElement' || type === 'containerElement' || type === 'view:containerElement' || type === 'element' || type === 'view:element' || type === 'node' || type === 'view:node';\n      } else {\n        return name === this.name && (type === 'rootElement' || type === 'view:rootElement' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n        type === 'editableElement' || type === 'view:editableElement' || type === 'containerElement' || type === 'view:containerElement' || type === 'element' || type === 'view:element');\n      }\n    }\n  }, {\n    key: \"rootName\",\n    get: function get() {\n      return this.getCustomProperty(rootNameSymbol);\n    },\n    set: function set(rootName) {\n      this._setCustomProperty(rootNameSymbol, rootName);\n    }\n    /**\n     * Overrides old element name and sets new one.\n     * This is needed because view roots are created before they are attached to the DOM.\n     * The name of the root element is temporary at this stage. It has to be changed when the\n     * view root element is attached to the DOM element.\n     *\n     * @protected\n     * @param {String} name The new name of element.\n     */\n\n  }, {\n    key: \"_name\",\n    set: function set(name) {\n      this.name = name;\n    }\n  }]);\n\n  return RootEditableElement;\n}(EditableElement);\n\nexport { RootEditableElement as default };","map":null,"metadata":{},"sourceType":"module"}