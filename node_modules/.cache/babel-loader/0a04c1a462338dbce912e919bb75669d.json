{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nimport dialog from '../modules/dialog';\nimport component from '../modules/component';\nimport fileManager from '../modules/fileManager';\nexport default {\n  name: 'audio',\n  display: 'dialog',\n  add: function add(core) {\n    core.addModule([dialog, component, fileManager]);\n    var context = core.context;\n    var contextAudio = context.audio = {\n      _infoList: [],\n      // @Override fileManager\n      _infoIndex: 0,\n      // @Override fileManager\n      _uploadFileLength: 0,\n      // @Override fileManager\n      focusElement: null,\n      // @Override dialog // This element has focus when the dialog is opened.\n      targetSelect: null,\n      _origin_w: core.options.audioWidth,\n      _origin_h: core.options.audioHeight,\n      _linkValue: '',\n      // @require @Override component\n      _element: null,\n      _cover: null,\n      _container: null\n    };\n    /** dialog */\n\n    var audio_dialog = this.setDialog(core);\n    contextAudio.modal = audio_dialog;\n    contextAudio.audioInputFile = audio_dialog.querySelector('._se_audio_files');\n    contextAudio.audioUrlFile = audio_dialog.querySelector('.se-input-url');\n    contextAudio.focusElement = contextAudio.audioInputFile || contextAudio.audioUrlFile;\n    contextAudio.preview = audio_dialog.querySelector('.se-link-preview');\n    /** controller */\n\n    var audio_controller = this.setController(core);\n    contextAudio.controller = audio_controller;\n    /** add event listeners */\n\n    audio_dialog.querySelector('form').addEventListener('submit', this.submit.bind(core));\n    if (contextAudio.audioInputFile) audio_dialog.querySelector('.se-dialog-files-edge-button').addEventListener('click', this._removeSelectedFiles.bind(contextAudio.audioInputFile, contextAudio.audioUrlFile, contextAudio.preview));\n    if (contextAudio.audioInputFile && contextAudio.audioUrlFile) contextAudio.audioInputFile.addEventListener('change', this._fileInputChange.bind(contextAudio));\n    audio_controller.addEventListener('click', this.onClick_controller.bind(core));\n    if (contextAudio.audioUrlFile) contextAudio.audioUrlFile.addEventListener('input', this._onLinkPreview.bind(contextAudio.preview, contextAudio, core.options.linkProtocol));\n    /** append html */\n\n    context.dialog.modal.appendChild(audio_dialog);\n    /** append controller */\n\n    context.element.relative.appendChild(audio_controller);\n    /** empty memory */\n\n    audio_dialog = null, audio_controller = null;\n  },\n\n  /** HTML - dialog */\n  setDialog: function setDialog(core) {\n    var option = core.options;\n    var lang = core.lang;\n    var dialog = core.util.createElement('DIV');\n    dialog.className = 'se-dialog-content';\n    dialog.style.display = 'none';\n    var html = '' + '<form method=\"post\" enctype=\"multipart/form-data\">' + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + core.icons.cancel + '</button>' + '<span class=\"se-modal-title\">' + lang.dialogBox.audioBox.title + '</span>' + '</div>' + '<div class=\"se-dialog-body\">';\n\n    if (option.audioFileInput) {\n      html += '' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.audioBox.file + '</label>' + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form _se_audio_files\" type=\"file\" accept=\"' + option.audioAccept + '\"' + (option.audioMultipleFile ? ' multiple=\"multiple\"' : '') + '/>' + '<button type=\"button\" data-command=\"filesRemove\" class=\"se-btn se-dialog-files-edge-button se-file-remove\" title=\"' + lang.controller.remove + '\" aria-label=\"' + lang.controller.remove + '\">' + core.icons.cancel + '</button>' + '</div>' + '</div>';\n    }\n\n    if (option.audioUrlInput) {\n      html += '' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.audioBox.url + '</label>' + '<input class=\"se-input-form se-input-url\" type=\"text\" />' + '<pre class=\"se-link-preview\"></pre>' + '</div>';\n    }\n\n    html += '' + '</div>' + '<div class=\"se-dialog-footer\">' + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + '</span></button>' + '</div>' + '</form>';\n    dialog.innerHTML = html;\n    return dialog;\n  },\n\n  /** HTML - controller */\n  setController: function setController(core) {\n    var lang = core.lang;\n    var icons = core.icons;\n    var link_btn = core.util.createElement('DIV');\n    link_btn.className = 'se-controller se-controller-link';\n    link_btn.innerHTML = '' + '<div class=\"se-arrow se-arrow-up\"></div>' + '<div class=\"link-content\">' + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"update\" tabindex=\"-1\" class=\"se-tooltip\">' + icons.edit + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.edit + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"delete\" tabindex=\"-1\" class=\"se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + '</span></span>' + '</button>' + '</div>' + '</div>';\n    return link_btn;\n  },\n  // Disable url input when uploading files\n  _fileInputChange: function _fileInputChange() {\n    if (!this.audioInputFile.value) {\n      this.audioUrlFile.removeAttribute('disabled');\n      this.preview.style.textDecoration = '';\n    } else {\n      this.audioUrlFile.setAttribute('disabled', true);\n      this.preview.style.textDecoration = 'line-through';\n    }\n  },\n  // Disable url input when uploading files\n  _removeSelectedFiles: function _removeSelectedFiles(urlInput, preview) {\n    this.value = '';\n\n    if (urlInput) {\n      urlInput.removeAttribute('disabled');\n      preview.style.textDecoration = '';\n    }\n  },\n  // create new audio tag\n  _createAudioTag: function _createAudioTag() {\n    var oAudio = this.util.createElement('AUDIO');\n\n    this.plugins.audio._setTagAttrs.call(this, oAudio);\n\n    var w = this.context.audio._origin_w;\n    var h = this.context.audio._origin_h;\n    oAudio.setAttribute('origin-size', w + ',' + h);\n    oAudio.style.cssText = (w ? 'width:' + w + '; ' : '') + (h ? 'height:' + h + ';' : '');\n    return oAudio;\n  },\n  _setTagAttrs: function _setTagAttrs(element) {\n    element.setAttribute('controls', true);\n    var attrs = this.options.audioTagAttrs;\n    if (!attrs) return;\n\n    for (var key in attrs) {\n      if (!this.util.hasOwn(attrs, key)) continue;\n      element.setAttribute(key, attrs[key]);\n    }\n  },\n  _onLinkPreview: function _onLinkPreview(context, protocol, e) {\n    var value = e.target.value.trim();\n    context._linkValue = this.textContent = !value ? '' : protocol && value.indexOf('://') === -1 && value.indexOf('#') !== 0 ? protocol + value : value.indexOf('://') === -1 ? '/' + value : value;\n  },\n\n  /**\n   * @Required @Override fileManager\n   */\n  fileTags: ['audio'],\n\n  /**\n   * @Override core, fileManager, resizing\n   * @description It is called from core.selectComponent.\n   * @param {Element} element Target element\n   */\n  select: function select(element) {\n    this.plugins.audio.onModifyMode.call(this, element);\n  },\n\n  /**\n   * @Override fileManager, resizing \n   */\n  destroy: function destroy(element) {\n    element = element || this.context.audio._element;\n    var container = this.util.getParentElement(element, this.util.isComponent) || element;\n    var dataIndex = element.getAttribute('data-index') * 1;\n    var focusEl = container.previousElementSibling || container.nextElementSibling;\n    var emptyDiv = container.parentNode;\n    this.util.removeItem(container);\n    this.plugins.audio.init.call(this);\n    this.controllersOff();\n    if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function (current) {\n      return current.childNodes.length === 0;\n    }, null); // focus\n\n    this.focusEdge(focusEl); // fileManager event\n\n    this.plugins.fileManager.deleteInfo.call(this, 'audio', dataIndex, this.functions.onAudioUpload); // history stack\n\n    this.history.push(false);\n  },\n\n  /**\n   * @Override fileManager\n   */\n  checkFileInfo: function checkFileInfo() {\n    this.plugins.fileManager.checkInfo.call(this, 'audio', ['audio'], this.functions.onAudioUpload, this.plugins.audio.updateCover.bind(this), false);\n  },\n\n  /**\n   * @Override fileManager\n   */\n  resetFileInfo: function resetFileInfo() {\n    this.plugins.fileManager.resetInfo.call(this, 'audio', this.functions.onAudioUpload);\n  },\n\n  /**\n   * @Required @Override dialog\n   */\n  on: function on(update) {\n    var contextAudio = this.context.audio;\n\n    if (!update) {\n      this.plugins.audio.init.call(this);\n      if (contextAudio.audioInputFile && this.options.audioMultipleFile) contextAudio.audioInputFile.setAttribute('multiple', 'multiple');\n    } else if (contextAudio._element) {\n      this.context.dialog.updateModal = true;\n      contextAudio._linkValue = contextAudio.preview.textContent = contextAudio.audioUrlFile.value = contextAudio._element.src;\n      if (contextAudio.audioInputFile && this.options.audioMultipleFile) contextAudio.audioInputFile.removeAttribute('multiple');\n    } else {\n      if (contextAudio.audioInputFile && this.options.audioMultipleFile) contextAudio.audioInputFile.removeAttribute('multiple');\n    }\n  },\n\n  /**\n   * @Required @Override dialog\n   */\n  open: function open() {\n    this.plugins.dialog.open.call(this, 'audio', 'audio' === this.currentControllerName);\n  },\n  submit: function submit(e) {\n    var contextAudio = this.context.audio;\n    e.preventDefault();\n    e.stopPropagation();\n\n    try {\n      if (contextAudio.audioInputFile && contextAudio.audioInputFile.files.length > 0) {\n        this.showLoading();\n        this.plugins.audio.submitAction.call(this, contextAudio.audioInputFile.files);\n      } else if (contextAudio.audioUrlFile && contextAudio._linkValue.length > 0) {\n        this.showLoading();\n        this.plugins.audio.setupUrl.call(this, contextAudio._linkValue);\n      }\n    } catch (error) {\n      this.closeLoading();\n      throw Error('[SUNEDITOR.audio.submit.fail] cause : \"' + error.message + '\"');\n    } finally {\n      this.plugins.dialog.close.call(this);\n    }\n\n    return false;\n  },\n  submitAction: function submitAction(fileList) {\n    if (fileList.length === 0) return;\n    var fileSize = 0;\n    var files = [];\n\n    for (var i = 0, len = fileList.length; i < len; i++) {\n      if (/audio/i.test(fileList[i].type)) {\n        files.push(fileList[i]);\n        fileSize += fileList[i].size;\n      }\n    }\n\n    var limitSize = this.options.audioUploadSizeLimit;\n\n    if (limitSize > 0) {\n      var infoSize = 0;\n      var audiosInfo = this.context.audio._infoList;\n\n      for (var _i = 0, _len = audiosInfo.length; _i < _len; _i++) {\n        infoSize += audiosInfo[_i].size * 1;\n      }\n\n      if (fileSize + infoSize > limitSize) {\n        this.closeLoading();\n        var err = '[SUNEDITOR.audioUpload.fail] Size of uploadable total audios: ' + limitSize / 1000 + 'KB';\n\n        if (typeof this.functions.onAudioUploadError !== 'function' || this.functions.onAudioUploadError(err, {\n          'limitSize': limitSize,\n          'currentSize': infoSize,\n          'uploadSize': fileSize\n        }, this)) {\n          this.functions.noticeOpen(err);\n        }\n\n        return;\n      }\n    }\n\n    var contextAudio = this.context.audio;\n    contextAudio._uploadFileLength = files.length;\n    var info = {\n      isUpdate: this.context.dialog.updateModal,\n      element: contextAudio._element\n    };\n\n    if (typeof this.functions.onAudioUploadBefore === 'function') {\n      var result = this.functions.onAudioUploadBefore(files, info, this, function (data) {\n        if (data && this._w.Array.isArray(data.result)) {\n          this.plugins.audio.register.call(this, info, data);\n        } else {\n          this.plugins.audio.upload.call(this, info, data);\n        }\n      }.bind(this));\n      if (typeof result === 'undefined') return;\n\n      if (!result) {\n        this.closeLoading();\n        return;\n      }\n\n      if (typeof result === 'object' && result.length > 0) files = result;\n    }\n\n    this.plugins.audio.upload.call(this, info, files);\n  },\n  error: function error(message, response) {\n    this.closeLoading();\n\n    if (typeof this.functions.onAudioUploadError !== 'function' || this.functions.onAudioUploadError(message, response, this)) {\n      this.functions.noticeOpen(message);\n      throw Error('[SUNEDITOR.plugin.audio.exception] response: ' + message);\n    }\n  },\n  upload: function upload(info, files) {\n    if (!files) {\n      this.closeLoading();\n      return;\n    }\n\n    if (typeof files === 'string') {\n      this.plugins.audio.error.call(this, files, null);\n      return;\n    }\n\n    var audioUploadUrl = this.options.audioUploadUrl;\n    var filesLen = this.context.dialog.updateModal ? 1 : files.length; // create formData\n\n    var formData = new FormData();\n\n    for (var i = 0; i < filesLen; i++) {\n      formData.append('file-' + i, files[i]);\n    } // server upload\n\n\n    this.plugins.fileManager.upload.call(this, audioUploadUrl, this.options.audioUploadHeader, formData, this.plugins.audio.callBack_upload.bind(this, info), this.functions.onAudioUploadError);\n  },\n  callBack_upload: function callBack_upload(info, xmlHttp) {\n    if (typeof this.functions.audioUploadHandler === 'function') {\n      this.functions.audioUploadHandler(xmlHttp, info, this);\n    } else {\n      var response = JSON.parse(xmlHttp.responseText);\n\n      if (response.errorMessage) {\n        this.plugins.audio.error.call(this, response.errorMessage, response);\n      } else {\n        this.plugins.audio.register.call(this, info, response);\n      }\n    }\n  },\n  register: function register(info, response) {\n    var fileList = response.result;\n\n    for (var i = 0, len = fileList.length, file, oAudio; i < len; i++) {\n      if (info.isUpdate) oAudio = info.element;else oAudio = this.plugins.audio._createAudioTag.call(this);\n      file = {\n        name: fileList[i].name,\n        size: fileList[i].size\n      };\n      this.plugins.audio.create_audio.call(this, oAudio, fileList[i].url, file, info.isUpdate);\n    }\n\n    this.closeLoading();\n  },\n  setupUrl: function setupUrl(src) {\n    try {\n      if (src.length === 0) return false;\n      this.plugins.audio.create_audio.call(this, this.plugins.audio._createAudioTag.call(this), src, null, this.context.dialog.updateModal);\n    } catch (error) {\n      throw Error('[SUNEDITOR.audio.audio.fail] cause : \"' + error.message + '\"');\n    } finally {\n      this.closeLoading();\n    }\n  },\n  create_audio: function create_audio(element, src, file, isUpdate) {\n    var contextAudio = this.context.audio; // create new tag\n\n    if (!isUpdate) {\n      element.src = src;\n      var cover = this.plugins.component.set_cover.call(this, element);\n      var container = this.plugins.component.set_container.call(this, cover, '');\n\n      if (!this.insertComponent(container, false, true, !this.options.mediaAutoSelect)) {\n        this.focus();\n        return;\n      }\n\n      if (!this.options.mediaAutoSelect) {\n        var line = this.appendFormatTag(container, null);\n        if (line) this.setRange(line, 0, line, 0);\n      }\n    } // update\n    else {\n      if (contextAudio._element) element = contextAudio._element;\n\n      if (element && element.src !== src) {\n        element.src = src;\n        this.selectComponent(element, 'audio');\n      } else {\n        this.selectComponent(element, 'audio');\n        return;\n      }\n    }\n\n    this.plugins.fileManager.setInfo.call(this, 'audio', element, this.functions.onAudioUpload, file, false);\n    if (isUpdate) this.history.push(false);\n  },\n  updateCover: function updateCover(element) {\n    var contextAudio = this.context.audio;\n\n    this.plugins.audio._setTagAttrs.call(this, element); // find component element\n\n\n    var existElement = this.util.isRangeFormatElement(element.parentNode) || this.util.isWysiwygDiv(element.parentNode) ? element : this.util.getFormatElement(element) || element; // clone element\n\n    var prevElement = element;\n    contextAudio._element = element = element.cloneNode(false);\n    var cover = this.plugins.component.set_cover.call(this, element);\n    var container = this.plugins.component.set_container.call(this, cover, 'se-audio-container');\n\n    try {\n      if (this.util.isListCell(existElement) || this.util.isFormatElement(existElement)) {\n        prevElement.parentNode.replaceChild(container, prevElement);\n      } else if (this.util.isFormatElement(existElement) && existElement.childNodes.length > 0) {\n        existElement.parentNode.insertBefore(container, existElement);\n        this.util.removeItem(prevElement); // clean format tag\n\n        this.util.removeEmptyNode(existElement, null);\n        if (existElement.children.length === 0) existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);\n      } else {\n        existElement.parentNode.replaceChild(container, existElement);\n      }\n    } catch (error) {\n      console.warn('[SUNEDITOR.audio.error] Maybe the audio tag is nested.', error);\n    }\n\n    this.plugins.fileManager.setInfo.call(this, 'audio', element, this.functions.onAudioUpload, null, false);\n    this.plugins.audio.init.call(this);\n  },\n\n  /**\n   * @Required @Override fileManager, resizing\n   */\n  onModifyMode: function onModifyMode(selectionTag) {\n    var contextAudio = this.context.audio;\n    this.setControllerPosition(contextAudio.controller, selectionTag, 'bottom', {\n      left: 0,\n      top: 0\n    });\n    this.controllersOn(contextAudio.controller, selectionTag, this.plugins.audio.onControllerOff.bind(this, selectionTag), 'audio');\n    this.util.addClass(selectionTag, 'active');\n    contextAudio._element = selectionTag;\n    contextAudio._cover = this.util.getParentElement(selectionTag, 'FIGURE');\n    contextAudio._container = this.util.getParentElement(selectionTag, this.util.isComponent);\n  },\n\n  /**\n   * @Required @Override fileManager, resizing\n   */\n  openModify: function openModify(notOpen) {\n    if (this.context.audio.audioUrlFile) {\n      var contextAudio = this.context.audio;\n      contextAudio._linkValue = contextAudio.preview.textContent = contextAudio.audioUrlFile.value = contextAudio._element.src;\n    }\n\n    if (!notOpen) this.plugins.dialog.open.call(this, 'audio', true);\n  },\n  onClick_controller: function onClick_controller(e) {\n    e.stopPropagation();\n    var command = e.target.getAttribute('data-command');\n    if (!command) return;\n    e.preventDefault();\n\n    if (/update/.test(command)) {\n      this.plugins.audio.openModify.call(this, false);\n    } else {\n      /** delete */\n      this.plugins.audio.destroy.call(this, this.context.audio._element);\n    }\n\n    this.controllersOff();\n  },\n  onControllerOff: function onControllerOff(selectionTag) {\n    this.util.removeClass(selectionTag, 'active');\n    this.context.audio.controller.style.display = 'none';\n  },\n\n  /**\n   * @Required @Override dialog\n   */\n  init: function init() {\n    if (this.context.dialog.updateModal) return;\n    var contextAudio = this.context.audio;\n    if (contextAudio.audioInputFile) contextAudio.audioInputFile.value = '';\n    if (contextAudio.audioUrlFile) contextAudio._linkValue = contextAudio.preview.textContent = contextAudio.audioUrlFile.value = '';\n\n    if (contextAudio.audioInputFile && contextAudio.audioUrlFile) {\n      contextAudio.audioUrlFile.removeAttribute('disabled');\n      contextAudio.preview.style.textDecoration = '';\n    }\n\n    contextAudio._element = null;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}