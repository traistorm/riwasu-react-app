{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Command from './command';\nimport insertToPriorityArray from '@ckeditor/ckeditor5-utils/src/inserttopriorityarray';\n/**\n * @module core/multicommand\n */\n\n/**\n * A CKEditor command that aggregates other commands.\n *\n * This command is used to proxy multiple commands. The multi-command is enabled when\n * at least one of its registered child commands is enabled.\n * When executing a multi-command the first enabled command with highest priority will be executed.\n *\n *\t\tconst multiCommand = new MultiCommand( editor );\n *\n *\t\tconst commandFoo = new Command( editor );\n *\t\tconst commandBar = new Command( editor );\n *\n *\t\t// Register a child command.\n *\t\tmultiCommand.registerChildCommand( commandFoo );\n *\t\t// Register a child command with a low priority.\n *\t\tmultiCommand.registerChildCommand( commandBar, { priority: 'low' } );\n *\n *\t\t// Enable one of the commands.\n *\t\tcommandBar.isEnabled = true;\n *\n *\t\tmultiCommand.execute(); // Will execute commandBar.\n *\n * @extends module:core/command~Command\n */\n\nvar MultiCommand = /*#__PURE__*/function (_Command) {\n  _inherits(MultiCommand, _Command);\n\n  /**\n   * @inheritDoc\n   */\n  function MultiCommand(editor) {\n    var _this;\n\n    _classCallCheck(this, MultiCommand);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiCommand).call(this, editor));\n    /**\n     * Registered child commands definitions.\n     *\n     * @type {Array.<Object>}\n     * @private\n     */\n\n    _this._childCommandsDefinitions = [];\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(MultiCommand, [{\n    key: \"refresh\",\n    value: function refresh() {// Override base command refresh(): the command's state is changed when one of child commands changes states.\n    }\n    /**\n     * Executes the first enabled command which has the highest priority of all registered child commands.\n     *\n     * @returns {*} The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var command = this._getFirstEnabledCommand();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return !!command && command.execute(args);\n    }\n    /**\n     * Registers a child command.\n     *\n     * @param {module:core/command~Command} command\n     * @param {Object} options An object with configuration options.\n     * @param {module:utils/priorities~PriorityString} [options.priority='normal'] Priority of a command to register.\n     */\n\n  }, {\n    key: \"registerChildCommand\",\n    value: function registerChildCommand(command) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        priority: 'normal'\n      };\n      insertToPriorityArray(this._childCommandsDefinitions, {\n        command: command,\n        priority: options.priority\n      }); // Change multi command enabled state when one of registered commands changes state.\n\n      command.on('change:isEnabled', function () {\n        return _this2._checkEnabled();\n      });\n\n      this._checkEnabled();\n    }\n    /**\n     * Checks if any of child commands is enabled.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_checkEnabled\",\n    value: function _checkEnabled() {\n      this.isEnabled = !!this._getFirstEnabledCommand();\n    }\n    /**\n     * Returns a first enabled command with the highest priority or `undefined` if none of them is enabled.\n     *\n     * @returns {module:core/command~Command|undefined}\n     * @private\n     */\n\n  }, {\n    key: \"_getFirstEnabledCommand\",\n    value: function _getFirstEnabledCommand() {\n      var commandDefinition = this._childCommandsDefinitions.find(function (_ref) {\n        var command = _ref.command;\n        return command.isEnabled;\n      });\n\n      return commandDefinition && commandDefinition.command;\n    }\n  }]);\n\n  return MultiCommand;\n}(Command);\n\nexport { MultiCommand as default };","map":null,"metadata":{},"sourceType":"module"}