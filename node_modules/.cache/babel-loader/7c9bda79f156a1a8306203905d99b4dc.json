{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/pasteplaintext\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ClipboardObserver from './clipboardobserver';\nimport ClipboardPipeline from './clipboardpipeline';\n/**\n * The plugin detects the user's intention to paste plain text.\n *\n * For example, it detects the <kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>V</kbd> keystroke.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar PastePlainText = /*#__PURE__*/function (_Plugin) {\n  _inherits(PastePlainText, _Plugin);\n\n  function PastePlainText() {\n    _classCallCheck(this, PastePlainText);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PastePlainText).apply(this, arguments));\n  }\n\n  _createClass(PastePlainText, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      var editor = this.editor;\n      var model = editor.model;\n      var view = editor.editing.view;\n      var viewDocument = view.document;\n      var selection = model.document.selection;\n      var shiftPressed = false;\n      view.addObserver(ClipboardObserver);\n      this.listenTo(viewDocument, 'keydown', function (evt, data) {\n        shiftPressed = data.shiftKey;\n      });\n      editor.plugins.get(ClipboardPipeline).on('contentInsertion', function (evt, data) {\n        // Plain text can be determined based on the event flag (#7799) or auto-detection (#1006). If detected,\n        // preserve selection attributes on pasted items.\n        if (!shiftPressed && !isPlainTextFragment(data.content, model.schema)) {\n          return;\n        }\n\n        model.change(function (writer) {\n          // Formatting attributes should be preserved.\n          var textAttributes = Array.from(selection.getAttributes()).filter(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 1),\n                key = _ref2[0];\n\n            return model.schema.getAttributeProperties(key).isFormatting;\n          });\n\n          if (!selection.isCollapsed) {\n            model.deleteContent(selection, {\n              doNotAutoparagraph: true\n            });\n          } // Also preserve other attributes if they survived the content deletion (because they were not fully selected).\n          // For example linkHref is not a formatting attribute but it should be preserved if pasted text was in the middle\n          // of a link.\n\n\n          textAttributes.push.apply(textAttributes, _toConsumableArray(selection.getAttributes()));\n          var range = writer.createRangeIn(data.content);\n\n          var _iterator = _createForOfIteratorHelper(range.getItems()),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var item = _step.value;\n\n              if (item.is('$textProxy')) {\n                writer.setAttributes(textAttributes, item);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'PastePlainText';\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"requires\",\n    get: function get() {\n      return [ClipboardPipeline];\n    }\n  }]);\n\n  return PastePlainText;\n}(Plugin); // Returns true if specified `documentFragment` represents a plain text.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\n\nexport { PastePlainText as default };\n\nfunction isPlainTextFragment(documentFragment, schema) {\n  if (documentFragment.childCount > 1) {\n    return false;\n  }\n\n  var child = documentFragment.getChild(0);\n\n  if (schema.isObject(child)) {\n    return false;\n  }\n\n  return _toConsumableArray(child.getAttributeKeys()).length == 0;\n}","map":null,"metadata":{},"sourceType":"module"}