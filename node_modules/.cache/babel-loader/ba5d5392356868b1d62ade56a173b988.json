{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/renameoperation\n */\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nvar RenameOperation = /*#__PURE__*/function (_Operation) {\n  _inherits(RenameOperation, _Operation);\n\n  /**\n   * Creates an operation that changes element's name.\n   *\n   * @param {module:engine/model/position~Position} position Position before an element to change.\n   * @param {String} oldName Current name of the element.\n   * @param {String} newName New name for the element.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  function RenameOperation(position, oldName, newName, baseVersion) {\n    var _this;\n\n    _classCallCheck(this, RenameOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RenameOperation).call(this, baseVersion));\n    /**\n     * Position before an element to change.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n     */\n\n    _this.position = position; // This position sticks to the next node because it is a position before the node that we want to change.\n\n    _this.position.stickiness = 'toNext';\n    /**\n     * Current name of the element.\n     *\n     * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n     */\n\n    _this.oldName = oldName;\n    /**\n     * New name for the element.\n     *\n     * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n     */\n\n    _this.newName = newName;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(RenameOperation, [{\n    key: \"clone\",\n\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n     */\n    value: function clone() {\n      return new RenameOperation(this.position.clone(), this.oldName, this.newName, this.baseVersion);\n    }\n    /**\n     * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n     *\n     * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n     */\n\n  }, {\n    key: \"getReversed\",\n    value: function getReversed() {\n      return new RenameOperation(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"_validate\",\n    value: function _validate() {\n      var element = this.position.nodeAfter;\n\n      if (!(element instanceof Element)) {\n        /**\n         * Given position is invalid or node after it is not instance of Element.\n         *\n         * @error rename-operation-wrong-position\n         */\n        throw new CKEditorError('rename-operation-wrong-position', this);\n      } else if (element.name !== this.oldName) {\n        /**\n         * Element to change has different name than operation's old name.\n         *\n         * @error rename-operation-wrong-name\n         */\n        throw new CKEditorError('rename-operation-wrong-name', this);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"_execute\",\n    value: function _execute() {\n      var element = this.position.nodeAfter;\n      element.name = this.newName;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = _get(_getPrototypeOf(RenameOperation.prototype), \"toJSON\", this).call(this);\n\n      json.position = this.position.toJSON();\n      return json;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return 'rename';\n    }\n  }], [{\n    key: \"fromJSON\",\n\n    /**\n     * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n     *\n     * @param {Object} json Deserialized JSON object.\n     * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n     * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n     */\n    value: function fromJSON(json, document) {\n      return new RenameOperation(Position.fromJSON(json.position, document), json.oldName, json.newName, json.baseVersion);\n    } // @if CK_DEBUG_ENGINE // toString() {\n    // @if CK_DEBUG_ENGINE // \treturn `RenameOperation( ${ this.baseVersion } ): ` +\n    // @if CK_DEBUG_ENGINE //\t\t`${ this.position }: \"${ this.oldName }\" -> \"${ this.newName }\"`;\n    // @if CK_DEBUG_ENGINE // }\n\n  }, {\n    key: \"className\",\n    get: function get() {\n      return 'RenameOperation';\n    }\n  }]);\n\n  return RenameOperation;\n}(Operation);\n\nexport { RenameOperation as default };","map":null,"metadata":{},"sourceType":"module"}