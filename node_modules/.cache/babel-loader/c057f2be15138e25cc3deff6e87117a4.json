{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useState, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport pick from 'lodash/pick';\nimport Input from '../Input';\nimport { useClassNames, useControlled, PLACEMENT, mergeRefs, useIsMounted } from '../utils';\nimport { animationPropTypes } from '../Animation/utils';\nimport { PickerToggleTrigger, onMenuKeyDown, DropdownMenu, DropdownMenuItem, PickerOverlay, useFocusItemValue, usePublicMethods, pickTriggerPropKeys } from '../Picker';\nimport { transformData, shouldDisplay } from './utils';\n/**\n * TODO: Remove unnecessary .rs-auto-complete element\n * TODO: role=combobox and aria-autocomplete on input element\n */\n\nvar AutoComplete = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      disabled = props.disabled,\n      className = props.className,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n      _props$selectOnEnter = props.selectOnEnter,\n      selectOnEnter = _props$selectOnEnter === void 0 ? true : _props$selectOnEnter,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'auto-complete' : _props$classPrefix,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? '' : _props$defaultValue,\n      data = props.data,\n      valueProp = props.value,\n      open = props.open,\n      style = props.style,\n      menuClassName = props.menuClassName,\n      id = props.id,\n      renderMenu = props.renderMenu,\n      renderMenuItem = props.renderMenuItem,\n      onSelect = props.onSelect,\n      filterBy = props.filterBy,\n      onKeyDown = props.onKeyDown,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onMenuFocus = props.onMenuFocus,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"disabled\", \"className\", \"placement\", \"selectOnEnter\", \"classPrefix\", \"defaultValue\", \"data\", \"value\", \"open\", \"style\", \"menuClassName\", \"id\", \"renderMenu\", \"renderMenuItem\", \"onSelect\", \"filterBy\", \"onKeyDown\", \"onChange\", \"onClose\", \"onOpen\", \"onFocus\", \"onBlur\", \"onMenuFocus\"]);\n\n  var datalist = transformData(data);\n\n  var _useControlled = useControlled(valueProp, defaultValue),\n      value = _useControlled[0],\n      setValue = _useControlled[1];\n\n  var _useState = useState(false),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var items = (datalist === null || datalist === void 0 ? void 0 : datalist.filter(shouldDisplay(filterBy, value))) || [];\n  var hasItems = items.length > 0;\n  var overlayRef = useRef(null);\n  var isMounted = useIsMounted(); // Used to hover the focuse item  when trigger `onKeydown`\n\n  var _useFocusItemValue = useFocusItemValue(value, {\n    data: datalist,\n    callback: onMenuFocus,\n    target: function target() {\n      return overlayRef.current;\n    }\n  }),\n      focusItemValue = _useFocusItemValue.focusItemValue,\n      setFocusItemValue = _useFocusItemValue.setFocusItemValue,\n      handleKeyDown = _useFocusItemValue.onKeyDown;\n\n  var handleKeyDownEvent = function handleKeyDownEvent(event) {\n    if (!overlayRef.current) {\n      return;\n    }\n\n    onMenuKeyDown(event, {\n      enter: selectOnEnter ? selectFocusMenuItem : undefined,\n      esc: handleClose\n    });\n    handleKeyDown(event);\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  };\n\n  var selectFocusMenuItem = function selectFocusMenuItem(event) {\n    if (!focusItemValue) {\n      return;\n    }\n\n    var focusItem = datalist.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === focusItemValue;\n    });\n    setValue(focusItemValue);\n    setFocusItemValue(focusItemValue);\n    handleSelect(focusItem, event);\n\n    if (value !== focusItemValue) {\n      handleChangeValue(focusItemValue, event);\n    }\n\n    handleClose();\n  };\n\n  var handleSelect = useCallback(function (item, event) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(item.value, item, event);\n  }, [onSelect]);\n  var handleChangeValue = useCallback(function (value, event) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n  }, [onChange]);\n\n  var handleChange = function handleChange(value, event) {\n    setFocusItemValue('');\n    setValue(value);\n    setFocus(true);\n    handleChangeValue(value, event);\n  };\n\n  var handleClose = useCallback(function () {\n    if (isMounted()) {\n      setFocus(false);\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n    }\n  }, [isMounted, onClose]);\n  var handleOpen = useCallback(function () {\n    setFocus(true);\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n  }, [onOpen]);\n  var handleItemSelect = useCallback(function (nextItemValue, item, event) {\n    setValue(nextItemValue);\n    setFocusItemValue(nextItemValue);\n    handleSelect(item, event);\n\n    if (value !== nextItemValue) {\n      handleChangeValue(nextItemValue, event);\n    }\n\n    handleClose();\n  }, [value, setValue, handleSelect, handleChangeValue, handleClose, setFocusItemValue]);\n  var handleInputFocus = useCallback(function (event) {\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n    handleOpen();\n  }, [onFocus, handleOpen]);\n  var handleInputBlur = useCallback(function (event) {\n    setTimeout(handleClose, 300);\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n  }, [onBlur, handleClose]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge;\n\n  var classes = merge(className, withClassPrefix({\n    disabled: disabled\n  }));\n  var triggerRef = useRef(null);\n  usePublicMethods(ref, {\n    triggerRef: triggerRef,\n    overlayRef: overlayRef\n  });\n\n  var renderDropdownMenu = function renderDropdownMenu(positionProps, speakerRef) {\n    var left = positionProps.left,\n        top = positionProps.top,\n        className = positionProps.className;\n    var styles = {\n      left: left,\n      top: top\n    };\n    var menu = /*#__PURE__*/React.createElement(DropdownMenu, {\n      id: id ? id + \"-listbox\" : undefined,\n      classPrefix: \"auto-complete-menu\",\n      dropdownMenuItemClassPrefix: \"auto-complete-item\",\n      dropdownMenuItemAs: DropdownMenuItem,\n      focusItemValue: focusItemValue,\n      onSelect: handleItemSelect,\n      renderMenuItem: renderMenuItem,\n      data: items,\n      className: menuClassName\n    });\n    return /*#__PURE__*/React.createElement(PickerOverlay, {\n      ref: mergeRefs(overlayRef, speakerRef),\n      style: styles,\n      className: className,\n      onKeyDown: handleKeyDownEvent,\n      target: triggerRef\n    }, renderMenu ? renderMenu(menu) : menu);\n  };\n\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    ref: triggerRef,\n    placement: placement,\n    pickerProps: pick(props, pickTriggerPropKeys),\n    trigger: ['click', 'focus'],\n    open: open || focus && hasItems,\n    speaker: renderDropdownMenu\n  }, /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    style: style\n  }, /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n    id: id,\n    disabled: disabled,\n    value: value,\n    onBlur: handleInputBlur,\n    onFocus: handleInputFocus,\n    onChange: handleChange,\n    onKeyDown: handleKeyDownEvent\n  }))));\n});\nAutoComplete.displayName = 'AutoComplete';\nAutoComplete.propTypes = _extends({}, animationPropTypes, {\n  data: PropTypes.array,\n  disabled: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onChange: PropTypes.func,\n  classPrefix: PropTypes.string,\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  className: PropTypes.string,\n  menuClassName: PropTypes.string,\n  placement: PropTypes.oneOf(PLACEMENT),\n  onFocus: PropTypes.func,\n  onMenuFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  renderMenu: PropTypes.func,\n  renderMenuItem: PropTypes.func,\n  style: PropTypes.object,\n  open: PropTypes.bool,\n  selectOnEnter: PropTypes.bool,\n  filterBy: PropTypes.func\n});\nexport default AutoComplete;","map":null,"metadata":{},"sourceType":"module"}