{"ast":null,"code":"export var Schema = /*#__PURE__*/function () {\n  function Schema(schema) {\n    this.spec = void 0;\n    this.data = void 0;\n    this.spec = schema;\n  }\n\n  var _proto = Schema.prototype;\n\n  _proto.getFieldType = function getFieldType(fieldName) {\n    var _this$spec;\n\n    return (_this$spec = this.spec) === null || _this$spec === void 0 ? void 0 : _this$spec[fieldName];\n  };\n\n  _proto.getKeys = function getKeys() {\n    return Object.keys(this.spec);\n  };\n\n  _proto.setSchemaOptionsForAllType = function setSchemaOptionsForAllType(data) {\n    var _this = this;\n\n    if (data === this.data) {\n      return;\n    }\n\n    Object.entries(this.spec).forEach(function (_ref) {\n      var key = _ref[0],\n          type = _ref[1];\n      type.setSchemaOptions(_this.spec, data === null || data === void 0 ? void 0 : data[key]);\n    });\n    this.data = data;\n  };\n\n  _proto.checkForField = function checkForField(fieldName, data) {\n    this.setSchemaOptionsForAllType(data);\n    var fieldChecker = this.spec[fieldName];\n\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return {\n        hasError: false\n      };\n    }\n\n    return fieldChecker.check(data[fieldName], data, fieldName);\n  };\n\n  _proto.checkForFieldAsync = function checkForFieldAsync(fieldName, data) {\n    this.setSchemaOptionsForAllType(data);\n    var fieldChecker = this.spec[fieldName];\n\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return Promise.resolve({\n        hasError: false\n      });\n    }\n\n    return fieldChecker.checkAsync(data[fieldName], data, fieldName);\n  };\n\n  _proto.check = function check(data) {\n    var _this2 = this;\n\n    var checkResult = {};\n    Object.keys(this.spec).forEach(function (key) {\n      if (typeof data === 'object') {\n        checkResult[key] = _this2.checkForField(key, data);\n      }\n    });\n    return checkResult;\n  };\n\n  _proto.checkAsync = function checkAsync(data) {\n    var _this3 = this;\n\n    var checkResult = {};\n    var promises = [];\n    var keys = [];\n    Object.keys(this.spec).forEach(function (key) {\n      keys.push(key);\n      promises.push(_this3.checkForFieldAsync(key, data));\n    });\n    return Promise.all(promises).then(function (values) {\n      for (var i = 0; i < values.length; i += 1) {\n        checkResult[keys[i]] = values[i];\n      }\n\n      return checkResult;\n    });\n  };\n\n  return Schema;\n}();\nexport function SchemaModel(o) {\n  return new Schema(o);\n}\n\nSchemaModel.combine = function combine() {\n  for (var _len = arguments.length, specs = new Array(_len), _key = 0; _key < _len; _key++) {\n    specs[_key] = arguments[_key];\n  }\n\n  return new Schema(specs.map(function (model) {\n    return model.spec;\n  }).reduce(function (accumulator, currentValue) {\n    return Object.assign(accumulator, currentValue);\n  }, {}));\n};","map":null,"metadata":{},"sourceType":"module"}