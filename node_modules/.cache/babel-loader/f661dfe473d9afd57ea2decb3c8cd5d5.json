{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/observablemixin\n */\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport { extend, isObject } from 'lodash-es';\nvar observablePropertiesSymbol = Symbol('observableProperties');\nvar boundObservablesSymbol = Symbol('boundObservables');\nvar boundPropertiesSymbol = Symbol('boundProperties');\n\nvar _decoratedMethods = Symbol('decoratedMethods');\n\nvar _decoratedOriginal = Symbol('decoratedOriginal');\n/**\n * A mixin that injects the \"observable properties\" and data binding functionality described in the\n * {@link ~Observable} interface.\n *\n * Read more about the concept of observables in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables Event system and observables}\n * section of the {@glink framework/guides/architecture/core-editor-architecture Core editor architecture} guide,\n * * {@glink framework/guides/deep-dive/observables Observables deep dive} guide.\n *\n * @mixin ObservableMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/observablemixin~Observable\n */\n\n\nvar ObservableMixin = {\n  /**\n   * @inheritDoc\n   */\n  set: function set(name, value) {\n    var _this = this;\n\n    // If the first parameter is an Object, iterate over its properties.\n    if (isObject(name)) {\n      Object.keys(name).forEach(function (property) {\n        _this.set(property, name[property]);\n      }, this);\n      return;\n    }\n\n    initObservable(this);\n    var properties = this[observablePropertiesSymbol];\n\n    if (name in this && !properties.has(name)) {\n      /**\n       * Cannot override an existing property.\n       *\n       * This error is thrown when trying to {@link ~Observable#set set} a property with\n       * a name of an already existing property. For example:\n       *\n       *\t\tlet observable = new Model();\n       *\t\tobservable.property = 1;\n       *\t\tobservable.set( 'property', 2 );\t\t\t// throws\n       *\n       *\t\tobservable.set( 'property', 1 );\n       *\t\tobservable.set( 'property', 2 );\t\t\t// ok, because this is an existing property.\n       *\n       * @error observable-set-cannot-override\n       */\n      throw new CKEditorError('observable-set-cannot-override', this);\n    }\n\n    Object.defineProperty(this, name, {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return properties.get(name);\n      },\n      set: function set(value) {\n        var oldValue = properties.get(name); // Fire `set` event before the new value will be set to make it possible\n        // to override observable property without affecting `change` event.\n        // See https://github.com/ckeditor/ckeditor5-utils/issues/171.\n\n        var newValue = this.fire('set:' + name, name, value, oldValue);\n\n        if (newValue === undefined) {\n          newValue = value;\n        } // Allow undefined as an initial value like A.define( 'x', undefined ) (#132).\n        // Note: When properties map has no such own property, then its value is undefined.\n\n\n        if (oldValue !== newValue || !properties.has(name)) {\n          properties.set(name, newValue);\n          this.fire('change:' + name, name, newValue, oldValue);\n        }\n      }\n    });\n    this[name] = value;\n  },\n\n  /**\n   * @inheritDoc\n   */\n  bind: function bind() {\n    var _this2 = this;\n\n    for (var _len = arguments.length, bindProperties = new Array(_len), _key = 0; _key < _len; _key++) {\n      bindProperties[_key] = arguments[_key];\n    }\n\n    if (!bindProperties.length || !isStringArray(bindProperties)) {\n      /**\n       * All properties must be strings.\n       *\n       * @error observable-bind-wrong-properties\n       */\n      throw new CKEditorError('observable-bind-wrong-properties', this);\n    }\n\n    if (new Set(bindProperties).size !== bindProperties.length) {\n      /**\n       * Properties must be unique.\n       *\n       * @error observable-bind-duplicate-properties\n       */\n      throw new CKEditorError('observable-bind-duplicate-properties', this);\n    }\n\n    initObservable(this);\n    var boundProperties = this[boundPropertiesSymbol];\n    bindProperties.forEach(function (propertyName) {\n      if (boundProperties.has(propertyName)) {\n        /**\n         * Cannot bind the same property more than once.\n         *\n         * @error observable-bind-rebind\n         */\n        throw new CKEditorError('observable-bind-rebind', _this2);\n      }\n    });\n    var bindings = new Map(); // @typedef {Object} Binding\n    // @property {Array} property Property which is bound.\n    // @property {Array} to Array of observable–property components of the binding (`{ observable: ..., property: .. }`).\n    // @property {Array} callback A function which processes `to` components.\n\n    bindProperties.forEach(function (a) {\n      var binding = {\n        property: a,\n        to: []\n      };\n      boundProperties.set(a, binding);\n      bindings.set(a, binding);\n    }); // @typedef {Object} BindChain\n    // @property {Function} to See {@link ~ObservableMixin#_bindTo}.\n    // @property {Function} toMany See {@link ~ObservableMixin#_bindToMany}.\n    // @property {module:utils/observablemixin~Observable} _observable The observable which initializes the binding.\n    // @property {Array} _bindProperties Array of `_observable` properties to be bound.\n    // @property {Array} _to Array of `to()` observable–properties (`{ observable: toObservable, properties: ...toProperties }`).\n    // @property {Map} _bindings Stores bindings to be kept in\n    // {@link ~ObservableMixin#_boundProperties}/{@link ~ObservableMixin#_boundObservables}\n    // initiated in this binding chain.\n\n    return {\n      to: bindTo,\n      toMany: bindToMany,\n      _observable: this,\n      _bindProperties: bindProperties,\n      _to: [],\n      _bindings: bindings\n    };\n  },\n\n  /**\n   * @inheritDoc\n   */\n  unbind: function unbind() {\n    var _this3 = this;\n\n    // Nothing to do here if not inited yet.\n    if (!this[observablePropertiesSymbol]) {\n      return;\n    }\n\n    var boundProperties = this[boundPropertiesSymbol];\n    var boundObservables = this[boundObservablesSymbol];\n\n    for (var _len2 = arguments.length, unbindProperties = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      unbindProperties[_key2] = arguments[_key2];\n    }\n\n    if (unbindProperties.length) {\n      if (!isStringArray(unbindProperties)) {\n        /**\n         * Properties must be strings.\n         *\n         * @error observable-unbind-wrong-properties\n         */\n        throw new CKEditorError('observable-unbind-wrong-properties', this);\n      }\n\n      unbindProperties.forEach(function (propertyName) {\n        var binding = boundProperties.get(propertyName); // Nothing to do if the binding is not defined\n\n        if (!binding) {\n          return;\n        }\n\n        var toObservable, toProperty, toProperties, toPropertyBindings;\n        binding.to.forEach(function (to) {\n          // TODO: ES6 destructuring.\n          toObservable = to[0];\n          toProperty = to[1];\n          toProperties = boundObservables.get(toObservable);\n          toPropertyBindings = toProperties[toProperty];\n          toPropertyBindings.delete(binding);\n\n          if (!toPropertyBindings.size) {\n            delete toProperties[toProperty];\n          }\n\n          if (!Object.keys(toProperties).length) {\n            boundObservables.delete(toObservable);\n\n            _this3.stopListening(toObservable, 'change');\n          }\n        });\n        boundProperties.delete(propertyName);\n      });\n    } else {\n      boundObservables.forEach(function (bindings, boundObservable) {\n        _this3.stopListening(boundObservable, 'change');\n      });\n      boundObservables.clear();\n      boundProperties.clear();\n    }\n  },\n\n  /**\n   * @inheritDoc\n   */\n  decorate: function decorate(methodName) {\n    var _this4 = this;\n\n    var originalMethod = this[methodName];\n\n    if (!originalMethod) {\n      /**\n       * Cannot decorate an undefined method.\n       *\n       * @error observablemixin-cannot-decorate-undefined\n       * @param {Object} object The object which method should be decorated.\n       * @param {String} methodName Name of the method which does not exist.\n       */\n      throw new CKEditorError('observablemixin-cannot-decorate-undefined', this, {\n        object: this,\n        methodName: methodName\n      });\n    }\n\n    this.on(methodName, function (evt, args) {\n      evt.return = originalMethod.apply(_this4, args);\n    });\n\n    this[methodName] = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return this.fire(methodName, args);\n    };\n\n    this[methodName][_decoratedOriginal] = originalMethod;\n\n    if (!this[_decoratedMethods]) {\n      this[_decoratedMethods] = [];\n    }\n\n    this[_decoratedMethods].push(methodName);\n  }\n};\nextend(ObservableMixin, EmitterMixin); // Override the EmitterMixin stopListening method to be able to clean (and restore) decorated methods.\n// This is needed in case of:\n//  1. Have x.foo() decorated.\n//  2. Call x.stopListening()\n//  3. Call x.foo(). Problem: nothing happens (the original foo() method is not executed)\n\nObservableMixin.stopListening = function (emitter, event, callback) {\n  // Removing all listeners so let's clean the decorated methods to the original state.\n  if (!emitter && this[_decoratedMethods]) {\n    var _iterator = _createForOfIteratorHelper(this[_decoratedMethods]),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var methodName = _step.value;\n        this[methodName] = this[methodName][_decoratedOriginal];\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    delete this[_decoratedMethods];\n  }\n\n  EmitterMixin.stopListening.call(this, emitter, event, callback);\n};\n\nexport default ObservableMixin; // Init symbol properties needed for the observable mechanism to work.\n//\n// @private\n// @param {module:utils/observablemixin~ObservableMixin} observable\n\nfunction initObservable(observable) {\n  // Do nothing if already inited.\n  if (observable[observablePropertiesSymbol]) {\n    return;\n  } // The internal hash containing the observable's state.\n  //\n  // @private\n  // @type {Map}\n\n\n  Object.defineProperty(observable, observablePropertiesSymbol, {\n    value: new Map()\n  }); // Map containing bindings to external observables. It shares the binding objects\n  // (`{ observable: A, property: 'a', to: ... }`) with {@link module:utils/observablemixin~ObservableMixin#_boundProperties} and\n  // it is used to observe external observables to update own properties accordingly.\n  // See {@link module:utils/observablemixin~ObservableMixin#bind}.\n  //\n  //\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n  //\t\tconsole.log( A._boundObservables );\n  //\n  //\t\t\tMap( {\n  //\t\t\t\tB: {\n  //\t\t\t\t\tx: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n  //\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n  //\t\t\t\t\t] ),\n  //\t\t\t\t\ty: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n  //\t\t\t\t\t] )\n  //\t\t\t\t}\n  //\t\t\t} )\n  //\n  //\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n  //\t\tconsole.log( A._boundObservables );\n  //\n  //\t\t\tMap( {\n  //\t\t\t\tB: {\n  //\t\t\t\t\tx: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n  //\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n  //\t\t\t\t\t] ),\n  //\t\t\t\t\ty: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n  //\t\t\t\t\t] ),\n  //\t\t\t\t\tz: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n  //\t\t\t\t\t] )\n  //\t\t\t\t},\n  //\t\t\t\tC: {\n  //\t\t\t\t\tw: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n  //\t\t\t\t\t] )\n  //\t\t\t\t}\n  //\t\t\t} )\n  //\n  // @private\n  // @type {Map}\n\n  Object.defineProperty(observable, boundObservablesSymbol, {\n    value: new Map()\n  }); // Object that stores which properties of this observable are bound and how. It shares\n  // the binding objects (`{ observable: A, property: 'a', to: ... }`) with\n  // {@link module:utils/observablemixin~ObservableMixin#_boundObservables}. This data structure is\n  // a reverse of {@link module:utils/observablemixin~ObservableMixin#_boundObservables} and it is helpful for\n  // {@link module:utils/observablemixin~ObservableMixin#unbind}.\n  //\n  // See {@link module:utils/observablemixin~ObservableMixin#bind}.\n  //\n  //\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n  //\t\tconsole.log( A._boundProperties );\n  //\n  //\t\t\tMap( {\n  //\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n  //\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n  //\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n  //\t\t\t} )\n  //\n  //\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n  //\t\tconsole.log( A._boundProperties );\n  //\n  //\t\t\tMap( {\n  //\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n  //\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n  //\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] },\n  //\t\t\t\td: { observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n  //\t\t\t} )\n  //\n  // @private\n  // @type {Map}\n\n  Object.defineProperty(observable, boundPropertiesSymbol, {\n    value: new Map()\n  });\n} // A chaining for {@link module:utils/observablemixin~ObservableMixin#bind} providing `.to()` interface.\n//\n// @private\n// @param {...[Observable|String|Function]} args Arguments of the `.to( args )` binding.\n\n\nfunction bindTo() {\n  var _this5 = this;\n\n  var parsedArgs = parseBindToArgs.apply(void 0, arguments);\n  var bindingsKeys = Array.from(this._bindings.keys());\n  var numberOfBindings = bindingsKeys.length; // Eliminate A.bind( 'x' ).to( B, C )\n\n  if (!parsedArgs.callback && parsedArgs.to.length > 1) {\n    /**\n     * Binding multiple observables only possible with callback.\n     *\n     * @error observable-bind-to-no-callback\n     */\n    throw new CKEditorError('observable-bind-to-no-callback', this);\n  } // Eliminate A.bind( 'x', 'y' ).to( B, callback )\n\n\n  if (numberOfBindings > 1 && parsedArgs.callback) {\n    /**\n     * Cannot bind multiple properties and use a callback in one binding.\n     *\n     * @error observable-bind-to-extra-callback\n     */\n    throw new CKEditorError('observable-bind-to-extra-callback', this);\n  }\n\n  parsedArgs.to.forEach(function (to) {\n    // Eliminate A.bind( 'x', 'y' ).to( B, 'a' )\n    if (to.properties.length && to.properties.length !== numberOfBindings) {\n      /**\n       * The number of properties must match.\n       *\n       * @error observable-bind-to-properties-length\n       */\n      throw new CKEditorError('observable-bind-to-properties-length', _this5);\n    } // When no to.properties specified, observing source properties instead i.e.\n    // A.bind( 'x', 'y' ).to( B ) -> Observe B.x and B.y\n\n\n    if (!to.properties.length) {\n      to.properties = _this5._bindProperties;\n    }\n  });\n  this._to = parsedArgs.to; // Fill {@link BindChain#_bindings} with callback. When the callback is set there's only one binding.\n\n  if (parsedArgs.callback) {\n    this._bindings.get(bindingsKeys[0]).callback = parsedArgs.callback;\n  }\n\n  attachBindToListeners(this._observable, this._to); // Update observable._boundProperties and observable._boundObservables.\n\n  updateBindToBound(this); // Set initial values of bound properties.\n\n  this._bindProperties.forEach(function (propertyName) {\n    updateBoundObservableProperty(_this5._observable, propertyName);\n  });\n} // Binds to an attribute in a set of iterable observables.\n//\n// @private\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @param {Function} callback\n\n\nfunction bindToMany(observables, attribute, callback) {\n  if (this._bindings.size > 1) {\n    /**\n     * Binding one attribute to many observables only possible with one attribute.\n     *\n     * @error observable-bind-to-many-not-one-binding\n     */\n    throw new CKEditorError('observable-bind-to-many-not-one-binding', this);\n  }\n\n  this.to.apply(this, _toConsumableArray(getBindingTargets(observables, attribute)).concat([// ...using given callback to parse attribute values.\n  callback]));\n} // Returns an array of binding components for\n// {@link Observable#bind} from a set of iterable observables.\n//\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @returns {Array.<String|Observable>}\n\n\nfunction getBindingTargets(observables, attribute) {\n  var observableAndAttributePairs = observables.map(function (observable) {\n    return [observable, attribute];\n  }); // Merge pairs to one-dimension array of observables and attributes.\n\n  return Array.prototype.concat.apply([], observableAndAttributePairs);\n} // Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\n\n\nfunction isStringArray(arr) {\n  return arr.every(function (a) {\n    return typeof a == 'string';\n  });\n} // Parses and validates {@link Observable#bind}`.to( args )` arguments and returns\n// an object with a parsed structure. For example\n//\n//\t\tA.bind( 'x' ).to( B, 'a', C, 'b', call );\n//\n// becomes\n//\n//\t\t{\n//\t\t\tto: [\n//\t\t\t\t{ observable: B, properties: [ 'a' ] },\n//\t\t\t\t{ observable: C, properties: [ 'b' ] },\n//\t\t\t],\n//\t\t\tcallback: call\n// \t\t}\n//\n// @private\n// @param {...*} args Arguments of {@link Observable#bind}`.to( args )`.\n// @returns {Object}\n\n\nfunction parseBindToArgs() {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  // Eliminate A.bind( 'x' ).to()\n  if (!args.length) {\n    /**\n     * Invalid argument syntax in `to()`.\n     *\n     * @error observable-bind-to-parse-error\n     */\n    throw new CKEditorError('observable-bind-to-parse-error', null);\n  }\n\n  var parsed = {\n    to: []\n  };\n  var lastObservable;\n\n  if (typeof args[args.length - 1] == 'function') {\n    parsed.callback = args.pop();\n  }\n\n  args.forEach(function (a) {\n    if (typeof a == 'string') {\n      lastObservable.properties.push(a);\n    } else if (typeof a == 'object') {\n      lastObservable = {\n        observable: a,\n        properties: []\n      };\n      parsed.to.push(lastObservable);\n    } else {\n      throw new CKEditorError('observable-bind-to-parse-error', null);\n    }\n  });\n  return parsed;\n} // Synchronizes {@link module:utils/observablemixin#_boundObservables} with {@link Binding}.\n//\n// @private\n// @param {Binding} binding A binding to store in {@link Observable#_boundObservables}.\n// @param {Observable} toObservable A observable, which is a new component of `binding`.\n// @param {String} toPropertyName A name of `toObservable`'s property, a new component of the `binding`.\n\n\nfunction updateBoundObservables(observable, binding, toObservable, toPropertyName) {\n  var boundObservables = observable[boundObservablesSymbol];\n  var bindingsToObservable = boundObservables.get(toObservable);\n  var bindings = bindingsToObservable || {};\n\n  if (!bindings[toPropertyName]) {\n    bindings[toPropertyName] = new Set();\n  } // Pass the binding to a corresponding Set in `observable._boundObservables`.\n\n\n  bindings[toPropertyName].add(binding);\n\n  if (!bindingsToObservable) {\n    boundObservables.set(toObservable, bindings);\n  }\n} // Synchronizes {@link Observable#_boundProperties} and {@link Observable#_boundObservables}\n// with {@link BindChain}.\n//\n// Assuming the following binding being created\n//\n// \t\tA.bind( 'a', 'b' ).to( B, 'x', 'y' );\n//\n// the following bindings were initialized by {@link Observable#bind} in {@link BindChain#_bindings}:\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [] },\n// \t\t\tb: { observable: A, property: 'b', to: [] },\n// \t\t}\n//\n// Iterate over all bindings in this chain and fill their `to` properties with\n// corresponding to( ... ) arguments (components of the binding), so\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [ B, 'x' ] },\n// \t\t\tb: { observable: A, property: 'b', to: [ B, 'y' ] },\n// \t\t}\n//\n// Then update the structure of {@link Observable#_boundObservables} with updated\n// binding, so it becomes:\n//\n// \t\tMap( {\n// \t\t\tB: {\n// \t\t\t\tx: Set( [\n// \t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] }\n// \t\t\t\t] ),\n// \t\t\t\ty: Set( [\n// \t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n// \t\t\t\t] )\n//\t\t\t}\n// \t\t} )\n//\n// @private\n// @param {BindChain} chain The binding initialized by {@link Observable#bind}.\n\n\nfunction updateBindToBound(chain) {\n  var toProperty;\n\n  chain._bindings.forEach(function (binding, propertyName) {\n    // Note: For a binding without a callback, this will run only once\n    // like in A.bind( 'x', 'y' ).to( B, 'a', 'b' )\n    // TODO: ES6 destructuring.\n    chain._to.forEach(function (to) {\n      toProperty = to.properties[binding.callback ? 0 : chain._bindProperties.indexOf(propertyName)];\n      binding.to.push([to.observable, toProperty]);\n      updateBoundObservables(chain._observable, binding, to.observable, toProperty);\n    });\n  });\n} // Updates an property of a {@link Observable} with a value\n// determined by an entry in {@link Observable#_boundProperties}.\n//\n// @private\n// @param {Observable} observable A observable which property is to be updated.\n// @param {String} propertyName An property to be updated.\n\n\nfunction updateBoundObservableProperty(observable, propertyName) {\n  var boundProperties = observable[boundPropertiesSymbol];\n  var binding = boundProperties.get(propertyName);\n  var propertyValue; // When a binding with callback is created like\n  //\n  // \t\tA.bind( 'a' ).to( B, 'b', C, 'c', callback );\n  //\n  // collect B.b and C.c, then pass them to callback to set A.a.\n\n  if (binding.callback) {\n    propertyValue = binding.callback.apply(observable, binding.to.map(function (to) {\n      return to[0][to[1]];\n    }));\n  } else {\n    propertyValue = binding.to[0];\n    propertyValue = propertyValue[0][propertyValue[1]];\n  }\n\n  if (Object.prototype.hasOwnProperty.call(observable, propertyName)) {\n    observable[propertyName] = propertyValue;\n  } else {\n    observable.set(propertyName, propertyValue);\n  }\n} // Starts listening to changes in {@link BindChain._to} observables to update\n// {@link BindChain._observable} {@link BindChain._bindProperties}. Also sets the\n// initial state of {@link BindChain._observable}.\n//\n// @private\n// @param {BindChain} chain The chain initialized by {@link Observable#bind}.\n\n\nfunction attachBindToListeners(observable, toBindings) {\n  toBindings.forEach(function (to) {\n    var boundObservables = observable[boundObservablesSymbol];\n    var bindings; // If there's already a chain between the observables (`observable` listens to\n    // `to.observable`), there's no need to create another `change` event listener.\n\n    if (!boundObservables.get(to.observable)) {\n      observable.listenTo(to.observable, 'change', function (evt, propertyName) {\n        bindings = boundObservables.get(to.observable)[propertyName]; // Note: to.observable will fire for any property change, react\n        // to changes of properties which are bound only.\n\n        if (bindings) {\n          bindings.forEach(function (binding) {\n            updateBoundObservableProperty(observable, binding.property);\n          });\n        }\n      });\n    }\n  });\n}\n/**\n * An interface which adds \"observable properties\" and data binding functionality.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/observablemixin~ObservableMixin} mixin.\n *\n * Read more about the usage of this interface in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables Event system and observables}\n * section of the {@glink framework/guides/architecture/core-editor-architecture Core editor architecture} guide,\n * * {@glink framework/guides/deep-dive/observables Observables deep dive} guide.\n *\n * @interface Observable\n * @extends module:utils/emittermixin~Emitter\n */\n\n/**\n * Fired when a property changed value.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `${ propertyName } has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'prop has changed from 1 to 2'\n *\n * @event change:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Fired when a property value is going to be set but is not set yet (before the `change` event is fired).\n *\n * You can control the final value of the property by using\n * the {@link module:utils/eventinfo~EventInfo#return event's `return` property}.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'set:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value is going to be changed from ${ oldValue } to ${ newValue }` );\n *\t\t\tconsole.log( `Current property value is ${ observable[ propertyName ] }` );\n *\n *\t\t\t// Let's override the value.\n *\t\t\tevt.return = 3;\n *\t\t} );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'Value is going to be changed from 1 to 2'\n *\t\t                     // -> 'Current property value is 1'\n *\t\t                     // -> 'Value has changed from 1 to 3'\n *\n * **Note:** The event is fired even when the new value is the same as the old value.\n *\n * @event set:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Creates and sets the value of an observable property of this object. Such a property becomes a part\n * of the state and is observable.\n *\n * It accepts also a single object literal containing key/value pairs with properties to be set.\n *\n * This method throws the `observable-set-cannot-override` error if the observable instance already\n * has a property with the given property name. This prevents from mistakenly overriding existing\n * properties and methods, but means that `foo.set( 'bar', 1 )` may be slightly slower than `foo.bar = 1`.\n *\n * @method #set\n * @param {String|Object} name The property's name or object with `name=>value` pairs.\n * @param {*} [value] The property's value (if `name` was passed in the first parameter).\n */\n\n/**\n * Binds {@link #set observable properties} to other objects implementing the\n * {@link module:utils/observablemixin~Observable} interface.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#property-bindings dedicated guide}\n * covering the topic of property bindings with some additional examples.\n *\n * Consider two objects: a `button` and an associated `command` (both `Observable`).\n *\n * A simple property binding could be as follows:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled' );\n *\n * or even shorter:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\n * which works in the following way:\n *\n * * `button.isEnabled` **instantly equals** `command.isEnabled`,\n * * whenever `command.isEnabled` changes, `button.isEnabled` will immediately reflect its value.\n *\n * **Note**: To release the binding, use {@link module:utils/observablemixin~Observable#unbind}.\n *\n * You can also \"rename\" the property in the binding by specifying the new name in the `to()` chain:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isWorking' );\n *\n * It is possible to bind more than one property at a time to shorten the code:\n *\n *\t\tbutton.bind( 'isEnabled', 'value' ).to( command );\n *\n * which corresponds to:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\t\tbutton.bind( 'value' ).to( command );\n *\n * The binding can include more than one observable, combining multiple data sources in a custom callback:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled', ui, 'isVisible',\n *\t\t\t( isCommandEnabled, isUIVisible ) => isCommandEnabled && isUIVisible );\n *\n * Using a custom callback allows processing the value before passing it to the target property:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'value', value => value === 'heading1' );\n *\n * It is also possible to bind to the same property in an array of observables.\n * To bind a `button` to multiple commands (also `Observables`) so that each and every one of them\n * must be enabled for the button to become enabled, use the following code:\n *\n *\t\tbutton.bind( 'isEnabled' ).toMany( [ commandA, commandB, commandC ], 'isEnabled',\n *\t\t\t( isAEnabled, isBEnabled, isCEnabled ) => isAEnabled && isBEnabled && isCEnabled );\n *\n * @method #bind\n * @param {...String} bindProperties Observable properties that will be bound to other observable(s).\n * @returns {Object} The bind chain with the `to()` and `toMany()` methods.\n */\n\n/**\n * Removes the binding created with {@link #bind}.\n *\n *\t\t// Removes the binding for the 'a' property.\n *\t\tA.unbind( 'a' );\n *\n *\t\t// Removes bindings for all properties.\n *\t\tA.unbind();\n *\n * @method #unbind\n * @param {...String} [unbindProperties] Observable properties to be unbound. All the bindings will\n * be released if no properties are provided.\n */\n\n/**\n * Turns the given methods of this object into event-based ones. This means that the new method will fire an event\n * (named after the method) and the original action will be plugged as a listener to that event.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#decorating-object-methods dedicated guide}\n * covering the topic of decorating methods with some additional examples.\n *\n * Decorating the method does not change its behavior (it only adds an event),\n * but it allows to modify it later on by listening to the method's event.\n *\n * For example, to cancel the method execution the event can be {@link module:utils/eventinfo~EventInfo#stop stopped}:\n *\n *\t\tclass Foo {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.decorate( 'method' );\n *\t\t\t}\n *\n *\t\t\tmethod() {\n *\t\t\t\tconsole.log( 'called!' );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst foo = new Foo();\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.stop();\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method(); // Nothing is logged.\n *\n *\n * **Note**: The high {@link module:utils/priorities~PriorityString priority} listener\n * has been used to execute this particular callback before the one which calls the original method\n * (which uses the \"normal\" priority).\n *\n * It is also possible to change the returned value:\n *\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.return = 'Foo!';\n *\t\t} );\n *\n *\t\tfoo.method(); // -> 'Foo'\n *\n * Finally, it is possible to access and modify the arguments the method is called with:\n *\n *\t\tmethod( a, b ) {\n *\t\t\tconsole.log( `${ a }, ${ b }`  );\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tfoo.on( 'method', ( evt, args ) => {\n *\t\t\targs[ 0 ] = 3;\n *\n *\t\t\tconsole.log( args[ 1 ] ); // -> 2\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method( 1, 2 ); // -> '3, 2'\n *\n * @method #decorate\n * @param {String} methodName Name of the method to decorate.\n */","map":null,"metadata":{},"sourceType":"module"}