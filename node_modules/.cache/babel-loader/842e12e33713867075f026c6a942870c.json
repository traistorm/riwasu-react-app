{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\n(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error('SUNEDITOR_MODULES a window with a document');\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  }\n})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\n  var resizing = {\n    name: 'resizing',\n\n    /**\n     * @description Constructor\n     * Require context properties when resizing module\n        inputX: Element,\n        inputY: Element,\n        _container: null,\n        _cover: null,\n        _element: null,\n        _element_w: 1,\n        _element_h: 1,\n        _element_l: 0,\n        _element_t: 0,\n        _defaultSizeX: 'auto',\n        _defaultSizeY: 'auto',\n        _origin_w: core.options.imageWidth === 'auto' ? '' : core.options.imageWidth,\n        _origin_h: core.options.imageHeight === 'auto' ? '' : core.options.imageHeight,\n        _proportionChecked: true,\n        // -- select function --\n        _resizing: core.options.imageResizing,\n        _resizeDotHide: !core.options.imageHeightShow,\n        _rotation: core.options.imageRotation,\n        _onlyPercentage: core.options.imageSizeOnlyPercentage,\n        _ratio: false,\n        _ratioX: 1,\n        _ratioY: 1\n        _captionShow: true,\n        // -- when used caption (_captionShow: true) --\n        _caption: null,\n        _captionChecked: false,\n        captionCheckEl: null,\n     * @param {Object} core Core object \n     */\n    add: function add(core) {\n      var icons = core.icons;\n      var context = core.context;\n      context.resizing = {\n        _resizeClientX: 0,\n        _resizeClientY: 0,\n        _resize_plugin: '',\n        _resize_w: 0,\n        _resize_h: 0,\n        _origin_w: 0,\n        _origin_h: 0,\n        _rotateVertical: false,\n        _resize_direction: '',\n        _move_path: null,\n        _isChange: false,\n        alignIcons: {\n          basic: icons.align_justify,\n          left: icons.align_left,\n          right: icons.align_right,\n          center: icons.align_center\n        }\n      };\n      /** resize controller, button */\n\n      var resize_div_container = this.setController_resize(core);\n      context.resizing.resizeContainer = resize_div_container;\n      context.resizing.resizeDiv = resize_div_container.querySelector('.se-modal-resize');\n      context.resizing.resizeDot = resize_div_container.querySelector('.se-resize-dot');\n      context.resizing.resizeDisplay = resize_div_container.querySelector('.se-resize-display');\n      var resize_button = this.setController_button(core);\n      context.resizing.resizeButton = resize_button;\n      var resize_handles = context.resizing.resizeHandles = context.resizing.resizeDot.querySelectorAll('span');\n      context.resizing.resizeButtonGroup = resize_button.querySelector('._se_resizing_btn_group');\n      context.resizing.rotationButtons = resize_button.querySelectorAll('._se_resizing_btn_group ._se_rotation');\n      context.resizing.percentageButtons = resize_button.querySelectorAll('._se_resizing_btn_group ._se_percentage');\n      context.resizing.alignMenu = resize_button.querySelector('.se-resizing-align-list');\n      context.resizing.alignMenuList = context.resizing.alignMenu.querySelectorAll('button');\n      context.resizing.alignButton = resize_button.querySelector('._se_resizing_align_button');\n      context.resizing.autoSizeButton = resize_button.querySelector('._se_resizing_btn_group ._se_auto_size');\n      context.resizing.captionButton = resize_button.querySelector('._se_resizing_caption_button');\n      /** add event listeners */\n\n      resize_div_container.addEventListener('mousedown', function (e) {\n        e.preventDefault();\n      });\n      resize_handles[0].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(core));\n      resize_handles[1].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(core));\n      resize_handles[2].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(core));\n      resize_handles[3].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(core));\n      resize_handles[4].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(core));\n      resize_handles[5].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(core));\n      resize_handles[6].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(core));\n      resize_handles[7].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(core));\n      resize_button.addEventListener('click', this.onClick_resizeButton.bind(core));\n      /** append html */\n\n      context.element.relative.appendChild(resize_div_container);\n      context.element.relative.appendChild(resize_button);\n      /** empty memory */\n\n      resize_div_container = null, resize_button = null, resize_handles = null;\n    },\n\n    /** resize controller, button (image, iframe, video) */\n    setController_resize: function setController_resize(core) {\n      var resize_container = core.util.createElement('DIV');\n      resize_container.className = 'se-controller se-resizing-container';\n      resize_container.style.display = 'none';\n      resize_container.innerHTML = '' + '<div class=\"se-modal-resize\"></div>' + '<div class=\"se-resize-dot\">' + '<span class=\"tl\"></span>' + '<span class=\"tr\"></span>' + '<span class=\"bl\"></span>' + '<span class=\"br\"></span>' + '<span class=\"lw\"></span>' + '<span class=\"th\"></span>' + '<span class=\"rw\"></span>' + '<span class=\"bh\"></span>' + '<div class=\"se-resize-display\"></div>' + '</div>';\n      return resize_container;\n    },\n    setController_button: function setController_button(core) {\n      var lang = core.lang;\n      var icons = core.icons;\n      var resize_button = core.util.createElement(\"DIV\");\n      resize_button.className = \"se-controller se-controller-resizing\";\n      resize_button.innerHTML = '' + '<div class=\"se-arrow se-arrow-up\"></div>' + '<div class=\"se-btn-group _se_resizing_btn_group\">' + '<button type=\"button\" data-command=\"percent\" data-value=\"1\" class=\"se-tooltip _se_percentage\">' + '<span>100%</span>' + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.resize100 + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"percent\" data-value=\"0.75\" class=\"se-tooltip _se_percentage\">' + '<span>75%</span>' + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.resize75 + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"percent\" data-value=\"0.5\" class=\"se-tooltip _se_percentage\">' + '<span>50%</span>' + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.resize50 + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"auto\" class=\"se-btn se-tooltip _se_auto_size\">' + icons.auto_size + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.autoSize + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"rotate\" data-value=\"-90\" class=\"se-btn se-tooltip _se_rotation\">' + icons.rotate_left + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.rotateLeft + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"rotate\" data-value=\"90\" class=\"se-btn se-tooltip _se_rotation\">' + icons.rotate_right + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.rotateRight + '</span></span>' + '</button>' + '</div>' + '<div class=\"se-btn-group\" style=\"padding-top: 0;\">' + '<button type=\"button\" data-command=\"mirror\" data-value=\"h\" class=\"se-btn se-tooltip\">' + icons.mirror_horizontal + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.mirrorHorizontal + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"mirror\" data-value=\"v\" class=\"se-btn se-tooltip\">' + icons.mirror_vertical + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.mirrorVertical + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"onalign\" class=\"se-btn se-tooltip _se_resizing_align_button\">' + icons.align_justify + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.toolbar.align + '</span></span>' + '</button>' + '<div class=\"se-btn-group-sub sun-editor-common se-list-layer se-resizing-align-list\">' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"basic\">' + icons.align_justify + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.basic + '</span></span>' + '</button></li>' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"left\">' + icons.align_left + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.left + '</span></span>' + '</button></li>' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"center\">' + icons.align_center + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.center + '</span></span>' + '</button></li>' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"right\">' + icons.align_right + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.right + '</span></span>' + '</button></li>' + '</ul>' + '</div>' + '</div>' + '<button type=\"button\" data-command=\"caption\" class=\"se-btn se-tooltip _se_resizing_caption_button\">' + icons.caption + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.caption + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"revert\" class=\"se-btn se-tooltip\">' + icons.revert + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.revertButton + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"update\" class=\"se-btn se-tooltip\">' + icons.modify + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.edit + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"delete\" class=\"se-btn se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + '</span></span>' + '</button>' + '</div>';\n      return resize_button;\n    },\n\n    /**\n     * @description Gets the width size\n     * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n     * @param {Element} element Target element\n     * @param {Element} cover Cover element (FIGURE)\n     * @param {Element} container Container element (DIV.se-component)\n     * @returns {String}\n     */\n    _module_getSizeX: function _module_getSizeX(contextPlugin, element, cover, container) {\n      if (!element) element = contextPlugin._element;\n      if (!cover) cover = contextPlugin._cover;\n      if (!container) container = contextPlugin._container;\n      if (!element) return '';\n      return !/%$/.test(element.style.width) ? element.style.width : (container && this.util.getNumber(container.style.width, 2) || 100) + '%';\n    },\n\n    /**\n     * @description Gets the height size\n     * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n     * @param {Element} element Target element\n     * @param {Element} cover Cover element (FIGURE)\n     * @param {Element} container Container element (DIV.se-component)\n     * @returns {String}\n     */\n    _module_getSizeY: function _module_getSizeY(contextPlugin, element, cover, container) {\n      if (!element) element = contextPlugin._element;\n      if (!cover) cover = contextPlugin._cover;\n      if (!container) container = contextPlugin._container;\n      if (!container || !cover) return element && element.style.height || '';\n      return this.util.getNumber(cover.style.paddingBottom, 0) > 0 && !this.context.resizing._rotateVertical ? cover.style.height : !/%$/.test(element.style.height) || !/%$/.test(element.style.width) ? element.style.height : (container && this.util.getNumber(container.style.height, 2) || 100) + '%';\n    },\n\n    /**\n     * @description Called at the \"openModify\" to put the size of the current target into the size input element.\n     * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n     * @param {Object} pluginObj Plugin object\n     */\n    _module_setModifyInputSize: function _module_setModifyInputSize(contextPlugin, pluginObj) {\n      var percentageRotation = contextPlugin._onlyPercentage && this.context.resizing._rotateVertical;\n      contextPlugin.proportion.checked = contextPlugin._proportionChecked = contextPlugin._element.getAttribute('data-proportion') !== 'false';\n      var x = percentageRotation ? '' : this.plugins.resizing._module_getSizeX.call(this, contextPlugin);\n      if (x === contextPlugin._defaultSizeX) x = '';\n      if (contextPlugin._onlyPercentage) x = this.util.getNumber(x, 2);\n      contextPlugin.inputX.value = x;\n      pluginObj.setInputSize.call(this, 'x');\n\n      if (!contextPlugin._onlyPercentage) {\n        var y = percentageRotation ? '' : this.plugins.resizing._module_getSizeY.call(this, contextPlugin);\n        if (y === contextPlugin._defaultSizeY) y = '';\n        if (contextPlugin._onlyPercentage) y = this.util.getNumber(y, 2);\n        contextPlugin.inputY.value = y;\n      }\n\n      contextPlugin.inputX.disabled = percentageRotation ? true : false;\n      contextPlugin.inputY.disabled = percentageRotation ? true : false;\n      contextPlugin.proportion.disabled = percentageRotation ? true : false;\n      pluginObj.setRatio.call(this);\n    },\n\n    /**\n     * @description It is called in \"setInputSize\" (input tag keyupEvent), \n     * checks the value entered in the input tag, \n     * calculates the ratio, and sets the calculated value in the input tag of the opposite size.\n     * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n     * @param {String} xy 'x': width, 'y': height\n     */\n    _module_setInputSize: function _module_setInputSize(contextPlugin, xy) {\n      if (contextPlugin._onlyPercentage) {\n        if (xy === 'x' && contextPlugin.inputX.value > 100) contextPlugin.inputX.value = 100;\n        return;\n      }\n\n      if (contextPlugin.proportion.checked && contextPlugin._ratio && /\\d/.test(contextPlugin.inputX.value) && /\\d/.test(contextPlugin.inputY.value)) {\n        var xUnit = contextPlugin.inputX.value.replace(/\\d+|\\./g, '') || contextPlugin.sizeUnit;\n        var yUnit = contextPlugin.inputY.value.replace(/\\d+|\\./g, '') || contextPlugin.sizeUnit;\n        if (xUnit !== yUnit) return;\n        var dec = xUnit === '%' ? 2 : 0;\n\n        if (xy === 'x') {\n          contextPlugin.inputY.value = this.util.getNumber(contextPlugin._ratioY * this.util.getNumber(contextPlugin.inputX.value, dec), dec) + yUnit;\n        } else {\n          contextPlugin.inputX.value = this.util.getNumber(contextPlugin._ratioX * this.util.getNumber(contextPlugin.inputY.value, dec), dec) + xUnit;\n        }\n      }\n    },\n\n    /**\n     * @description It is called in \"setRatio\" (input and proportionCheck tags changeEvent), \n     * checks the value of the input tag, calculates the ratio, and resets it in the input tag.\n     * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n     */\n    _module_setRatio: function _module_setRatio(contextPlugin) {\n      var xValue = contextPlugin.inputX.value;\n      var yValue = contextPlugin.inputY.value;\n\n      if (contextPlugin.proportion.checked && /\\d+/.test(xValue) && /\\d+/.test(yValue)) {\n        var xUnit = xValue.replace(/\\d+|\\./g, '') || contextPlugin.sizeUnit;\n        var yUnit = yValue.replace(/\\d+|\\./g, '') || contextPlugin.sizeUnit;\n\n        if (xUnit !== yUnit) {\n          contextPlugin._ratio = false;\n        } else if (!contextPlugin._ratio) {\n          var x = this.util.getNumber(xValue, 0);\n          var y = this.util.getNumber(yValue, 0);\n          contextPlugin._ratio = true;\n          contextPlugin._ratioX = x / y;\n          contextPlugin._ratioY = y / x;\n        }\n      } else {\n        contextPlugin._ratio = false;\n      }\n    },\n\n    /**\n     * @description Revert size of element to origin size (plugin._origin_w, plugin._origin_h)\n     * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n     */\n    _module_sizeRevert: function _module_sizeRevert(contextPlugin) {\n      if (contextPlugin._onlyPercentage) {\n        contextPlugin.inputX.value = contextPlugin._origin_w > 100 ? 100 : contextPlugin._origin_w;\n      } else {\n        contextPlugin.inputX.value = contextPlugin._origin_w;\n        contextPlugin.inputY.value = contextPlugin._origin_h;\n      }\n    },\n\n    /**\n     * @description Save the size data (element.setAttribute(\"data-size\"))\n     * Used at the \"setSize\" method\n     * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n     */\n    _module_saveCurrentSize: function _module_saveCurrentSize(contextPlugin) {\n      var x = this.plugins.resizing._module_getSizeX.call(this, contextPlugin);\n\n      var y = this.plugins.resizing._module_getSizeY.call(this, contextPlugin);\n\n      contextPlugin._element.setAttribute('data-size', x + ',' + y);\n\n      if (!!contextPlugin._videoRatio) contextPlugin._videoRatio = y;\n    },\n\n    /**\n     * @description Call the resizing module\n     * @param {Element} targetElement Resizing target element\n     * @param {string} plugin Plugin name\n     * @returns {Object} Size of resizing div {w, h, t, l}\n     */\n    call_controller_resize: function call_controller_resize(targetElement, plugin) {\n      var contextResizing = this.context.resizing;\n      var contextPlugin = this.context[plugin];\n      contextResizing._resize_plugin = plugin;\n      var resizeContainer = contextResizing.resizeContainer;\n      var resizeDiv = contextResizing.resizeDiv;\n      var offset = this.util.getOffset(targetElement, this.context.element.wysiwygFrame);\n      var isVertical = contextResizing._rotateVertical = /^(90|270)$/.test(Math.abs(targetElement.getAttribute('data-rotate')).toString());\n      var w = isVertical ? targetElement.offsetHeight : targetElement.offsetWidth;\n      var h = isVertical ? targetElement.offsetWidth : targetElement.offsetHeight;\n      var t = offset.top;\n      var l = offset.left - this.context.element.wysiwygFrame.scrollLeft;\n      resizeContainer.style.top = t + 'px';\n      resizeContainer.style.left = l + 'px';\n      resizeContainer.style.width = w + 'px';\n      resizeContainer.style.height = h + 'px';\n      resizeDiv.style.top = '0px';\n      resizeDiv.style.left = '0px';\n      resizeDiv.style.width = w + 'px';\n      resizeDiv.style.height = h + 'px';\n      var align = targetElement.getAttribute('data-align') || 'basic';\n      align = align === 'none' ? 'basic' : align; // text\n\n      var container = this.util.getParentElement(targetElement, this.util.isComponent);\n      var cover = this.util.getParentElement(targetElement, 'FIGURE');\n      var displayX = this.plugins.resizing._module_getSizeX.call(this, contextPlugin, targetElement, cover, container) || 'auto';\n      var displayY = contextPlugin._onlyPercentage && plugin === 'image' ? '' : ', ' + (this.plugins.resizing._module_getSizeY.call(this, contextPlugin, targetElement, cover, container) || 'auto');\n      this.util.changeTxt(contextResizing.resizeDisplay, this.lang.dialogBox[align] + ' (' + displayX + displayY + ')'); // resizing display\n\n      contextResizing.resizeButtonGroup.style.display = contextPlugin._resizing ? '' : 'none';\n      var resizeDotShow = contextPlugin._resizing && !contextPlugin._resizeDotHide && !contextPlugin._onlyPercentage ? 'flex' : 'none';\n      var resizeHandles = contextResizing.resizeHandles;\n\n      for (var i = 0, len = resizeHandles.length; i < len; i++) {\n        resizeHandles[i].style.display = resizeDotShow;\n      }\n\n      if (contextPlugin._resizing) {\n        var rotations = contextResizing.rotationButtons;\n        rotations[0].style.display = rotations[1].style.display = contextPlugin._rotation ? '' : 'none';\n      } // align icon\n\n\n      if (contextPlugin._alignHide) {\n        contextResizing.alignButton.style.display = 'none';\n      } else {\n        contextResizing.alignButton.style.display = '';\n        var alignList = contextResizing.alignMenuList;\n        this.util.changeElement(contextResizing.alignButton.firstElementChild, contextResizing.alignIcons[align]);\n\n        for (var _i = 0, _len = alignList.length; _i < _len; _i++) {\n          if (alignList[_i].getAttribute('data-value') === align) this.util.addClass(alignList[_i], 'on');else this.util.removeClass(alignList[_i], 'on');\n        }\n      } // percentage active\n\n\n      var pButtons = contextResizing.percentageButtons;\n      var value = /%$/.test(targetElement.style.width) && /%$/.test(container.style.width) ? this.util.getNumber(container.style.width, 0) / 100 + '' : '';\n\n      for (var _i2 = 0, _len2 = pButtons.length; _i2 < _len2; _i2++) {\n        if (pButtons[_i2].getAttribute('data-value') === value) {\n          this.util.addClass(pButtons[_i2], 'active');\n        } else {\n          this.util.removeClass(pButtons[_i2], 'active');\n        }\n      } // caption display, active\n\n\n      if (!contextPlugin._captionShow) {\n        contextResizing.captionButton.style.display = 'none';\n      } else {\n        contextResizing.captionButton.style.display = '';\n\n        if (this.util.getChildElement(targetElement.parentNode, 'figcaption')) {\n          this.util.addClass(contextResizing.captionButton, 'active');\n          contextPlugin._captionChecked = true;\n        } else {\n          this.util.removeClass(contextResizing.captionButton, 'active');\n          contextPlugin._captionChecked = false;\n        }\n      }\n\n      resizeContainer.style.display = 'block';\n      var addOffset = {\n        left: 0,\n        top: 50\n      };\n\n      if (this.options.iframe) {\n        addOffset.left -= this.context.element.wysiwygFrame.parentElement.offsetLeft;\n        addOffset.top -= this.context.element.wysiwygFrame.parentElement.offsetTop;\n      }\n\n      this.setControllerPosition(contextResizing.resizeButton, resizeContainer, 'bottom', addOffset);\n      this.controllersOn(resizeContainer, contextResizing.resizeButton, this.util.setDisabledButtons.bind(this.util, false, this.resizingDisabledButtons), targetElement, plugin);\n      this.util.setDisabledButtons(true, this.resizingDisabledButtons);\n      contextResizing._resize_w = w;\n      contextResizing._resize_h = h;\n      var originSize = (targetElement.getAttribute('origin-size') || '').split(',');\n      contextResizing._origin_w = originSize[0] || targetElement.naturalWidth;\n      contextResizing._origin_h = originSize[1] || targetElement.naturalHeight;\n      return {\n        w: w,\n        h: h,\n        t: t,\n        l: l\n      };\n    },\n    _closeAlignMenu: null,\n\n    /**\n     * @description Open align submenu of module\n     */\n    openAlignMenu: function openAlignMenu() {\n      var alignButton = this.context.resizing.alignButton;\n      this.util.addClass(alignButton, 'on');\n      this.context.resizing.alignMenu.style.top = alignButton.offsetTop + alignButton.offsetHeight + 'px';\n      this.context.resizing.alignMenu.style.left = alignButton.offsetLeft - alignButton.offsetWidth / 2 + 'px';\n      this.context.resizing.alignMenu.style.display = 'block';\n\n      this.plugins.resizing._closeAlignMenu = function () {\n        this.util.removeClass(this.context.resizing.alignButton, 'on');\n        this.context.resizing.alignMenu.style.display = 'none';\n        this.removeDocEvent('click', this.plugins.resizing._closeAlignMenu);\n        this.plugins.resizing._closeAlignMenu = null;\n      }.bind(this);\n\n      this.addDocEvent('click', this.plugins.resizing._closeAlignMenu);\n    },\n\n    /**\n     * @description Click event of resizing toolbar\n     * Performs the action of the clicked toolbar button.\n     * @param {MouseEvent} e Event object\n     */\n    onClick_resizeButton: function onClick_resizeButton(e) {\n      e.stopPropagation();\n      var target = e.target;\n      var command = target.getAttribute('data-command') || target.parentNode.getAttribute('data-command');\n      if (!command) return;\n      var value = target.getAttribute('data-value') || target.parentNode.getAttribute('data-value');\n      var pluginName = this.context.resizing._resize_plugin;\n      var currentContext = this.context[pluginName];\n      var contextEl = currentContext._element;\n      var currentModule = this.plugins[pluginName];\n      e.preventDefault();\n\n      if (typeof this.plugins.resizing._closeAlignMenu === 'function') {\n        this.plugins.resizing._closeAlignMenu();\n\n        if (command === 'onalign') return;\n      }\n\n      switch (command) {\n        case 'auto':\n          this.plugins.resizing.resetTransform.call(this, contextEl);\n          currentModule.setAutoSize.call(this);\n          this.selectComponent(contextEl, pluginName);\n          break;\n\n        case 'percent':\n          var percentY = this.plugins.resizing._module_getSizeY.call(this, currentContext);\n\n          if (this.context.resizing._rotateVertical) {\n            var percentage = contextEl.getAttribute('data-percentage');\n            if (percentage) percentY = percentage.split(',')[1];\n          }\n\n          this.plugins.resizing.resetTransform.call(this, contextEl);\n          currentModule.setPercentSize.call(this, value * 100, this.util.getNumber(percentY, 0) === null || !/%$/.test(percentY) ? '' : percentY);\n          this.selectComponent(contextEl, pluginName);\n          break;\n\n        case 'mirror':\n          var r = contextEl.getAttribute('data-rotate') || '0';\n          var x = contextEl.getAttribute('data-rotateX') || '';\n          var y = contextEl.getAttribute('data-rotateY') || '';\n\n          if (value === 'h' && !this.context.resizing._rotateVertical || value === 'v' && this.context.resizing._rotateVertical) {\n            y = y ? '' : '180';\n          } else {\n            x = x ? '' : '180';\n          }\n\n          contextEl.setAttribute('data-rotateX', x);\n          contextEl.setAttribute('data-rotateY', y);\n\n          this.plugins.resizing._setTransForm(contextEl, r, x, y);\n\n          break;\n\n        case 'rotate':\n          var contextResizing = this.context.resizing;\n          var slope = contextEl.getAttribute('data-rotate') * 1 + value * 1;\n          var deg = this._w.Math.abs(slope) >= 360 ? 0 : slope;\n          contextEl.setAttribute('data-rotate', deg);\n          contextResizing._rotateVertical = /^(90|270)$/.test(this._w.Math.abs(deg).toString());\n          this.plugins.resizing.setTransformSize.call(this, contextEl, null, null);\n          this.selectComponent(contextEl, pluginName);\n          break;\n\n        case 'onalign':\n          this.plugins.resizing.openAlignMenu.call(this);\n          return;\n\n        case 'align':\n          var alignValue = value === 'basic' ? 'none' : value;\n          currentModule.setAlign.call(this, alignValue, null, null, null);\n          this.selectComponent(contextEl, pluginName);\n          break;\n\n        case 'caption':\n          var caption = !currentContext._captionChecked;\n          currentModule.openModify.call(this, true);\n          currentContext._captionChecked = currentContext.captionCheckEl.checked = caption;\n          currentModule.update_image.call(this, false, false, false);\n\n          if (caption) {\n            var captionText = this.util.getChildElement(currentContext._caption, function (current) {\n              return current.nodeType === 3;\n            });\n\n            if (!captionText) {\n              currentContext._caption.focus();\n            } else {\n              this.setRange(captionText, 0, captionText, captionText.textContent.length);\n            }\n\n            this.controllersOff();\n          } else {\n            this.selectComponent(contextEl, pluginName);\n            currentModule.openModify.call(this, true);\n          }\n\n          break;\n\n        case 'revert':\n          currentModule.setOriginSize.call(this);\n          this.selectComponent(contextEl, pluginName);\n          break;\n\n        case 'update':\n          currentModule.openModify.call(this);\n          this.controllersOff();\n          break;\n\n        case 'delete':\n          currentModule.destroy.call(this);\n          break;\n      } // history stack\n\n\n      this.history.push(false);\n    },\n\n    /**\n     * @description Initialize the transform style (rotation) of the element.\n     * @param {Element} element Target element\n     */\n    resetTransform: function resetTransform(element) {\n      var size = (element.getAttribute('data-size') || element.getAttribute('data-origin') || '').split(',');\n      this.context.resizing._rotateVertical = false;\n      element.style.maxWidth = '';\n      element.style.transform = '';\n      element.style.transformOrigin = '';\n      element.setAttribute('data-rotate', '');\n      element.setAttribute('data-rotateX', '');\n      element.setAttribute('data-rotateY', '');\n\n      this.plugins[this.context.resizing._resize_plugin].setSize.call(this, size[0] ? size[0] : 'auto', size[1] ? size[1] : '', true);\n    },\n\n    /**\n     * @description Set the transform style (rotation) of the element.\n     * @param {Element} element Target element\n     * @param {Number|null} width Element's width size\n     * @param {Number|null} height Element's height size\n     */\n    setTransformSize: function setTransformSize(element, width, height) {\n      var percentage = element.getAttribute('data-percentage');\n      var isVertical = this.context.resizing._rotateVertical;\n      var deg = element.getAttribute('data-rotate') * 1;\n      var transOrigin = '';\n\n      if (percentage && !isVertical) {\n        percentage = percentage.split(',');\n\n        if (percentage[0] === 'auto' && percentage[1] === 'auto') {\n          this.plugins[this.context.resizing._resize_plugin].setAutoSize.call(this);\n        } else {\n          this.plugins[this.context.resizing._resize_plugin].setPercentSize.call(this, percentage[0], percentage[1]);\n        }\n      } else {\n        var cover = this.util.getParentElement(element, 'FIGURE');\n        var offsetW = width || element.offsetWidth;\n        var offsetH = height || element.offsetHeight;\n        var w = (isVertical ? offsetH : offsetW) + 'px';\n        var h = (isVertical ? offsetW : offsetH) + 'px';\n\n        this.plugins[this.context.resizing._resize_plugin].cancelPercentAttr.call(this);\n\n        this.plugins[this.context.resizing._resize_plugin].setSize.call(this, offsetW + 'px', offsetH + 'px', true);\n\n        cover.style.width = w;\n        cover.style.height = !!this.context[this.context.resizing._resize_plugin]._caption ? '' : h;\n\n        if (isVertical) {\n          var transW = offsetW / 2 + 'px ' + offsetW / 2 + 'px 0';\n          var transH = offsetH / 2 + 'px ' + offsetH / 2 + 'px 0';\n          transOrigin = deg === 90 || deg === -270 ? transH : transW;\n        }\n      }\n\n      element.style.transformOrigin = transOrigin;\n\n      this.plugins.resizing._setTransForm(element, deg.toString(), element.getAttribute('data-rotateX') || '', element.getAttribute('data-rotateY') || '');\n\n      if (isVertical) element.style.maxWidth = 'none';else element.style.maxWidth = '';\n      this.plugins.resizing.setCaptionPosition.call(this, element);\n    },\n    _setTransForm: function _setTransForm(element, r, x, y) {\n      var width = (element.offsetWidth - element.offsetHeight) * (/-/.test(r) ? 1 : -1);\n      var translate = '';\n\n      if (/[1-9]/.test(r) && (x || y)) {\n        translate = x ? 'Y' : 'X';\n\n        switch (r) {\n          case '90':\n            translate = x && y ? 'X' : y ? translate : '';\n            break;\n\n          case '270':\n            width *= -1;\n            translate = x && y ? 'Y' : x ? translate : '';\n            break;\n\n          case '-90':\n            translate = x && y ? 'Y' : x ? translate : '';\n            break;\n\n          case '-270':\n            width *= -1;\n            translate = x && y ? 'X' : y ? translate : '';\n            break;\n\n          default:\n            translate = '';\n        }\n      }\n\n      if (r % 180 === 0) {\n        element.style.maxWidth = '';\n      }\n\n      element.style.transform = 'rotate(' + r + 'deg)' + (x ? ' rotateX(' + x + 'deg)' : '') + (y ? ' rotateY(' + y + 'deg)' : '') + (translate ? ' translate' + translate + '(' + width + 'px)' : '');\n    },\n\n    /**\n     * @description The position of the caption is set automatically.\n     * @param {Element} element Target element (not caption element)\n     */\n    setCaptionPosition: function setCaptionPosition(element) {\n      var figcaption = this.util.getChildElement(this.util.getParentElement(element, 'FIGURE'), 'FIGCAPTION');\n\n      if (figcaption) {\n        figcaption.style.marginTop = (this.context.resizing._rotateVertical ? element.offsetWidth - element.offsetHeight : 0) + 'px';\n      }\n    },\n\n    /**\n     * @description Mouse down event of resize handles\n     * @param {MouseEvent} e Event object \n     */\n    onMouseDown_resize_handle: function onMouseDown_resize_handle(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var contextResizing = this.context.resizing;\n      var direction = contextResizing._resize_direction = e.target.classList[0];\n      contextResizing._resizeClientX = e.clientX;\n      contextResizing._resizeClientY = e.clientY;\n      this.context.element.resizeBackground.style.display = 'block';\n      contextResizing.resizeButton.style.display = 'none';\n      contextResizing.resizeDiv.style.float = /l/.test(direction) ? 'right' : /r/.test(direction) ? 'left' : 'none';\n\n      var closureFunc_bind = function closureFunc(e) {\n        if (e.type === 'keydown' && e.keyCode !== 27) return;\n        var change = contextResizing._isChange;\n        contextResizing._isChange = false;\n        this.removeDocEvent('mousemove', resizing_element_bind);\n        this.removeDocEvent('mouseup', closureFunc_bind);\n        this.removeDocEvent('keydown', closureFunc_bind);\n\n        if (e.type === 'keydown') {\n          this.controllersOff();\n          this.context.element.resizeBackground.style.display = 'none';\n\n          this.plugins[this.context.resizing._resize_plugin].init.call(this);\n        } else {\n          // element resize\n          this.plugins.resizing.cancel_controller_resize.call(this, direction); // history stack\n\n          if (change) this.history.push(false);\n        }\n      }.bind(this);\n\n      var resizing_element_bind = this.plugins.resizing.resizing_element.bind(this, contextResizing, direction, this.context[contextResizing._resize_plugin]);\n      this.addDocEvent('mousemove', resizing_element_bind);\n      this.addDocEvent('mouseup', closureFunc_bind);\n      this.addDocEvent('keydown', closureFunc_bind);\n    },\n\n    /**\n     * @description Mouse move event after call \"onMouseDown_resize_handle\" of resize handles\n     * The size of the module's \"div\" is adjusted according to the mouse move event.\n     * @param {Object} contextResizing \"core.context.resizing\" object (binding argument)\n     * @param {String} direction Direction (\"tl\", \"tr\", \"bl\", \"br\", \"lw\", \"th\", \"rw\", \"bh\") (binding argument)\n     * @param {Object} plugin \"core.context[currentPlugin]\" object (binding argument)\n     * @param {MouseEvent} e Event object\n     */\n    resizing_element: function resizing_element(contextResizing, direction, plugin, e) {\n      var clientX = e.clientX;\n      var clientY = e.clientY;\n      var resultW = plugin._element_w;\n      var resultH = plugin._element_h;\n      var w = plugin._element_w + (/r/.test(direction) ? clientX - contextResizing._resizeClientX : contextResizing._resizeClientX - clientX);\n      var h = plugin._element_h + (/b/.test(direction) ? clientY - contextResizing._resizeClientY : contextResizing._resizeClientY - clientY);\n      var wh = plugin._element_h / plugin._element_w * w;\n      if (/t/.test(direction)) contextResizing.resizeDiv.style.top = plugin._element_h - (/h/.test(direction) ? h : wh) + 'px';\n      if (/l/.test(direction)) contextResizing.resizeDiv.style.left = plugin._element_w - w + 'px';\n\n      if (/r|l/.test(direction)) {\n        contextResizing.resizeDiv.style.width = w + 'px';\n        resultW = w;\n      }\n\n      if (/^(t|b)[^h]$/.test(direction)) {\n        contextResizing.resizeDiv.style.height = wh + 'px';\n        resultH = wh;\n      } else if (/^(t|b)h$/.test(direction)) {\n        contextResizing.resizeDiv.style.height = h + 'px';\n        resultH = h;\n      }\n\n      contextResizing._resize_w = resultW;\n      contextResizing._resize_h = resultH;\n      this.util.changeTxt(contextResizing.resizeDisplay, this._w.Math.round(resultW) + ' x ' + this._w.Math.round(resultH));\n      contextResizing._isChange = true;\n    },\n\n    /**\n     * @description Resize the element to the size of the \"div\" adjusted in the \"resizing_element\" method.\n     * Called at the mouse-up event registered in \"onMouseDown_resize_handle\".\n     * @param {String} direction Direction (\"tl\", \"tr\", \"bl\", \"br\", \"lw\", \"th\", \"rw\", \"bh\")\n     */\n    cancel_controller_resize: function cancel_controller_resize(direction) {\n      var isVertical = this.context.resizing._rotateVertical;\n      this.controllersOff();\n      this.context.element.resizeBackground.style.display = 'none';\n\n      var w = this._w.Math.round(isVertical ? this.context.resizing._resize_h : this.context.resizing._resize_w);\n\n      var h = this._w.Math.round(isVertical ? this.context.resizing._resize_w : this.context.resizing._resize_h);\n\n      if (!isVertical && !/%$/.test(w)) {\n        var padding = 16;\n        var limit = this.context.element.wysiwygFrame.clientWidth - padding * 2 - 2;\n\n        if (this.util.getNumber(w, 0) > limit) {\n          h = this._w.Math.round(h / w * limit);\n          w = limit;\n        }\n      }\n\n      var pluginName = this.context.resizing._resize_plugin;\n      this.plugins[pluginName].setSize.call(this, w, h, false, direction);\n      if (isVertical) this.plugins.resizing.setTransformSize.call(this, this.context[this.context.resizing._resize_plugin]._element, w, h);\n      this.selectComponent(this.context[pluginName]._element, pluginName);\n    }\n  };\n\n  if (typeof noGlobal === typeof undefined) {\n    if (!window.SUNEDITOR_MODULES) {\n      Object.defineProperty(window, 'SUNEDITOR_MODULES', {\n        enumerable: true,\n        writable: false,\n        configurable: false,\n        value: {}\n      });\n    }\n\n    Object.defineProperty(window.SUNEDITOR_MODULES, 'resizing', {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: resizing\n    });\n  }\n\n  return resizing;\n});","map":null,"metadata":{},"sourceType":"script"}