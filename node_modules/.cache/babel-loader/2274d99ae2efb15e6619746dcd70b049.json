{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/ui/filedialogbuttonview\n */\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n/**\n * The file dialog button view.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n *\t\tconst view = new FileDialogButtonView( locale );\n *\n *\t\tview.set( {\n *\t\t\tacceptedType: 'image/*',\n *\t\t\tallowMultipleFiles: true\n *\t\t} );\n *\n *\t\tview.buttonView.set( {\n *\t\t\tlabel: t( 'Insert image' ),\n *\t\t\ticon: imageIcon,\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.on( 'done', ( evt, files ) => {\n *\t\t\tfor ( const file of Array.from( files ) ) {\n *\t\t\t\tconsole.log( 'Selected file', file );\n *\t\t\t}\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\n\nvar FileDialogButtonView = /*#__PURE__*/function (_View) {\n  _inherits(FileDialogButtonView, _View);\n\n  /**\n   * @inheritDoc\n   */\n  function FileDialogButtonView(locale) {\n    var _this;\n\n    _classCallCheck(this, FileDialogButtonView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileDialogButtonView).call(this, locale));\n    /**\n     * The button view of the component.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    _this.buttonView = new ButtonView(locale);\n    /**\n     * A hidden `<input>` view used to execute file dialog.\n     *\n     * @protected\n     * @member {module:upload/ui/filedialogbuttonview~FileInputView}\n     */\n\n    _this._fileInputView = new FileInputView(locale);\n    /**\n     * Accepted file types. Can be provided in form of file extensions, media type or one of:\n     * * `audio/*`,\n     * * `video/*`,\n     * * `image/*`.\n     *\n     * @observable\n     * @member {String} #acceptedType\n     */\n\n    _this._fileInputView.bind('acceptedType').to(_assertThisInitialized(_assertThisInitialized(_this)));\n    /**\n     * Indicates if multiple files can be selected. Defaults to `true`.\n     *\n     * @observable\n     * @member {Boolean} #allowMultipleFiles\n     */\n\n\n    _this._fileInputView.bind('allowMultipleFiles').to(_assertThisInitialized(_assertThisInitialized(_this)));\n    /**\n     * Fired when file dialog is closed with file selected.\n     *\n     *\t\tview.on( 'done', ( evt, files ) => {\n     *\t\t\tfor ( const file of files ) {\n     *\t\t\t\tconsole.log( 'Selected file', file );\n     *\t\t\t}\n     *\t\t}\n     *\n     * @event done\n     * @param {Array.<File>} files Array of selected files.\n     */\n\n\n    _this._fileInputView.delegate('done').to(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: 'ck-file-dialog-button'\n      },\n      children: [_this.buttonView, _this._fileInputView]\n    });\n\n    _this.buttonView.on('execute', function () {\n      _this._fileInputView.open();\n    });\n\n    return _this;\n  }\n  /**\n   * Focuses the {@link #buttonView}.\n   */\n\n\n  _createClass(FileDialogButtonView, [{\n    key: \"focus\",\n    value: function focus() {\n      this.buttonView.focus();\n    }\n  }]);\n\n  return FileDialogButtonView;\n}(View);\n/**\n * The hidden file input view class.\n *\n * @private\n * @extends module:ui/view~View\n */\n\n\nexport { FileDialogButtonView as default };\n\nvar FileInputView = /*#__PURE__*/function (_View2) {\n  _inherits(FileInputView, _View2);\n\n  /**\n   * @inheritDoc\n   */\n  function FileInputView(locale) {\n    var _this2;\n\n    _classCallCheck(this, FileInputView);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(FileInputView).call(this, locale));\n    /**\n     * Accepted file types. Can be provided in form of file extensions, media type or one of:\n     * * `audio/*`,\n     * * `video/*`,\n     * * `image/*`.\n     *\n     * @observable\n     * @member {String} #acceptedType\n     */\n\n    _this2.set('acceptedType');\n    /**\n     * Indicates if multiple files can be selected. Defaults to `false`.\n     *\n     * @observable\n     * @member {Boolean} #allowMultipleFiles\n     */\n\n\n    _this2.set('allowMultipleFiles', false);\n\n    var bind = _this2.bindTemplate;\n\n    _this2.setTemplate({\n      tag: 'input',\n      attributes: {\n        class: ['ck-hidden'],\n        type: 'file',\n        tabindex: '-1',\n        accept: bind.to('acceptedType'),\n        multiple: bind.to('allowMultipleFiles')\n      },\n      on: {\n        // Removing from code coverage since we cannot programmatically set input element files.\n        change: bind.to(\n        /* istanbul ignore next */\n        function () {\n          if (_this2.element && _this2.element.files && _this2.element.files.length) {\n            _this2.fire('done', _this2.element.files);\n          }\n\n          _this2.element.value = '';\n        })\n      }\n    });\n\n    return _this2;\n  }\n  /**\n   * Opens file dialog.\n   */\n\n\n  _createClass(FileInputView, [{\n    key: \"open\",\n    value: function open() {\n      this.element.click();\n    }\n  }]);\n\n  return FileInputView;\n}(View);","map":null,"metadata":{},"sourceType":"module"}