{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undoediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar UndoEditing = /*#__PURE__*/function (_Plugin) {\n  _inherits(UndoEditing, _Plugin);\n\n  _createClass(UndoEditing, null, [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'UndoEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }]);\n\n  function UndoEditing(editor) {\n    var _this;\n\n    _classCallCheck(this, UndoEditing);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UndoEditing).call(this, editor));\n    /**\n     * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\n     * Created and registered during the {@link #init feature initialization}.\n     *\n     * @private\n     * @member {module:undo/undocommand~UndoCommand} #_undoCommand\n     */\n\n    /**\n     * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\n     * Created and registered during the {@link #init feature initialization}.\n     *\n     * @private\n     * @member {module:undo/undocommand~UndoCommand} #_redoCommand\n     */\n\n    /**\n     * Keeps track of which batches were registered in undo.\n     *\n     * @private\n     * @member {WeakSet.<module:engine/model/batch~Batch>}\n     */\n\n    _this._batchRegistry = new WeakSet();\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(UndoEditing, [{\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      var editor = this.editor; // Create commands.\n\n      this._undoCommand = new UndoCommand(editor);\n      this._redoCommand = new RedoCommand(editor); // Register command to the editor.\n\n      editor.commands.add('undo', this._undoCommand);\n      editor.commands.add('redo', this._redoCommand);\n      this.listenTo(editor.model, 'applyOperation', function (evt, args) {\n        var operation = args[0]; // Do not register batch if the operation is not a document operation.\n        // This prevents from creating empty undo steps, where all operations where non-document operations.\n        // Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n        // Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n        // Such operations should not be reversed.\n\n        if (!operation.isDocumentOperation) {\n          return;\n        }\n\n        var batch = operation.batch;\n\n        var isRedoBatch = _this2._redoCommand._createdBatches.has(batch);\n\n        var isUndoBatch = _this2._undoCommand._createdBatches.has(batch);\n\n        var wasProcessed = _this2._batchRegistry.has(batch); // Skip the batch if it was already processed.\n\n\n        if (wasProcessed) {\n          return;\n        } // Add the batch to the registry so it will not be processed again.\n\n\n        _this2._batchRegistry.add(batch);\n\n        if (!batch.isUndoable) {\n          return;\n        }\n\n        if (isRedoBatch) {\n          // If this batch comes from `redoCommand`, add it to the `undoCommand` stack.\n          _this2._undoCommand.addBatch(batch);\n        } else if (!isUndoBatch) {\n          // If the batch comes neither  from `redoCommand` nor from `undoCommand` then it is a new, regular batch.\n          // Add the batch to the `undoCommand` stack and clear the `redoCommand` stack.\n          _this2._undoCommand.addBatch(batch);\n\n          _this2._redoCommand.clearStack();\n        }\n      }, {\n        priority: 'highest'\n      });\n      this.listenTo(this._undoCommand, 'revert', function (evt, undoneBatch, undoingBatch) {\n        _this2._redoCommand.addBatch(undoingBatch);\n      });\n      editor.keystrokes.set('CTRL+Z', 'undo');\n      editor.keystrokes.set('CTRL+Y', 'redo');\n      editor.keystrokes.set('CTRL+SHIFT+Z', 'redo');\n    }\n  }]);\n\n  return UndoEditing;\n}(Plugin);\n\nexport { UndoEditing as default };","map":null,"metadata":{},"sourceType":"module"}