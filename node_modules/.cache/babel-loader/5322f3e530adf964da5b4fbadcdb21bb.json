{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaptionutils/utils\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageUtils from '../imageutils';\n/**\n * The image caption utilities plugin.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar ImageCaptionUtils = /*#__PURE__*/function (_Plugin) {\n  _inherits(ImageCaptionUtils, _Plugin);\n\n  function ImageCaptionUtils() {\n    _classCallCheck(this, ImageCaptionUtils);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageCaptionUtils).apply(this, arguments));\n  }\n\n  _createClass(ImageCaptionUtils, [{\n    key: \"getCaptionFromImageModelElement\",\n\n    /**\n     * Returns the caption model element from a given image element. Returns `null` if no caption is found.\n     *\n     * @param {module:engine/model/element~Element} imageModelElement\n     * @returns {module:engine/model/element~Element|null}\n     */\n    value: function getCaptionFromImageModelElement(imageModelElement) {\n      var _iterator = _createForOfIteratorHelper(imageModelElement.getChildren()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n\n          if (!!node && node.is('element', 'caption')) {\n            return node;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n    /**\n     * Returns the caption model element for a model selection. Returns `null` if the selection has no caption element ancestor.\n     *\n     * @param {module:engine/model/selection~Selection} selection\n     * @returns {module:engine/model/element~Element|null}\n     */\n\n  }, {\n    key: \"getCaptionFromModelSelection\",\n    value: function getCaptionFromModelSelection(selection) {\n      var imageUtils = this.editor.plugins.get('ImageUtils');\n      var captionElement = selection.getFirstPosition().findAncestor('caption');\n\n      if (!captionElement) {\n        return null;\n      }\n\n      if (imageUtils.isBlockImage(captionElement.parent)) {\n        return captionElement;\n      }\n\n      return null;\n    }\n    /**\n     * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a `<figcaption>` element that is placed\n     * inside the image `<figure>` element.\n     *\n     * @param {module:engine/view/element~Element} element\n     * @returns {Object|null} Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element\n     * cannot be matched.\n     */\n\n  }, {\n    key: \"matchImageCaptionViewElement\",\n    value: function matchImageCaptionViewElement(element) {\n      var imageUtils = this.editor.plugins.get('ImageUtils'); // Convert only captions for images.\n\n      if (element.name == 'figcaption' && imageUtils.isBlockImageView(element.parent)) {\n        return {\n          name: true\n        };\n      }\n\n      return null;\n    }\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'ImageCaptionUtils';\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"requires\",\n    get: function get() {\n      return [ImageUtils];\n    }\n  }]);\n\n  return ImageCaptionUtils;\n}(Plugin);\n\nexport { ImageCaptionUtils as default };","map":null,"metadata":{},"sourceType":"module"}