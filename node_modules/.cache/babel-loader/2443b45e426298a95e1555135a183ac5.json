{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/locale\n */\n\n/* globals console */\nimport toArray from './toarray';\nimport { _translate } from './translation-service';\nimport { getLanguageDirection } from './language';\n/**\n * Represents the localization services.\n */\n\nvar Locale = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of the locale class. Learn more about\n   * {@glink features/ui-language configuring the language of the editor}.\n   *\n   * @param {Object} [options] Locale configuration.\n   * @param {String} [options.uiLanguage='en'] The editor UI language code in the\n   * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. See {@link #uiLanguage}.\n   * @param {String} [options.contentLanguage] The editor content language code in the\n   * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. If not specified, the same as `options.language`.\n   * See {@link #contentLanguage}.\n   */\n  function Locale() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Locale);\n\n    /**\n     * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n     *\n     * If the {@link #contentLanguage content language} was not specified in the `Locale` constructor,\n     * it also defines the language of the content.\n     *\n     * @readonly\n     * @member {String}\n     */\n    this.uiLanguage = options.uiLanguage || 'en';\n    /**\n     * The editor content language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n     *\n     * Usually the same as the {@link #uiLanguage editor language}, it can be customized by passing an optional\n     * argument to the `Locale` constructor.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.contentLanguage = options.contentLanguage || this.uiLanguage;\n    /**\n     * Text direction of the {@link #uiLanguage editor UI language}. Either `'ltr'` or `'rtl'`.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.uiLanguageDirection = getLanguageDirection(this.uiLanguage);\n    /**\n     * Text direction of the {@link #contentLanguage editor content language}.\n     *\n     * If the content language was passed directly to the `Locale` constructor, this property represents the\n     * direction of that language.\n     *\n     * If the {@link #contentLanguage editor content language} was derived from the {@link #uiLanguage editor language},\n     * the content language direction is the same as the {@link #uiLanguageDirection UI language direction}.\n     *\n     * The value is either `'ltr'` or `'rtl'`.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.contentLanguageDirection = getLanguageDirection(this.contentLanguage);\n    /**\n     * Translates the given message to the {@link #uiLanguage}. This method is also available in\n     * {@link module:core/editor/editor~Editor#t `Editor`} and {@link module:ui/view~View#t `View`}.\n     *\n     * This method's context is statically bound to the `Locale` instance and **should always be called as a function**:\n     *\n     *\t\tconst t = locale.t;\n     *\t\tt( 'Label' );\n     *\n     * The message can be either a string or an object implementing the {@link module:utils/translation-service~Message} interface.\n     *\n     * The message may contain placeholders (`%<index>`) for value(s) that are passed as a `values` parameter.\n     * For an array of values, the `%<index>` will be changed to an element of that array at the given index.\n     * For a single value passed as the second argument, only the `%0` placeholders will be changed to the provided value.\n     *\n     *\t\tt( 'Created file \"%0\" in %1ms.', [ fileName, timeTaken ] );\n     * \t\tt( 'Created file \"%0\", fileName );\n     *\n     * The message supports plural forms. To specify the plural form, use the `plural` property. Singular or plural form\n     * will be chosen depending on the first value from the passed `values`. The value of the `plural` property is used\n     * as a default plural translation when the translation for the target language is missing.\n     *\n     *\t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 1 ); // 'Add a space' for the English language.\n     *\t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 5 ); // 'Add 5 spaces' for the English language.\n     *\t\tt( { string: '%1 a space', plural: '%1 %0 spaces' }, [ 2, 'Add' ] ); // 'Add 2 spaces' for the English language.\n     *\n     * \t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 1 ); // 'Dodaj spacjÄ™' for the Polish language.\n     *\t\tt( { string: 'Add a space', plural: 'Add %0 spaces' }, 5 ); // 'Dodaj 5 spacji' for the Polish language.\n     *\t\tt( { string: '%1 a space', plural: '%1 %0 spaces' }, [ 2, 'Add' ] ); // 'Dodaj 2 spacje' for the Polish language.\n     *\n     *  * The message should provide an ID using the `id` property when the message strings are not unique and their\n     * translations should be different.\n     *\n     *\t\ttranslate( 'en', { string: 'image', id: 'ADD_IMAGE' } );\n     *\t\ttranslate( 'en', { string: 'image', id: 'AN_IMAGE' } );\n     *\n     * @method #t\n     * @param {String|module:utils/translation-service~Message} message A message that will be localized (translated).\n     * @param {String|Number|Array.<String|Number>} [values] A value or an array of values that will fill message placeholders.\n     * For messages supporting plural forms the first value will determine the plural form.\n     * @returns {String}\n     */\n\n    this.t = function (message, values) {\n      return _this._t(message, values);\n    };\n  }\n  /**\n   * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n   *\n   * **Note**: This property was deprecated. Please use {@link #uiLanguage} and {@link #contentLanguage}\n   * properties instead.\n   *\n   * @deprecated\n   * @member {String}\n   */\n\n\n  _createClass(Locale, [{\n    key: \"_t\",\n\n    /**\n     * An unbound version of the {@link #t} method.\n     *\n     * @private\n     * @param {String|module:utils/translation-service~Message} message\n     * @param {Number|String|Array.<Number|String>} [values]\n     * @returns {String}\n     */\n    value: function _t(message) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      values = toArray(values);\n\n      if (typeof message === 'string') {\n        message = {\n          string: message\n        };\n      }\n\n      var hasPluralForm = !!message.plural;\n      var quantity = hasPluralForm ? values[0] : 1;\n\n      var translatedString = _translate(this.uiLanguage, message, quantity);\n\n      return interpolateString(translatedString, values);\n    }\n  }, {\n    key: \"language\",\n    get: function get() {\n      /**\n       * The {@link module:utils/locale~Locale#language `Locale#language`} property was deprecated and will\n       * be removed in the near future. Please use the {@link #uiLanguage} and {@link #contentLanguage} properties instead.\n       *\n       * @error locale-deprecated-language-property\n       */\n      console.warn('locale-deprecated-language-property: ' + 'The Locale#language property has been deprecated and will be removed in the near future. ' + 'Please use #uiLanguage and #contentLanguage properties instead.');\n      return this.uiLanguage;\n    }\n  }]);\n\n  return Locale;\n}(); // Fills the `%0, %1, ...` string placeholders with values.\n\n\nexport { Locale as default };\n\nfunction interpolateString(string, values) {\n  return string.replace(/%(\\d+)/g, function (match, index) {\n    return index < values.length ? values[index] : match;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}