{"ast":null,"code":"import { useCallback, useContext, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport useUniqueId from '../utils/useUniqueId';\nimport MenuContext, { MenuActionTypes, MoveFocusTo } from './MenuContext';\n/**\n * Headless ARIA `menuitem`\n */\n\nfunction MenuItem(props) {\n  var children = props.children,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      onActivate = props.onActivate;\n  var menuitemRef = useRef(null);\n  var menuitemId = useUniqueId('menuitem-');\n  var menu = useContext(MenuContext);\n\n  if (!menu) {\n    throw new Error('<MenuItem> must be rendered within a <Menu>');\n  }\n\n  var menuState = menu[0],\n      dispatch = menu[1]; // Whether this menuitem has focus (indicated by `aria-activedescendant` from parent menu)\n\n  var hasFocus = !isNil(menuitemRef.current) && !isNil(menuState.activeItemIndex) && menuState.items[menuState.activeItemIndex].element === menuitemRef.current;\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n\n    onActivate === null || onActivate === void 0 ? void 0 : onActivate(event);\n  }, [disabled, onActivate]); // Gain/release focus on mousedown in `menubar`\n\n  var handleMouseDown = useCallback(function () {\n    if (!isNil(menuitemRef.current) && !hasFocus) {\n      dispatch({\n        type: MenuActionTypes.MoveFocus,\n        to: MoveFocusTo.Specific,\n        id: menuitemRef.current.id\n      });\n    }\n  }, [dispatch, hasFocus]); // Gain/release focus on mouseenter/mouseleave in `menu`\n\n  var handleMouseMove = useCallback(function () {\n    if (!isNil(menuitemRef.current) && !hasFocus) {\n      dispatch({\n        type: MenuActionTypes.MoveFocus,\n        to: MoveFocusTo.Specific,\n        id: menuitemRef.current.id\n      });\n    }\n  }, [hasFocus, dispatch]);\n  var handleMouseLeave = useCallback(function () {\n    dispatch({\n      type: MenuActionTypes.MoveFocus,\n      to: MoveFocusTo.None\n    });\n  }, [dispatch]);\n  useEffect(function () {\n    var menuitemElement = menuitemRef.current;\n\n    if (menuitemElement) {\n      dispatch({\n        type: MenuActionTypes.RegisterItem,\n        element: menuitemElement,\n        props: {\n          disabled: disabled\n        }\n      });\n      return function () {\n        dispatch({\n          type: MenuActionTypes.UnregisterItem,\n          id: menuitemElement.id\n        });\n      };\n    }\n  }, [menuitemRef, disabled, dispatch]);\n  var menuitemProps = {\n    id: menuitemId,\n    role: 'menuitem',\n    // fixme Only use `aria-checked` on menuitemradio and menuitemcheckbox\n    'aria-checked': selected || undefined,\n    'aria-disabled': disabled,\n    tabIndex: -1,\n    onClick: handleClick,\n    // render props\n    selected: selected,\n    active: hasFocus\n  }; // Only move focus on hover in a `menu`, not `menubar`\n\n  if ((menuState === null || menuState === void 0 ? void 0 : menuState.role) === 'menu') {\n    menuitemProps.onMouseMove = handleMouseMove;\n    menuitemProps.onMouseLeave = handleMouseLeave;\n  }\n\n  if ((menuState === null || menuState === void 0 ? void 0 : menuState.role) === 'menubar') {\n    menuitemProps.onMouseDown = handleMouseDown;\n    menuitemProps.onMouseOver = handleMouseMove;\n    menuitemProps.onMouseLeave = handleMouseLeave;\n  }\n\n  return children(menuitemProps, menuitemRef);\n}\n\nMenuItem.displayName = 'MenuItem';\nMenuItem.propTypes = {\n  selected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  children: PropTypes.func.isRequired,\n  onActivate: PropTypes.func\n};\nexport default MenuItem;","map":null,"metadata":{},"sourceType":"module"}