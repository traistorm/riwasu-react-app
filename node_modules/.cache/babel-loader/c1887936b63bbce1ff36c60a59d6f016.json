{"ast":null,"code":"import _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/view\n */\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\nimport ArrowKeysObserver from './observer/arrowkeysobserver';\nimport TabObserver from './observer/tabobserver';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n * * {@link module:engine/view/observer/arrowkeysobserver~ArrowKeysObserver}.\n * * {@link module:engine/view/observer/tabobserver~TabObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nvar View = /*#__PURE__*/function () {\n  /**\n   * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n   */\n  function View(stylesProcessor) {\n    var _this = this;\n\n    _classCallCheck(this, View);\n\n    /**\n     * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n     *\n     * @readonly\n     * @type {module:engine/view/document~Document}\n     */\n    this.document = new Document(stylesProcessor);\n    /**\n     * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n     * {@link module:engine/view/view~View#_renderer renderer}\n     * and {@link module:engine/view/observer/observer~Observer observers}.\n     *\n     * @readonly\n     * @type {module:engine/view/domconverter~DomConverter}\n     */\n\n    this.domConverter = new DomConverter(this.document);\n    /**\n     * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n     *\n     * @readonly\n     * @type {Map.<String, HTMLElement>}\n     */\n\n    this.domRoots = new Map();\n    /**\n     * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n     *\n     * @readonly\n     * @member {Boolean} #isRenderingInProgress\n     */\n\n    this.set('isRenderingInProgress', false);\n    /**\n     * Informs whether the DOM selection is inside any of the DOM roots managed by the view.\n     *\n     * @readonly\n     * @member {Boolean} #hasDomSelection\n     */\n\n    this.set('hasDomSelection', false);\n    /**\n     * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n     *\n     * @protected\n     * @type {module:engine/view/renderer~Renderer}\n     */\n\n    this._renderer = new Renderer(this.domConverter, this.document.selection);\n\n    this._renderer.bind('isFocused', 'isSelecting').to(this.document);\n    /**\n     * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n     * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n     * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n     * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n     *\n     * @private\n     * @member {WeakMap.<HTMLElement,Object>}\n     */\n\n\n    this._initialDomRootAttributes = new WeakMap();\n    /**\n     * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n     *\n     * @private\n     * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n     */\n\n    this._observers = new Map();\n    /**\n     * Is set to `true` when {@link #change view changes} are currently in progress.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._ongoingChange = false;\n    /**\n     * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._postFixersInProgress = false;\n    /**\n     * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._renderingDisabled = false;\n    /**\n     * Internal flag that disables rendering when there are no changes since the last rendering.\n     * It stores information about changed selection and changed elements from attached document roots.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._hasChangedSinceTheLastRendering = false;\n    /**\n     * DowncastWriter instance used in {@link #change change method} callbacks.\n     *\n     * @private\n     * @type {module:engine/view/downcastwriter~DowncastWriter}\n     */\n\n    this._writer = new DowncastWriter(this.document); // Add default observers.\n\n    this.addObserver(MutationObserver);\n    this.addObserver(SelectionObserver);\n    this.addObserver(FocusObserver);\n    this.addObserver(KeyObserver);\n    this.addObserver(FakeSelectionObserver);\n    this.addObserver(CompositionObserver);\n    this.addObserver(ArrowKeysObserver);\n    this.addObserver(TabObserver);\n\n    if (env.isAndroid) {\n      this.addObserver(InputObserver);\n    } // Inject quirks handlers.\n\n\n    injectQuirksHandling(this);\n    injectUiElementHandling(this); // Use 'normal' priority so that rendering is performed as first when using that priority.\n\n    this.on('render', function () {\n      _this._render(); // Informs that layout has changed after render.\n\n\n      _this.document.fire('layoutChanged'); // Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n\n\n      _this._hasChangedSinceTheLastRendering = false;\n    }); // Listen to the document selection changes directly.\n\n    this.listenTo(this.document.selection, 'change', function () {\n      _this._hasChangedSinceTheLastRendering = true;\n    }); // Trigger re-render if only the focus changed.\n\n    this.listenTo(this.document, 'change:isFocused', function () {\n      _this._hasChangedSinceTheLastRendering = true;\n    });\n  }\n  /**\n   * Attaches a DOM root element to the view element and enable all observers on that element.\n   * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n   * with the view what means that all child nodes will be removed and replaced with content of the view root.\n   *\n   * This method also will change view element name as the same as tag name of given dom root.\n   * Name is always transformed to lower case.\n   *\n   * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n   *\n   * @param {Element} domRoot DOM root element.\n   * @param {String} [name='main'] Name of the root.\n   */\n\n\n  _createClass(View, [{\n    key: \"attachDomRoot\",\n    value: function attachDomRoot(domRoot) {\n      var _this2 = this;\n\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'main';\n      var viewRoot = this.document.getRoot(name); // Set view root name the same as DOM root tag name.\n\n      viewRoot._name = domRoot.tagName.toLowerCase();\n      var initialDomRootAttributes = {}; // 1. Copy and cache the attributes to remember the state of the element before attaching.\n      //    The cached attributes will be restored in detachDomRoot() so the element goes to the\n      //    clean state as if the editing view never used it.\n      // 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n      //    The editing view takes over the attribute management completely because various\n      //    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n      //    cannot be managed by the engine and the UI library at the same time.\n\n      for (var _i = 0, _Array$from = Array.from(domRoot.attributes); _i < _Array$from.length; _i++) {\n        var _Array$from$_i = _Array$from[_i],\n            _name = _Array$from$_i.name,\n            value = _Array$from$_i.value;\n        initialDomRootAttributes[_name] = value; // Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n        // and its descendants could have already set some using the writer.addClass() on the view\n        // document root. They haven't been rendered yet so they are not present in the DOM root.\n        // Using writer.setAttribute( 'class', ... ) would override them completely.\n\n        if (_name === 'class') {\n          this._writer.addClass(value.split(' '), viewRoot);\n        } else {\n          this._writer.setAttribute(_name, value, viewRoot);\n        }\n      }\n\n      this._initialDomRootAttributes.set(domRoot, initialDomRootAttributes);\n\n      var updateContenteditableAttribute = function updateContenteditableAttribute() {\n        _this2._writer.setAttribute('contenteditable', !viewRoot.isReadOnly, viewRoot);\n\n        if (viewRoot.isReadOnly) {\n          _this2._writer.addClass('ck-read-only', viewRoot);\n        } else {\n          _this2._writer.removeClass('ck-read-only', viewRoot);\n        }\n      }; // Set initial value.\n\n\n      updateContenteditableAttribute();\n      this.domRoots.set(name, domRoot);\n      this.domConverter.bindElements(domRoot, viewRoot);\n\n      this._renderer.markToSync('children', viewRoot);\n\n      this._renderer.markToSync('attributes', viewRoot);\n\n      this._renderer.domDocuments.add(domRoot.ownerDocument);\n\n      viewRoot.on('change:children', function (evt, node) {\n        return _this2._renderer.markToSync('children', node);\n      });\n      viewRoot.on('change:attributes', function (evt, node) {\n        return _this2._renderer.markToSync('attributes', node);\n      });\n      viewRoot.on('change:text', function (evt, node) {\n        return _this2._renderer.markToSync('text', node);\n      });\n      viewRoot.on('change:isReadOnly', function () {\n        return _this2.change(updateContenteditableAttribute);\n      });\n      viewRoot.on('change', function () {\n        _this2._hasChangedSinceTheLastRendering = true;\n      });\n\n      var _iterator = _createForOfIteratorHelper(this._observers.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var observer = _step.value;\n          observer.observe(domRoot, name);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Detaches a DOM root element from the view element and restores its attributes to the state before\n     * {@link #attachDomRoot `attachDomRoot()`}.\n     *\n     * @param {String} name Name of the root to detach.\n     */\n\n  }, {\n    key: \"detachDomRoot\",\n    value: function detachDomRoot(name) {\n      var domRoot = this.domRoots.get(name); // Remove all root attributes so the DOM element is \"bare\".\n\n      Array.from(domRoot.attributes).forEach(function (_ref) {\n        var name = _ref.name;\n        return domRoot.removeAttribute(name);\n      });\n\n      var initialDomRootAttributes = this._initialDomRootAttributes.get(domRoot); // Revert all view root attributes back to the state before attachDomRoot was called.\n\n\n      for (var attribute in initialDomRootAttributes) {\n        domRoot.setAttribute(attribute, initialDomRootAttributes[attribute]);\n      }\n\n      this.domRoots.delete(name);\n      this.domConverter.unbindDomElement(domRoot);\n    }\n    /**\n     * Gets DOM root element.\n     *\n     * @param {String} [name='main']  Name of the root.\n     * @returns {Element} DOM root element instance.\n     */\n\n  }, {\n    key: \"getDomRoot\",\n    value: function getDomRoot() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'main';\n      return this.domRoots.get(name);\n    }\n    /**\n     * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n     * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n     * {@link #domRoots DOM roots}.\n     *\n     * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n     * when registered for the first time. This means that features and other components can register a single observer\n     * multiple times without caring whether it has been already added or not.\n     *\n     * @param {Function} Observer The constructor of an observer to add.\n     * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n     * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n     */\n\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(Observer) {\n      var observer = this._observers.get(Observer);\n\n      if (observer) {\n        return observer;\n      }\n\n      observer = new Observer(this);\n\n      this._observers.set(Observer, observer);\n\n      var _iterator2 = _createForOfIteratorHelper(this.domRoots),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              name = _step2$value[0],\n              domElement = _step2$value[1];\n\n          observer.observe(domElement, name);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      observer.enable();\n      return observer;\n    }\n    /**\n     * Returns observer of the given type or `undefined` if such observer has not been added yet.\n     *\n     * @param {Function} Observer The constructor of an observer to get.\n     * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n     */\n\n  }, {\n    key: \"getObserver\",\n    value: function getObserver(Observer) {\n      return this._observers.get(Observer);\n    }\n    /**\n     * Disables all added observers.\n     */\n\n  }, {\n    key: \"disableObservers\",\n    value: function disableObservers() {\n      var _iterator3 = _createForOfIteratorHelper(this._observers.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var observer = _step3.value;\n          observer.disable();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /**\n     * Enables all added observers.\n     */\n\n  }, {\n    key: \"enableObservers\",\n    value: function enableObservers() {\n      var _iterator4 = _createForOfIteratorHelper(this._observers.values()),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var observer = _step4.value;\n          observer.enable();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n    /**\n     * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n     * caret, if not already visible to the user.\n     */\n\n  }, {\n    key: \"scrollToTheSelection\",\n    value: function scrollToTheSelection() {\n      var range = this.document.selection.getFirstRange();\n\n      if (range) {\n        scrollViewportToShowTarget({\n          target: this.domConverter.viewRangeToDom(range),\n          viewportOffset: 20\n        });\n      }\n    }\n    /**\n     * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n     * that is currently having selection inside.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this.document.isFocused) {\n        var editable = this.document.selection.editableElement;\n\n        if (editable) {\n          this.domConverter.focus(editable);\n          this.forceRender();\n        } else {// Before focusing view document, selection should be placed inside one of the view's editables.\n          // Normally its selection will be converted from model document (which have default selection), but\n          // when using view document on its own, we need to manually place selection before focusing it.\n          //\n          // @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n        }\n      }\n    }\n    /**\n     * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n     * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n     * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n     * to nest calls one inside another and still performs a single rendering after all those changes are made.\n     * It also returns the return value of its callback.\n     *\n     *\t\tconst text = view.change( writer => {\n     *\t\t\tconst newText = writer.createText( 'foo' );\n     *\t\t\twriter.insert( position1, newText );\n     *\n     *\t\t\tview.change( writer => {\n     *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n     *\t\t\t} );\n     *\n     * \t\t\twriter.remove( range );\n     *\n     * \t\t\treturn newText;\n     *\t\t} );\n     *\n     * When the outermost change block is done and rendering to the DOM is over the\n     * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n     *\n     * This method throws a `applying-view-changes-on-rendering` error when\n     * the change block is used after rendering to the DOM has started.\n     *\n     * @param {Function} callback Callback function which may modify the view.\n     * @returns {*} Value returned by the callback.\n     */\n\n  }, {\n    key: \"change\",\n    value: function change(callback) {\n      if (this.isRenderingInProgress || this._postFixersInProgress) {\n        /**\n         * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n         * cause some unexpected behaviour and inconsistency between the DOM and the view.\n         * This may be caused by:\n         *\n         * * calling {@link #change} or {@link #forceRender} during rendering process,\n         * * calling {@link #change} or {@link #forceRender} inside of\n         *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n         *\n         * @error cannot-change-view-tree\n         */\n        throw new CKEditorError('cannot-change-view-tree', this);\n      }\n\n      try {\n        // Recursive call to view.change() method - execute listener immediately.\n        if (this._ongoingChange) {\n          return callback(this._writer);\n        } // This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n        // event for all nested calls.\n\n\n        this._ongoingChange = true;\n        var callbackResult = callback(this._writer);\n        this._ongoingChange = false; // This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n        // view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n        // changes. Also, we don't need to render anything if there're no changes since last rendering.\n\n        if (!this._renderingDisabled && this._hasChangedSinceTheLastRendering) {\n          this._postFixersInProgress = true;\n\n          this.document._callPostFixers(this._writer);\n\n          this._postFixersInProgress = false;\n          this.fire('render');\n        }\n\n        return callbackResult;\n      } catch (err) {\n        // @if CK_DEBUG // throw err;\n\n        /* istanbul ignore next */\n        CKEditorError.rethrowUnexpectedError(err, this);\n      }\n    }\n    /**\n     * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n     * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n     *\n     * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n     * block and the view will automatically check whether it needs to render DOM or not.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n     * trying to re-render when rendering to DOM has already started.\n     */\n\n  }, {\n    key: \"forceRender\",\n    value: function forceRender() {\n      this._hasChangedSinceTheLastRendering = true;\n      this.change(function () {});\n    }\n    /**\n     * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _iterator5 = _createForOfIteratorHelper(this._observers.values()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var observer = _step5.value;\n          observer.destroy();\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      this.document.destroy();\n      this.stopListening();\n    }\n    /**\n     * Creates position at the given location. The location can be specified as:\n     *\n     * * a {@link module:engine/view/position~Position position},\n     * * parent element and offset (offset defaults to `0`),\n     * * parent element and `'end'` (sets position at the end of that element),\n     * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n     *\n     * This method is a shortcut to other constructors such as:\n     *\n     * * {@link #createPositionBefore},\n     * * {@link #createPositionAfter},\n     *\n     * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n     * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n     * first parameter is a {@link module:engine/view/item~Item view item}.\n     */\n\n  }, {\n    key: \"createPositionAt\",\n    value: function createPositionAt(itemOrPosition, offset) {\n      return Position._createAt(itemOrPosition, offset);\n    }\n    /**\n     * Creates a new position after given view item.\n     *\n     * @param {module:engine/view/item~Item} item View item after which the position should be located.\n     * @returns {module:engine/view/position~Position}\n     */\n\n  }, {\n    key: \"createPositionAfter\",\n    value: function createPositionAfter(item) {\n      return Position._createAfter(item);\n    }\n    /**\n     * Creates a new position before given view item.\n     *\n     * @param {module:engine/view/item~Item} item View item before which the position should be located.\n     * @returns {module:engine/view/position~Position}\n     */\n\n  }, {\n    key: \"createPositionBefore\",\n    value: function createPositionBefore(item) {\n      return Position._createBefore(item);\n    }\n    /**\n     * Creates a range spanning from `start` position to `end` position.\n     *\n     * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n     *\n     * @param {module:engine/view/position~Position} start Start position.\n     * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n     * @returns {module:engine/view/range~Range}\n     */\n\n  }, {\n    key: \"createRange\",\n    value: function createRange(start, end) {\n      return new Range(start, end);\n    }\n    /**\n     * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n     *\n     * @param {module:engine/view/item~Item} item\n     * @returns {module:engine/view/range~Range}\n     */\n\n  }, {\n    key: \"createRangeOn\",\n    value: function createRangeOn(item) {\n      return Range._createOn(item);\n    }\n    /**\n     * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n     * that element and ends after the last child of that element.\n     *\n     * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n     * @returns {module:engine/view/range~Range}\n     */\n\n  }, {\n    key: \"createRangeIn\",\n    value: function createRangeIn(element) {\n      return Range._createIn(element);\n    }\n    /**\n     Creates new {@link module:engine/view/selection~Selection} instance.\n     *\n     * \t\t// Creates empty selection without ranges.\n     *\t\tconst selection = view.createSelection();\n     *\n     *\t\t// Creates selection at the given range.\n     *\t\tconst range = view.createRange( start, end );\n     *\t\tconst selection = view.createSelection( range );\n     *\n     *\t\t// Creates selection at the given ranges\n     * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n     *\t\tconst selection = view.createSelection( ranges );\n     *\n     *\t\t// Creates selection from the other selection.\n     *\t\tconst otherSelection = view.createSelection();\n     *\t\tconst selection = view.createSelection( otherSelection );\n     *\n     *\t\t// Creates selection from the document selection.\n     *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n     *\n     * \t\t// Creates selection at the given position.\n     *\t\tconst position = view.createPositionFromPath( root, path );\n     *\t\tconst selection = view.createSelection( position );\n     *\n     *\t\t// Creates collapsed selection at the position of given item and offset.\n     *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n     *\t\tconst selection = view.createSelection( paragraph, offset );\n     *\n     *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n     *\t\t// first child of that element and ends after the last child of that element.\n     *\t\tconst selection = view.createSelection( paragraph, 'in' );\n     *\n     *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n     *\t\t// just after the item.\n     *\t\tconst selection = view.createSelection( paragraph, 'on' );\n     *\n     * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n     *\n     *\t\t// Creates backward selection.\n     *\t\tconst selection = view.createSelection( range, { backward: true } );\n     *\n     * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n     * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n     * represented in other way, for example by applying proper CSS class.\n     *\n     * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n     * (and be  properly handled by screen readers).\n     *\n     *\t\t// Creates fake selection with label.\n     *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n     *\n     * @param {module:engine/view/selection~Selectable} [selectable=null]\n     * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n     * @param {Object} [options]\n     * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n     * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n     * @param {String} [options.label] Label for the fake selection.\n     * @returns {module:engine/view/selection~Selection}\n     */\n\n  }, {\n    key: \"createSelection\",\n    value: function createSelection(selectable, placeOrOffset, options) {\n      return new Selection(selectable, placeOrOffset, options);\n    }\n    /**\n     * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n     * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n     *\n     * @protected\n     * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n     */\n\n  }, {\n    key: \"_disableRendering\",\n    value: function _disableRendering(flag) {\n      this._renderingDisabled = flag;\n\n      if (flag == false) {\n        // Render when you stop blocking rendering.\n        this.change(function () {});\n      }\n    }\n    /**\n     * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n     * before rendering and re-enabled after that.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.isRenderingInProgress = true;\n      this.disableObservers();\n\n      this._renderer.render();\n\n      this.enableObservers();\n      this.isRenderingInProgress = false;\n    }\n    /**\n     * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n     * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n     *\n     * Actual rendering is performed as a first listener on 'normal' priority.\n     *\n     *\t\tview.on( 'render', () => {\n     *\t\t\t// Rendering to the DOM is complete.\n     *\t\t} );\n     *\n     * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n     * balloon panel. If you wants to change view structure use\n     * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n     *\n     * @event module:engine/view/view~View#event:render\n     */\n\n  }]);\n\n  return View;\n}();\n\nexport { View as default };\nmix(View, ObservableMixin);","map":null,"metadata":{},"sourceType":"module"}