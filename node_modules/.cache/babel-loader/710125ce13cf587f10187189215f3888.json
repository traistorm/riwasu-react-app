{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageutils\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { findOptimalInsertionRange, isWidget, toWidget } from 'ckeditor5/src/widget';\nimport { determineImageTypeForInsertionAtSelection } from './image/utils';\n/**\n * A set of helpers related to images.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar ImageUtils = /*#__PURE__*/function (_Plugin) {\n  _inherits(ImageUtils, _Plugin);\n\n  function ImageUtils() {\n    _classCallCheck(this, ImageUtils);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageUtils).apply(this, arguments));\n  }\n\n  _createClass(ImageUtils, [{\n    key: \"isImage\",\n\n    /**\n     * Checks if the provided model element is an `image` or `imageInline`.\n     *\n     * @param {module:engine/model/element~Element} modelElement\n     * @returns {Boolean}\n     */\n    value: function isImage(modelElement) {\n      return this.isInlineImage(modelElement) || this.isBlockImage(modelElement);\n    }\n    /**\n     * Checks if the provided view element represents an inline image.\n     *\n     * Also, see {@link module:image/imageutils~ImageUtils#isImageWidget}.\n     *\n     * @param {module:engine/view/element~Element} element\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isInlineImageView\",\n    value: function isInlineImageView(element) {\n      return !!element && element.is('element', 'img');\n    }\n    /**\n     * Checks if the provided view element represents a block image.\n     *\n     * Also, see {@link module:image/imageutils~ImageUtils#isImageWidget}.\n     *\n     * @param {module:engine/view/element~Element} element\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isBlockImageView\",\n    value: function isBlockImageView(element) {\n      return !!element && element.is('element', 'figure') && element.hasClass('image');\n    }\n    /**\n     * Handles inserting single file. This method unifies image insertion using {@link module:widget/utils~findOptimalInsertionRange}\n     * method.\n     *\n     *\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n     *\n     *\t\timageUtils.insertImage( { src: 'path/to/image.jpg' } );\n     *\n     * @param {Object} [attributes={}] Attributes of the inserted image.\n     * This method filters out the attributes which are disallowed by the {@link module:engine/model/schema~Schema}.\n     * @param {module:engine/model/selection~Selectable} [selectable] Place to insert the image. If not specified,\n     * the {@link module:widget/utils~findOptimalInsertionRange} logic will be applied for the block images\n     * and `model.document.selection` for the inline images.\n     *\n     * **Note**: If `selectable` is passed, this helper will not be able to set selection attributes (such as `linkHref`)\n     * and apply them to the new image. In this case, make sure all selection attributes are passed in `attributes`.\n     *\n     * @param {'imageBlock'|'imageInline'} [imageType] Image type of inserted image. If not specified,\n     * it will be determined automatically depending of editor config or place of the insertion.\n     * @return {module:engine/view/element~Element|null} The inserted model image element.\n     */\n\n  }, {\n    key: \"insertImage\",\n    value: function insertImage() {\n      var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var selectable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var imageType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var editor = this.editor;\n      var model = editor.model;\n      var selection = model.document.selection;\n      imageType = determineImageTypeForInsertion(editor, selectable || selection, imageType); // Mix declarative attributes with selection attributes because the new image should \"inherit\"\n      // the latter for best UX. For instance, inline images inserted into existing links\n      // should not split them. To do that, they need to have \"linkHref\" inherited from the selection.\n\n      attributes = _objectSpread({}, Object.fromEntries(selection.getAttributes()), attributes);\n\n      for (var attributeName in attributes) {\n        if (!model.schema.checkAttribute(imageType, attributeName)) {\n          delete attributes[attributeName];\n        }\n      }\n\n      return model.change(function (writer) {\n        var imageElement = writer.createElement(imageType, attributes);\n        model.insertObject(imageElement, selectable, null, {\n          setSelection: 'on',\n          // If we want to insert a block image (for whatever reason) then we don't want to split text blocks.\n          // This applies only when we don't have the selectable specified (i.e., we insert multiple block images at once).\n          findOptimalPosition: !selectable && imageType != 'imageInline'\n        }); // Inserting an image might've failed due to schema regulations.\n\n        if (imageElement.parent) {\n          return imageElement;\n        }\n\n        return null;\n      });\n    }\n    /**\n     * Returns an image widget editing view element if one is selected or is among the selection's ancestors.\n     *\n     * @protected\n     * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n     * @returns {module:engine/view/element~Element|null}\n     */\n\n  }, {\n    key: \"getClosestSelectedImageWidget\",\n    value: function getClosestSelectedImageWidget(selection) {\n      var viewElement = selection.getSelectedElement();\n\n      if (viewElement && this.isImageWidget(viewElement)) {\n        return viewElement;\n      }\n\n      var parent = selection.getFirstPosition().parent;\n\n      while (parent) {\n        if (parent.is('element') && this.isImageWidget(parent)) {\n          return parent;\n        }\n\n        parent = parent.parent;\n      }\n\n      return null;\n    }\n    /**\n     * Returns a image model element if one is selected or is among the selection's ancestors.\n     *\n     * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n     * @returns {module:engine/model/element~Element|null}\n     */\n\n  }, {\n    key: \"getClosestSelectedImageElement\",\n    value: function getClosestSelectedImageElement(selection) {\n      var selectedElement = selection.getSelectedElement();\n      return this.isImage(selectedElement) ? selectedElement : selection.getFirstPosition().findAncestor('imageBlock');\n    }\n    /**\n     * Checks if image can be inserted at current model selection.\n     *\n     * @protected\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isImageAllowed\",\n    value: function isImageAllowed() {\n      var model = this.editor.model;\n      var selection = model.document.selection;\n      return isImageAllowedInParent(this.editor, selection) && isNotInsideImage(selection);\n    }\n    /**\n     * Converts a given {@link module:engine/view/element~Element} to an image widget:\n     * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the image widget\n     * element.\n     * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n     *\n     * @protected\n     * @param {module:engine/view/element~Element} viewElement\n     * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n     * @param {String} label The element's label. It will be concatenated with the image `alt` attribute if one is present.\n     * @returns {module:engine/view/element~Element}\n     */\n\n  }, {\n    key: \"toImageWidget\",\n    value: function toImageWidget(viewElement, writer, label) {\n      var _this = this;\n\n      writer.setCustomProperty('image', true, viewElement);\n\n      var labelCreator = function labelCreator() {\n        var imgElement = _this.findViewImgElement(viewElement);\n\n        var altText = imgElement.getAttribute('alt');\n        return altText ? \"\".concat(altText, \" \").concat(label) : label;\n      };\n\n      return toWidget(viewElement, writer, {\n        label: labelCreator\n      });\n    }\n    /**\n     * Checks if a given view element is an image widget.\n     *\n     * @protected\n     * @param {module:engine/view/element~Element} viewElement\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isImageWidget\",\n    value: function isImageWidget(viewElement) {\n      return !!viewElement.getCustomProperty('image') && isWidget(viewElement);\n    }\n    /**\n     * Checks if the provided model element is an `image`.\n     *\n     * @param {module:engine/model/element~Element} modelElement\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isBlockImage\",\n    value: function isBlockImage(modelElement) {\n      return !!modelElement && modelElement.is('element', 'imageBlock');\n    }\n    /**\n     * Checks if the provided model element is an `imageInline`.\n     *\n     * @param {module:engine/model/element~Element} modelElement\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isInlineImage\",\n    value: function isInlineImage(modelElement) {\n      return !!modelElement && modelElement.is('element', 'imageInline');\n    }\n    /**\n     * Get the view `<img>` from another view element, e.g. a widget (`<figure class=\"image\">`), a link (`<a>`).\n     *\n     * The `<img>` can be located deep in other elements, so this helper performs a deep tree search.\n     *\n     * @param {module:engine/view/element~Element} figureView\n     * @returns {module:engine/view/element~Element}\n     */\n\n  }, {\n    key: \"findViewImgElement\",\n    value: function findViewImgElement(figureView) {\n      if (this.isInlineImageView(figureView)) {\n        return figureView;\n      }\n\n      var editingView = this.editor.editing.view;\n\n      var _iterator = _createForOfIteratorHelper(editingView.createRangeIn(figureView)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value.item;\n\n          if (this.isInlineImageView(item)) {\n            return item;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'ImageUtils';\n    }\n  }]);\n\n  return ImageUtils;\n}(Plugin); // Checks if image is allowed by schema in optimal insertion parent.\n//\n// @private\n// @param {module:core/editor/editor~Editor} editor\n// @param {module:engine/model/selection~Selection} selection\n// @returns {Boolean}\n\n\nexport { ImageUtils as default };\n\nfunction isImageAllowedInParent(editor, selection) {\n  var imageType = determineImageTypeForInsertion(editor, selection);\n\n  if (imageType == 'imageBlock') {\n    var parent = getInsertImageParent(selection, editor.model);\n\n    if (editor.model.schema.checkChild(parent, 'imageBlock')) {\n      return true;\n    }\n  } else if (editor.model.schema.checkChild(selection.focus, 'imageInline')) {\n    return true;\n  }\n\n  return false;\n} // Checks if selection is not placed inside an image (e.g. its caption).\n//\n// @private\n// @param {module:engine/model/selection~Selectable} selection\n// @returns {Boolean}\n\n\nfunction isNotInsideImage(selection) {\n  return _toConsumableArray(selection.focus.getAncestors()).every(function (ancestor) {\n    return !ancestor.is('element', 'imageBlock');\n  });\n} // Returns a node that will be used to insert image with `model.insertContent`.\n//\n// @private\n// @param {module:engine/model/selection~Selection} selection\n// @param {module:engine/model/model~Model} model\n// @returns {module:engine/model/element~Element}\n\n\nfunction getInsertImageParent(selection, model) {\n  var insertionRange = findOptimalInsertionRange(selection, model);\n  var parent = insertionRange.start.parent;\n\n  if (parent.isEmpty && !parent.is('element', '$root')) {\n    return parent.parent;\n  }\n\n  return parent;\n} // Determine image element type name depending on editor config or place of insertion.\n//\n// @private\n// @param {module:core/editor/editor~Editor} editor\n// @param {module:engine/model/selection~Selectable} selectable\n// @param {'imageBlock'|'imageInline'} [imageType] Image element type name. Used to force return of provided element name,\n// but only if there is proper plugin enabled.\n// @returns {'imageBlock'|'imageInline'} imageType\n\n\nfunction determineImageTypeForInsertion(editor, selectable, imageType) {\n  var schema = editor.model.schema;\n  var configImageInsertType = editor.config.get('image.insert.type');\n\n  if (!editor.plugins.has('ImageBlockEditing')) {\n    return 'imageInline';\n  }\n\n  if (!editor.plugins.has('ImageInlineEditing')) {\n    return 'imageBlock';\n  }\n\n  if (imageType) {\n    return imageType;\n  }\n\n  if (configImageInsertType === 'inline') {\n    return 'imageInline';\n  }\n\n  if (configImageInsertType === 'block') {\n    return 'imageBlock';\n  } // Try to replace the selected widget (e.g. another image).\n\n\n  if (selectable.is('selection')) {\n    return determineImageTypeForInsertionAtSelection(schema, selectable);\n  }\n\n  return schema.checkChild(selectable, 'imageInline') ? 'imageInline' : 'imageBlock';\n}","map":null,"metadata":{},"sourceType":"module"}