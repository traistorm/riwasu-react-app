{"ast":null,"code":"import { DateUtils } from '../utils';\nexport var setTimingMargin = function setTimingMargin(date, way) {\n  if (way === void 0) {\n    way = 'left';\n  }\n\n  return way === 'right' ? DateUtils.endOfDay(date) : DateUtils.startOfDay(date);\n};\nexport function getCalendarDate(_ref) {\n  var _value;\n\n  var value = _ref.value; // Update calendarDate if the value is not null\n\n  value = (_value = value) !== null && _value !== void 0 ? _value : [];\n\n  if (value[0] && value[1]) {\n    var sameMonth = DateUtils.isSameMonth(value[0], value[1]);\n    return [value[0], sameMonth ? DateUtils.addMonths(value[1], 1) : value[1]]; // If only the start date\n  } else if (value[0]) {\n    return [value[0], DateUtils.addMonths(value[0], 1)];\n  }\n\n  var todayDate = new Date();\n  return [todayDate, DateUtils.addMonths(todayDate, 1)];\n}\nexport var getDefaultRanges = function getDefaultRanges() {\n  var todayDate = new Date();\n  return [{\n    label: 'today',\n    value: [setTimingMargin(todayDate), setTimingMargin(todayDate, 'right')]\n  }, {\n    label: 'yesterday',\n    value: [setTimingMargin(DateUtils.addDays(todayDate, -1)), setTimingMargin(DateUtils.addDays(todayDate, -1), 'right')]\n  }, {\n    label: 'last7Days',\n    value: [setTimingMargin(DateUtils.subDays(todayDate, 6)), setTimingMargin(todayDate, 'right')]\n  }];\n};\nexport var isSameRange = function isSameRange(source, dest, format) {\n  // If both are null, reguard as same\n  if (null === source && null === dest) return true; // If only one is null, regard as different\n\n  if (null === source || null === dest) return false;\n  var result = DateUtils.isSameDay(source[0], dest[0]) && DateUtils.isSameDay(source[1], dest[1]);\n\n  if (DateUtils.shouldTime(format)) {\n    result && (result = DateUtils.isSameSecond(source[0], dest[0]) && DateUtils.isSameSecond(source[1], dest[1]));\n  }\n\n  return result;\n};\nexport var getMonthHoverRange = function getMonthHoverRange(date) {\n  return [DateUtils.startOfMonth(date), DateUtils.endOfMonth(date)];\n};\nexport var getWeekHoverRange = function getWeekHoverRange(isoWeek, date) {\n  if (isoWeek) {\n    // set to the first day of this week according to ISO 8601, 12:00 am\n    return [DateUtils.startOfISOWeek(date), DateUtils.endOfISOWeek(date)];\n  }\n\n  return [DateUtils.startOfWeek(date), DateUtils.endOfWeek(date)];\n};","map":null,"metadata":{},"sourceType":"module"}