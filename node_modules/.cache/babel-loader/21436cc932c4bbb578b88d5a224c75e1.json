{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imagetypecommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The image type command. It changes the type of a selected image, depending on the configuration.\n *\n * @extends module:core/command~Command\n */\n\nvar ImageTypeCommand = /*#__PURE__*/function (_Command) {\n  _inherits(ImageTypeCommand, _Command);\n\n  /**\n   * @inheritDoc\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {'imageBlock'|'imageInline'} modelElementName Model element name the command converts to.\n   */\n  function ImageTypeCommand(editor, modelElementName) {\n    var _this;\n\n    _classCallCheck(this, ImageTypeCommand);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageTypeCommand).call(this, editor));\n    /**\n     * Model element name the command converts to.\n     *\n     * @readonly\n     * @private\n     * @member {'imageBlock'|'imageInline'}\n     */\n\n    _this._modelElementName = modelElementName;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(ImageTypeCommand, [{\n    key: \"refresh\",\n    value: function refresh() {\n      var editor = this.editor;\n      var imageUtils = editor.plugins.get('ImageUtils');\n      var element = imageUtils.getClosestSelectedImageElement(this.editor.model.document.selection);\n\n      if (this._modelElementName === 'imageBlock') {\n        this.isEnabled = imageUtils.isInlineImage(element);\n      } else {\n        this.isEnabled = imageUtils.isBlockImage(element);\n      }\n    }\n    /**\n     * Executes the command and changes the type of a selected image.\n     *\n     * @fires execute\n     * @returns {Object|null} An object containing references to old and new model image elements\n     * (for before and after the change) so external integrations can hook into the decorated\n     * `execute` event and handle this change. `null` if the type change failed.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var _this2 = this;\n\n      var editor = this.editor;\n      var model = this.editor.model;\n      var imageUtils = editor.plugins.get('ImageUtils');\n      var oldElement = imageUtils.getClosestSelectedImageElement(model.document.selection);\n      var attributes = Object.fromEntries(oldElement.getAttributes()); // Don't change image type if \"src\" is missing (a broken image), unless there's \"uploadId\" set.\n      // This state may happen during image upload (before it finishes) and it should be possible to change type\n      // of the image in the meantime.\n\n      if (!attributes.src && !attributes.uploadId) {\n        return null;\n      }\n\n      return model.change(function (writer) {\n        // Get all markers that contain the old image element.\n        var markers = Array.from(model.markers).filter(function (marker) {\n          return marker.getRange().containsItem(oldElement);\n        });\n        var newElement = imageUtils.insertImage(attributes, model.createSelection(oldElement, 'on'), _this2._modelElementName);\n\n        if (!newElement) {\n          return null;\n        }\n\n        var newElementRange = writer.createRangeOn(newElement); // Expand the previously intersecting markers' ranges to include the new image element.\n\n        var _iterator = _createForOfIteratorHelper(markers),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var marker = _step.value;\n            var markerRange = marker.getRange(); // Join the survived part of the old marker range with the new element range\n            // (loosely because there could be some new paragraph or the existing one might got split).\n\n            var range = markerRange.root.rootName != '$graveyard' ? markerRange.getJoined(newElementRange, true) : newElementRange;\n            writer.updateMarker(marker, {\n              range: range\n            });\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return {\n          oldElement: oldElement,\n          newElement: newElement\n        };\n      });\n    }\n  }]);\n\n  return ImageTypeCommand;\n}(Command);\n\nexport { ImageTypeCommand as default };","map":null,"metadata":{},"sourceType":"module"}