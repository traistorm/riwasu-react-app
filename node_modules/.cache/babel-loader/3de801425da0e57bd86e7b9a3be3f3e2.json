{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/formheader/formheaderview\n */\nimport View from '../view';\nimport '../../theme/components/formheader/formheader.css';\n/**\n * The class component representing a form header view. It should be used in more advanced forms to\n * describe the main purpose of the form.\n *\n * By default the component contains a bolded label view that has to be set. The label is usually a short (at most 3-word) string.\n * The component can also be extended by any other elements, like: icons, dropdowns, etc.\n *\n * It is used i.a.\n * by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:special-characters/ui/specialcharactersnavigationview~SpecialCharactersNavigationView}.\n *\n * The latter is an example, where the component has been extended by {@link module:ui/dropdown/dropdownview~DropdownView} view.\n *\n * @extends module:ui/view~View\n */\n\nvar FormHeaderView = /*#__PURE__*/function (_View) {\n  _inherits(FormHeaderView, _View);\n\n  /**\n   * Creates an instance of the form header class.\n   *\n   * @param {module:utils/locale~Locale} locale The locale instance.\n   * @param {Object} options\n   * @param {String} options.label A label.\n   * @param {String} [options.class] An additional class.\n   */\n  function FormHeaderView(locale) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, FormHeaderView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormHeaderView).call(this, locale));\n    var bind = _this.bindTemplate;\n    /**\n     * The label of the header.\n     *\n     * @observable\n     * @member {String} #label\n     */\n\n    _this.set('label', options.label || '');\n    /**\n     * An additional CSS class added to the {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n\n    _this.set('class', options.class || null);\n    /**\n     * A collection of header items.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n\n    _this.children = _this.createCollection();\n\n    _this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-form__header', bind.to('class')]\n      },\n      children: _this.children\n    });\n\n    var label = new View(locale);\n    label.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck', 'ck-form__header__label']\n      },\n      children: [{\n        text: bind.to('label')\n      }]\n    });\n\n    _this.children.add(label);\n\n    return _this;\n  }\n\n  return FormHeaderView;\n}(View);\n\nexport { FormHeaderView as default };","map":null,"metadata":{},"sourceType":"module"}