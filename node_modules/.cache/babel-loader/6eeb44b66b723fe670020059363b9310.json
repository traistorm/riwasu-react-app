{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/filereader\n */\n\n/* globals window */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Wrapper over the native `FileReader`.\n */\n\nvar FileReader = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of the FileReader.\n   */\n  function FileReader() {\n    var _this = this;\n\n    _classCallCheck(this, FileReader);\n\n    var reader = new window.FileReader();\n    /**\n     * Instance of native FileReader.\n     *\n     * @private\n     * @member {FileReader} #_reader\n     */\n\n    this._reader = reader;\n    this._data = undefined;\n    /**\n     * Number of bytes loaded.\n     *\n     * @readonly\n     * @observable\n     * @member {Number} #loaded\n     */\n\n    this.set('loaded', 0);\n\n    reader.onprogress = function (evt) {\n      _this.loaded = evt.loaded;\n    };\n  }\n  /**\n   * Returns error that occurred during file reading.\n   *\n   * @returns {Error}\n   */\n\n\n  _createClass(FileReader, [{\n    key: \"read\",\n\n    /**\n     * Reads the provided file.\n     *\n     * @param {File} file Native File object.\n     * @returns {Promise.<String>} Returns a promise that will be resolved with file's content.\n     * The promise will be rejected in case of an error or when the reading process is aborted.\n     */\n    value: function read(file) {\n      var _this2 = this;\n\n      var reader = this._reader;\n      this.total = file.size;\n      return new Promise(function (resolve, reject) {\n        reader.onload = function () {\n          var result = reader.result;\n          _this2._data = result;\n          resolve(result);\n        };\n\n        reader.onerror = function () {\n          reject('error');\n        };\n\n        reader.onabort = function () {\n          reject('aborted');\n        };\n\n        _this2._reader.readAsDataURL(file);\n      });\n    }\n    /**\n     * Aborts file reader.\n     */\n\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this._reader.abort();\n    }\n  }, {\n    key: \"error\",\n    get: function get() {\n      return this._reader.error;\n    }\n    /**\n     * Holds the data of an already loaded file. The file must be first loaded\n     * by using {@link module:upload/filereader~FileReader#read `read()`}.\n     *\n     * @type {File|undefined}\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n  }]);\n\n  return FileReader;\n}();\n\nexport { FileReader as default };\nmix(FileReader, ObservableMixin);","map":null,"metadata":{},"sourceType":"module"}