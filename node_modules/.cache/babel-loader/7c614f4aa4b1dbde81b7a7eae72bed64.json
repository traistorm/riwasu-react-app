{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nimport dialog from '../modules/dialog';\nimport anchor from '../modules/_anchor';\nexport default {\n  name: 'link',\n  display: 'dialog',\n  add: function add(core) {\n    core.addModule([dialog, anchor]);\n    var context = core.context;\n    var contextLink = context.link = {\n      focusElement: null,\n      // @Override dialog // This element has focus when the dialog is opened.\n      _linkAnchor: null,\n      anchorCtx: null\n    };\n    /** link dialog */\n\n    var link_dialog = this.setDialog(core);\n    contextLink.modal = link_dialog;\n    /** link controller */\n\n    var link_controller = this.setController_LinkButton(core);\n    contextLink.linkController = link_controller;\n    link_dialog.querySelector('form').addEventListener('submit', this.submit.bind(core));\n    link_controller.addEventListener('click', this.onClick_linkController.bind(core));\n    /** append html */\n\n    context.dialog.modal.appendChild(link_dialog);\n    /** append controller */\n\n    context.element.relative.appendChild(link_controller);\n    /** link event */\n\n    core.plugins.anchor.initEvent.call(core, 'link', link_dialog);\n    contextLink.focusElement = context.anchor.caller.link.urlInput;\n    /** empty memory */\n\n    link_dialog = null, link_controller = null;\n  },\n\n  /** dialog */\n  setDialog: function setDialog(core) {\n    var lang = core.lang;\n    var dialog = core.util.createElement('DIV');\n    var icons = core.icons;\n    dialog.className = 'se-dialog-content';\n    dialog.style.display = 'none';\n    var html = '' + '<form>' + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + icons.cancel + '</button>' + '<span class=\"se-modal-title\">' + lang.dialogBox.linkBox.title + '</span>' + '</div>' + core.context.anchor.forms.innerHTML + '<div class=\"se-dialog-footer\">' + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + '</span></button>' + '</div>' + '</form>';\n    dialog.innerHTML = html;\n    return dialog;\n  },\n\n  /** modify controller button */\n  setController_LinkButton: function setController_LinkButton(core) {\n    var lang = core.lang;\n    var icons = core.icons;\n    var link_btn = core.util.createElement('DIV');\n    link_btn.className = 'se-controller se-controller-link';\n    link_btn.innerHTML = '' + '<div class=\"se-arrow se-arrow-up\"></div>' + '<div class=\"link-content\"><span><a target=\"_blank\" href=\"\"></a>&nbsp;</span>' + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"update\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + icons.edit + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.edit + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"unlink\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + icons.unlink + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.unlink + '</span></span>' + '</button>' + '<button type=\"button\" data-command=\"delete\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + '</span></span>' + '</button>' + '</div>' + '</div>';\n    return link_btn;\n  },\n\n  /**\n   * @Override dialog\n   */\n  open: function open() {\n    this.plugins.dialog.open.call(this, 'link', 'link' === this.currentControllerName);\n  },\n  submit: function submit(e) {\n    this.showLoading();\n    e.preventDefault();\n    e.stopPropagation();\n\n    try {\n      var oA = this.plugins.anchor.createAnchor.call(this, this.context.anchor.caller.link, false);\n      if (oA === null) return;\n\n      if (!this.context.dialog.updateModal) {\n        var selectedFormats = this.getSelectedElements();\n\n        if (selectedFormats.length > 1) {\n          var oFormat = this.util.createElement(selectedFormats[0].nodeName);\n          oFormat.appendChild(oA);\n          if (!this.insertNode(oFormat, null, true)) return;\n        } else {\n          if (!this.insertNode(oA, null, true)) return;\n        }\n\n        this.setRange(oA.childNodes[0], 0, oA.childNodes[0], oA.textContent.length);\n      } else {\n        // set range\n        var textNode = this.context.link._linkAnchor.childNodes[0];\n        this.setRange(textNode, 0, textNode, textNode.textContent.length);\n      }\n    } finally {\n      this.plugins.dialog.close.call(this);\n      this.closeLoading(); // history stack\n\n      this.history.push(false);\n    }\n\n    return false;\n  },\n\n  /**\n   * @Override core\n   */\n  active: function active(element) {\n    if (!element) {\n      if (this.controllerArray.indexOf(this.context.link.linkController) > -1) {\n        this.controllersOff();\n      }\n    } else if (this.util.isAnchor(element) && element.getAttribute('data-image-link') === null) {\n      if (this.controllerArray.indexOf(this.context.link.linkController) < 0) {\n        this.plugins.link.call_controller.call(this, element);\n      }\n\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * @Override dialog\n   */\n  on: function on(update) {\n    this.plugins.anchor.on.call(this, this.context.anchor.caller.link, update);\n  },\n  call_controller: function call_controller(selectionATag) {\n    this.editLink = this.context.link._linkAnchor = this.context.anchor.caller.link.linkAnchor = selectionATag;\n    var linkBtn = this.context.link.linkController;\n    var link = linkBtn.querySelector('a');\n    link.href = selectionATag.href;\n    link.title = selectionATag.textContent;\n    link.textContent = selectionATag.textContent;\n    this.util.addClass(selectionATag, 'on');\n    this.setControllerPosition(linkBtn, selectionATag, 'bottom', {\n      left: 0,\n      top: 0\n    });\n    this.controllersOn(linkBtn, selectionATag, 'link', this.util.removeClass.bind(this.util, this.context.link._linkAnchor, 'on'));\n  },\n  onClick_linkController: function onClick_linkController(e) {\n    e.stopPropagation();\n    var command = e.target.getAttribute('data-command') || e.target.parentNode.getAttribute('data-command');\n    if (!command) return;\n    e.preventDefault();\n\n    if (/update/.test(command)) {\n      this.plugins.dialog.open.call(this, 'link', true);\n    } else if (/unlink/.test(command)) {\n      var sc = this.util.getChildElement(this.context.link._linkAnchor, function (current) {\n        return current.childNodes.length === 0 || current.nodeType === 3;\n      }, false);\n      var ec = this.util.getChildElement(this.context.link._linkAnchor, function (current) {\n        return current.childNodes.length === 0 || current.nodeType === 3;\n      }, true);\n      this.setRange(sc, 0, ec, ec.textContent.length);\n      this.nodeChange(null, null, ['A'], false);\n    } else {\n      /** delete */\n      this.util.removeItem(this.context.link._linkAnchor);\n      this.context.anchor.caller.link.linkAnchor = null;\n      this.focus(); // history stack\n\n      this.history.push(false);\n    }\n\n    this.controllersOff();\n  },\n\n  /**\n   * @Override dialog\n   */\n  init: function init() {\n    this.context.link.linkController.style.display = 'none';\n    this.plugins.anchor.init.call(this, this.context.anchor.caller.link);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}