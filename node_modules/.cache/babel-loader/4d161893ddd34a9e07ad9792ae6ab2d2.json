{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/insertobject\n */\nimport first from '@ckeditor/ckeditor5-utils/src/first';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { findOptimalInsertionRange } from './findoptimalinsertionrange';\n/**\n * Inserts an {@glink framework/guides/deep-dive/schema#object-elements object element} at a specific position in the editor content.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertObject} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertObject}\n * method's behavior.\n *\n * **Note**: For more documentation and examples, see {@link module:engine/model/model~Model#insertObject}.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/element~Element} object An object to be inserted into the model document.\n * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n * A selectable where the content should be inserted. If not specified, the current\n * {@link module:engine/model/document~Document#selection document selection} will be used instead.\n * @param {Number|'before'|'end'|'after'|'on'|'in'} placeOrOffset Specifies the exact place or offset for the insertion to take place,\n * relative to `selectable`.\n * @param {Object} [options] Additional options.\n * @param {'auto'|'before'|'after'} [options.findOptimalPosition] An option that, when set, adjusts the insertion position (relative to\n * `selectable` and `placeOrOffset`) so that the content of `selectable` is not split upon insertion (a.k.a. non-destructive insertion).\n * * When `'auto'`, the algorithm will decide whether to insert the object before or after `selectable` to avoid content splitting.\n * * When `'before'`, the closest position before `selectable` will be used that will not result in content splitting.\n * * When `'after'`, the closest position after `selectable` will be used that will not result in content splitting.\n *\n * Note that this option works only for block objects. Inline objects are inserted into text and do not split blocks.\n * @param {'on'|'after'} [options.setSelection] An option that, when set, moves the\n * {@link module:engine/model/document~Document#selection document selection} after inserting the object.\n * * When `'on'`, the document selection will be set on the inserted object.\n * * When `'after'`, the document selection will move to the closest text node after the inserted object. If there is no\n * such text node, a paragraph will be created and the document selection will be moved inside it.\n * @returns {module:engine/model/range~Range} A range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertObject()`, returns a range collapsed\n * at the insertion position.\n */\n\nexport default function insertObject(model, object, selectable, placeOrOffset) {\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  if (!model.schema.isObject(object)) {\n    /**\n     * Tried to insert an element with {@link module:engine/model/utils/insertobject insertObject()} function\n     * that is not defined as an object in schema.\n     * See {@link module:engine/model/schema~SchemaItemDefinition#isObject `SchemaItemDefinition`}.\n     * If you want to insert content that is not an object you might want to use\n     * {@link module:engine/model/utils/insertcontent insertContent()} function.\n     * @error insertobject-element-not-an-object\n     */\n    throw new CKEditorError('insertobject-element-not-an-object', model, {\n      object: object\n    });\n  } // Normalize selectable to a selection instance.\n\n\n  var originalSelection;\n\n  if (!selectable) {\n    originalSelection = model.document.selection;\n  } else if (selectable.is('selection')) {\n    originalSelection = selectable;\n  } else {\n    originalSelection = model.createSelection(selectable, placeOrOffset);\n  } // Adjust the insertion selection.\n\n\n  var insertionSelection = originalSelection;\n\n  if (options.findOptimalPosition && model.schema.isBlock(object)) {\n    insertionSelection = model.createSelection(findOptimalInsertionRange(originalSelection, model, options.findOptimalPosition));\n  } // Collect attributes to be copied on the inserted object.\n\n\n  var firstSelectedBlock = first(originalSelection.getSelectedBlocks());\n  var attributesToCopy = {};\n\n  if (firstSelectedBlock) {\n    Object.assign(attributesToCopy, model.schema.getAttributesWithProperty(firstSelectedBlock, 'copyOnReplace', true));\n  }\n\n  return model.change(function (writer) {\n    // Remove the selected content to find out what the parent of the inserted object would be.\n    // It would be removed inside model.insertContent() anyway.\n    if (!insertionSelection.isCollapsed) {\n      model.deleteContent(insertionSelection, {\n        doNotAutoparagraph: true\n      });\n    }\n\n    var elementToInsert = object;\n    var insertionPositionParent = insertionSelection.anchor.parent; // Autoparagraphing of an inline objects.\n\n    if (!model.schema.checkChild(insertionPositionParent, object) && model.schema.checkChild(insertionPositionParent, 'paragraph') && model.schema.checkChild('paragraph', object)) {\n      elementToInsert = writer.createElement('paragraph');\n      writer.insert(object, elementToInsert);\n    } // Apply attributes that are allowed on the inserted object (or paragraph if autoparagraphed).\n\n\n    model.schema.setAllowedAttributes(elementToInsert, attributesToCopy, writer); // Insert the prepared content at the optionally adjusted selection.\n\n    var affectedRange = model.insertContent(elementToInsert, insertionSelection); // Nothing got inserted.\n\n    if (affectedRange.isCollapsed) {\n      return affectedRange;\n    }\n\n    if (options.setSelection) {\n      updateSelection(writer, object, options.setSelection, attributesToCopy);\n    }\n\n    return affectedRange;\n  });\n} // Updates document selection based on given `place` parameter in relation to `contextElement` element.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer An instance of the model writer.\n// @param {module:engine/model/element~Element} contextElement An element to set the attributes on.\n// @param {'on'|'after'} place The place where selection should be set in relation to the `contextElement` element.\n// Value `on` will set selection on the passed `contextElement`. Value `after` will set selection after `contextElement`.\n// @param {Object} attributes Attributes keys and values to set on a paragraph that this function can create when\n// `place` parameter is equal to `after` but there is no element with `$text` node to set selection in.\n\nfunction updateSelection(writer, contextElement, place, paragraphAttributes) {\n  var model = writer.model;\n\n  if (place == 'after') {\n    var nextElement = contextElement.nextSibling; // Check whether an element next to the inserted element is defined and can contain a text.\n\n    var canSetSelection = nextElement && model.schema.checkChild(nextElement, '$text'); // If the element is missing, but a paragraph could be inserted next to the element, let's add it.\n\n    if (!canSetSelection && model.schema.checkChild(contextElement.parent, 'paragraph')) {\n      nextElement = writer.createElement('paragraph');\n      model.schema.setAllowedAttributes(nextElement, paragraphAttributes, writer);\n      model.insertContent(nextElement, writer.createPositionAfter(contextElement));\n    } // Put the selection inside the element, at the beginning.\n\n\n    if (nextElement) {\n      writer.setSelection(nextElement, 0);\n    }\n  } else if (place == 'on') {\n    writer.setSelection(contextElement, 'on');\n  } else {\n    /**\n     * The unsupported `options.setSelection` parameter was passed\n     * to the {@link module:engine/model/utils/insertobject insertObject()} function.\n     * Check the {@link module:engine/model/utils/insertobject insertObject()} API documentation for allowed\n     * `options.setSelection` parameter values.\n     *\n     * @error insertobject-invalid-place-parameter-value\n     */\n    throw new CKEditorError('insertobject-invalid-place-parameter-value', model);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}