{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport SpinnerIcon from '@rsuite/icons/legacy/Spinner';\nimport AngleLeftIcon from '@rsuite/icons/legacy/AngleLeft';\nimport AngleRightIcon from '@rsuite/icons/legacy/AngleRight';\nimport { useClassNames, shallowEqual, useCustom } from '../utils';\nimport { DropdownMenuCheckItem } from '../Picker';\nimport { isSomeParentChecked, isSomeChildChecked } from './utils';\nvar emptyArray = [];\n/**\n * TODO: reuse Menu from Cascader for consistent behavior\n */\n\nvar DropdownMenu = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'menu' : _props$classPrefix,\n      className = props.className,\n      cascade = props.cascade,\n      _props$cascadeData = props.cascadeData,\n      cascadeData = _props$cascadeData === void 0 ? emptyArray : _props$cascadeData,\n      _props$cascadePaths = props.cascadePaths,\n      cascadePaths = _props$cascadePaths === void 0 ? emptyArray : _props$cascadePaths,\n      _props$childrenKey = props.childrenKey,\n      childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n      _props$disabledItemVa = props.disabledItemValues,\n      disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n      _props$menuWidth = props.menuWidth,\n      menuWidth = _props$menuWidth === void 0 ? 156 : _props$menuWidth,\n      _props$menuHeight = props.menuHeight,\n      menuHeight = _props$menuHeight === void 0 ? 200 : _props$menuHeight,\n      _props$uncheckableIte = props.uncheckableItemValues,\n      uncheckableItemValues = _props$uncheckableIte === void 0 ? emptyArray : _props$uncheckableIte,\n      value = props.value,\n      _props$valueKey = props.valueKey,\n      valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n      _props$labelKey = props.labelKey,\n      labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n      renderMenuItem = props.renderMenuItem,\n      renderMenu = props.renderMenu,\n      _onCheck = props.onCheck,\n      onSelect = props.onSelect,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"classPrefix\", \"className\", \"cascade\", \"cascadeData\", \"cascadePaths\", \"childrenKey\", \"disabledItemValues\", \"menuWidth\", \"menuHeight\", \"uncheckableItemValues\", \"value\", \"valueKey\", \"labelKey\", \"renderMenuItem\", \"renderMenu\", \"onCheck\", \"onSelect\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix;\n\n  var classes = merge(className, prefix('items'));\n  var rtl = useCustom('DropdownMenu');\n  var getCascadePaths = useCallback(function (layer, node) {\n    var paths = [];\n\n    for (var i = 0; i < cascadeData.length && i < layer; i += 1) {\n      if (i < layer - 1 && cascadePaths) {\n        paths.push(cascadePaths[i]);\n      }\n    }\n\n    paths.push(node);\n    return paths;\n  }, [cascadeData, cascadePaths]);\n  var handleSelect = useCallback(function (layer, node, event) {\n    var cascadePaths = getCascadePaths(layer + 1, node);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, cascadePaths, event);\n  }, [getCascadePaths, onSelect]);\n\n  var renderCascadeNode = function renderCascadeNode(node, index, layer, focus, uncheckable) {\n    var children = node[childrenKey];\n    var nodeValue = node[valueKey];\n    var nodeLabel = node[labelKey];\n    var disabled = disabledItemValues.some(function (disabledValue) {\n      return shallowEqual(disabledValue, nodeValue);\n    }); // Use `value` in keys when If `value` is string or number\n\n    var onlyKey = typeof value === 'number' || typeof value === 'string' ? value : index;\n    var Icon = node.loading ? SpinnerIcon : rtl ? AngleRightIcon : AngleLeftIcon;\n    var active = value.some(function (v) {\n      return v === nodeValue;\n    });\n\n    if (cascade) {\n      active = active || isSomeParentChecked(node, value, {\n        valueKey: valueKey\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(DropdownMenuCheckItem, {\n      as: \"li\",\n      key: layer + \"-\" + onlyKey,\n      disabled: disabled,\n      active: active,\n      focus: focus // Pass the node as a value to Item, and use it in event callbacks.\n      ,\n      value: nodeValue,\n      className: children ? prefix('has-children') : undefined,\n      indeterminate: cascade && !active && isSomeChildChecked(node, value, {\n        valueKey: valueKey,\n        childrenKey: childrenKey\n      }),\n      onSelectItem: function onSelectItem(_value, event) {\n        return handleSelect(layer, node, event);\n      },\n      onCheck: function onCheck(_value, event, checked) {\n        return _onCheck === null || _onCheck === void 0 ? void 0 : _onCheck(node, event, checked);\n      },\n      checkable: !uncheckable\n    }, renderMenuItem ? renderMenuItem(nodeLabel, node) : nodeLabel, children ? /*#__PURE__*/React.createElement(Icon, {\n      className: prefix('caret'),\n      spin: node.loading\n    }) : null);\n  };\n\n  var renderCascade = function renderCascade() {\n    var styles = {\n      width: cascadeData.length * menuWidth\n    };\n    var columnStyles = {\n      height: menuHeight,\n      width: menuWidth\n    };\n    var cascadeNodes = cascadeData.map(function (children, layer) {\n      var uncheckableCount = 0;\n      var onlyKey = layer + \"_\" + children.length;\n      var menu = /*#__PURE__*/React.createElement(\"ul\", {\n        role: \"listbox\"\n      }, children.map(function (item, index) {\n        var uncheckable = uncheckableItemValues.some(function (uncheckableValue) {\n          return shallowEqual(uncheckableValue, item[valueKey]);\n        });\n\n        if (uncheckable) {\n          uncheckableCount++;\n        }\n\n        return renderCascadeNode(item, index, layer, cascadePaths[layer] && shallowEqual(cascadePaths[layer][valueKey], item[valueKey]), uncheckable);\n      }));\n      var parentNode = cascadePaths[layer - 1];\n      var columnClasses = prefix('column', {\n        'column-uncheckable': uncheckableCount === children.length\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: onlyKey,\n        className: columnClasses,\n        \"data-layer\": layer,\n        style: columnStyles\n      }, renderMenu ? renderMenu(children, menu, parentNode, layer) : menu);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: styles\n    }, cascadeNodes);\n  };\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), renderCascade());\n});\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.propTypes = {\n  classPrefix: PropTypes.string,\n  data: PropTypes.array,\n  disabledItemValues: PropTypes.array,\n  value: PropTypes.array,\n  childrenKey: PropTypes.string,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  menuWidth: PropTypes.number,\n  menuHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  className: PropTypes.string,\n  cascade: PropTypes.bool,\n  cascadeData: PropTypes.array,\n  cascadePaths: PropTypes.array,\n  uncheckableItemValues: PropTypes.array,\n  renderMenuItem: PropTypes.func,\n  renderMenu: PropTypes.func,\n  onSelect: PropTypes.func,\n  onCheck: PropTypes.func\n};\nexport default DropdownMenu;","map":null,"metadata":{},"sourceType":"module"}