{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { forwardRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport hasClass from 'dom-lib/hasClass';\nimport ArrowDown from '@rsuite/icons/legacy/ArrowDown';\nimport Spinner from '@rsuite/icons/legacy/Spinner';\nimport reactToString from '../utils/reactToString';\nimport { useClassNames } from '../utils';\nimport { getTreeNodeIndent } from '../utils/treeUtils';\nvar TreeNode = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      rtl = _ref.rtl,\n      label = _ref.label,\n      layer = _ref.layer,\n      style = _ref.style,\n      active = _ref.active,\n      loading = _ref.loading,\n      nodeData = _ref.nodeData,\n      className = _ref.className,\n      _ref$classPrefix = _ref.classPrefix,\n      classPrefix = _ref$classPrefix === void 0 ? 'tree-node' : _ref$classPrefix,\n      disabled = _ref.disabled,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      draggable = _ref.draggable,\n      expand = _ref.expand,\n      focus = _ref.focus,\n      hasChildren = _ref.hasChildren,\n      dragging = _ref.dragging,\n      dragOver = _ref.dragOver,\n      dragOverTop = _ref.dragOverTop,\n      dragOverBottom = _ref.dragOverBottom,\n      onSelect = _ref.onSelect,\n      onDragStart = _ref.onDragStart,\n      onDragOver = _ref.onDragOver,\n      onDragEnter = _ref.onDragEnter,\n      onDragLeave = _ref.onDragLeave,\n      onDragEnd = _ref.onDragEnd,\n      onDrop = _ref.onDrop,\n      onExpand = _ref.onExpand,\n      onRenderTreeIcon = _ref.onRenderTreeIcon,\n      onRenderTreeNode = _ref.onRenderTreeNode,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"as\", \"rtl\", \"label\", \"layer\", \"style\", \"active\", \"loading\", \"nodeData\", \"className\", \"classPrefix\", \"disabled\", \"visible\", \"draggable\", \"expand\", \"focus\", \"hasChildren\", \"dragging\", \"dragOver\", \"dragOverTop\", \"dragOverBottom\", \"onSelect\", \"onDragStart\", \"onDragOver\", \"onDragEnter\", \"onDragLeave\", \"onDragEnd\", \"onDrop\", \"onExpand\", \"onRenderTreeIcon\", \"onRenderTreeNode\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      prefix = _useClassNames.prefix,\n      merge = _useClassNames.merge,\n      withClassPrefix = _useClassNames.withClassPrefix;\n\n  var getTitle = useCallback(function () {\n    if (typeof label === 'string') {\n      return label;\n    } else if ( /*#__PURE__*/React.isValidElement(label)) {\n      var nodes = reactToString(label);\n      return nodes.join('');\n    }\n  }, [label]);\n  var handleExpand = useCallback(function (event) {\n    var _event$nativeEvent, _event$nativeEvent$st; // stop propagation when using custom loading icon\n\n\n    event === null || event === void 0 ? void 0 : (_event$nativeEvent = event.nativeEvent) === null || _event$nativeEvent === void 0 ? void 0 : (_event$nativeEvent$st = _event$nativeEvent.stopImmediatePropagation) === null || _event$nativeEvent$st === void 0 ? void 0 : _event$nativeEvent$st.call(_event$nativeEvent);\n    onExpand === null || onExpand === void 0 ? void 0 : onExpand(nodeData);\n  }, [nodeData, onExpand]);\n  var handleSelect = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n\n    if (event.target instanceof HTMLElement) {\n      if (hasClass(event.target.parentNode, prefix('expand-icon-wrapper'))) {\n        return;\n      }\n    }\n\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nodeData, event);\n  }, [nodeData, disabled, prefix, onSelect]);\n  var handleDragStart = useCallback(function (event) {\n    onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(nodeData, event);\n  }, [nodeData, onDragStart]);\n  var handleDragEnter = useCallback(function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onDragEnter === null || onDragEnter === void 0 ? void 0 : onDragEnter(nodeData, event);\n  }, [nodeData, onDragEnter]);\n  var handleDragOver = useCallback(function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onDragOver === null || onDragOver === void 0 ? void 0 : onDragOver(nodeData, event);\n  }, [nodeData, onDragOver]);\n  var handleDragLeave = useCallback(function (event) {\n    event.stopPropagation();\n    onDragLeave === null || onDragLeave === void 0 ? void 0 : onDragLeave(nodeData, event);\n  }, [nodeData, onDragLeave]);\n  var handleDragEnd = useCallback(function (event) {\n    event.stopPropagation();\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(nodeData, event);\n  }, [nodeData, onDragEnd]);\n  var handleDrop = useCallback(function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onDrop === null || onDrop === void 0 ? void 0 : onDrop(nodeData, event);\n  }, [nodeData, onDrop]);\n\n  var renderIcon = function renderIcon() {\n    var classes = prefix('expand-icon', 'icon', {\n      expanded: expand\n    });\n    var expandIcon = /*#__PURE__*/React.createElement(ArrowDown, {\n      className: classes\n    });\n\n    if (loading) {\n      expandIcon = /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('loading-icon')\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        spin: true\n      }));\n    }\n\n    if (nodeData !== undefined && typeof onRenderTreeIcon === 'function') {\n      var customIcon = onRenderTreeIcon(nodeData);\n      expandIcon = customIcon !== null ? /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('custom-icon')\n      }, customIcon) : expandIcon;\n    }\n\n    return hasChildren ? /*#__PURE__*/React.createElement(\"div\", {\n      role: \"button\",\n      tabIndex: -1,\n      \"data-ref\": nodeData.refKey,\n      className: prefix('expand-icon-wrapper'),\n      onClick: handleExpand\n    }, expandIcon) : null;\n  };\n\n  var renderLabel = function renderLabel() {\n    var contentClasses = prefix('label-content', {\n      dragging: dragging,\n      'drag-over': dragOver,\n      'drag-over-top': dragOverTop,\n      'drag-over-bottom': dragOverBottom\n    });\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: prefix('label'),\n      title: getTitle(),\n      \"data-layer\": layer,\n      \"data-key\": (nodeData === null || nodeData === void 0 ? void 0 : nodeData.refKey) || '',\n      role: \"button\",\n      tabIndex: -1,\n      onClick: handleSelect\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: contentClasses\n    }, onRenderTreeNode ? onRenderTreeNode(nodeData) : label));\n  };\n\n  var classes = merge(className, withClassPrefix({\n    disabled: disabled,\n    active: active,\n    'text-muted': disabled,\n    focus: focus\n  }));\n\n  var styles = _extends({}, style, getTreeNodeIndent(rtl, layer - 1));\n\n  return visible ? /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"treeitem\"\n  }, rest, {\n    \"aria-expanded\": expand,\n    \"aria-label\": label,\n    \"aria-level\": layer,\n    \"aria-disabled\": disabled,\n    \"aria-selected\": active,\n    style: styles,\n    className: classes,\n    ref: ref,\n    draggable: draggable,\n    onDragStart: handleDragStart,\n    onDragEnter: handleDragEnter,\n    onDragOver: handleDragOver,\n    onDragLeave: handleDragLeave,\n    onDragEnd: handleDragEnd,\n    onDrop: handleDrop\n  }), renderIcon(), renderLabel()) : null;\n});\nTreeNode.displayName = 'TreePickerNode';\nTreeNode.propTypes = {\n  as: PropTypes.elementType,\n  rtl: PropTypes.bool,\n  focus: PropTypes.bool,\n  layer: PropTypes.number,\n  value: PropTypes.any,\n  label: PropTypes.any,\n  expand: PropTypes.bool,\n  active: PropTypes.bool,\n  loading: PropTypes.bool,\n  visible: PropTypes.bool,\n  nodeData: PropTypes.any,\n  disabled: PropTypes.bool,\n  draggable: PropTypes.bool,\n  dragging: PropTypes.bool,\n  dragOver: PropTypes.bool,\n  dragOverTop: PropTypes.bool,\n  dragOverBottom: PropTypes.bool,\n  hasChildren: PropTypes.bool,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  style: PropTypes.object,\n  onExpand: PropTypes.func,\n  onSelect: PropTypes.func,\n  onRenderTreeIcon: PropTypes.func,\n  onRenderTreeNode: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDragLeave: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDrop: PropTypes.func\n};\nexport default TreeNode;","map":null,"metadata":{},"sourceType":"module"}