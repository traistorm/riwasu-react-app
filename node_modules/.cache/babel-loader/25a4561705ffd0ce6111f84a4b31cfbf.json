{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { MixedType } from './MixedType';\nexport var DateType = /*#__PURE__*/function (_MixedType) {\n  _inheritsLoose(DateType, _MixedType);\n\n  function DateType(errorMessage) {\n    var _this;\n\n    _this = _MixedType.call(this, 'date') || this;\n\n    _MixedType.prototype.pushRule.call(_assertThisInitialized(_this), {\n      onValid: function onValid(value) {\n        return !/Invalid|NaN/.test(new Date(value).toString());\n      },\n      errorMessage: errorMessage || _this.locale.type\n    });\n\n    return _this;\n  }\n\n  var _proto = DateType.prototype;\n\n  _proto.range = function range(min, max, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.range;\n    }\n\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return new Date(value) >= new Date(min) && new Date(value) <= new Date(max);\n      },\n      errorMessage: errorMessage,\n      params: {\n        min: min,\n        max: max\n      }\n    });\n\n    return this;\n  };\n\n  _proto.min = function min(_min, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.min;\n    }\n\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return new Date(value) >= new Date(_min);\n      },\n      errorMessage: errorMessage,\n      params: {\n        min: _min\n      }\n    });\n\n    return this;\n  };\n\n  _proto.max = function max(_max, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.max;\n    }\n\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return new Date(value) <= new Date(_max);\n      },\n      errorMessage: errorMessage,\n      params: {\n        max: _max\n      }\n    });\n\n    return this;\n  };\n\n  return DateType;\n}(MixedType);\nexport default function getDateType(errorMessage) {\n  return new DateType(errorMessage);\n}","map":null,"metadata":{},"sourceType":"module"}