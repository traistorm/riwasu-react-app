{"ast":null,"code":"import _slicedToArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Resizer from './widgetresize/resizer';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { throttle } from 'lodash-es';\nimport '../theme/widgetresize.css';\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n *\n * @extends module:core/plugin~Plugin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nvar WidgetResize = /*#__PURE__*/function (_Plugin) {\n  _inherits(WidgetResize, _Plugin);\n\n  function WidgetResize() {\n    _classCallCheck(this, WidgetResize);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WidgetResize).apply(this, arguments));\n  }\n\n  _createClass(WidgetResize, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      var _this = this;\n\n      var editing = this.editor.editing;\n      var domDocument = global.window.document;\n      /**\n       * The currently visible resizer.\n       *\n       * @observable\n       * @member {module:widget/widgetresize/resizer~Resizer|null} #visibleResizer\n       */\n\n      this.set('visibleResizer', null);\n      /**\n       * References an active resizer.\n       *\n       * Active resizer means a resizer which handle is actively used by the end user.\n       *\n       * @protected\n       * @observable\n       * @member {module:widget/widgetresize/resizer~Resizer|null} #_activeResizer\n       */\n\n      this.set('_activeResizer', null);\n      /**\n       * A map of resizers created using this plugin instance.\n       *\n       * @protected\n       * @type {Map.<module:engine/view/containerelement~ContainerElement, module:widget/widgetresize/resizer~Resizer>}\n       */\n\n      this._resizers = new Map();\n      editing.view.addObserver(MouseObserver);\n      this._observer = Object.create(DomEmitterMixin);\n      this.listenTo(editing.view.document, 'mousedown', this._mouseDownListener.bind(this), {\n        priority: 'high'\n      });\n\n      this._observer.listenTo(domDocument, 'mousemove', this._mouseMoveListener.bind(this));\n\n      this._observer.listenTo(domDocument, 'mouseup', this._mouseUpListener.bind(this));\n\n      var redrawFocusedResizer = function redrawFocusedResizer() {\n        if (_this.visibleResizer) {\n          _this.visibleResizer.redraw();\n        }\n      };\n\n      this._redrawFocusedResizerThrottled = throttle(redrawFocusedResizer, 200); // Redraws occurring upon a change of visible resizer must not be throttled, as it is crucial for the initial\n      // render. Without it the resizer frame would be misaligned with resizing host for a fraction of second.\n\n      this.on('change:visibleResizer', redrawFocusedResizer); // Redrawing on any change of the UI of the editor (including content changes).\n\n      this.editor.ui.on('update', this._redrawFocusedResizerThrottled); // Remove view widget-resizer mappings for widgets that have been removed from the document.\n      // https://github.com/ckeditor/ckeditor5/issues/10156\n      // https://github.com/ckeditor/ckeditor5/issues/10266\n\n      this.editor.model.document.on('change', function () {\n        var _iterator = _createForOfIteratorHelper(_this._resizers),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                viewElement = _step$value[0],\n                resizer = _step$value[1];\n\n            if (!viewElement.isAttached()) {\n              _this._resizers.delete(viewElement);\n\n              resizer.destroy();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }, {\n        priority: 'lowest'\n      }); // Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n\n      this._observer.listenTo(global.window, 'resize', this._redrawFocusedResizerThrottled);\n\n      var viewSelection = this.editor.editing.view.document.selection;\n      viewSelection.on('change', function () {\n        var selectedElement = viewSelection.getSelectedElement();\n        _this.visibleResizer = _this.getResizerByViewElement(selectedElement) || null;\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._observer.stopListening();\n\n      var _iterator2 = _createForOfIteratorHelper(this._resizers.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var resizer = _step2.value;\n          resizer.destroy();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this._redrawFocusedResizerThrottled.cancel();\n    }\n    /**\n     * @param {module:widget/widgetresize~ResizerOptions} [options] Resizer options.\n     * @returns {module:widget/widgetresize/resizer~Resizer}\n     */\n\n  }, {\n    key: \"attachTo\",\n    value: function attachTo(options) {\n      var resizer = new Resizer(options);\n      var plugins = this.editor.plugins;\n      resizer.attach();\n\n      if (plugins.has('WidgetToolbarRepository')) {\n        // Hiding widget toolbar to improve the performance\n        // (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n        var widgetToolbarRepository = plugins.get('WidgetToolbarRepository');\n        resizer.on('begin', function () {\n          widgetToolbarRepository.forceDisabled('resize');\n        }, {\n          priority: 'lowest'\n        });\n        resizer.on('cancel', function () {\n          widgetToolbarRepository.clearForceDisabled('resize');\n        }, {\n          priority: 'highest'\n        });\n        resizer.on('commit', function () {\n          widgetToolbarRepository.clearForceDisabled('resize');\n        }, {\n          priority: 'highest'\n        });\n      }\n\n      this._resizers.set(options.viewElement, resizer);\n\n      var viewSelection = this.editor.editing.view.document.selection;\n      var selectedElement = viewSelection.getSelectedElement(); // If the element the resizer is created for is currently focused, it should become visible.\n\n      if (this.getResizerByViewElement(selectedElement) == resizer) {\n        this.visibleResizer = resizer;\n      }\n\n      return resizer;\n    }\n    /**\n     * Returns a resizer created for a given view element (widget element).\n     *\n     * @param {module:engine/view/containerelement~ContainerElement} viewElement View element associated with the resizer.\n     * @returns {module:widget/widgetresize/resizer~Resizer|undefined}\n     */\n\n  }, {\n    key: \"getResizerByViewElement\",\n    value: function getResizerByViewElement(viewElement) {\n      return this._resizers.get(viewElement);\n    }\n    /**\n     * Returns a resizer that contains a given resize handle.\n     *\n     * @protected\n     * @param {HTMLElement} domResizeHandle\n     * @returns {module:widget/widgetresize/resizer~Resizer}\n     */\n\n  }, {\n    key: \"_getResizerByHandle\",\n    value: function _getResizerByHandle(domResizeHandle) {\n      var _iterator3 = _createForOfIteratorHelper(this._resizers.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var resizer = _step3.value;\n\n          if (resizer.containsHandle(domResizeHandle)) {\n            return resizer;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /**\n     * @protected\n     * @param {module:utils/eventinfo~EventInfo} event\n     * @param {Event} domEventData Native DOM event.\n     */\n\n  }, {\n    key: \"_mouseDownListener\",\n    value: function _mouseDownListener(event, domEventData) {\n      var resizeHandle = domEventData.domTarget;\n\n      if (!Resizer.isResizeHandle(resizeHandle)) {\n        return;\n      }\n\n      this._activeResizer = this._getResizerByHandle(resizeHandle);\n\n      if (this._activeResizer) {\n        this._activeResizer.begin(resizeHandle); // Do not call other events when resizing. See: #6755.\n\n\n        event.stop();\n        domEventData.preventDefault();\n      }\n    }\n    /**\n     * @protected\n     * @param {module:utils/eventinfo~EventInfo} event\n     * @param {Event} domEventData Native DOM event.\n     */\n\n  }, {\n    key: \"_mouseMoveListener\",\n    value: function _mouseMoveListener(event, domEventData) {\n      if (this._activeResizer) {\n        this._activeResizer.updateSize(domEventData);\n      }\n    }\n    /**\n     * @protected\n     */\n\n  }, {\n    key: \"_mouseUpListener\",\n    value: function _mouseUpListener() {\n      if (this._activeResizer) {\n        this._activeResizer.commit();\n\n        this._activeResizer = null;\n      }\n    }\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'WidgetResize';\n    }\n  }]);\n\n  return WidgetResize;\n}(Plugin);\n\nexport { WidgetResize as default };\nmix(WidgetResize, ObservableMixin);\n/**\n * Interface describing a resizer. It allows to specify the resizing host, custom logic for calculating aspect ratio, etc.\n *\n * @interface ResizerOptions\n */\n\n/**\n * Editor instance associated with the resizer.\n *\n * @member {module:core/editor/editor~Editor} module:widget/widgetresize~ResizerOptions#editor\n */\n\n/**\n * @member {module:engine/model/element~Element} module:widget/widgetresize~ResizerOptions#modelElement\n */\n\n/**\n * A view of an element to be resized. Typically it's the main widget's view instance.\n *\n * @member {module:engine/view/containerelement~ContainerElement} module:widget/widgetresize~ResizerOptions#viewElement\n */\n\n/**\n * A callback to be executed once the resizing process is done.\n *\n * It receives a `Number` (`newValue`) as a parameter.\n *\n * For example, {@link module:image/imageresize~ImageResize} uses it to execute the resize image command\n * which puts the new value into the model.\n *\n * ```js\n * {\n *\teditor,\n *\tmodelElement: data.item,\n *\tviewElement: widget,\n *\n *\tonCommit( newValue ) {\n *\t\teditor.execute( 'resizeImage', { width: newValue } );\n *\t}\n * };\n * ```\n *\n *\n * @member {Function} module:widget/widgetresize~ResizerOptions#onCommit\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#getResizeHost\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#isCentered\n */","map":null,"metadata":{},"sourceType":"module"}