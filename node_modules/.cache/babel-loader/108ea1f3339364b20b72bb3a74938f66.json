{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport AngleUpIcon from '@rsuite/icons/legacy/AngleUp';\nimport AngleDownIcon from '@rsuite/icons/legacy/AngleDown';\nimport on from 'dom-lib/on';\nimport InputGroup from '../InputGroup/InputGroup';\nimport InputGroupAddon from '../InputGroup/InputGroupAddon';\nimport Input from '../Input';\nimport Button from '../Button';\nimport { partitionHTMLProps, createChainedFunction, useClassNames, useControlled, KEY_VALUES } from '../utils';\n/**\n * Check if the value is a number.\n * @param value\n */\n\nvar isNumber = function isNumber(value) {\n  return /(^-?|^\\+?|^\\d?)\\d*\\.\\d+$/.test(value + '');\n};\n/**\n * Get the length of the decimal.\n * @param value\n */\n\n\nfunction getDecimalLength(value) {\n  if (isNumber(value)) {\n    return value.toString().split('.')[1].length;\n  }\n\n  return 0;\n}\n/**\n * Get the value after the decimal point.\n * @param values\n */\n\n\nfunction decimals() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n\n  var lengths = values.map(getDecimalLength);\n  return Math.max.apply(Math, lengths);\n}\n/**\n * Disable the upper limit of the number.\n * @param value\n * @param max\n */\n\n\nfunction valueReachesMax(value, max) {\n  if (!isNil(value)) {\n    return +value >= max;\n  }\n\n  return false;\n}\n/**\n * Disable the lower limit of the number.\n * @param value\n * @param min\n */\n\n\nfunction valueReachesMin(value, min) {\n  if (!isNil(value)) {\n    return +value <= min;\n  }\n\n  return false;\n}\n\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? InputGroup : _props$as,\n      className = props.className,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'input-number' : _props$classPrefix,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      plaintext = props.plaintext,\n      valueProp = props.value,\n      defaultValue = props.defaultValue,\n      size = props.size,\n      prefixElement = props.prefix,\n      postfix = props.postfix,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      _props$buttonAppearan = props.buttonAppearance,\n      buttonAppearance = _props$buttonAppearan === void 0 ? 'subtle' : _props$buttonAppearan,\n      minProp = props.min,\n      maxProp = props.max,\n      _props$scrollable = props.scrollable,\n      scrollable = _props$scrollable === void 0 ? true : _props$scrollable,\n      onChange = props.onChange,\n      onWheel = props.onWheel,\n      restProps = _objectWithoutPropertiesLoose(props, [\"as\", \"className\", \"classPrefix\", \"disabled\", \"readOnly\", \"plaintext\", \"value\", \"defaultValue\", \"size\", \"prefix\", \"postfix\", \"step\", \"buttonAppearance\", \"min\", \"max\", \"scrollable\", \"onChange\", \"onWheel\"]);\n\n  var min = minProp !== null && minProp !== void 0 ? minProp : -Infinity;\n  var max = maxProp !== null && maxProp !== void 0 ? maxProp : Infinity;\n\n  var _useControlled = useControlled(valueProp, defaultValue),\n      value = _useControlled[0],\n      setValue = _useControlled[1];\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix;\n\n  var classes = merge(className, withClassPrefix());\n\n  var _partitionHTMLProps = partitionHTMLProps(restProps),\n      htmlInputProps = _partitionHTMLProps[0],\n      rest = _partitionHTMLProps[1];\n\n  var inputRef = useRef();\n  var handleChangeValue = useCallback(function (currentValue, event) {\n    if (currentValue !== value) {\n      setValue(currentValue);\n      onChange === null || onChange === void 0 ? void 0 : onChange(currentValue, event);\n    }\n  }, [onChange, setValue, value]);\n  var getSafeValue = useCallback(function (value) {\n    if (!Number.isNaN(value)) {\n      if (+value > max) {\n        value = max;\n      }\n\n      if (+value < min) {\n        value = min;\n      }\n    } else {\n      value = '';\n    }\n\n    return value.toString();\n  }, [max, min]); // Increment value by step\n\n  var handleStepUp = useCallback(function (event) {\n    var val = +(value || 0);\n    var bit = decimals(val, step);\n    handleChangeValue(getSafeValue((val + step).toFixed(bit)), event);\n  }, [getSafeValue, handleChangeValue, step, value]); // Decrement value by step\n\n  var handleStepDown = useCallback(function (event) {\n    var val = +(value || 0);\n    var bit = decimals(val, step);\n    handleChangeValue(getSafeValue((val - step).toFixed(bit)), event);\n  }, [getSafeValue, handleChangeValue, step, value]); // Disables step up/down button when\n  // - InputNumber is disabled/readonly\n  // - value reaches max/min limits\n\n  var stepUpDisabled = disabled || readOnly || valueReachesMax(value, max);\n  var stepDownDisabled = disabled || readOnly || valueReachesMin(value, min);\n  var handleKeyDown = useCallback(function (event) {\n    switch (event.key) {\n      case KEY_VALUES.UP:\n        event.preventDefault();\n        handleStepUp(event);\n        break;\n\n      case KEY_VALUES.DOWN:\n        event.preventDefault();\n        handleStepDown(event);\n        break;\n\n      case KEY_VALUES.HOME:\n        if (typeof minProp !== 'undefined') {\n          event.preventDefault();\n          handleChangeValue(getSafeValue(minProp), event);\n        }\n\n        break;\n\n      case KEY_VALUES.END:\n        if (typeof maxProp !== 'undefined') {\n          event.preventDefault();\n          handleChangeValue(getSafeValue(maxProp), event);\n        }\n\n        break;\n    }\n  }, [handleStepUp, handleStepDown, minProp, maxProp, handleChangeValue, getSafeValue]);\n  var handleWheel = useCallback(function (event) {\n    if (!disabled && !readOnly && event.target === document.activeElement) {\n      event.preventDefault();\n      var delta = event['wheelDelta'] || -event.deltaY || -(event === null || event === void 0 ? void 0 : event.detail);\n\n      if (delta > 0) {\n        handleStepDown(event);\n      }\n\n      if (delta < 0) {\n        handleStepUp(event);\n      }\n    }\n\n    onWheel === null || onWheel === void 0 ? void 0 : onWheel(event);\n  }, [disabled, handleStepDown, handleStepUp, onWheel, readOnly]);\n  var handleChange = useCallback(function (value, event) {\n    if (!/^-?(?:\\d+)?(\\.)?\\d*$/.test(value) && value !== '') {\n      return;\n    }\n\n    handleChangeValue(value, event);\n  }, [handleChangeValue]);\n  var handleBlur = useCallback(function (event) {\n    var _event$target;\n\n    var targetValue = Number.parseFloat((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value);\n    handleChangeValue(getSafeValue(targetValue), event);\n  }, [getSafeValue, handleChangeValue]);\n  useEffect(function () {\n    var wheelListener;\n\n    if (inputRef.current && scrollable) {\n      wheelListener = on(inputRef.current, 'wheel', handleWheel, {\n        passive: false\n      });\n    }\n\n    return function () {\n      var _wheelListener;\n\n      (_wheelListener = wheelListener) === null || _wheelListener === void 0 ? void 0 : _wheelListener.off();\n    };\n  }, [handleWheel, scrollable]);\n  var input = /*#__PURE__*/React.createElement(Input, _extends({}, htmlInputProps, {\n    type: \"number\",\n    autoComplete: \"off\",\n    step: step,\n    inputRef: inputRef,\n    onChange: handleChange,\n    onBlur: createChainedFunction(handleBlur, htmlInputProps === null || htmlInputProps === void 0 ? void 0 : htmlInputProps.onBlur),\n    value: isNil(value) ? '' : \"\" + value,\n    disabled: disabled,\n    readOnly: readOnly,\n    plaintext: plaintext,\n    ref: plaintext ? ref : undefined,\n    onKeyDown: handleKeyDown\n  }));\n\n  if (plaintext) {\n    return input;\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes,\n    disabled: disabled,\n    size: size\n  }), prefixElement && /*#__PURE__*/React.createElement(InputGroupAddon, null, prefixElement), input, /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('btn-group-vertical')\n  }, /*#__PURE__*/React.createElement(Button, {\n    tabIndex: -1,\n    appearance: buttonAppearance,\n    className: prefix('touchspin-up'),\n    onClick: handleStepUp,\n    disabled: stepUpDisabled,\n    \"aria-label\": \"Increment\"\n  }, /*#__PURE__*/React.createElement(AngleUpIcon, null)), /*#__PURE__*/React.createElement(Button, {\n    tabIndex: -1,\n    appearance: buttonAppearance,\n    className: prefix('touchspin-down'),\n    onClick: handleStepDown,\n    disabled: stepDownDisabled,\n    \"aria-label\": \"Decrement\"\n  }, /*#__PURE__*/React.createElement(AngleDownIcon, null))), postfix && /*#__PURE__*/React.createElement(InputGroupAddon, null, postfix));\n});\nInputNumber.displayName = 'InputNumber';\nInputNumber.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  step: PropTypes.number,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  prefix: PropTypes.node,\n  postfix: PropTypes.node,\n  disabled: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  plaintext: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['lg', 'md', 'sm', 'xs']),\n  buttonAppearance: PropTypes.oneOf(['default', 'primary', 'link', 'subtle', 'ghost']),\n  onWheel: PropTypes.func,\n  onChange: PropTypes.func\n};\nexport default InputNumber;","map":null,"metadata":{},"sourceType":"module"}