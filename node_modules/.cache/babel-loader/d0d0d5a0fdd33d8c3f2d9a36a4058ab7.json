{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/adapters/base64uploadadapter\n */\n\n/* globals window */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '../filerepository';\n/**\n * A plugin that converts images inserted into the editor into [Base64 strings](https://en.wikipedia.org/wiki/Base64)\n * in the {@glink installation/advanced/saving-data editor output}.\n *\n * This kind of image upload does not require server processing â€“ images are stored with the rest of the text and\n * displayed by the web browser without additional requests.\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar Base64UploadAdapter = /*#__PURE__*/function (_Plugin) {\n  _inherits(Base64UploadAdapter, _Plugin);\n\n  function Base64UploadAdapter() {\n    _classCallCheck(this, Base64UploadAdapter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Base64UploadAdapter).apply(this, arguments));\n  }\n\n  _createClass(Base64UploadAdapter, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      this.editor.plugins.get(FileRepository).createUploadAdapter = function (loader) {\n        return new Adapter(loader);\n      };\n    }\n  }], [{\n    key: \"requires\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return [FileRepository];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"pluginName\",\n    get: function get() {\n      return 'Base64UploadAdapter';\n    }\n  }]);\n\n  return Base64UploadAdapter;\n}(Plugin);\n/**\n * The upload adapter that converts images inserted into the editor into Base64 strings.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\n\n\nexport { Base64UploadAdapter as default };\n\nvar Adapter = /*#__PURE__*/function () {\n  /**\n   * Creates a new adapter instance.\n   *\n   * @param {module:upload/filerepository~FileLoader} loader\n   */\n  function Adapter(loader) {\n    _classCallCheck(this, Adapter);\n\n    /**\n     * `FileLoader` instance to use during the upload.\n     *\n     * @member {module:upload/filerepository~FileLoader} #loader\n     */\n    this.loader = loader;\n  }\n  /**\n   * Starts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#upload\n   * @returns {Promise}\n   */\n\n\n  _createClass(Adapter, [{\n    key: \"upload\",\n    value: function upload() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var reader = _this.reader = new window.FileReader();\n        reader.addEventListener('load', function () {\n          resolve({\n            default: reader.result\n          });\n        });\n        reader.addEventListener('error', function (err) {\n          reject(err);\n        });\n        reader.addEventListener('abort', function () {\n          reject();\n        });\n\n        _this.loader.file.then(function (file) {\n          reader.readAsDataURL(file);\n        });\n      });\n    }\n    /**\n     * Aborts the upload process.\n     *\n     * @see module:upload/filerepository~UploadAdapter#abort\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.reader.abort();\n    }\n  }]);\n\n  return Adapter;\n}();","map":null,"metadata":{},"sourceType":"module"}