{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _isFunction from \"lodash/isFunction\";\nimport _isNil from \"lodash/isNil\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _omit from \"lodash/omit\";\nimport _pick from \"lodash/pick\";\nimport React, { useState, useRef, useEffect, useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { List, AutoSizer } from '../Picker/VirtualizedList';\nimport TreeNode from './TreeNode';\nimport { getTreeNodeIndent } from '../utils/treeUtils';\nimport { createChainedFunction, useClassNames, useCustom, useControlled, TREE_NODE_DROP_POSITION, KEY_VALUES, mergeRefs, shallowEqual } from '../utils';\nimport { getExpandWhenSearching, hasVisibleChildren, getDragNodeKeys, calDropNodePosition, createUpdateTreeDataFunction, useTreeDrag, useFlattenTreeData, getTreeActiveNode, getDefaultExpandItemValues, useTreeNodeRefs, useTreeSearch, focusPreviousItem, getFocusableItems, focusNextItem, getActiveItem, toggleExpand, useGetTreeNodeChildren, focusToActiveTreeNode, leftArrowHandler, focusTreeNode, rightArrowHandler, isSearching } from '../utils/treeUtils';\nimport { PickerToggle, PickerOverlay, SearchBar, PickerToggleTrigger, createConcatChildrenFunction, usePickerClassName, onMenuKeyDown as _onMenuKeyDown, usePublicMethods, listPickerPropTypes, pickTriggerPropKeys, omitTriggerPropKeys, useToggleKeyDownEvent } from '../Picker';\nimport TreeContext from '../Tree/TreeContext'; // default value for virtualized\n\nexport var maxTreeHeight = 320;\nvar emptyArray = [];\nvar TreePicker = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$data = props.data,\n      data = _props$data === void 0 ? emptyArray : _props$data,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      style = props.style,\n      showIndentLine = props.showIndentLine,\n      controlledValue = props.value,\n      overrideLocale = props.locale,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 360 : _props$height,\n      className = props.className,\n      disabled = props.disabled,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n      _props$cleanable = props.cleanable,\n      cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n      menuStyle = props.menuStyle,\n      _props$searchable = props.searchable,\n      searchable = _props$searchable === void 0 ? true : _props$searchable,\n      _props$virtualized = props.virtualized,\n      virtualized = _props$virtualized === void 0 ? false : _props$virtualized,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,\n      defaultValue = props.defaultValue,\n      placeholder = props.placeholder,\n      searchKeyword = props.searchKeyword,\n      menuClassName = props.menuClassName,\n      _props$menuAutoWidth = props.menuAutoWidth,\n      menuAutoWidth = _props$menuAutoWidth === void 0 ? true : _props$menuAutoWidth,\n      searchBy = props.searchBy,\n      toggleAs = props.toggleAs,\n      _props$labelKey = props.labelKey,\n      labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n      _props$valueKey = props.valueKey,\n      valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n      _props$childrenKey = props.childrenKey,\n      childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n      draggable = props.draggable,\n      _props$defaultExpandA = props.defaultExpandAll,\n      defaultExpandAll = _props$defaultExpandA === void 0 ? false : _props$defaultExpandA,\n      _props$disabledItemVa = props.disabledItemValues,\n      disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n      controlledExpandItemValues = props.expandItemValues,\n      _props$defaultExpandI = props.defaultExpandItemValues,\n      defaultExpandItemValues = _props$defaultExpandI === void 0 ? emptyArray : _props$defaultExpandI,\n      id = props.id,\n      listProps = props.listProps,\n      getChildren = props.getChildren,\n      renderTreeIcon = props.renderTreeIcon,\n      renderTreeNode = props.renderTreeNode,\n      onExit = props.onExit,\n      onExited = props.onExited,\n      onClean = props.onClean,\n      onOpen = props.onOpen,\n      onSearch = props.onSearch,\n      onSelect = props.onSelect,\n      onChange = props.onChange,\n      onEntered = props.onEntered,\n      onClose = props.onClose,\n      onDragEnd = props.onDragEnd,\n      onDragStart = props.onDragStart,\n      onDragEnter = props.onDragEnter,\n      onDragLeave = props.onDragLeave,\n      onDragOver = props.onDragOver,\n      onDrop = props.onDrop,\n      onExpand = props.onExpand,\n      renderExtraFooter = props.renderExtraFooter,\n      renderMenu = props.renderMenu,\n      renderValue = props.renderValue,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"data\", \"appearance\", \"style\", \"showIndentLine\", \"value\", \"locale\", \"height\", \"className\", \"disabled\", \"placement\", \"cleanable\", \"menuStyle\", \"searchable\", \"virtualized\", \"classPrefix\", \"defaultValue\", \"placeholder\", \"searchKeyword\", \"menuClassName\", \"menuAutoWidth\", \"searchBy\", \"toggleAs\", \"labelKey\", \"valueKey\", \"childrenKey\", \"draggable\", \"defaultExpandAll\", \"disabledItemValues\", \"expandItemValues\", \"defaultExpandItemValues\", \"id\", \"listProps\", \"getChildren\", \"renderTreeIcon\", \"renderTreeNode\", \"onExit\", \"onExited\", \"onClean\", \"onOpen\", \"onSearch\", \"onSelect\", \"onChange\", \"onEntered\", \"onClose\", \"onDragEnd\", \"onDragStart\", \"onDragEnter\", \"onDragLeave\", \"onDragOver\", \"onDrop\", \"onExpand\", \"renderExtraFooter\", \"renderMenu\", \"renderValue\"]);\n\n  var triggerRef = useRef(null);\n  var targetRef = useRef(null);\n  var listRef = useRef(null);\n  var overlayRef = useRef(null);\n  var searchInputRef = useRef(null);\n  var treeViewRef = useRef(null);\n\n  var _useCustom = useCustom('Picker', overrideLocale),\n      rtl = _useCustom.rtl,\n      locale = _useCustom.locale;\n\n  var _useContext = useContext(TreeContext),\n      inline = _useContext.inline;\n\n  var _useControlled = useControlled(controlledValue, defaultValue),\n      value = _useControlled[0],\n      setValue = _useControlled[1],\n      isControlled = _useControlled[2];\n\n  var _useGetTreeNodeChildr = useGetTreeNodeChildren(data, valueKey, childrenKey),\n      treeData = _useGetTreeNodeChildr.data,\n      setTreeData = _useGetTreeNodeChildr.setData,\n      loadingNodeValues = _useGetTreeNodeChildr.loadingNodeValues,\n      loadChildren = _useGetTreeNodeChildr.loadChildren;\n\n  var _useControlled2 = useControlled(controlledExpandItemValues, getDefaultExpandItemValues(treeData, {\n    defaultExpandAll: defaultExpandAll,\n    valueKey: valueKey,\n    childrenKey: childrenKey,\n    defaultExpandItemValues: defaultExpandItemValues\n  })),\n      expandItemValues = _useControlled2[0],\n      setExpandItemValues = _useControlled2[1];\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(null),\n      focusItemValue = _useState2[0],\n      setFocusItemValue = _useState2[1];\n\n  var _useFlattenTreeData = useFlattenTreeData({\n    data: treeData,\n    labelKey: labelKey,\n    valueKey: valueKey,\n    childrenKey: childrenKey,\n    callback: function callback() {\n      // after flattenData, always trigger re-render\n      forceUpdate();\n    }\n  }),\n      flattenNodes = _useFlattenTreeData.flattenNodes,\n      forceUpdate = _useFlattenTreeData.forceUpdate,\n      formatVirtualizedTreeData = _useFlattenTreeData.formatVirtualizedTreeData;\n\n  var _useClassNames = useClassNames(classPrefix),\n      prefix = _useClassNames.prefix,\n      merge = _useClassNames.merge;\n\n  var _useClassNames2 = useClassNames('tree'),\n      treePrefix = _useClassNames2.prefix,\n      withTreeClassPrefix = _useClassNames2.withClassPrefix;\n\n  var _useTreeSearch = useTreeSearch({\n    labelKey: labelKey,\n    childrenKey: childrenKey,\n    searchKeyword: searchKeyword,\n    data: treeData,\n    searchBy: searchBy,\n    callback: function callback(searchKeyword, _filterData, event) {\n      onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchKeyword, event);\n    }\n  }),\n      filteredData = _useTreeSearch.filteredData,\n      searchKeywordState = _useTreeSearch.searchKeywordState,\n      setSearchKeyword = _useTreeSearch.setSearchKeyword,\n      handleSearch = _useTreeSearch.handleSearch,\n      setFilteredData = _useTreeSearch.setFilteredData;\n\n  var _useTreeDrag = useTreeDrag(),\n      dragNodeKeys = _useTreeDrag.dragNodeKeys,\n      dragOverNodeKey = _useTreeDrag.dragOverNodeKey,\n      dragNode = _useTreeDrag.dragNode,\n      dropNodePosition = _useTreeDrag.dropNodePosition,\n      setDragNodeKeys = _useTreeDrag.setDragNodeKeys,\n      setDragOverNodeKey = _useTreeDrag.setDragOverNodeKey,\n      setDragNode = _useTreeDrag.setDragNode,\n      setDropNodePosition = _useTreeDrag.setDropNodePosition;\n\n  var _useTreeNodeRefs = useTreeNodeRefs(),\n      treeNodesRefs = _useTreeNodeRefs.treeNodesRefs,\n      saveTreeNodeRef = _useTreeNodeRefs.saveTreeNodeRef;\n\n  var activeNode = getTreeActiveNode(flattenNodes, value, valueKey);\n  var getFormattedNodes = useCallback(function (render) {\n    if (virtualized) {\n      return formatVirtualizedTreeData(flattenNodes, filteredData, expandItemValues, {\n        searchKeyword: searchKeywordState\n      }).filter(function (n) {\n        return n.visible;\n      });\n    }\n\n    return filteredData.map(function (dataItem, index) {\n      return render === null || render === void 0 ? void 0 : render(dataItem, index, 1);\n    });\n  }, [searchKeywordState, expandItemValues, filteredData, flattenNodes, formatVirtualizedTreeData, virtualized]);\n  var focusActiveNode = useCallback(function () {\n    if (listRef.current) {\n      focusToActiveTreeNode({\n        list: listRef.current,\n        valueKey: valueKey,\n        selector: \".\" + treePrefix('node-active'),\n        activeNode: activeNode,\n        virtualized: virtualized,\n        container: treeViewRef.current,\n        formattedNodes: getFormattedNodes()\n      });\n    }\n  }, [treePrefix, activeNode, getFormattedNodes, valueKey, virtualized]);\n  useEffect(function () {\n    setFilteredData(data, searchKeywordState);\n    setTreeData(data);\n  }, [data, searchKeywordState, setFilteredData, setTreeData]);\n  useEffect(function () {\n    setFilteredData(treeData, searchKeywordState);\n  }, [treeData, searchKeywordState, setFilteredData]);\n  useEffect(function () {\n    if (Array.isArray(controlledExpandItemValues)) {\n      setExpandItemValues(controlledExpandItemValues);\n    }\n  }, [controlledExpandItemValues, setExpandItemValues]);\n  useEffect(function () {\n    setSearchKeyword(searchKeyword !== null && searchKeyword !== void 0 ? searchKeyword : '');\n  }, [searchKeyword, setSearchKeyword]);\n  var getDropData = useCallback(function (nodeData) {\n    var options = {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    };\n    return {\n      /** draggingNode */\n      dragNode: dragNode,\n\n      /** dropNode */\n      dropNode: nodeData,\n\n      /** dragAndDrop Position type */\n      dropNodePosition: dropNodePosition,\n      createUpdateDataFunction: createUpdateTreeDataFunction({\n        dragNode: dragNode,\n        dropNode: nodeData,\n        dropNodePosition: dropNodePosition\n      }, options)\n    };\n  }, [dragNode, valueKey, childrenKey, dropNodePosition]);\n\n  var getTreeNodeProps = function getTreeNodeProps(node, layer, index) {\n    var draggingNode = dragNode !== null && dragNode !== void 0 ? dragNode : {};\n    return {\n      as: Component,\n      rtl: rtl,\n      value: node[valueKey],\n      label: node[labelKey],\n      index: index,\n      layer: layer,\n      loading: loadingNodeValues.some(function (item) {\n        return shallowEqual(item, node[valueKey]);\n      }),\n      expand: node.expand,\n      active: shallowEqual(node[valueKey], value),\n      focus: shallowEqual(node[valueKey], focusItemValue),\n      visible: node.visible,\n      draggable: draggable,\n      dragging: shallowEqual(node[valueKey], draggingNode[valueKey]),\n      children: node[childrenKey],\n      nodeData: node,\n      disabled: disabledItemValues.some(function (disabledItem) {\n        return shallowEqual(disabledItem, node[valueKey]);\n      }),\n      dragOver: shallowEqual(node[valueKey], dragOverNodeKey) && dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER,\n      dragOverTop: shallowEqual(node[valueKey], dragOverNodeKey) && dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP,\n      dragOverBottom: shallowEqual(node[valueKey], dragOverNodeKey) && dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM,\n      onSelect: handleSelect,\n      onDragStart: handleDragStart,\n      onDragEnter: handleDragEnter,\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      onDragEnd: handleDragEnd,\n      onDrop: handleDrop,\n      onExpand: handleExpand,\n      onRenderTreeNode: renderTreeNode,\n      onRenderTreeIcon: renderTreeIcon\n    };\n  };\n\n  var handleSelect = useCallback(function (nodeData, event) {\n    var _targetRef$current, _triggerRef$current, _triggerRef$current$c;\n\n    if (!nodeData) {\n      return;\n    }\n\n    var nodeValue = nodeData[valueKey];\n\n    if (!isControlled) {\n      setValue(nodeValue);\n    }\n\n    setFocusItemValue(nodeData[valueKey]);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nodeValue, event);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nodeData, nodeValue, event);\n    (_targetRef$current = targetRef.current) === null || _targetRef$current === void 0 ? void 0 : _targetRef$current.focus();\n    (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : (_triggerRef$current$c = _triggerRef$current.close) === null || _triggerRef$current$c === void 0 ? void 0 : _triggerRef$current$c.call(_triggerRef$current);\n  }, [valueKey, isControlled, onChange, onSelect, setValue]);\n  var handleExpand = useCallback(function (node) {\n    var nextExpandItemValues = toggleExpand({\n      node: node,\n      isExpand: !node.expand,\n      expandItemValues: expandItemValues,\n      valueKey: valueKey\n    });\n    setExpandItemValues(nextExpandItemValues);\n    onExpand === null || onExpand === void 0 ? void 0 : onExpand(nextExpandItemValues, node, createConcatChildrenFunction(node, node[valueKey], {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    }));\n\n    if (_isFunction(getChildren) && !node.expand && Array.isArray(node[childrenKey]) && node[childrenKey].length === 0) {\n      loadChildren(node, getChildren);\n    }\n  }, [valueKey, childrenKey, expandItemValues, getChildren, onExpand, setExpandItemValues, loadChildren]);\n  var handleDragStart = useCallback(function (nodeData, event) {\n    if (draggable) {\n      setDragNodeKeys(getDragNodeKeys(nodeData, childrenKey, valueKey));\n      setDragNode(flattenNodes[nodeData.refKey]);\n      onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(nodeData, event);\n    }\n  }, [draggable, childrenKey, flattenNodes, onDragStart, setDragNodeKeys, setDragNode, valueKey]);\n  var handleDragEnter = useCallback(function (nodeData, event) {\n    if (dragNodeKeys.some(function (d) {\n      return shallowEqual(d, nodeData[valueKey]);\n    })) {\n      return;\n    }\n\n    if (dragNode) {\n      setDragOverNodeKey(nodeData[valueKey]);\n      setDropNodePosition(calDropNodePosition(event, treeNodesRefs[nodeData.refKey]));\n    }\n\n    onDragEnter === null || onDragEnter === void 0 ? void 0 : onDragEnter(nodeData, event);\n  }, [dragNode, treeNodesRefs, dragNodeKeys, onDragEnter, setDragOverNodeKey, setDropNodePosition, valueKey]);\n  var handleDragOver = useCallback(function (nodeData, event) {\n    if (dragNodeKeys.some(function (d) {\n      return shallowEqual(d, nodeData[valueKey]);\n    })) {\n      return;\n    }\n\n    if (dragNode && shallowEqual(nodeData[valueKey], dragOverNodeKey)) {\n      var lastDropNodePosition = calDropNodePosition(event, treeNodesRefs[nodeData.refKey]);\n      if (lastDropNodePosition === dropNodePosition) return;\n      setDropNodePosition(lastDropNodePosition);\n    }\n\n    onDragOver === null || onDragOver === void 0 ? void 0 : onDragOver(nodeData, event);\n  }, [dragNode, dragNodeKeys, dragOverNodeKey, dropNodePosition, onDragOver, setDropNodePosition, treeNodesRefs, valueKey]);\n  var handleDragLeave = useCallback(function (nodeData, event) {\n    onDragLeave === null || onDragLeave === void 0 ? void 0 : onDragLeave(nodeData, event);\n  }, [onDragLeave]);\n  var handleDragEnd = useCallback(function (nodeData, event) {\n    setDragNode(null);\n    setDragNodeKeys([]);\n    setDragOverNodeKey(null);\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(nodeData, event);\n  }, [setDragNode, setDragNodeKeys, setDragOverNodeKey, onDragEnd]);\n  var handleDrop = useCallback(function (nodeData, event) {\n    if (dragNodeKeys.some(function (d) {\n      return shallowEqual(d, nodeData[valueKey]);\n    })) {\n      console.error('Cannot drag a node to itself and its children');\n    } else {\n      var dropData = getDropData(nodeData);\n      onDrop === null || onDrop === void 0 ? void 0 : onDrop(dropData, event);\n    }\n\n    setDragNode(null);\n    setDragNodeKeys([]);\n    setDragOverNodeKey(null);\n  }, [dragNodeKeys, setDragNode, setDragOverNodeKey, setDragNodeKeys, onDrop, getDropData, valueKey]);\n  var handleOpen = useCallback(function () {\n    var _triggerRef$current2, _triggerRef$current2$;\n\n    (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : (_triggerRef$current2$ = _triggerRef$current2.open) === null || _triggerRef$current2$ === void 0 ? void 0 : _triggerRef$current2$.call(_triggerRef$current2);\n    focusActiveNode();\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n    setActive(true);\n  }, [focusActiveNode, onOpen]);\n  var handleClose = useCallback(function () {\n    var _triggerRef$current3, _triggerRef$current3$, _targetRef$current2;\n\n    (_triggerRef$current3 = triggerRef.current) === null || _triggerRef$current3 === void 0 ? void 0 : (_triggerRef$current3$ = _triggerRef$current3.close) === null || _triggerRef$current3$ === void 0 ? void 0 : _triggerRef$current3$.call(_triggerRef$current3);\n    setSearchKeyword('');\n    setActive(false);\n    setFocusItemValue(activeNode === null || activeNode === void 0 ? void 0 : activeNode[valueKey]);\n    /**\n     * when using keyboard toggle picker, should refocus on PickerToggle Component after close picker menu\n     */\n\n    (_targetRef$current2 = targetRef.current) === null || _targetRef$current2 === void 0 ? void 0 : _targetRef$current2.focus();\n  }, [activeNode, setSearchKeyword, valueKey]);\n  usePublicMethods(ref, {\n    rootRef: inline ? treeViewRef : undefined,\n    triggerRef: triggerRef,\n    overlayRef: overlayRef,\n    targetRef: targetRef,\n    listRef: listRef,\n    inline: inline\n  });\n  var handleFocusItem = useCallback(function (key) {\n    var focusableItems = getFocusableItems(filteredData, {\n      disabledItemValues: disabledItemValues,\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      expandItemValues: expandItemValues\n    }, isSearching(searchKeywordState));\n    var selector = \".\" + treePrefix('node-label');\n    var focusProps = {\n      focusItemValue: focusItemValue,\n      focusableItems: focusableItems,\n      treeNodesRefs: treeNodesRefs,\n      selector: selector,\n      valueKey: valueKey,\n      callback: function callback(nextFocusItemValue) {\n        setFocusItemValue(nextFocusItemValue);\n      }\n    };\n\n    if (key === KEY_VALUES.DOWN) {\n      focusNextItem(focusProps);\n      return;\n    }\n\n    if (key === KEY_VALUES.UP) {\n      focusPreviousItem(focusProps);\n    }\n  }, [searchKeywordState, expandItemValues, filteredData, focusItemValue, treeNodesRefs, treePrefix, valueKey, childrenKey, disabledItemValues]);\n  var handleLeftArrow = useCallback(function () {\n    if (_isNil(focusItemValue)) return;\n    var focusItem = getActiveItem(focusItemValue, flattenNodes, valueKey);\n    leftArrowHandler({\n      focusItem: focusItem,\n      expand: expandItemValues.includes(focusItem === null || focusItem === void 0 ? void 0 : focusItem[valueKey]),\n      onExpand: handleExpand,\n      childrenKey: childrenKey,\n      onFocusItem: function onFocusItem() {\n        var _focusItem$parent, _focusItem$parent2;\n\n        setFocusItemValue(focusItem === null || focusItem === void 0 ? void 0 : (_focusItem$parent = focusItem.parent) === null || _focusItem$parent === void 0 ? void 0 : _focusItem$parent[valueKey]);\n        focusTreeNode(focusItem === null || focusItem === void 0 ? void 0 : (_focusItem$parent2 = focusItem.parent) === null || _focusItem$parent2 === void 0 ? void 0 : _focusItem$parent2.refKey, treeNodesRefs, \".\" + treePrefix('node-label'));\n      }\n    });\n  }, [expandItemValues, flattenNodes, focusItemValue, handleExpand, treeNodesRefs, treePrefix, valueKey, childrenKey]);\n  var handleRightArrow = useCallback(function () {\n    if (_isNil(focusItemValue)) return;\n    var focusItem = getActiveItem(focusItemValue, flattenNodes, valueKey);\n    rightArrowHandler({\n      focusItem: focusItem,\n      expand: expandItemValues.includes(focusItem === null || focusItem === void 0 ? void 0 : focusItem[valueKey]),\n      childrenKey: childrenKey,\n      onExpand: handleExpand,\n      onFocusItem: function onFocusItem() {\n        handleFocusItem(KEY_VALUES.DOWN);\n      }\n    });\n  }, [focusItemValue, flattenNodes, valueKey, expandItemValues, childrenKey, handleExpand, handleFocusItem]);\n  var selectActiveItem = useCallback(function (event) {\n    if (_isNil(focusItemValue)) return;\n    var activeItem = getActiveItem(focusItemValue, flattenNodes, valueKey);\n    handleSelect(activeItem, event);\n  }, [flattenNodes, valueKey, focusItemValue, handleSelect]);\n  var handleClean = useCallback(function (event) {\n    var nullValue = null;\n    var target = event.target; // exclude searchBar\n\n    if (target.matches('div[role=\"searchbox\"] > input')) {\n      return;\n    }\n\n    setValue(null);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nullValue, event);\n  }, [onChange, setValue]);\n  var onPickerKeydown = useToggleKeyDownEvent(_extends({\n    toggle: !activeNode || !active,\n    triggerRef: triggerRef,\n    targetRef: targetRef,\n    overlayRef: overlayRef,\n    searchInputRef: searchInputRef,\n    active: active,\n    onExit: handleClean,\n    onClose: handleClose,\n    onMenuKeyDown: function onMenuKeyDown(event) {\n      _onMenuKeyDown(event, {\n        down: function down() {\n          return handleFocusItem(KEY_VALUES.DOWN);\n        },\n        up: function up() {\n          return handleFocusItem(KEY_VALUES.UP);\n        },\n        left: rtl ? handleRightArrow : handleLeftArrow,\n        right: rtl ? handleLeftArrow : handleRightArrow,\n        enter: selectActiveItem,\n        del: handleClean\n      });\n    }\n  }, rest));\n  var handleTreeKeyDown = useCallback(function (event) {\n    if (!treeViewRef.current) {\n      return;\n    }\n\n    _onMenuKeyDown(event, {\n      down: function down() {\n        return handleFocusItem(KEY_VALUES.DOWN);\n      },\n      up: function up() {\n        return handleFocusItem(KEY_VALUES.UP);\n      },\n      left: rtl ? handleRightArrow : handleLeftArrow,\n      right: rtl ? handleLeftArrow : handleRightArrow,\n      enter: selectActiveItem\n    });\n  }, [handleFocusItem, handleLeftArrow, handleRightArrow, rtl, selectActiveItem]);\n\n  var renderNode = function renderNode(node, index, layer) {\n    if (!node.visible) {\n      return null;\n    }\n\n    var children = node[childrenKey];\n    var expand = getExpandWhenSearching(searchKeywordState, expandItemValues.includes(node[valueKey]));\n    var visibleChildren = _isUndefined(searchKeywordState) || searchKeywordState.length === 0 ? !!children : hasVisibleChildren(node, childrenKey);\n\n    var nodeProps = _extends({}, getTreeNodeProps(_extends({}, node, {\n      expand: expand\n    }), layer, index), {\n      hasChildren: visibleChildren\n    });\n\n    if (nodeProps.hasChildren) {\n      var _merge;\n\n      layer += 1;\n      var openClass = treePrefix('open');\n      var childrenClass = merge(treePrefix('node-children'), (_merge = {}, _merge[openClass] = expand && visibleChildren, _merge));\n      var nodes = children || [];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: childrenClass,\n        key: node[valueKey]\n      }, /*#__PURE__*/React.createElement(TreeNode, _extends({}, nodeProps, {\n        ref: function ref(_ref) {\n          return saveTreeNodeRef(_ref, node.refKey);\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: treePrefix('children')\n      }, nodes.map(function (child, i) {\n        return renderNode(child, i, layer);\n      }), showIndentLine && /*#__PURE__*/React.createElement(\"span\", {\n        className: treePrefix('indent-line'),\n        style: getTreeNodeIndent(rtl, layer - 1, true)\n      })));\n    }\n\n    return /*#__PURE__*/React.createElement(TreeNode, _extends({\n      ref: function ref(_ref2) {\n        return saveTreeNodeRef(_ref2, node.refKey);\n      },\n      key: node[valueKey]\n    }, nodeProps));\n  };\n\n  var renderVirtualListNode = function renderVirtualListNode(nodes) {\n    return function (_ref3) {\n      var key = _ref3.key,\n          index = _ref3.index,\n          style = _ref3.style;\n      var node = nodes[index];\n      var layer = node.layer,\n          visible = node.visible;\n      var expand = getExpandWhenSearching(searchKeywordState, expandItemValues.includes(node[valueKey]));\n\n      if (!node.visible) {\n        return null;\n      }\n\n      var nodeProps = _extends({}, getTreeNodeProps(_extends({}, node, {\n        expand: expand\n      }), layer), {\n        style: style,\n        hasChildren: node.hasChildren\n      });\n\n      return visible && /*#__PURE__*/React.createElement(TreeNode, _extends({\n        ref: function ref(_ref4) {\n          return saveTreeNodeRef(_ref4, node.refKey);\n        },\n        key: key\n      }, nodeProps));\n    };\n  };\n\n  var renderTree = function renderTree() {\n    var _withTreeClassPrefix;\n\n    var classes = withTreeClassPrefix((_withTreeClassPrefix = {}, _withTreeClassPrefix[className !== null && className !== void 0 ? className : ''] = inline, _withTreeClassPrefix.virtualized = virtualized, _withTreeClassPrefix));\n    var formattedNodes = getFormattedNodes(renderNode);\n    var styles = inline ? _extends({\n      height: height\n    }, style) : {};\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"tree\",\n      id: id ? id + \"-listbox\" : undefined,\n      ref: treeViewRef,\n      className: classes,\n      style: styles,\n      onKeyDown: inline ? handleTreeKeyDown : undefined\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: treePrefix('nodes')\n    }, virtualized ? /*#__PURE__*/React.createElement(AutoSizer, {\n      defaultHeight: inline ? height : maxTreeHeight,\n      style: {\n        width: 'auto',\n        height: 'auto'\n      }\n    }, function (_ref5) {\n      var height = _ref5.height,\n          width = _ref5.width;\n      return /*#__PURE__*/React.createElement(List, _extends({\n        ref: listRef,\n        width: width,\n        height: height,\n        rowHeight: 36,\n        rowCount: formattedNodes.length,\n        rowRenderer: renderVirtualListNode(formattedNodes),\n        scrollToAlignment: \"center\"\n      }, listProps));\n    }) : formattedNodes));\n  };\n\n  var renderDropdownMenu = function renderDropdownMenu(positionProps, speakerRef) {\n    var left = positionProps.left,\n        top = positionProps.top,\n        className = positionProps.className;\n    var classes = merge(className, menuClassName, prefix('tree-menu'));\n\n    var mergedMenuStyle = _extends({}, menuStyle, {\n      left: left,\n      top: top\n    });\n\n    var styles = virtualized ? _extends({\n      height: height\n    }, mergedMenuStyle) : _extends({}, mergedMenuStyle);\n    return /*#__PURE__*/React.createElement(PickerOverlay, {\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: styles,\n      ref: mergeRefs(overlayRef, speakerRef),\n      onKeyDown: onPickerKeydown,\n      target: triggerRef\n    }, searchable ? /*#__PURE__*/React.createElement(SearchBar, {\n      placeholder: locale.searchPlaceholder,\n      onChange: handleSearch,\n      value: searchKeywordState,\n      inputRef: searchInputRef\n    }) : null, renderMenu ? renderMenu(renderTree()) : renderTree(), renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n  /**\n   * 1.Have a value and the value is valid.\n   * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n   */\n\n\n  var hasValidValue = !_isNil(activeNode) || !_isNil(value) && _isFunction(renderValue);\n\n  var selectedElement = placeholder;\n\n  if (hasValidValue) {\n    var node = activeNode !== null && activeNode !== void 0 ? activeNode : {};\n    selectedElement = node[labelKey];\n\n    if (_isFunction(renderValue) && value) {\n      selectedElement = renderValue(value, node, selectedElement);\n\n      if (_isNil(selectedElement)) {\n        hasValidValue = false;\n      }\n    }\n  }\n\n  var _usePickerClassName = usePickerClassName(_extends({}, props, {\n    classPrefix: classPrefix,\n    appearance: appearance,\n    hasValue: hasValidValue,\n    name: 'tree',\n    cleanable: cleanable\n  })),\n      classes = _usePickerClassName[0],\n      usedClassNamePropKeys = _usePickerClassName[1];\n\n  if (inline) {\n    return renderTree();\n  }\n\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    pickerProps: _pick(props, pickTriggerPropKeys),\n    ref: triggerRef,\n    placement: placement,\n    onEnter: handleOpen,\n    onEntered: onEntered,\n    onExit: createChainedFunction(onClose, onExit),\n    onExited: createChainedFunction(handleClose, onExited),\n    speaker: renderDropdownMenu\n  }, /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    style: style\n  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, _omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys, ['cascade'])), {\n    id: id,\n    ref: targetRef,\n    appearance: appearance,\n    onKeyDown: onPickerKeydown,\n    onClean: createChainedFunction(handleClean, onClean),\n    cleanable: cleanable && !disabled,\n    as: toggleAs,\n    disabled: disabled,\n    hasValue: hasValidValue,\n    active: active,\n    placement: placement,\n    inputValue: value\n  }), selectedElement || locale.placeholder)));\n});\nTreePicker.displayName = 'TreePicker';\nTreePicker.propTypes = _extends({}, listPickerPropTypes, {\n  locale: PropTypes.any,\n  appearance: PropTypes.oneOf(['default', 'subtle']),\n  height: PropTypes.number,\n  draggable: PropTypes.bool,\n  virtualized: PropTypes.bool,\n  searchable: PropTypes.bool,\n  menuAutoWidth: PropTypes.bool,\n  searchKeyword: PropTypes.string,\n  defaultExpandAll: PropTypes.bool,\n  expandItemValues: PropTypes.array,\n  defaultExpandItemValues: PropTypes.array,\n  onSearch: PropTypes.func,\n  onExpand: PropTypes.func,\n  onSelect: PropTypes.func,\n  renderMenu: PropTypes.func,\n  renderTreeNode: PropTypes.func,\n  renderTreeIcon: PropTypes.func,\n  renderExtraFooter: PropTypes.func,\n  renderDragNode: PropTypes.func,\n  searchBy: PropTypes.func\n});\nexport default TreePicker;","map":null,"metadata":{},"sourceType":"module"}