{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\n\nvar HtmlDataProcessor = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of the HTML data processor class.\n   *\n   * @param {module:engine/view/document~Document} document The view document instance.\n   */\n  function HtmlDataProcessor(document) {\n    _classCallCheck(this, HtmlDataProcessor);\n\n    /**\n     * A DOM parser instance used to parse an HTML string to an HTML document.\n     *\n     * @member {DOMParser}\n     */\n    this.domParser = new DOMParser();\n    /**\n     * A DOM converter used to convert DOM elements to view elements.\n     *\n     * @member {module:engine/view/domconverter~DomConverter}\n     */\n\n    this.domConverter = new DomConverter(document, {\n      renderingMode: 'data'\n    });\n    /**\n     * A basic HTML writer instance used to convert DOM elements to an HTML string.\n     *\n     * @member {module:engine/dataprocessor/htmlwriter~HtmlWriter}\n     */\n\n    this.htmlWriter = new BasicHtmlWriter();\n  }\n  /**\n   * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n   * to data format &mdash; in this case to an HTML string.\n   *\n   * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n   * @returns {String} HTML string.\n   */\n\n\n  _createClass(HtmlDataProcessor, [{\n    key: \"toData\",\n    value: function toData(viewFragment) {\n      // Convert view DocumentFragment to DOM DocumentFragment.\n      var domFragment = this.domConverter.viewToDom(viewFragment, document); // Convert DOM DocumentFragment to HTML output.\n\n      return this.htmlWriter.getHtml(domFragment);\n    }\n    /**\n     * Converts the provided HTML string to a view tree.\n     *\n     * @param {String} data An HTML string.\n     * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n     */\n\n  }, {\n    key: \"toView\",\n    value: function toView(data) {\n      // Convert input HTML data to DOM DocumentFragment.\n      var domFragment = this._toDom(data); // Convert DOM DocumentFragment to view DocumentFragment.\n\n\n      return this.domConverter.domToView(domFragment);\n    }\n    /**\n     * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n     * and not processed during the conversion from the DOM to the view elements.\n     *\n     * The raw data can be later accessed by a\n     * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n     *\n     * @param {module:engine/view/matcher~MatcherPattern} pattern Pattern matching all view elements whose content should\n     * be treated as raw data.\n     */\n\n  }, {\n    key: \"registerRawContentMatcher\",\n    value: function registerRawContentMatcher(pattern) {\n      this.domConverter.registerRawContentMatcher(pattern);\n    }\n    /**\n     * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n     * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n     *\n     * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but\n     * bloats the editor data with additional markup.\n     *\n     * This mode may be required by some features and will be turned on by them automatically.\n     *\n     * @param {'default'|'marked'} type Whether to use the default or the marked `&nbsp;` block fillers.\n     */\n\n  }, {\n    key: \"useFillerType\",\n    value: function useFillerType(type) {\n      this.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n    }\n    /**\n     * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n     * the provided data.\n     *\n     * @private\n     * @param {String} data\n     * @returns {DocumentFragment}\n     */\n\n  }, {\n    key: \"_toDom\",\n    value: function _toDom(data) {\n      // Wrap data with a <body> tag so leading non-layout nodes (like <script>, <style>, HTML comment)\n      // will be preserved in the body collection.\n      // Do it only for data that is not a full HTML document.\n      if (!data.match(/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i)) {\n        data = \"<body>\".concat(data, \"</body>\");\n      }\n\n      var document = this.domParser.parseFromString(data, 'text/html');\n      var fragment = document.createDocumentFragment();\n      var bodyChildNodes = document.body.childNodes;\n\n      while (bodyChildNodes.length > 0) {\n        fragment.appendChild(bodyChildNodes[0]);\n      }\n\n      return fragment;\n    }\n  }]);\n\n  return HtmlDataProcessor;\n}();\n\nexport { HtmlDataProcessor as default };","map":null,"metadata":{},"sourceType":"module"}