{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetoolbar\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { WidgetToolbarRepository } from 'ckeditor5/src/widget';\nimport ImageUtils from './imageutils';\nimport { isObject } from 'lodash-es';\n/**\n * The image toolbar plugin. It creates and manages the image toolbar (the toolbar displayed when an image is selected).\n *\n * For an overview, check the {@glink features/images/images-overview#image-contextual-toolbar image contextual toolbar} documentation.\n *\n * Instances of toolbar components (e.g. buttons) are created using the editor's\n * {@link module:ui/componentfactory~ComponentFactory component factory}\n * based on the {@link module:image/image~ImageConfig#toolbar `image.toolbar` configuration option}.\n *\n * The toolbar uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar ImageToolbar = /*#__PURE__*/function (_Plugin) {\n  _inherits(ImageToolbar, _Plugin);\n\n  function ImageToolbar() {\n    _classCallCheck(this, ImageToolbar);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageToolbar).apply(this, arguments));\n  }\n\n  _createClass(ImageToolbar, [{\n    key: \"afterInit\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function afterInit() {\n      var editor = this.editor;\n      var t = editor.t;\n      var widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n      var imageUtils = editor.plugins.get('ImageUtils');\n      widgetToolbarRepository.register('image', {\n        ariaLabel: t('Image toolbar'),\n        items: normalizeDeclarativeConfig(editor.config.get('image.toolbar') || []),\n        getRelatedElement: function getRelatedElement(selection) {\n          return imageUtils.getClosestSelectedImageWidget(selection);\n        }\n      });\n    }\n  }], [{\n    key: \"requires\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return [WidgetToolbarRepository, ImageUtils];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"pluginName\",\n    get: function get() {\n      return 'ImageToolbar';\n    }\n  }]);\n\n  return ImageToolbar;\n}(Plugin);\n/**\n * Items to be placed in the image toolbar.\n * This option is used by the {@link module:image/imagetoolbar~ImageToolbar} feature.\n *\n * Assuming that you use the following features:\n *\n * * {@link module:image/imagestyle~ImageStyle} (with a default configuration),\n * * {@link module:image/imagetextalternative~ImageTextAlternative},\n * * {@link module:image/imagecaption~ImageCaption},\n *\n * the following toolbar items will be available in {@link module:ui/componentfactory~ComponentFactory}:\n * * `'imageTextAlternative'`,\n * * `'toggleImageCaption'`,\n * * {@link module:image/image~ImageConfig#styles buttons provided by the `ImageStyle` plugin},\n * * {@link module:image/imagestyle/utils~DEFAULT_DROPDOWN_DEFINITIONS drop-downs provided by the `ImageStyle` plugin},\n *\n * so you can configure the toolbar like this:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [\n *\t \t\t\t'imageStyle:inline', 'imageStyle:wrapText', 'imageStyle:breakText', '|',\n *\t\t\t\t'toggleImageCaption', 'imageTextAlternative'\n *\t\t\t]\n *\t\t};\n *\n * Besides that, the `ImageStyle` plugin allows to define a\n * {@link module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition custom drop-down} while configuring the toolbar.\n *\n * The same items can also be used in the {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:image/image~ImageConfig#toolbar\n */\n// Convert the dropdown definitions to their keys registered in the ComponentFactory.\n// The registration precess should be handled by the plugin which handles the UI of a particular feature.\n//\n// @param {Array.<String|module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>} config\n//\n// @returns {Array.<String>}\n\n\nexport { ImageToolbar as default };\n\nfunction normalizeDeclarativeConfig(config) {\n  return config.map(function (item) {\n    return isObject(item) ? item.name : item;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}