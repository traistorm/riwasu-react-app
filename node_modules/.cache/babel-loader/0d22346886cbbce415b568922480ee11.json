{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'horizontalRule',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    core.context.horizontalRule = {\n      currentHR: null\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    /** add event listeners */\n\n    listDiv.querySelector('ul').addEventListener('click', this.horizontalRulePick.bind(core));\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** empty memory */\n\n    listDiv = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var lang = core.lang;\n    var listDiv = core.util.createElement('DIV');\n    var items = core.options.hrItems || [{\n      name: lang.toolbar.hr_solid,\n      class: '__se__solid'\n    }, {\n      name: lang.toolbar.hr_dashed,\n      class: '__se__dashed'\n    }, {\n      name: lang.toolbar.hr_dotted,\n      class: '__se__dotted'\n    }];\n    var list = '';\n\n    for (var i = 0, len = items.length; i < len; i++) {\n      list += '<li>' + '<button type=\"button\" class=\"se-btn-list btn_line\" data-command=\"horizontalRule\" data-value=\"' + items[i].class + '\" title=\"' + items[i].name + '\" aria-label=\"' + items[i].name + '\">' + '<hr' + (items[i].class ? ' class=\"' + items[i].class + '\"' : '') + (items[i].style ? ' style=\"' + items[i].style + '\"' : '') + '/>' + '</button>' + '</li>';\n    }\n\n    listDiv.className = 'se-submenu se-list-layer se-list-line';\n    listDiv.innerHTML = '' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + list + '</ul>' + '</div>';\n    return listDiv;\n  },\n  active: function active(element) {\n    if (!element) {\n      if (this.util.hasClass(this.context.horizontalRule.currentHR, 'on')) {\n        this.controllersOff();\n      }\n    } else if (/HR/i.test(element.nodeName)) {\n      this.context.horizontalRule.currentHR = element;\n\n      if (!this.util.hasClass(element, 'on')) {\n        this.util.addClass(element, 'on');\n        this.controllersOn('hr', this.util.removeClass.bind(this.util, element, 'on'));\n      }\n\n      return true;\n    }\n\n    return false;\n  },\n  appendHr: function appendHr(hrTemp) {\n    this.focus();\n    return this.insertComponent(hrTemp.cloneNode(false), false, true, false);\n  },\n  horizontalRulePick: function horizontalRulePick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    var target = e.target;\n    var command = target.getAttribute('data-command');\n\n    while (!command && !/UL/i.test(target.tagName)) {\n      target = target.parentNode;\n      command = target.getAttribute('data-command');\n    }\n\n    if (!command) return;\n    var oNode = this.plugins.horizontalRule.appendHr.call(this, target.firstElementChild);\n\n    if (oNode) {\n      this.setRange(oNode, 0, oNode, 0);\n      this.submenuOff();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}