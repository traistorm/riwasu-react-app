{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useMemo, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { useClassNames, useCustom, useControlled, useEventCallback } from '../utils';\nimport { sliderPropTypes } from '../Slider/Slider';\nimport ProgressBar from '../Slider/ProgressBar';\nimport Handle from '../Slider/Handle';\nimport Graduated from '../Slider/Graduated';\nimport { precisionMath, checkValue } from '../Slider/utils';\nimport { tupleType } from '../utils/propTypeChecker';\nvar defaultDefaultValue = [0, 0];\nvar RangeSlider = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var ariaLabel = props['aria-label'],\n      ariaLabelledby = props['aria-labelledby'],\n      ariaValuetext = props['aria-valuetext'],\n      _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      barClassName = props.barClassName,\n      className = props.className,\n      constraint = props.constraint,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? defaultDefaultValue : _props$defaultValue,\n      graduated = props.graduated,\n      _props$progress = props.progress,\n      progress = _props$progress === void 0 ? true : _props$progress,\n      vertical = props.vertical,\n      disabled = props.disabled,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'slider' : _props$classPrefix,\n      _props$min = props.min,\n      min = _props$min === void 0 ? 0 : _props$min,\n      _props$max = props.max,\n      maxProp = _props$max === void 0 ? 100 : _props$max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      valueProp = props.value,\n      handleClassName = props.handleClassName,\n      handleStyle = props.handleStyle,\n      handleTitle = props.handleTitle,\n      _props$tooltip = props.tooltip,\n      tooltip = _props$tooltip === void 0 ? true : _props$tooltip,\n      getAriaValueText = props.getAriaValueText,\n      renderTooltip = props.renderTooltip,\n      renderMark = props.renderMark,\n      onChange = props.onChange,\n      onChangeCommitted = props.onChangeCommitted,\n      rest = _objectWithoutPropertiesLoose(props, [\"aria-label\", \"aria-labelledby\", \"aria-valuetext\", \"as\", \"barClassName\", \"className\", \"constraint\", \"defaultValue\", \"graduated\", \"progress\", \"vertical\", \"disabled\", \"classPrefix\", \"min\", \"max\", \"step\", \"value\", \"handleClassName\", \"handleStyle\", \"handleTitle\", \"tooltip\", \"getAriaValueText\", \"renderTooltip\", \"renderMark\", \"onChange\", \"onChangeCommitted\"]);\n\n  var barRef = useRef(null); // Define the parameter position of the handle\n\n  var handleIndexs = useRef([0, 1]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      withClassPrefix = _useClassNames.withClassPrefix,\n      prefix = _useClassNames.prefix;\n\n  var _useCustom = useCustom('RangeSlider'),\n      rtl = _useCustom.rtl;\n\n  var classes = merge(className, withClassPrefix({\n    vertical: vertical,\n    disabled: disabled,\n    graduated: graduated,\n    'with-mark': renderMark\n  }));\n  var max = useMemo(function () {\n    return precisionMath(Math.floor((maxProp - min) / step) * step + min);\n  }, [maxProp, min, step]);\n  /**\n   * Returns a valid value that does not exceed the specified range of values.\n   */\n\n  var getValidValue = useCallback(function (value) {\n    if (typeof value === 'undefined') {\n      return;\n    }\n\n    return [checkValue(value[0], min, max), checkValue(value[1], min, max)];\n  }, [max, min]);\n\n  var _useControlled = useControlled(getValidValue(valueProp), getValidValue(defaultValue)),\n      value = _useControlled[0],\n      setValue = _useControlled[1]; // The count of values ​​that can be entered.\n\n\n  var count = useMemo(function () {\n    return precisionMath((max - min) / step);\n  }, [max, min, step]); // Get the height of the progress bar\n\n  var getBarHeight = useCallback(function () {\n    return barRef.current ? getHeight(barRef.current) : 0;\n  }, []); // Get the width of the progress bar\n\n  var getBarWidth = useCallback(function () {\n    return barRef.current ? getWidth(barRef.current) : 0;\n  }, []);\n  var getValueByOffset = useCallback(function (offset) {\n    var val = 0;\n\n    if (isNaN(offset)) {\n      return val;\n    }\n\n    if (vertical) {\n      var barHeight = getBarHeight();\n      val = Math.round(offset / (barHeight / count)) * step;\n    } else {\n      var barWidth = getBarWidth();\n      val = Math.round(offset / (barWidth / count)) * step;\n    }\n\n    return precisionMath(val);\n  }, [count, getBarHeight, getBarWidth, step, vertical]);\n  var getValueByPosition = useCallback(function (event) {\n    var barOffset = getOffset(barRef.current);\n    var offset = vertical ? barOffset.top + barOffset.height - event.pageY : event.pageX - barOffset.left;\n    var val = rtl && !vertical ? barOffset.width - offset : offset;\n    return getValueByOffset(val) + min;\n  }, [getValueByOffset, min, rtl, vertical]);\n  var getRangeValue = useCallback(function (value, key, event) {\n    // Get the corresponding value according to the cursor position\n    var v = getValueByPosition(event); // Judge the handle key and put the corresponding value at the start or end.\n\n    if (key === 'start') {\n      return [v, value[1]];\n    } else if (key === 'end') {\n      return [value[0], v];\n    }\n\n    return value;\n  }, [getValueByPosition]);\n  var getNextValue = useCallback(function (event, dataset) {\n    var eventKey = dataset.key,\n        range = dataset.range;\n    var value = range.split(',').map(function (i) {\n      return +i;\n    });\n    var nextValue = getValidValue(getRangeValue(value, eventKey, event));\n\n    if (nextValue[0] >= nextValue[1]) {\n      /**\n       * When the value of `start` is greater than the value of` end`,\n       * the position of the handle is reversed.\n       */\n      handleIndexs.current.reverse();\n\n      if (eventKey === 'start') {\n        nextValue[0] = value[1];\n      } else {\n        nextValue[1] = value[0];\n      }\n    }\n\n    return nextValue;\n  }, [getRangeValue, getValidValue]);\n  /**\n   * Whether a range is valid against given constraint (if any)\n   * Should check before every `setValue` calls\n   */\n\n  var isRangeMatchingConstraint = useCallback(function (range) {\n    // If no constraint is defined, any range is valid\n    if (!constraint) return true;\n    return constraint(range);\n  }, [constraint]);\n  /**\n   * Callback function that is fired when the mousemove is triggered\n   */\n\n  var handleDragMove = useEventCallback(function (event, dataset) {\n    var nextValue = getNextValue(event, dataset);\n\n    if (isRangeMatchingConstraint(nextValue)) {\n      setValue(nextValue);\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    }\n  });\n  /**\n   * Callback function that is fired when the mouseup is triggered\n   */\n\n  var handleChangeCommitted = useCallback(function (event, dataset) {\n    var nextValue = getNextValue(event, dataset);\n\n    if (isRangeMatchingConstraint(nextValue)) {\n      setValue(nextValue);\n      onChangeCommitted === null || onChangeCommitted === void 0 ? void 0 : onChangeCommitted(nextValue, event);\n    }\n  }, [getNextValue, onChangeCommitted, isRangeMatchingConstraint, setValue]);\n  var handleKeyDown = useCallback(function (event) {\n    var _event$target;\n\n    var _event$target$dataset = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target['dataset'],\n        key = _event$target$dataset.key;\n\n    var nextValue = [].concat(value);\n    var increaseKey = rtl ? 'ArrowLeft' : 'ArrowRight';\n    var decreaseKey = rtl ? 'ArrowRight' : 'ArrowLeft';\n    var valueIndex = key === 'start' ? 0 : 1;\n\n    switch (event.key) {\n      case 'Home':\n        nextValue[valueIndex] = min;\n        break;\n\n      case 'End':\n        nextValue[valueIndex] = max;\n        break;\n\n      case increaseKey:\n      case 'ArrowUp':\n        nextValue[valueIndex] = Math.min(max, value[valueIndex] + step);\n        break;\n\n      case decreaseKey:\n      case 'ArrowDown':\n        nextValue[valueIndex] = Math.max(min, value[valueIndex] - step);\n        break;\n\n      default:\n        return;\n    } // When the start value is greater than the end value, let the handle and value switch positions.\n\n\n    if (nextValue[0] >= nextValue[1]) {\n      nextValue.reverse();\n      handleIndexs.current.reverse();\n    } // Prevent scroll of the page\n\n\n    event.preventDefault();\n\n    if (isRangeMatchingConstraint(nextValue)) {\n      setValue(nextValue);\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    }\n  }, [max, min, onChange, rtl, isRangeMatchingConstraint, setValue, step, value]);\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n\n    var start = value[0],\n        end = value[1];\n    var v = getValueByPosition(event); //  Judging that the current click value is closer to the values ​​of `start` and` end`.\n\n    if (Math.abs(start - v) < Math.abs(end - v)) {\n      start = v;\n    } else {\n      end = v;\n    }\n\n    var nextValue = getValidValue([start, end].sort(function (a, b) {\n      return a - b;\n    }));\n\n    if (isRangeMatchingConstraint(nextValue)) {\n      setValue(nextValue);\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    }\n  }, [disabled, getValidValue, getValueByPosition, isRangeMatchingConstraint, onChange, setValue, value]);\n  var handleProps = useMemo(function () {\n    return [{\n      value: value[0],\n      'data-key': 'start',\n      'aria-valuenow': value[0],\n      'aria-valuetext': getAriaValueText ? getAriaValueText(value[0], 'start') : ariaValuetext,\n      position: (value[0] - min) / (max - min) * 100\n    }, {\n      value: value[1],\n      'data-key': 'end',\n      'aria-valuenow': value[1],\n      'aria-valuetext': getAriaValueText ? getAriaValueText(value[1], 'end') : ariaValuetext,\n      position: (value[1] - min) / (max - min) * 100\n    }];\n  }, [ariaValuetext, getAriaValueText, max, min, value]);\n  var handleCommonProps = {\n    rtl: rtl,\n    disabled: disabled,\n    vertical: vertical,\n    tooltip: tooltip,\n    className: handleClassName,\n    style: handleStyle,\n    renderTooltip: renderTooltip,\n    onDragMove: handleDragMove,\n    onDragEnd: handleChangeCommitted,\n    onKeyDown: handleKeyDown,\n    tabIndex: disabled ? undefined : 0,\n    'aria-orientation': vertical ? 'vertical' : 'horizontal',\n    'aria-disabled': disabled,\n    'aria-valuemax': max,\n    'aria-valuemin': min,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  };\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: merge(barClassName, prefix('bar')),\n    ref: barRef,\n    onClick: handleClick\n  }, progress && /*#__PURE__*/React.createElement(ProgressBar, {\n    rtl: rtl,\n    vertical: vertical,\n    start: (value[0] - min) / (max - min) * 100,\n    end: (value[1] - min) / (max - min) * 100\n  }), graduated && /*#__PURE__*/React.createElement(Graduated, {\n    step: step,\n    min: min,\n    max: max,\n    count: count,\n    value: value,\n    renderMark: renderMark\n  })), /*#__PURE__*/React.createElement(Handle, _extends({\n    \"data-range\": value\n  }, handleCommonProps, handleProps[handleIndexs.current[0]]), handleTitle), /*#__PURE__*/React.createElement(Handle, _extends({\n    \"data-range\": value\n  }, handleCommonProps, handleProps[handleIndexs.current[1]]), handleTitle));\n});\nRangeSlider.displayName = 'RangeSlider';\nRangeSlider.propTypes = _extends({}, sliderPropTypes, {\n  value: tupleType(PropTypes.number.isRequired, PropTypes.number.isRequired),\n  defaultValue: tupleType(PropTypes.number.isRequired, PropTypes.number.isRequired)\n});\nexport default RangeSlider;","map":null,"metadata":{},"sourceType":"module"}