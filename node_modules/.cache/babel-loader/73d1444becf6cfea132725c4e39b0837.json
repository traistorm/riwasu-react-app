{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'textStyle',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    var context = core.context;\n    context.textStyle = {\n      _styleList: null\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    var listUl = listDiv.querySelector('ul');\n    /** add event listeners */\n\n    listUl.addEventListener('click', this.pickup.bind(core));\n    context.textStyle._styleList = listDiv.querySelectorAll('li button');\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** empty memory */\n\n    listDiv = null, listUl = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var option = core.options;\n    var listDiv = core.util.createElement('DIV');\n    listDiv.className = 'se-submenu se-list-layer se-list-format';\n    var defaultList = {\n      code: {\n        name: core.lang.menu.code,\n        class: '__se__t-code',\n        tag: 'code'\n      },\n      translucent: {\n        name: core.lang.menu.translucent,\n        style: 'opacity: 0.5;',\n        tag: 'span'\n      },\n      shadow: {\n        name: core.lang.menu.shadow,\n        class: '__se__t-shadow',\n        tag: 'span'\n      }\n    };\n    var styleList = !option.textStyles ? core._w.Object.keys(defaultList) : option.textStyles;\n    var list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n\n    for (var i = 0, len = styleList.length, t, tag, name, attrs, command, value, _class; i < len; i++) {\n      t = styleList[i];\n      attrs = '', value = '', command = [];\n\n      if (typeof t === 'string') {\n        var defaultStyle = defaultList[t.toLowerCase()];\n        if (!defaultStyle) continue;\n        t = defaultStyle;\n      }\n\n      name = t.name;\n      tag = t.tag || 'span';\n      _class = t._class;\n\n      if (t.style) {\n        attrs += ' style=\"' + t.style + '\"';\n        value += t.style.replace(/:[^;]+(;|$)\\s*/g, ',');\n        command.push('style');\n      }\n\n      if (t.class) {\n        attrs += ' class=\"' + t.class + '\"';\n        value += '.' + t.class.trim().replace(/\\s+/g, ',.');\n        command.push('class');\n      }\n\n      value = value.replace(/,$/, '');\n      list += '<li>' + '<button type=\"button\" class=\"se-btn-list' + (_class ? ' ' + _class : '') + '\" data-command=\"' + tag + '\" data-value=\"' + value + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + '<' + tag + attrs + '>' + name + '</' + tag + '>' + '</button></li>';\n    }\n\n    list += '</ul></div>';\n    listDiv.innerHTML = list;\n    return listDiv;\n  },\n\n  /**\n  * @Override submenu\n  */\n  on: function on() {\n    var util = this.util;\n    var textStyleContext = this.context.textStyle;\n    var styleButtonList = textStyleContext._styleList;\n    var selectionNode = this.getSelectionNode();\n\n    for (var i = 0, len = styleButtonList.length, btn, data, active; i < len; i++) {\n      btn = styleButtonList[i];\n      data = btn.getAttribute('data-value').split(',');\n\n      for (var v = 0, node, value; v < data.length; v++) {\n        node = selectionNode;\n        active = false;\n\n        while (node && !util.isFormatElement(node) && !util.isComponent(node)) {\n          if (node.nodeName.toLowerCase() === btn.getAttribute('data-command').toLowerCase()) {\n            value = data[v];\n\n            if (/^\\./.test(value) ? util.hasClass(node, value.replace(/^\\./, '')) : !!node.style[value]) {\n              active = true;\n              break;\n            }\n          }\n\n          node = node.parentNode;\n        }\n\n        if (!active) break;\n      }\n\n      active ? util.addClass(btn, 'active') : util.removeClass(btn, 'active');\n    }\n  },\n  pickup: function pickup(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    var target = e.target;\n    var command = null,\n        tag = null;\n\n    while (!command && !/UL/i.test(target.tagName)) {\n      command = target.getAttribute('data-command');\n\n      if (command) {\n        tag = target.firstChild;\n        break;\n      }\n\n      target = target.parentNode;\n    }\n\n    if (!command) return;\n    var checkStyles = tag.style.cssText.replace(/:.+(;|$)/g, ',').split(',');\n    checkStyles.pop();\n    var classes = tag.classList;\n\n    for (var i = 0, len = classes.length; i < len; i++) {\n      checkStyles.push('.' + classes[i]);\n    }\n\n    var newNode = this.util.hasClass(target, 'active') ? null : tag.cloneNode(false);\n    var removeNodes = newNode ? null : [tag.nodeName];\n    this.nodeChange(newNode, checkStyles, removeNodes, true);\n    this.submenuOff();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}