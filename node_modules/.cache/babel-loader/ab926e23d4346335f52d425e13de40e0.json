{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/utils\n */\nimport { first } from 'ckeditor5/src/utils';\n/**\n * Creates a view element representing the inline image.\n *\n *\t\t<span class=\"image-inline\"><img></img></span>\n *\n * Note that `alt` and `src` attributes are converted separately, so they are not included.\n *\n * @protected\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\n\nexport function createInlineImageViewElement(writer) {\n  return writer.createContainerElement('span', {\n    class: 'image-inline'\n  }, writer.createEmptyElement('img'));\n}\n/**\n * Creates a view element representing the block image.\n *\n *\t\t<figure class=\"image\"><img></img></figure>\n *\n * Note that `alt` and `src` attributes are converted separately, so they are not included.\n *\n * @protected\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\n\nexport function createBlockImageViewElement(writer) {\n  return writer.createContainerElement('figure', {\n    class: 'image'\n  }, [writer.createEmptyElement('img'), writer.createSlot()]);\n}\n/**\n * A function returning a `MatcherPattern` for a particular type of View images.\n *\n * @protected\n * @param {module:core/editor/editor~Editor} editor\n * @param {'imageBlock'|'imageInline'} matchImageType The type of created image.\n * @returns {module:engine/view/matcher~MatcherPattern}\n */\n\nexport function getImgViewElementMatcher(editor, matchImageType) {\n  var imageUtils = editor.plugins.get('ImageUtils');\n  var areBothImagePluginsLoaded = editor.plugins.has('ImageInlineEditing') && editor.plugins.has('ImageBlockEditing');\n  return function (element) {\n    // Check if the matched view element is an <img>.\n    if (!imageUtils.isInlineImageView(element)) {\n      return null;\n    } // If just one of the plugins is loaded (block or inline), it will match all kinds of images.\n\n\n    if (!areBothImagePluginsLoaded) {\n      return getPositiveMatchPattern(element);\n    } // The <img> can be standalone, wrapped in <figure>...</figure> (ImageBlock plugin) or\n    // wrapped in <figure><a>...</a></figure> (LinkImage plugin).\n\n\n    var imageType = element.findAncestor(imageUtils.isBlockImageView) ? 'imageBlock' : 'imageInline';\n\n    if (imageType !== matchImageType) {\n      return null;\n    }\n\n    return getPositiveMatchPattern(element);\n  };\n\n  function getPositiveMatchPattern(element) {\n    var pattern = {\n      name: true\n    }; // This will trigger src consumption (See https://github.com/ckeditor/ckeditor5/issues/11530).\n\n    if (element.hasAttribute('src')) {\n      pattern.attributes = ['src'];\n    }\n\n    return pattern;\n  }\n}\n/**\n * Considering the current model selection, it returns the name of the model image element\n * (`'imageBlock'` or `'imageInline'`) that will make most sense from the UX perspective if a new\n * image was inserted (also: uploaded, dropped, pasted) at that selection.\n *\n * The assumption is that inserting images into empty blocks or on other block widgets should\n * produce block images. Inline images should be inserted in other cases, e.g. in paragraphs\n * that already contain some text.\n *\n * @protected\n * @param {module:engine/model/schema~Schema} schema\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * @returns {'imageBlock'|'imageInline'}\n */\n\nexport function determineImageTypeForInsertionAtSelection(schema, selection) {\n  var firstBlock = first(selection.getSelectedBlocks()); // Insert a block image if the selection is not in/on block elements or it's on a block widget.\n\n  if (!firstBlock || schema.isObject(firstBlock)) {\n    return 'imageBlock';\n  } // A block image should also be inserted into an empty block element\n  // (that is not an empty list item so the list won't get split).\n\n\n  if (firstBlock.isEmpty && firstBlock.name != 'listItem') {\n    return 'imageBlock';\n  } // Otherwise insert an inline image.\n\n\n  return 'imageInline';\n}","map":null,"metadata":{},"sourceType":"module"}