{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/input/inputview\n */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport '../../theme/components/input/input.css';\n/**\n * The base input view class.\n *\n * @extends module:ui/view~View\n */\n\nvar InputView = /*#__PURE__*/function (_View) {\n  _inherits(InputView, _View);\n\n  /**\n   * @inheritDoc\n   */\n  function InputView(locale) {\n    var _this;\n\n    _classCallCheck(this, InputView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputView).call(this, locale));\n    /**\n     * The value of the input.\n     *\n     * @observable\n     * @member {String} #value\n     */\n\n    _this.set('value');\n    /**\n     * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n     *\n     * @observable\n     * @member {String} #id\n     */\n\n\n    _this.set('id');\n    /**\n     * The `placeholder` attribute of the input.\n     *\n     * @observable\n     * @member {String} #placeholder\n     */\n\n\n    _this.set('placeholder');\n    /**\n     * Controls whether the input view is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     */\n\n\n    _this.set('isReadOnly', false);\n    /**\n     * Set to `true` when the field has some error. Usually controlled via\n     * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n     *\n     * @observable\n     * @member {Boolean} #hasError\n     */\n\n\n    _this.set('hasError', false);\n    /**\n     * The `id` of the element describing this field, e.g. when it has\n     * some error; it helps screen readers read the error text.\n     *\n     * @observable\n     * @member {Boolean} #ariaDescribedById\n     */\n\n\n    _this.set('ariaDescribedById');\n    /**\n     * Stores information about the editor UI focus and propagates it so various plugins and components\n     * are unified as a focus group.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker} #focusTracker\n     */\n\n\n    _this.focusTracker = new FocusTracker();\n    /**\n     * An observable flag set to `true` when the input is currently focused by the user.\n     * Set to `false` otherwise.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isFocused\n     * @default false\n     */\n\n    _this.bind('isFocused').to(_this.focusTracker);\n    /**\n     * An observable flag set to `true` when the input contains no text, i.e.\n     * when {@link #value} is `''`, `null`, or `false`.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isEmpty\n     * @default true\n     */\n\n\n    _this.set('isEmpty', true);\n    /**\n     * Corresponds to the `inputmode` DOM attribute. Can be `text`, `numeric`, `decimal`, etc.\n     *\n     * @observable\n     * @member {Boolean} #inputMode\n     * @default 'text'\n     */\n\n\n    _this.set('inputMode', 'text');\n\n    var bind = _this.bindTemplate;\n\n    _this.setTemplate({\n      tag: 'input',\n      attributes: {\n        class: ['ck', 'ck-input', bind.if('isFocused', 'ck-input_focused'), bind.if('isEmpty', 'ck-input-text_empty'), bind.if('hasError', 'ck-error')],\n        id: bind.to('id'),\n        placeholder: bind.to('placeholder'),\n        readonly: bind.to('isReadOnly'),\n        inputmode: bind.to('inputMode'),\n        'aria-invalid': bind.if('hasError', true),\n        'aria-describedby': bind.to('ariaDescribedById')\n      },\n      on: {\n        input: bind.to(function () {\n          var _this2;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          (_this2 = _this).fire.apply(_this2, ['input'].concat(args));\n\n          _this._updateIsEmpty();\n        }),\n        change: bind.to(_this._updateIsEmpty.bind(_assertThisInitialized(_assertThisInitialized(_this))))\n      }\n    });\n    /**\n     * Fired when the user types in the input. Corresponds to the native\n     * DOM `input` event.\n     *\n     * @event input\n     */\n\n\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(InputView, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(InputView.prototype), \"render\", this).call(this);\n\n      this.focusTracker.add(this.element);\n\n      this._setDomElementValue(this.value);\n\n      this._updateIsEmpty(); // Bind `this.value` to the DOM element's value.\n      // We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\n\n      this.on('change:value', function (evt, name, value) {\n        _this3._setDomElementValue(value);\n\n        _this3._updateIsEmpty();\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(InputView.prototype), \"destroy\", this).call(this);\n\n      this.focusTracker.destroy();\n    }\n    /**\n     * Moves the focus to the input and selects the value.\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      this.element.select();\n    }\n    /**\n     * Focuses the input.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.element.focus();\n    }\n    /**\n     * Updates the {@link #isEmpty} property value on demand.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_updateIsEmpty\",\n    value: function _updateIsEmpty() {\n      this.isEmpty = isInputElementEmpty(this.element);\n    }\n    /**\n     * Sets the `value` property of the {@link #element DOM element} on demand.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_setDomElementValue\",\n    value: function _setDomElementValue(value) {\n      this.element.value = !value && value !== 0 ? '' : value;\n    }\n  }]);\n\n  return InputView;\n}(View);\n\nexport { InputView as default };\n\nfunction isInputElementEmpty(domElement) {\n  return !domElement.value;\n}","map":null,"metadata":{},"sourceType":"module"}