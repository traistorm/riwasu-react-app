{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport { useClassNames, shallowEqual, mergeRefs, appendTooltip } from '../utils';\nimport Ripple from '../Ripple';\nimport SafeAnchor from '../SafeAnchor';\nimport NavContext from '../Nav/NavContext';\nimport MenuItem from '../Menu/MenuItem';\nimport omit from 'lodash/omit';\nimport { SidenavContext } from './Sidenav';\nvar SidenavItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? SafeAnchor : _props$as,\n      activeProp = props.active,\n      _children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'sidenav-item' : _props$classPrefix,\n      icon = props.icon,\n      eventKey = props.eventKey,\n      style = props.style,\n      onClick = props.onClick,\n      onSelect = props.onSelect,\n      divider = props.divider,\n      panel = props.panel,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"active\", \"children\", \"className\", \"disabled\", \"classPrefix\", \"icon\", \"eventKey\", \"style\", \"onClick\", \"onSelect\", \"divider\", \"panel\"]);\n\n  var sidenav = useContext(SidenavContext);\n\n  if (!sidenav) {\n    throw new Error('<SidenavItem> component is not supposed to be used standalone. Use <Nav.Item> inside <Sidenav> instead.');\n  }\n\n  var _useContext = useContext(NavContext),\n      activeKey = _useContext.activeKey,\n      onSelectFromNav = _useContext.onSelect;\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      withClassPrefix = _useClassNames.withClassPrefix,\n      prefix = _useClassNames.prefix;\n\n  var selected = activeProp !== null && activeProp !== void 0 ? activeProp : !isNil(eventKey) && shallowEqual(activeKey, eventKey);\n  var handleClick = useCallback(function (event) {\n    if (disabled) return;\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n    onSelectFromNav === null || onSelectFromNav === void 0 ? void 0 : onSelectFromNav(eventKey, event);\n    onClick === null || onClick === void 0 ? void 0 : onClick(event);\n  }, [disabled, onSelect, onSelectFromNav, eventKey, onClick]);\n\n  if (!sidenav.expanded) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      selected: selected,\n      disabled: disabled,\n      onActivate: handleClick\n    }, function (_ref, menuitemRef) {\n      var selected = _ref.selected,\n          active = _ref.active,\n          menuitem = _objectWithoutPropertiesLoose(_ref, [\"selected\", \"active\"]);\n\n      var classes = merge(className, withClassPrefix({\n        focus: active,\n        active: selected,\n        disabled: disabled\n      })); // Show tooltip when inside a collapse <Sidenav>\n\n      return appendTooltip({\n        children: function children(triggerProps, triggerRef) {\n          return /*#__PURE__*/React.createElement(Component, _extends({\n            ref: mergeRefs(mergeRefs(ref, menuitemRef), triggerRef),\n            disabled: Component === SafeAnchor ? disabled : undefined,\n            className: classes,\n            \"data-event-key\": eventKey\n          }, omit(rest, ['divider', 'panel']), triggerProps, menuitem), icon, _children, /*#__PURE__*/React.createElement(Ripple, null));\n        },\n        message: _children,\n        placement: 'right'\n      });\n    });\n  }\n\n  if (divider) {\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      ref: ref,\n      role: \"separator\",\n      style: style,\n      className: merge(className, prefix('divider'))\n    }, rest));\n  }\n\n  if (panel) {\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      ref: ref,\n      role: \"none presentation\",\n      style: style,\n      className: merge(className, prefix('panel'))\n    }, rest), _children);\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: merge(className, withClassPrefix({\n      active: selected,\n      disabled: disabled\n    })),\n    onClick: handleClick,\n    style: style,\n    \"aria-selected\": selected || undefined,\n    \"data-event-key\": eventKey\n  }, rest), icon, _children, /*#__PURE__*/React.createElement(Ripple, null));\n});\nSidenavItem.displayName = 'Sidenav.Item';\nSidenavItem.propTypes = {\n  classPrefix: PropTypes.string,\n  disabled: PropTypes.bool,\n  icon: PropTypes.node,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  eventKey: PropTypes.any,\n  as: PropTypes.elementType,\n  style: PropTypes.object,\n  onSelect: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onClick: PropTypes.func\n};\nexport default SidenavItem;","map":null,"metadata":{},"sourceType":"module"}