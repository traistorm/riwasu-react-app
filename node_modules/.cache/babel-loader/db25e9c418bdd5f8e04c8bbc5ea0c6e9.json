{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\n\nexport function containerChildrenMutated(mutations) {\n  if (mutations.length == 0) {\n    return false;\n  } // Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\n\n  var _iterator = _createForOfIteratorHelper(mutations),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var mutation = _step.value;\n\n      if (mutation.type === 'children' && !getSingleTextNodeChange(mutation)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n}\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\n\nexport function getSingleTextNodeChange(mutation) {\n  // One new node.\n  if (mutation.newChildren.length - mutation.oldChildren.length != 1) {\n    return;\n  } // Which is text.\n\n\n  var diffResult = diff(mutation.oldChildren, mutation.newChildren, compareChildNodes);\n  var changes = diffToChanges(diffResult, mutation.newChildren); // In case of [ delete, insert, insert ] the previous check will not exit.\n\n  if (changes.length > 1) {\n    return;\n  }\n\n  var change = changes[0]; // Which is text.\n\n  if (!(!!change.values[0] && change.values[0].is('$text'))) {\n    return;\n  }\n\n  return change;\n}\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\n\nexport function compareChildNodes(oldChild, newChild) {\n  if (!!oldChild && oldChild.is('$text') && !!newChild && newChild.is('$text')) {\n    return oldChild.data === newChild.data;\n  } else {\n    return oldChild === newChild;\n  }\n}\n/**\n * Checks if <kbd>Shift</kbd> + <kbd>Delete</kbd> keystroke was pressed on a non-collapsed selection.\n *\n * This key combination has a special meaning on Windows machines and it should work in the same way as the `cut` event on a non-collapsed\n * selection.\n *\n * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData Event data.\n * @param {module:engine/view/document~Document} document The document instance on which the event has been fired.\n * @returns {Boolean}\n */\n\nexport function isShiftDeleteOnNonCollapsedSelection(domEventData, document) {\n  var selection = document.selection;\n  var isShiftDelete = domEventData.shiftKey && domEventData.keyCode === keyCodes.delete;\n  var isNonCollapsedSelection = !selection.isCollapsed;\n  return isShiftDelete && isNonCollapsedSelection;\n}","map":null,"metadata":{},"sourceType":"module"}