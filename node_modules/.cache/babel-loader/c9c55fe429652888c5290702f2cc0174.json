{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'align',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    var icons = core.icons;\n    var context = core.context;\n    context.align = {\n      targetButton: targetElement,\n      _itemMenu: null,\n      _alignList: null,\n      currentAlign: '',\n      defaultDir: core.options.rtl ? 'right' : 'left',\n      icons: {\n        justify: icons.align_justify,\n        left: icons.align_left,\n        right: icons.align_right,\n        center: icons.align_center\n      }\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    var listUl = context.align._itemMenu = listDiv.querySelector('ul');\n    /** add event listeners */\n\n    listUl.addEventListener('click', this.pickup.bind(core));\n    context.align._alignList = listUl.querySelectorAll('li button');\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** empty memory */\n\n    listDiv = null, listUl = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var lang = core.lang;\n    var icons = core.icons;\n    var listDiv = core.util.createElement('DIV');\n    var alignItems = core.options.alignItems;\n    var html = '';\n\n    for (var i = 0, item, text; i < alignItems.length; i++) {\n      item = alignItems[i];\n      text = lang.toolbar['align' + item.charAt(0).toUpperCase() + item.slice(1)];\n      html += '<li>' + '<button type=\"button\" class=\"se-btn-list se-btn-align\" data-value=\"' + item + '\" title=\"' + text + '\" aria-label=\"' + text + '\">' + '<span class=\"se-list-icon\">' + icons['align_' + item] + '</span>' + text + '</button>' + '</li>';\n    }\n\n    listDiv.className = 'se-submenu se-list-layer se-list-align';\n    listDiv.innerHTML = '' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + html + '</ul>' + '</div>';\n    return listDiv;\n  },\n\n  /**\n   * @Override core\n   */\n  active: function active(element) {\n    var alignContext = this.context.align;\n    var targetButton = alignContext.targetButton;\n    var target = targetButton.firstElementChild;\n\n    if (!element) {\n      this.util.changeElement(target, alignContext.icons[alignContext.defaultDir]);\n      targetButton.removeAttribute('data-focus');\n    } else if (this.util.isFormatElement(element)) {\n      var textAlign = element.style.textAlign;\n\n      if (textAlign) {\n        this.util.changeElement(target, alignContext.icons[textAlign] || alignContext.icons[alignContext.defaultDir]);\n        targetButton.setAttribute('data-focus', textAlign);\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * @Override submenu\n   */\n  on: function on() {\n    var alignContext = this.context.align;\n    var alignList = alignContext._alignList;\n    var currentAlign = alignContext.targetButton.getAttribute('data-focus') || alignContext.defaultDir;\n\n    if (currentAlign !== alignContext.currentAlign) {\n      for (var i = 0, len = alignList.length; i < len; i++) {\n        if (currentAlign === alignList[i].getAttribute('data-value')) {\n          this.util.addClass(alignList[i], 'active');\n        } else {\n          this.util.removeClass(alignList[i], 'active');\n        }\n      }\n\n      alignContext.currentAlign = currentAlign;\n    }\n  },\n  exchangeDir: function exchangeDir() {\n    var dir = this.options.rtl ? 'right' : 'left';\n    if (!this.context.align || this.context.align.defaultDir === dir) return;\n    this.context.align.defaultDir = dir;\n    var menu = this.context.align._itemMenu;\n    var leftBtn = menu.querySelector('[data-value=\"left\"]');\n    var rightBtn = menu.querySelector('[data-value=\"right\"]');\n\n    if (leftBtn && rightBtn) {\n      var lp = leftBtn.parentElement;\n      var rp = rightBtn.parentElement;\n      lp.appendChild(rightBtn);\n      rp.appendChild(leftBtn);\n    }\n  },\n  pickup: function pickup(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    var target = e.target;\n    var value = null;\n\n    while (!value && !/UL/i.test(target.tagName)) {\n      value = target.getAttribute('data-value');\n      target = target.parentNode;\n    }\n\n    if (!value) return;\n    var defaultDir = this.context.align.defaultDir;\n    var selectedFormsts = this.getSelectedElements();\n\n    for (var i = 0, len = selectedFormsts.length; i < len; i++) {\n      this.util.setStyle(selectedFormsts[i], 'textAlign', value === defaultDir ? '' : value);\n    }\n\n    this.effectNode = null;\n    this.submenuOff();\n    this.focus(); // history stack\n\n    this.history.push(false);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}