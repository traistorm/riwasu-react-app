{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nimport React, { useState, useRef, useEffect, useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport isUndefined from 'lodash/isUndefined';\nimport isNil from 'lodash/isNil';\nimport isFunction from 'lodash/isFunction';\nimport remove from 'lodash/remove';\nimport clone from 'lodash/clone';\nimport isArray from 'lodash/isArray';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport getWidth from 'dom-lib/getWidth';\nimport shallowEqual from '../utils/shallowEqual';\nimport { filterNodesOfTree } from '../utils/treeUtils';\nimport Plaintext from '../Plaintext';\nimport { createChainedFunction, tplTransform, getDataGroupBy, useClassNames, useCustom, useControlled, mergeRefs, isOneOf, KEY_VALUES } from '../utils';\nimport { DropdownMenu, DropdownMenuItem, DropdownMenuCheckItem, PickerToggle, PickerOverlay, PickerToggleTrigger, useFocusItemValue, usePickerClassName, useSearch, usePublicMethods, useToggleKeyDownEvent, pickTriggerPropKeys, omitTriggerPropKeys, listPickerPropTypes } from '../Picker';\nimport Tag from '../Tag';\nimport InputAutosize from './InputAutosize';\nimport InputSearch from './InputSearch';\nexport var InputPickerContext = /*#__PURE__*/React.createContext({\n  tagProps: {},\n  trigger: 'Enter'\n});\nvar InputPicker = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _merge;\n\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      _props$cleanable = props.cleanable,\n      cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n      _props$cacheData = props.cacheData,\n      cacheData = _props$cacheData === void 0 ? [] : _props$cacheData,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,\n      _props$data = props.data,\n      controlledData = _props$data === void 0 ? [] : _props$data,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      plaintext = props.plaintext,\n      defaultValue = props.defaultValue,\n      _props$defaultOpen = props.defaultOpen,\n      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n      _props$disabledItemVa = props.disabledItemValues,\n      disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,\n      overrideLocale = props.locale,\n      toggleAs = props.toggleAs,\n      style = props.style,\n      _props$searchable = props.searchable,\n      searchable = _props$searchable === void 0 ? true : _props$searchable,\n      controlledOpen = props.open,\n      placeholder = props.placeholder,\n      groupBy = props.groupBy,\n      menuClassName = props.menuClassName,\n      menuStyle = props.menuStyle,\n      _props$menuAutoWidth = props.menuAutoWidth,\n      menuAutoWidth = _props$menuAutoWidth === void 0 ? true : _props$menuAutoWidth,\n      _props$menuMaxHeight = props.menuMaxHeight,\n      menuMaxHeight = _props$menuMaxHeight === void 0 ? 320 : _props$menuMaxHeight,\n      creatable = props.creatable,\n      valueProp = props.value,\n      _props$valueKey = props.valueKey,\n      valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n      virtualized = props.virtualized,\n      _props$labelKey = props.labelKey,\n      labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n      listProps = props.listProps,\n      id = props.id,\n      tabIndex = props.tabIndex,\n      sort = props.sort,\n      renderMenu = props.renderMenu,\n      renderExtraFooter = props.renderExtraFooter,\n      renderValue = props.renderValue,\n      renderMenuItem = props.renderMenuItem,\n      renderMenuGroup = props.renderMenuGroup,\n      onEnter = props.onEnter,\n      onEntered = props.onEntered,\n      onExit = props.onExit,\n      onExited = props.onExited,\n      onChange = props.onChange,\n      onClean = props.onClean,\n      onCreate = props.onCreate,\n      onSearch = props.onSearch,\n      onSelect = props.onSelect,\n      onOpen = props.onOpen,\n      onClose = props.onClose,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      searchBy = props.searchBy,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"appearance\", \"cleanable\", \"cacheData\", \"classPrefix\", \"data\", \"disabled\", \"readOnly\", \"plaintext\", \"defaultValue\", \"defaultOpen\", \"disabledItemValues\", \"locale\", \"toggleAs\", \"style\", \"searchable\", \"open\", \"placeholder\", \"groupBy\", \"menuClassName\", \"menuStyle\", \"menuAutoWidth\", \"menuMaxHeight\", \"creatable\", \"value\", \"valueKey\", \"virtualized\", \"labelKey\", \"listProps\", \"id\", \"tabIndex\", \"sort\", \"renderMenu\", \"renderExtraFooter\", \"renderValue\", \"renderMenuItem\", \"renderMenuGroup\", \"onEnter\", \"onEntered\", \"onExit\", \"onExited\", \"onChange\", \"onClean\", \"onCreate\", \"onSearch\", \"onSelect\", \"onOpen\", \"onClose\", \"onBlur\", \"onFocus\", \"searchBy\", \"placement\"]);\n\n  var _useContext = useContext(InputPickerContext),\n      multi = _useContext.multi,\n      tagProps = _useContext.tagProps,\n      trigger = _useContext.trigger,\n      disabledOptions = _useContext.disabledOptions;\n\n  if (groupBy === valueKey || groupBy === labelKey) {\n    throw Error('`groupBy` can not be equal to `valueKey` and `labelKey`');\n  }\n\n  var overlayRef = useRef(null);\n  var targetRef = useRef(null);\n  var triggerRef = useRef(null);\n  var inputRef = useRef();\n\n  var _useCustom = useCustom(['Picker', 'InputPicker'], overrideLocale),\n      locale = _useCustom.locale;\n\n  var _useClassNames = useClassNames(classPrefix),\n      prefix = _useClassNames.prefix,\n      merge = _useClassNames.merge;\n\n  var _useState = useState(controlledData),\n      uncontrolledData = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(100),\n      maxWidth = _useState2[0],\n      setMaxWidth = _useState2[1];\n\n  var _useState3 = useState([]),\n      newData = _useState3[0],\n      setNewData = _useState3[1];\n\n  var _useState4 = useState(defaultOpen),\n      uncontrolledOpen = _useState4[0],\n      setOpen = _useState4[1];\n\n  var open = isUndefined(controlledOpen) ? uncontrolledOpen : controlledOpen;\n  var getAllData = useCallback(function () {\n    return [].concat(uncontrolledData, newData);\n  }, [uncontrolledData, newData]);\n  var getAllDataAndCache = useCallback(function () {\n    return [].concat(getAllData(), cacheData);\n  }, [getAllData, cacheData]);\n\n  var _useControlled = useControlled(valueProp, multi ? defaultValue || [] : defaultValue),\n      value = _useControlled[0],\n      setValue = _useControlled[1],\n      isControlled = _useControlled[2];\n\n  var cloneValue = useCallback(function () {\n    return multi ? clone(value) || [] : value;\n  }, [multi, value]);\n  var handleClose = useCallback(function () {\n    var _triggerRef$current;\n\n    triggerRef === null || triggerRef === void 0 ? void 0 : (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.close();\n  }, [triggerRef]); // Used to hover the focuse item  when trigger `onKeydown`\n\n  var _useFocusItemValue = useFocusItemValue(multi ? value === null || value === void 0 ? void 0 : value[0] : value, {\n    data: getAllDataAndCache(),\n    valueKey: valueKey,\n    target: function target() {\n      return overlayRef.current;\n    }\n  }),\n      focusItemValue = _useFocusItemValue.focusItemValue,\n      setFocusItemValue = _useFocusItemValue.setFocusItemValue,\n      onKeyDown = _useFocusItemValue.onKeyDown;\n\n  var handleSearchCallback = useCallback(function (searchKeyword, filteredData, event) {\n    var _filteredData$; // The first option after filtering is the focus.\n\n\n    setFocusItemValue(disabledOptions ? searchKeyword : (filteredData === null || filteredData === void 0 ? void 0 : (_filteredData$ = filteredData[0]) === null || _filteredData$ === void 0 ? void 0 : _filteredData$[valueKey]) || searchKeyword);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchKeyword, event);\n  }, [disabledOptions, setFocusItemValue, valueKey, onSearch]); // Use search keywords to filter options.\n\n  var _useSearch = useSearch({\n    labelKey: labelKey,\n    data: getAllData(),\n    searchBy: searchBy,\n    callback: handleSearchCallback\n  }),\n      searchKeyword = _useSearch.searchKeyword,\n      setSearchKeyword = _useSearch.setSearchKeyword,\n      checkShouldDisplay = _useSearch.checkShouldDisplay,\n      handleSearch = _useSearch.handleSearch; // Update the state when the data in props changes\n\n\n  useEffect(function () {\n    if (controlledData && !shallowEqual(controlledData, uncontrolledData)) {\n      var _controlledData$;\n\n      setData(controlledData);\n      setNewData([]);\n      setFocusItemValue(controlledData === null || controlledData === void 0 ? void 0 : (_controlledData$ = controlledData[0]) === null || _controlledData$ === void 0 ? void 0 : _controlledData$[valueKey]);\n    }\n  }, [setFocusItemValue, controlledData, uncontrolledData, valueKey]);\n  useEffect(function () {\n    var _triggerRef$current2; // In multiple selection, you need to set a maximum width for the input.\n\n\n    if ((_triggerRef$current2 = triggerRef.current) !== null && _triggerRef$current2 !== void 0 && _triggerRef$current2.root) {\n      setMaxWidth(getWidth(triggerRef.current.root));\n    }\n  }, []); // Update the position of the menu when the search keyword and value change\n\n  useEffect(function () {\n    var _triggerRef$current3, _triggerRef$current3$;\n\n    (_triggerRef$current3 = triggerRef.current) === null || _triggerRef$current3 === void 0 ? void 0 : (_triggerRef$current3$ = _triggerRef$current3.updatePosition) === null || _triggerRef$current3$ === void 0 ? void 0 : _triggerRef$current3$.call(_triggerRef$current3);\n  }, [searchKeyword, value]);\n\n  var getDateItem = function getDateItem(value) {\n    // Find active `MenuItem` by `value`\n    var allData = getAllDataAndCache();\n    var activeItem = allData.find(function (item) {\n      return shallowEqual(item[valueKey], value);\n    });\n    var itemNode = placeholder;\n\n    if (activeItem !== null && activeItem !== void 0 && activeItem[labelKey]) {\n      itemNode = activeItem === null || activeItem === void 0 ? void 0 : activeItem[labelKey];\n    }\n\n    return {\n      isValid: !!activeItem,\n      activeItem: activeItem,\n      itemNode: itemNode\n    };\n  };\n\n  var getInput = useCallback(function () {\n    var _inputRef$current;\n\n    return multi ? (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.input : inputRef.current;\n  }, [inputRef, multi]);\n  var focusInput = useCallback(function () {\n    var _getInput;\n\n    return (_getInput = getInput()) === null || _getInput === void 0 ? void 0 : _getInput.focus();\n  }, [getInput]);\n  var blurInput = useCallback(function () {\n    var _getInput2;\n\n    return (_getInput2 = getInput()) === null || _getInput2 === void 0 ? void 0 : _getInput2.blur();\n  }, [getInput]);\n  /**\n   * Convert the string of the newly created option into an object.\n   */\n\n  var createOption = useCallback(function (value) {\n    var _ref2;\n\n    if (groupBy) {\n      var _ref;\n\n      return _ref = {\n        create: true\n      }, _ref[groupBy] = locale === null || locale === void 0 ? void 0 : locale.newItem, _ref[valueKey] = value, _ref[labelKey] = value, _ref;\n    }\n\n    return _ref2 = {\n      create: true\n    }, _ref2[valueKey] = value, _ref2[labelKey] = value, _ref2;\n  }, [groupBy, valueKey, labelKey, locale]);\n  var handleChange = useCallback(function (value, event) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n  }, [onChange]);\n  var handleRemoveItemByTag = useCallback(function (tag, event) {\n    event.stopPropagation();\n    var val = cloneValue();\n    remove(val, function (itemVal) {\n      return shallowEqual(itemVal, tag);\n    });\n    setValue(val);\n    handleChange(val, event);\n  }, [setValue, cloneValue, handleChange]);\n  var handleSelect = useCallback(function (value, item, event) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(value, item, event);\n\n    if (creatable && item.create) {\n      delete item.create;\n      onCreate === null || onCreate === void 0 ? void 0 : onCreate(value, item, event);\n      setNewData(newData.concat(item));\n    }\n  }, [creatable, newData, onSelect, onCreate]);\n  /**\n   * Callback triggered by single selection\n   * @param value\n   * @param item\n   * @param event\n   */\n\n  var handleSelectItem = function handleSelectItem(value, item, event) {\n    setValue(value);\n    setFocusItemValue(value);\n    setSearchKeyword('');\n    handleSelect(value, item, event);\n    handleChange(value, event);\n    handleClose();\n  };\n  /**\n   * Callback triggered by multiple selection\n   * @param nextItemValue\n   * @param item\n   * @param event\n   * @param checked\n   */\n\n\n  var handleCheckTag = function handleCheckTag(nextItemValue, item, event, checked) {\n    var val = cloneValue();\n\n    if (checked) {\n      val.push(nextItemValue);\n    } else {\n      remove(val, function (itemVal) {\n        return shallowEqual(itemVal, nextItemValue);\n      });\n    }\n\n    setValue(val);\n    setSearchKeyword('');\n    setFocusItemValue(nextItemValue);\n    handleSelect(val, item, event);\n    handleChange(val, event);\n    focusInput();\n  };\n\n  var handleTagKeyPress = useCallback(function (event) {\n    var val = cloneValue();\n    var data = getAllData();\n\n    if (!focusItemValue || !data) {\n      return;\n    } // If the value is disabled in this option, it is returned.\n\n\n    if (disabledItemValues !== null && disabledItemValues !== void 0 && disabledItemValues.some(function (item) {\n      return item === focusItemValue;\n    })) {\n      return;\n    }\n\n    if (!val.some(function (v) {\n      return shallowEqual(v, focusItemValue);\n    })) {\n      val.push(focusItemValue);\n    } else if (!disabledOptions) {\n      remove(val, function (itemVal) {\n        return shallowEqual(itemVal, focusItemValue);\n      });\n    }\n\n    var focusItem = data.find(function (item) {\n      return shallowEqual(item === null || item === void 0 ? void 0 : item[valueKey], focusItemValue);\n    });\n\n    if (!focusItem) {\n      focusItem = createOption(focusItemValue);\n    }\n\n    setValue(val);\n    setSearchKeyword('');\n    handleSelect(val, focusItem, event);\n    handleChange(val, event);\n  }, [cloneValue, getAllData, focusItemValue, disabledItemValues, disabledOptions, setValue, setSearchKeyword, handleSelect, handleChange, valueKey, createOption]);\n  var handleMenuItemKeyPress = useCallback(function (event) {\n    if (!focusItemValue || !controlledData) {\n      return;\n    } // If the value is disabled in this option, it is returned.\n\n\n    if (disabledItemValues !== null && disabledItemValues !== void 0 && disabledItemValues.some(function (item) {\n      return item === focusItemValue;\n    })) {\n      return;\n    } // Find active `MenuItem` by `value`\n\n\n    var allData = getAllData();\n    var focusItem = allData.find(function (item) {\n      return shallowEqual(item[valueKey], focusItemValue);\n    }); // FIXME Bad state flow\n\n    if (!focusItem && focusItemValue === searchKeyword) {\n      focusItem = createOption(searchKeyword);\n    }\n\n    setValue(focusItemValue);\n    setSearchKeyword('');\n\n    if (focusItem) {\n      handleSelect(focusItemValue, focusItem, event);\n    }\n\n    handleChange(focusItemValue, event);\n    handleClose();\n  }, [setValue, disabledItemValues, controlledData, focusItemValue, valueKey, searchKeyword, handleClose, setSearchKeyword, createOption, getAllData, handleChange, handleSelect]);\n  usePublicMethods(ref, {\n    triggerRef: triggerRef,\n    overlayRef: overlayRef,\n    targetRef: targetRef\n  });\n  /**\n   * Remove the last item, after pressing the back key on the keyboard.\n   * @param event\n   */\n\n  var removeLastItem = useCallback(function (event) {\n    var target = event === null || event === void 0 ? void 0 : event.target;\n\n    if ((target === null || target === void 0 ? void 0 : target.tagName) !== 'INPUT') {\n      focusInput();\n      return;\n    }\n\n    if ((target === null || target === void 0 ? void 0 : target.tagName) === 'INPUT' && target !== null && target !== void 0 && target.value) {\n      return;\n    }\n\n    var val = cloneValue();\n    val.pop();\n    setValue(val);\n    handleChange(val, event);\n  }, [setValue, focusInput, handleChange, cloneValue]);\n  var handleClean = useCallback(function (event) {\n    if (disabled || searchKeyword !== '') {\n      return;\n    }\n\n    setValue(null);\n    setFocusItemValue(null);\n    setSearchKeyword('');\n    handleChange(null, event);\n    onClean === null || onClean === void 0 ? void 0 : onClean(event);\n  }, [disabled, searchKeyword, onClean, handleChange, setValue, setFocusItemValue, setSearchKeyword]);\n  var events = {\n    onMenuPressBackspace: multi ? removeLastItem : handleClean,\n    onMenuKeyDown: onKeyDown,\n    onMenuPressEnter: undefined,\n    onKeyDown: undefined\n  };\n  var handleKeyPress = useCallback(function (event) {\n    // When typing a space, create a tag.\n    if (isOneOf('Space', trigger) && event.key === KEY_VALUES.SPACE) {\n      handleTagKeyPress(event);\n      event.preventDefault();\n    } // When typing a comma, create a tag.\n\n\n    if (isOneOf('Comma', trigger) && event.key === KEY_VALUES.COMMA) {\n      handleTagKeyPress(event);\n      event.preventDefault();\n    }\n  }, [handleTagKeyPress, trigger]);\n\n  if (multi) {\n    if (isOneOf('Enter', trigger)) {\n      events.onMenuPressEnter = handleTagKeyPress;\n    }\n\n    if (creatable) {\n      events.onKeyDown = handleKeyPress;\n    }\n  } else {\n    events.onMenuPressEnter = handleMenuItemKeyPress;\n  }\n\n  var onPickerKeyDown = useToggleKeyDownEvent(_extends({\n    triggerRef: triggerRef,\n    targetRef: targetRef,\n    overlayRef: overlayRef\n  }, events, rest));\n  var handleExited = useCallback(function () {\n    setFocusItemValue(multi ? value === null || value === void 0 ? void 0 : value[0] : value);\n    setSearchKeyword('');\n    onClose === null || onClose === void 0 ? void 0 : onClose();\n  }, [setFocusItemValue, setSearchKeyword, onClose, value, multi]);\n  var handleFocus = useCallback(function () {\n    if (!readOnly) {\n      var _triggerRef$current4;\n\n      setOpen(true);\n      (_triggerRef$current4 = triggerRef.current) === null || _triggerRef$current4 === void 0 ? void 0 : _triggerRef$current4.open();\n    }\n  }, [readOnly]);\n  var handleBlur = useCallback(function () {\n    setOpen(false);\n  }, []);\n  var handleEnter = useCallback(function () {\n    focusInput();\n    setOpen(true);\n  }, [focusInput]);\n  var handleExit = useCallback(function () {\n    blurInput();\n    setOpen(false);\n  }, [blurInput]);\n\n  var renderDropdownMenuItem = function renderDropdownMenuItem(label, item) {\n    // 'Create option \"{0}\"' =>  Create option \"xxxxx\"\n    var newLabel = item.create ? /*#__PURE__*/React.createElement(\"span\", null, tplTransform(locale.createOption, label)) : label;\n    return renderMenuItem ? renderMenuItem(newLabel, item) : newLabel;\n  };\n\n  var checkValue = function checkValue() {\n    if (multi) {\n      return {\n        isValid: false,\n        itemNode: null\n      };\n    }\n\n    var dataItem = getDateItem(value);\n    var itemNode = dataItem.itemNode;\n\n    if (!isNil(value) && isFunction(renderValue)) {\n      itemNode = renderValue(value, dataItem.activeItem, itemNode);\n    }\n\n    return {\n      isValid: dataItem.isValid,\n      itemNode: itemNode\n    };\n  };\n\n  var renderMultiValue = function renderMultiValue() {\n    if (!multi) {\n      return null;\n    }\n\n    var _tagProps$closable = tagProps.closable,\n        closable = _tagProps$closable === void 0 ? true : _tagProps$closable,\n        onClose = tagProps.onClose,\n        tagRest = _objectWithoutPropertiesLoose(tagProps, [\"closable\", \"onClose\"]);\n\n    var tags = value || [];\n    var items = [];\n    var tagElements = tags.map(function (tag) {\n      var _getDateItem = getDateItem(tag),\n          isValid = _getDateItem.isValid,\n          itemNode = _getDateItem.itemNode,\n          activeItem = _getDateItem.activeItem;\n\n      items.push(activeItem);\n\n      if (!isValid) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(Tag, _extends({}, tagRest, {\n        key: tag,\n        size: rest.size === 'lg' ? 'lg' : rest.size === 'xs' ? 'sm' : 'md',\n        closable: !disabled && closable && !readOnly && !plaintext,\n        title: typeof itemNode === 'string' ? itemNode : undefined,\n        onClose: createChainedFunction(handleRemoveItemByTag.bind(null, tag), onClose)\n      }), itemNode);\n    }).filter(function (item) {\n      return item !== null;\n    });\n\n    if ((tags.length > 0 || isControlled) && isFunction(renderValue)) {\n      return renderValue(value, items, tagElements);\n    }\n\n    return tagElements;\n  };\n\n  var renderDropdownMenu = function renderDropdownMenu(positionProps, speakerRef) {\n    var left = positionProps.left,\n        top = positionProps.top,\n        className = positionProps.className;\n    var menuClassPrefix = multi ? 'picker-check-menu' : 'picker-select-menu';\n    var classes = merge(className, menuClassName, prefix(menuClassPrefix));\n\n    var styles = _extends({}, menuStyle, {\n      left: left,\n      top: top\n    });\n\n    var items = filterNodesOfTree(getAllData(), checkShouldDisplay);\n\n    if (creatable && searchKeyword && !items.find(function (item) {\n      return item[valueKey] === searchKeyword;\n    })) {\n      items = [].concat(items, [createOption(searchKeyword)]);\n    } // Create a tree structure data when set `groupBy`\n\n\n    if (groupBy) {\n      items = getDataGroupBy(items, groupBy, sort);\n    } else if (typeof sort === 'function') {\n      items = items.sort(sort(false));\n    }\n\n    if (disabledOptions) {\n      return /*#__PURE__*/React.createElement(PickerOverlay, {\n        ref: mergeRefs(overlayRef, speakerRef)\n      });\n    }\n\n    var menu = items.length ? /*#__PURE__*/React.createElement(DropdownMenu, {\n      id: id ? id + \"-listbox\" : undefined,\n      listProps: listProps,\n      disabledItemValues: disabledItemValues,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      classPrefix: menuClassPrefix,\n      dropdownMenuItemClassPrefix: multi ? undefined : menuClassPrefix + \"-item\",\n      dropdownMenuItemAs: multi ? DropdownMenuCheckItem : DropdownMenuItem,\n      activeItemValues: multi ? value : [value],\n      focusItemValue: focusItemValue,\n      maxHeight: menuMaxHeight,\n      data: items,\n      group: !isUndefined(groupBy),\n      onSelect: multi ? handleCheckTag : handleSelectItem // fixme don't use any\n      ,\n      renderMenuGroup: renderMenuGroup,\n      renderMenuItem: renderDropdownMenuItem,\n      virtualized: virtualized\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"none\"])))\n    }, locale === null || locale === void 0 ? void 0 : locale.noResultsText);\n    return /*#__PURE__*/React.createElement(PickerOverlay, {\n      ref: mergeRefs(overlayRef, speakerRef),\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: styles,\n      target: triggerRef,\n      onKeyDown: onPickerKeyDown\n    }, renderMenu ? renderMenu(menu) : menu, renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n\n  var _checkValue = checkValue(),\n      isValid = _checkValue.isValid,\n      itemNode = _checkValue.itemNode;\n\n  var tagElements = renderMultiValue();\n  /**\n   * 1.Have a value and the value is valid.\n   * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n   * 3.If renderValue returns null or undefined, hasValue is false.\n   */\n\n  var hasSingleValue = !isNil(value) && isFunction(renderValue) && !isNil(itemNode);\n  var hasMultiValue = isArray(value) && value.length > 0 && isFunction(renderValue) && !isNil(tagElements);\n  var hasValue = multi ? !!(tagElements !== null && tagElements !== void 0 && tagElements.length) || hasMultiValue : isValid || hasSingleValue;\n\n  var _usePickerClassName = usePickerClassName(_extends({}, props, {\n    classPrefix: classPrefix,\n    appearance: appearance,\n    hasValue: hasValue,\n    name: 'input',\n    cleanable: cleanable\n  })),\n      pickerClasses = _usePickerClassName[0],\n      usedClassNamePropKeys = _usePickerClassName[1];\n\n  var classes = merge(pickerClasses, (_merge = {}, _merge[prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"tag\"])))] = multi, _merge[prefix(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"focused\"])))] = open, _merge[prefix(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"disabled-options\"])))] = disabledOptions, _merge));\n  var searching = !!searchKeyword && open;\n  var displaySearchInput = searchable && !disabled;\n  var inputProps = multi ? {\n    inputStyle: {\n      maxWidth: maxWidth - 63\n    },\n    as: InputAutosize\n  } : {\n    as: 'input'\n  };\n\n  if (plaintext) {\n    var plaintextProps = {}; // TagPicker has -6px margin-left on the plaintext wrapper\n    // for fixing margin-left on tags from 2nd line on\n\n    if (multi && hasValue) {\n      plaintextProps.style = {\n        marginLeft: -6\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(Plaintext, _extends({\n      localeKey: \"notSelected\",\n      ref: targetRef\n    }, plaintextProps), itemNode || (tagElements !== null && tagElements !== void 0 && tagElements.length ? tagElements : null) || placeholder);\n  }\n\n  var placeholderNode = placeholder || (disabledOptions ? null : locale === null || locale === void 0 ? void 0 : locale.placeholder);\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    pickerProps: pick(props, pickTriggerPropKeys),\n    ref: triggerRef,\n    trigger: \"active\",\n    onEnter: createChainedFunction(handleEnter, onEnter),\n    onEntered: createChainedFunction(onEntered, onOpen),\n    onExit: createChainedFunction(handleExit, onExit),\n    onExited: createChainedFunction(handleExited, onExited),\n    speaker: renderDropdownMenu,\n    placement: placement\n  }, /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    style: style,\n    onClick: focusInput,\n    onKeyDown: onPickerKeyDown\n  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys)), {\n    id: id,\n    appearance: appearance,\n    readOnly: readOnly,\n    plaintext: plaintext,\n    ref: targetRef,\n    as: toggleAs,\n    tabIndex: undefined,\n    onClean: handleClean,\n    cleanable: cleanable && !disabled,\n    hasValue: hasValue,\n    active: open,\n    disabled: disabled,\n    placement: placement,\n    inputValue: value,\n    caret: !disabledOptions\n  }), searching || multi && hasValue ? null : itemNode || placeholderNode), !(!multi && disabled) && /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose([\"tag-wrapper\"])))\n  }, tagElements, displaySearchInput && /*#__PURE__*/React.createElement(InputSearch, _extends({}, inputProps, {\n    tabIndex: tabIndex,\n    readOnly: readOnly,\n    onBlur: createChainedFunction(handleBlur, onBlur),\n    onFocus: createChainedFunction(handleFocus, onFocus),\n    inputRef: inputRef,\n    onChange: handleSearch,\n    value: open ? searchKeyword : ''\n  })))));\n});\nInputPicker.displayName = 'InputPicker';\nInputPicker.propTypes = _extends({}, listPickerPropTypes, {\n  locale: PropTypes.any,\n  appearance: PropTypes.oneOf(['default', 'subtle']),\n  cacheData: PropTypes.array,\n  menuAutoWidth: PropTypes.bool,\n  menuMaxHeight: PropTypes.number,\n  searchable: PropTypes.bool,\n  creatable: PropTypes.bool,\n  groupBy: PropTypes.any,\n  sort: PropTypes.func,\n  renderMenu: PropTypes.func,\n  renderMenuItem: PropTypes.func,\n  renderMenuGroup: PropTypes.func,\n  onCreate: PropTypes.func,\n  onSelect: PropTypes.func,\n  onGroupTitleClick: PropTypes.func,\n  onSearch: PropTypes.func,\n  virtualized: PropTypes.bool,\n  searchBy: PropTypes.func\n});\nexport default InputPicker;","map":null,"metadata":{},"sourceType":"module"}