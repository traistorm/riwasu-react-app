{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledfield/labeledfieldview\n */\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport LabelView from '../label/labelview';\nimport '../../theme/components/labeledfield/labeledfieldview.css';\n/**\n * The labeled field view class. It can be used to enhance any view with the following features:\n *\n * * a label,\n * * (optional) an error message,\n * * (optional) an info (status) text,\n *\n * all bound logically by proper DOM attributes for UX and accessibility.  It also provides an interface\n * (e.g. observable properties) that allows controlling those additional features.\n *\n * The constructor of this class requires a callback that returns a view to be labeled. The callback\n * is called with unique ids that allow binding of DOM properties:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, ( labeledFieldView, viewUid, statusUid ) => {\n *\t\t\tconst inputView = new InputTextView( labeledFieldView.locale );\n *\n *\t\t\tinputView.set( {\n *\t\t\t\tid: viewUid,\n *\t\t\t\tariaDescribedById: statusUid\n *\t\t\t} );\n *\n *\t\t\tinputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n *\t\t\tinputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n *\n *\t\t\treturn inputView;\n *\t\t} );\n *\n *\t\tlabeledInputView.label = 'User name';\n *\t\tlabeledInputView.infoText = 'Full name like for instance, John Doe.';\n *\t\tlabeledInputView.render();\n *\n *\t\tdocument.body.append( labeledInputView.element );\n *\n * See {@link module:ui/labeledfield/utils} to discover ready–to–use labeled input helpers for common\n * UI components.\n *\n * @extends module:ui/view~View\n */\n\nvar LabeledFieldView = /*#__PURE__*/function (_View) {\n  _inherits(LabeledFieldView, _View);\n\n  /**\n   * Creates an instance of the labeled field view class using a provided creator function\n   * that provides the view to be labeled.\n   *\n   * @param {module:utils/locale~Locale} locale The locale instance.\n   * @param {Function} viewCreator A function that returns a {@link module:ui/view~View}\n   * that will be labeled. The following arguments are passed to the creator function:\n   *\n   * * an instance of the `LabeledFieldView` to allow binding observable properties,\n   * * an UID string that connects the {@link #labelView label} and the labeled field view in DOM,\n   * * an UID string that connects the {@link #statusView status} and the labeled field view in DOM.\n   */\n  function LabeledFieldView(locale, viewCreator) {\n    var _this;\n\n    _classCallCheck(this, LabeledFieldView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LabeledFieldView).call(this, locale));\n    var viewUid = \"ck-labeled-field-view-\".concat(uid());\n    var statusUid = \"ck-labeled-field-view-status-\".concat(uid());\n    /**\n     * The field view that gets labeled.\n     *\n     * @member {module:ui/view~View} #fieldView\n     */\n\n    _this.fieldView = viewCreator(_assertThisInitialized(_assertThisInitialized(_this)), viewUid, statusUid);\n    /**\n     * The text of the label.\n     *\n     * @observable\n     * @member {String} #label\n     */\n\n    _this.set('label');\n    /**\n     * Controls whether the component is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isEnabled\n     */\n\n\n    _this.set('isEnabled', true);\n    /**\n     * An observable flag set to `true` when {@link #fieldView} is empty (`false` otherwise).\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isEmpty\n     * @default true\n     */\n\n\n    _this.set('isEmpty', true);\n    /**\n     * An observable flag set to `true` when {@link #fieldView} is currently focused by\n     * the user (`false` otherwise).\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isFocused\n     * @default false\n     */\n\n\n    _this.set('isFocused', false);\n    /**\n     * The validation error text. When set, it will be displayed\n     * next to the {@link #fieldView} as a typical validation error message.\n     * Set it to `null` to hide the message.\n     *\n     * **Note:** Setting this property to anything but `null` will automatically\n     * make the `hasError` of the {@link #fieldView} `true`.\n     *\n     * @observable\n     * @member {String|null} #errorText\n     */\n\n\n    _this.set('errorText', null);\n    /**\n     * The additional information text displayed next to the {@link #fieldView} which can\n     * be used to inform the user about its purpose, provide help or hints.\n     *\n     * Set it to `null` to hide the message.\n     *\n     * **Note:** This text will be displayed in the same place as {@link #errorText} but the\n     * latter always takes precedence: if the {@link #errorText} is set, it replaces\n     * {@link #infoText}.\n     *\n     * @observable\n     * @member {String|null} #infoText\n     * @default null\n     */\n\n\n    _this.set('infoText', null);\n    /**\n     * (Optional) The additional CSS class set on the dropdown {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n\n    _this.set('class');\n    /**\n     * The content of the `placeholder` attribute of the {@link #fieldView}.\n     *\n     * @observable\n     * @member {String} #placeholder\n     */\n\n\n    _this.set('placeholder');\n    /**\n     * The label view instance that describes the entire view.\n     *\n     * @member {module:ui/label/labelview~LabelView} #labelView\n     */\n\n\n    _this.labelView = _this._createLabelView(viewUid);\n    /**\n     * The status view for the {@link #fieldView}. It displays {@link #errorText} and\n     * {@link #infoText}.\n     *\n     * @member {module:ui/view~View} #statusView\n     */\n\n    _this.statusView = _this._createStatusView(statusUid);\n    /**\n     * The combined status text made of {@link #errorText} and {@link #infoText}.\n     * Note that when present, {@link #errorText} always takes precedence in the\n     * status.\n     *\n     * @see #errorText\n     * @see #infoText\n     * @see #statusView\n     * @private\n     * @observable\n     * @member {String|null} #_statusText\n     */\n\n    _this.bind('_statusText').to(_assertThisInitialized(_assertThisInitialized(_this)), 'errorText', _assertThisInitialized(_assertThisInitialized(_this)), 'infoText', function (errorText, infoText) {\n      return errorText || infoText;\n    });\n\n    var bind = _this.bindTemplate;\n\n    _this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-labeled-field-view', bind.to('class'), bind.if('isEnabled', 'ck-disabled', function (value) {\n          return !value;\n        }), bind.if('isEmpty', 'ck-labeled-field-view_empty'), bind.if('isFocused', 'ck-labeled-field-view_focused'), bind.if('placeholder', 'ck-labeled-field-view_placeholder'), bind.if('errorText', 'ck-error')]\n      },\n      children: [{\n        tag: 'div',\n        attributes: {\n          class: ['ck', 'ck-labeled-field-view__input-wrapper']\n        },\n        children: [_this.fieldView, _this.labelView]\n      }, _this.statusView]\n    });\n\n    return _this;\n  }\n  /**\n   * Creates label view class instance and bind with view.\n   *\n   * @private\n   * @param {String} id Unique id to set as labelView#for attribute.\n   * @returns {module:ui/label/labelview~LabelView}\n   */\n\n\n  _createClass(LabeledFieldView, [{\n    key: \"_createLabelView\",\n    value: function _createLabelView(id) {\n      var labelView = new LabelView(this.locale);\n      labelView.for = id;\n      labelView.bind('text').to(this, 'label');\n      return labelView;\n    }\n    /**\n     * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n     * next to the {@link #fieldView}. See {@link #_statusText}.\n     *\n     * @private\n     * @param {String} statusUid Unique id of the status, shared with the {@link #fieldView view's}\n     * `aria-describedby` attribute.\n     * @returns {module:ui/view~View}\n     */\n\n  }, {\n    key: \"_createStatusView\",\n    value: function _createStatusView(statusUid) {\n      var statusView = new View(this.locale);\n      var bind = this.bindTemplate;\n      statusView.setTemplate({\n        tag: 'div',\n        attributes: {\n          class: ['ck', 'ck-labeled-field-view__status', bind.if('errorText', 'ck-labeled-field-view__status_error'), bind.if('_statusText', 'ck-hidden', function (value) {\n            return !value;\n          })],\n          id: statusUid,\n          role: bind.if('errorText', 'alert')\n        },\n        children: [{\n          text: bind.to('_statusText')\n        }]\n      });\n      return statusView;\n    }\n    /**\n     * Focuses the {@link #fieldView}.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.fieldView.focus();\n    }\n  }]);\n\n  return LabeledFieldView;\n}(View);\n\nexport { LabeledFieldView as default };","map":null,"metadata":{},"sourceType":"module"}