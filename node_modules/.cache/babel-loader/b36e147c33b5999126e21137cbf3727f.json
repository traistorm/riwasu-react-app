{"ast":null,"code":"import { useCallback, useRef } from 'react';\nimport addStyle from 'dom-lib/addStyle';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport toggleClass from './toggleClass';\nimport useUpdateEffect from './useUpdateEffect';\nimport isSupportTouchEvent from './isSupportTouchEvent';\n/**\n * Update the position of the table according to the scrolling information of the table.\n * @param props\n * @returns\n */\n\nvar usePosition = function usePosition(props) {\n  var data = props.data,\n      height = props.height,\n      tableWidth = props.tableWidth,\n      tableRef = props.tableRef,\n      prefix = props.prefix,\n      translateDOMPositionXY = props.translateDOMPositionXY,\n      wheelWrapperRef = props.wheelWrapperRef,\n      headerWrapperRef = props.headerWrapperRef,\n      affixHeaderWrapperRef = props.affixHeaderWrapperRef,\n      tableHeaderRef = props.tableHeaderRef,\n      scrollX = props.scrollX,\n      scrollY = props.scrollY,\n      contentWidth = props.contentWidth,\n      shouldFixedColumn = props.shouldFixedColumn;\n  var duration = useRef(0);\n  var bezier = useRef('linear');\n  var getScrollCellGroups = useCallback(function () {\n    var _tableRef$current;\n\n    return ((_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.querySelectorAll(\".\" + prefix('cell-group-scroll'))) || [];\n  }, [prefix, tableRef]);\n  var getFixedLeftCellGroups = useCallback(function () {\n    var _tableRef$current2;\n\n    return (_tableRef$current2 = tableRef.current) === null || _tableRef$current2 === void 0 ? void 0 : _tableRef$current2.querySelectorAll(\".\" + prefix('cell-group-fixed-left'));\n  }, [prefix, tableRef]);\n  var getFixedRightCellGroups = useCallback(function () {\n    var _tableRef$current3;\n\n    return (_tableRef$current3 = tableRef.current) === null || _tableRef$current3 === void 0 ? void 0 : _tableRef$current3.querySelectorAll(\".\" + prefix('cell-group-fixed-right'));\n  }, [prefix, tableRef]);\n  var updateWheelElementPosition = useCallback(function (fixedCell) {\n    if (wheelWrapperRef !== null && wheelWrapperRef !== void 0 && wheelWrapperRef.current) {\n      // The animation when the mobile device touches and scrolls.\n      var wheelStyle = isSupportTouchEvent() ? {\n        'transition-duration': duration.current + \"ms\",\n        'transition-timing-function': bezier.current\n      } : {};\n      translateDOMPositionXY.current(wheelStyle, fixedCell ? 0 : scrollX.current, scrollY.current);\n      addStyle(wheelWrapperRef.current, wheelStyle);\n    }\n  }, [scrollX, scrollY, translateDOMPositionXY, wheelWrapperRef]);\n  var updatePositionByFixedCell = useCallback(function () {\n    var wheelGroupStyle = {};\n    var scrollGroups = getScrollCellGroups();\n    var fixedLeftGroups = getFixedLeftCellGroups();\n    var fixedRightGroups = getFixedRightCellGroups();\n    translateDOMPositionXY.current(wheelGroupStyle, scrollX.current, 0);\n    var scrollArrayGroups = Array.from(scrollGroups);\n\n    for (var i = 0; i < scrollArrayGroups.length; i++) {\n      var group = scrollArrayGroups[i];\n      addStyle(group, wheelGroupStyle);\n    }\n\n    updateWheelElementPosition(true);\n    var leftShadowClassName = prefix('cell-group-left-shadow');\n    var rightShadowClassName = prefix('cell-group-right-shadow');\n    var showLeftShadow = scrollX.current < 0;\n    var showRightShadow = tableWidth.current - contentWidth.current - SCROLLBAR_WIDTH !== scrollX.current;\n    toggleClass(fixedLeftGroups, leftShadowClassName, showLeftShadow);\n    toggleClass(fixedRightGroups, rightShadowClassName, showRightShadow);\n  }, [contentWidth, getFixedLeftCellGroups, getFixedRightCellGroups, getScrollCellGroups, updateWheelElementPosition, prefix, scrollX, tableWidth, translateDOMPositionXY]);\n  /**\n   * Update the position of the table according to the scrolling information of the table.\n   * @param nextDuration CSS transition-duration\n   * @param nextBezier CSS transition-timing-function\n   */\n\n  var updatePosition = useCallback(function (nextDuration, nextBezier) {\n    if (nextDuration) {\n      duration.current = nextDuration;\n    }\n\n    if (nextBezier) {\n      bezier.current = nextBezier;\n    } // When there are fixed columns.\n\n\n    if (shouldFixedColumn) {\n      updatePositionByFixedCell();\n    } else {\n      var _affixHeaderElement$h;\n\n      var headerStyle = {};\n      translateDOMPositionXY.current(headerStyle, scrollX.current, 0);\n      var headerElement = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n      var affixHeaderElement = affixHeaderWrapperRef === null || affixHeaderWrapperRef === void 0 ? void 0 : affixHeaderWrapperRef.current;\n      updateWheelElementPosition();\n      headerElement && addStyle(headerElement, headerStyle);\n\n      if (affixHeaderElement !== null && affixHeaderElement !== void 0 && (_affixHeaderElement$h = affixHeaderElement.hasChildNodes) !== null && _affixHeaderElement$h !== void 0 && _affixHeaderElement$h.call(affixHeaderElement)) {\n        addStyle(affixHeaderElement === null || affixHeaderElement === void 0 ? void 0 : affixHeaderElement.firstChild, headerStyle);\n      }\n    }\n\n    if (tableHeaderRef !== null && tableHeaderRef !== void 0 && tableHeaderRef.current) {\n      toggleClass(tableHeaderRef.current, prefix('cell-group-shadow'), scrollY.current < 0);\n    }\n  }, [affixHeaderWrapperRef, updateWheelElementPosition, headerWrapperRef, prefix, scrollX, scrollY, shouldFixedColumn, tableHeaderRef, translateDOMPositionXY, updatePositionByFixedCell]);\n  useUpdateEffect(function () {\n    if (scrollY.current !== 0) {\n      updatePosition();\n    }\n  }, [height, data]);\n  return {\n    forceUpdatePosition: updatePosition\n  };\n};\n\nexport default usePosition;","map":null,"metadata":{},"sourceType":"module"}