{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\nimport Node from './node';\n/**\n * Tree view text node.\n *\n * The constructor of this class should not be used directly. To create a new text node instance\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\n\nvar Text = /*#__PURE__*/function (_Node) {\n  _inherits(Text, _Node);\n\n  /**\n   * Creates a tree view text node.\n   *\n   * @protected\n   * @param {module:engine/view/document~Document} document The document instance to which this text node belongs.\n   * @param {String} data The text's data.\n   */\n  function Text(document, data) {\n    var _this;\n\n    _classCallCheck(this, Text);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Text).call(this, document));\n    /**\n     * The text content.\n     *\n     * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n     *\n     * @protected\n     * @member {String} module:engine/view/text~Text#_textData\n     */\n\n    _this._textData = data;\n    return _this;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\ttext.is( '$text' ); // -> true\n   *\t\ttext.is( 'node' ); // -> true\n   *\t\ttext.is( 'view:$text' ); // -> true\n   *\t\ttext.is( 'view:node' ); // -> true\n   *\n   *\t\ttext.is( 'model:$text' ); // -> false\n   *\t\ttext.is( 'element' ); // -> false\n   *\t\ttext.is( 'range' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n   * accepted for backward compatibility.\n   *\n   * @param {String} type Type to check.\n   * @returns {Boolean}\n   */\n\n\n  _createClass(Text, [{\n    key: \"is\",\n    value: function is(type) {\n      return type === '$text' || type === 'view:$text' || // This are legacy values kept for backward compatibility.\n      type === 'text' || type === 'view:text' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n      type === 'node' || type === 'view:node';\n    }\n    /**\n     * The text content.\n     *\n     * @readonly\n     * @type {String}\n     */\n\n  }, {\n    key: \"isSimilar\",\n\n    /**\n     * Checks if this text node is similar to other text node.\n     * Both nodes should have the same data to be considered as similar.\n     *\n     * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n     * @returns {Boolean}\n     */\n    value: function isSimilar(otherNode) {\n      if (!(otherNode instanceof Text)) {\n        return false;\n      }\n\n      return this === otherNode || this.data === otherNode.data;\n    }\n    /**\n     * Clones this node.\n     *\n     * @protected\n     * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n     */\n\n  }, {\n    key: \"_clone\",\n    value: function _clone() {\n      return new Text(this.document, this.data);\n    } // @if CK_DEBUG_ENGINE // toString() {\n    // @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n    // @if CK_DEBUG_ENGINE // }\n    // @if CK_DEBUG_ENGINE // log() {\n    // @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n    // @if CK_DEBUG_ENGINE // }\n    // @if CK_DEBUG_ENGINE // logExtended() {\n    // @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n    // @if CK_DEBUG_ENGINE // }\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._textData;\n    }\n    /**\n     * The `_data` property is controlled by a getter and a setter.\n     *\n     * The getter is required when using the addition assignment operator on protected property:\n     *\n     *\t\tconst foo = downcastWriter.createText( 'foo' );\n     *\t\tconst bar = downcastWriter.createText( 'bar' );\n     *\n     *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n     *\t\tconsole.log( foo.data ); // prints: 'foobar'\n     *\n     * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n     *\n     * The setter sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n     *\n     * @protected\n     * @type {String}\n     */\n\n  }, {\n    key: \"_data\",\n    get: function get() {\n      return this.data;\n    },\n    set: function set(data) {\n      this._fireChange('text', this);\n\n      this._textData = data;\n    }\n  }]);\n\n  return Text;\n}(Node);\n\nexport { Text as default };","map":null,"metadata":{},"sourceType":"module"}