{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroupContext } from '../FormGroup/FormGroup';\nimport { InputGroupContext } from '../InputGroup/InputGroup';\nimport Plaintext from '../Plaintext';\nimport { createChainedFunction, TypeChecker, mergeRefs, useClassNames, KEY_VALUES } from '../utils';\nvar Input = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var className = props.className,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'input' : _props$classPrefix,\n      _props$as = props.as,\n      Component = _props$as === void 0 ? 'input' : _props$as,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'text' : _props$type,\n      disabled = props.disabled,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      inputRef = props.inputRef,\n      id = props.id,\n      size = props.size,\n      plaintext = props.plaintext,\n      readOnly = props.readOnly,\n      onPressEnter = props.onPressEnter,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onKeyDown = props.onKeyDown,\n      onChange = props.onChange,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"classPrefix\", \"as\", \"type\", \"disabled\", \"value\", \"defaultValue\", \"inputRef\", \"id\", \"size\", \"plaintext\", \"readOnly\", \"onPressEnter\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onChange\"]);\n\n  var handleKeyDown = useCallback(function (event) {\n    if (event.key === KEY_VALUES.ENTER) {\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  }, [onPressEnter, onKeyDown]);\n  var handleChange = useCallback(function (event) {\n    var _event$target;\n\n    onChange === null || onChange === void 0 ? void 0 : onChange((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value, event);\n  }, [onChange]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge;\n\n  var classes = merge(className, withClassPrefix(size, {\n    plaintext: plaintext\n  }));\n  var inputGroupContext = useContext(InputGroupContext);\n  var formGroupContext = useContext(FormGroupContext); // Make the Input component display in plain text,\n  // and display default characters when there is no value.\n\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, {\n      ref: ref,\n      localeKey: \"unfilled\"\n    }, typeof value === 'undefined' ? defaultValue : value);\n  }\n\n  var operable = !disabled && !readOnly;\n  var eventProps = {};\n\n  if (operable) {\n    eventProps.onChange = handleChange;\n    eventProps.onKeyDown = handleKeyDown;\n    eventProps.onFocus = createChainedFunction(onFocus, inputGroupContext === null || inputGroupContext === void 0 ? void 0 : inputGroupContext.onFocus);\n    eventProps.onBlur = createChainedFunction(onBlur, inputGroupContext === null || inputGroupContext === void 0 ? void 0 : inputGroupContext.onBlur);\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, eventProps, {\n    ref: mergeRefs(ref, inputRef),\n    className: classes,\n    type: type,\n    id: id || (formGroupContext === null || formGroupContext === void 0 ? void 0 : formGroupContext.controlId),\n    value: value,\n    defaultValue: defaultValue,\n    disabled: disabled,\n    readOnly: readOnly\n  }));\n});\nInput.displayName = 'Input';\nInput.propTypes = {\n  type: PropTypes.string,\n  as: PropTypes.elementType,\n  id: PropTypes.string,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  size: PropTypes.oneOf(['lg', 'md', 'sm', 'xs']),\n  inputRef: TypeChecker.refType,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onPressEnter: PropTypes.func\n};\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}