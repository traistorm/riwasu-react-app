{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _this = this;\n\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport isUndefined from 'lodash/isUndefined';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport findIndex from 'lodash/findIndex';\nimport getPosition from 'dom-lib/getPosition';\nimport scrollTop from 'dom-lib/scrollTop';\nimport getHeight from 'dom-lib/getHeight';\nimport classNames from 'classnames';\nimport { List, AutoSizer } from './VirtualizedList';\nimport shallowEqual from '../utils/shallowEqual';\nimport { mergeRefs, useClassNames } from '../utils';\nimport DropdownMenuGroup from './DropdownMenuGroup';\nimport { KEY_GROUP, KEY_GROUP_TITLE } from '../utils/getDataGroupBy';\nvar DropdownMenu = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$data = props.data,\n      data = _props$data === void 0 ? [] : _props$data,\n      group = props.group,\n      _props$maxHeight = props.maxHeight,\n      maxHeight = _props$maxHeight === void 0 ? 320 : _props$maxHeight,\n      _props$activeItemValu = props.activeItemValues,\n      activeItemValues = _props$activeItemValu === void 0 ? [] : _props$activeItemValu,\n      _props$disabledItemVa = props.disabledItemValues,\n      disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'dropdown-menu' : _props$classPrefix,\n      _props$valueKey = props.valueKey,\n      valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n      _props$labelKey = props.labelKey,\n      labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n      virtualized = props.virtualized,\n      listProps = props.listProps,\n      className = props.className,\n      style = props.style,\n      focusItemValue = props.focusItemValue,\n      dropdownMenuItemClassPrefix = props.dropdownMenuItemClassPrefix,\n      DropdownMenuItem = props.dropdownMenuItemAs,\n      _props$rowHeight = props.rowHeight,\n      rowHeight = _props$rowHeight === void 0 ? 36 : _props$rowHeight,\n      _props$rowGroupHeight = props.rowGroupHeight,\n      rowGroupHeight = _props$rowGroupHeight === void 0 ? 48 : _props$rowGroupHeight,\n      renderMenuGroup = props.renderMenuGroup,\n      renderMenuItem = props.renderMenuItem,\n      onGroupTitleClick = props.onGroupTitleClick,\n      onSelect = props.onSelect,\n      rest = _objectWithoutPropertiesLoose(props, [\"data\", \"group\", \"maxHeight\", \"activeItemValues\", \"disabledItemValues\", \"classPrefix\", \"valueKey\", \"labelKey\", \"virtualized\", \"listProps\", \"className\", \"style\", \"focusItemValue\", \"dropdownMenuItemClassPrefix\", \"dropdownMenuItemAs\", \"rowHeight\", \"rowGroupHeight\", \"renderMenuGroup\", \"renderMenuItem\", \"onGroupTitleClick\", \"onSelect\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      prefix = _useClassNames.prefix,\n      merge = _useClassNames.merge;\n\n  var classes = merge(className, withClassPrefix('items', {\n    grouped: group\n  }));\n\n  var styles = _extends({}, style, {\n    maxHeight: maxHeight\n  });\n\n  var menuBodyContainerRef = useRef(null);\n\n  var _useState = useState([]),\n      foldedGroupKeys = _useState[0],\n      setFoldedGroupKeys = _useState[1];\n\n  var handleGroupTitleClick = useCallback(function (key, event) {\n    var nextGroupKeys = foldedGroupKeys.filter(function (item) {\n      return item !== key;\n    });\n\n    if (nextGroupKeys.length === foldedGroupKeys.length) {\n      nextGroupKeys.push(key);\n    }\n\n    setFoldedGroupKeys(nextGroupKeys);\n    onGroupTitleClick === null || onGroupTitleClick === void 0 ? void 0 : onGroupTitleClick(event);\n  }, [onGroupTitleClick, foldedGroupKeys]);\n  var handleSelect = useCallback(function (item, value, event, checked) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(value, item, event, checked);\n  }, [onSelect]);\n\n  var getRowHeight = function getRowHeight(list, _ref) {\n    var index = _ref.index;\n    var item = list[index];\n\n    if (group && item[KEY_GROUP] && index !== 0) {\n      return rowGroupHeight;\n    }\n\n    return rowHeight;\n  };\n\n  useEffect(function () {\n    var container = menuBodyContainerRef.current;\n\n    if (!container) {\n      return;\n    }\n\n    var activeItem = container.querySelector(\".\" + prefix('item-focus'));\n\n    if (!activeItem) {\n      activeItem = container.querySelector(\".\" + prefix('item-active'));\n    }\n\n    if (!activeItem) {\n      return;\n    }\n\n    var position = getPosition(activeItem, container);\n    var sTop = scrollTop(container);\n    var sHeight = getHeight(container);\n\n    if (sTop > position.top) {\n      scrollTop(container, Math.max(0, position.top - 20));\n    } else if (position.top > sTop + sHeight) {\n      scrollTop(container, Math.max(0, position.top - sHeight + 32));\n    }\n  }, [focusItemValue, menuBodyContainerRef, prefix]);\n\n  var renderItem = function renderItem(list, _ref2) {\n    var index = _ref2.index,\n        style = _ref2.style;\n    var item = list[index];\n    var value = item[valueKey];\n    var label = item[labelKey];\n\n    if (isUndefined(label) && !item[KEY_GROUP]) {\n      throw Error(\"labelKey \\\"\" + labelKey + \"\\\" is not defined in \\\"data\\\" : \" + index);\n    } // Use `value` in keys when If `value` is string or number\n\n\n    var itemKey = isString(value) || isNumber(value) ? value : index;\n    /**\n     * Render <DropdownMenuGroup>\n     * when if `group` is enabled\n     */\n\n    if (group && item[KEY_GROUP]) {\n      var groupValue = item[KEY_GROUP_TITLE]; // TODO: grouped options should be owned by group\n\n      return /*#__PURE__*/React.createElement(DropdownMenuGroup, {\n        style: style,\n        classPrefix: 'picker-menu-group',\n        className: classNames({\n          folded: foldedGroupKeys.some(function (key) {\n            return key === groupValue;\n          })\n        }),\n        key: \"group-\" + groupValue,\n        onClick: handleGroupTitleClick.bind(null, groupValue)\n      }, renderMenuGroup ? renderMenuGroup(groupValue, item) : groupValue);\n    } else if (isUndefined(value) && !isUndefined(item[KEY_GROUP])) {\n      throw Error(\"valueKey \\\"\" + valueKey + \"\\\" is not defined in \\\"data\\\" : \" + index + \" \");\n    }\n\n    var disabled = disabledItemValues === null || disabledItemValues === void 0 ? void 0 : disabledItemValues.some(function (disabledValue) {\n      return shallowEqual(disabledValue, value);\n    });\n    var active = activeItemValues === null || activeItemValues === void 0 ? void 0 : activeItemValues.some(function (v) {\n      return shallowEqual(v, value);\n    });\n    var focus = !isUndefined(focusItemValue) && shallowEqual(focusItemValue, value);\n    return /*#__PURE__*/React.createElement(DropdownMenuItem, {\n      style: style,\n      key: itemKey,\n      disabled: disabled,\n      active: active,\n      focus: focus,\n      value: value,\n      classPrefix: dropdownMenuItemClassPrefix,\n      onSelect: handleSelect.bind(null, item)\n    }, renderMenuItem ? renderMenuItem(label, item) : label);\n  };\n\n  var filteredItems = group ? data.filter(function (item) {\n    return !(foldedGroupKeys !== null && foldedGroupKeys !== void 0 && foldedGroupKeys.some(function (key) {\n      var _item$parent;\n\n      return key === ((_item$parent = item.parent) === null || _item$parent === void 0 ? void 0 : _item$parent[KEY_GROUP_TITLE]);\n    }));\n  }) : data;\n  var rowCount = filteredItems.length; // Check whether the height of the data exceeds the height of the container.\n\n  var useVirtualized = virtualized && rowCount * rowHeight > maxHeight;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: !useVirtualized ? 'listbox' : undefined\n  }, rest, {\n    className: classes,\n    ref: mergeRefs(menuBodyContainerRef, ref),\n    style: styles\n  }), useVirtualized ? /*#__PURE__*/React.createElement(AutoSizer, {\n    defaultHeight: maxHeight,\n    style: {\n      width: 'auto',\n      height: 'auto'\n    }\n  }, function (_ref3) {\n    var height = _ref3.height,\n        width = _ref3.width;\n    return /*#__PURE__*/React.createElement(List, _extends({\n      role: \"listbox\",\n      containerRole: '',\n      \"aria-readonly\": undefined,\n      width: width,\n      height: height || maxHeight,\n      scrollToIndex: findIndex(data, function (item) {\n        return item[valueKey] === (activeItemValues === null || activeItemValues === void 0 ? void 0 : activeItemValues[0]);\n      }),\n      rowCount: rowCount,\n      rowHeight: getRowHeight.bind(_this, filteredItems),\n      rowRenderer: renderItem.bind(null, filteredItems)\n    }, listProps));\n  }) : filteredItems.map(function (_item, index) {\n    return renderItem(filteredItems, {\n      index: index\n    });\n  }));\n});\nexport var dropdownMenuPropTypes = {\n  classPrefix: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  dropdownMenuItemAs: PropTypes.elementType.isRequired,\n  dropdownMenuItemClassPrefix: PropTypes.string,\n  data: PropTypes.array,\n  group: PropTypes.bool,\n  disabledItemValues: PropTypes.array,\n  activeItemValues: PropTypes.array,\n  focusItemValue: PropTypes.any,\n  maxHeight: PropTypes.number,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  style: PropTypes.object,\n  renderMenuItem: PropTypes.func,\n  renderMenuGroup: PropTypes.func,\n  onSelect: PropTypes.func,\n  onGroupTitleClick: PropTypes.func,\n  virtualized: PropTypes.bool,\n  listProps: PropTypes.any,\n  rowHeight: PropTypes.number,\n  rowGroupHeight: PropTypes.number\n};\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.propTypes = dropdownMenuPropTypes;\nexport default DropdownMenu;","map":null,"metadata":{},"sourceType":"module"}