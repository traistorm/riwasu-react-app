{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport formatErrorMessage from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\n\nexport function createValidatorAsync(data, name) {\n  function check(errorMessage) {\n    return function (checkResult) {\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage: errorMessage\n        };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n\n      return null;\n    };\n  }\n\n  return function (value, rules) {\n    var promises = rules.map(function (rule) {\n      var onValid = rule.onValid,\n          errorMessage = rule.errorMessage,\n          params = rule.params;\n      return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, _extends({}, params, {\n        name: Array.isArray(name) ? name.join('.') : name\n      }))));\n    });\n    return Promise.all(promises).then(function (results) {\n      return results.find(function (item) {\n        return item && (item === null || item === void 0 ? void 0 : item.hasError);\n      });\n    });\n  };\n}\nexport default createValidatorAsync;","map":null,"metadata":{},"sourceType":"module"}