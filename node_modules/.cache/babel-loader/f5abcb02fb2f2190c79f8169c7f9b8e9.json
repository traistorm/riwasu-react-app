{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { MixedType } from './MixedType';\nimport { createValidator, createValidatorAsync, checkRequired, isEmpty } from './utils';\nexport var ObjectType = /*#__PURE__*/function (_MixedType) {\n  _inheritsLoose(ObjectType, _MixedType);\n\n  function ObjectType(errorMessage) {\n    var _this;\n\n    _this = _MixedType.call(this, 'object') || this;\n    _this.objectTypeSchemaSpec = void 0;\n\n    _MixedType.prototype.pushRule.call(_assertThisInitialized(_this), {\n      onValid: function onValid(v) {\n        return typeof v === 'object';\n      },\n      errorMessage: errorMessage || _this.locale.type\n    });\n\n    return _this;\n  }\n\n  var _proto = ObjectType.prototype;\n\n  _proto.check = function check(value, data, fieldName) {\n    if (value === void 0) {\n      value = this.value;\n    }\n\n    var check = function check(value, data, type) {\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return {\n          hasError: true,\n          errorMessage: type.requiredMessage\n        };\n      }\n\n      if (type.objectTypeSchemaSpec && typeof value === 'object') {\n        var checkResultObject = {};\n        var hasError = false;\n        Object.entries(type.objectTypeSchemaSpec).forEach(function (_ref) {\n          var k = _ref[0],\n              v = _ref[1];\n          var checkResult = check(value[k], value, v);\n\n          if (checkResult !== null && checkResult !== void 0 && checkResult.hasError) {\n            hasError = true;\n          }\n\n          checkResultObject[k] = checkResult;\n        });\n        return {\n          hasError: hasError,\n          object: checkResultObject\n        };\n      }\n\n      var validator = createValidator(data, fieldName);\n      var checkStatus = validator(value, type.priorityRules);\n\n      if (checkStatus) {\n        return checkStatus;\n      }\n\n      if (!type.required && isEmpty(value)) {\n        return {\n          hasError: false\n        };\n      }\n\n      return validator(value, type.rules) || {\n        hasError: false\n      };\n    };\n\n    return check(value, data, this);\n  };\n\n  _proto.checkAsync = function checkAsync(value, data, fieldName) {\n    var _this2 = this;\n\n    if (value === void 0) {\n      value = this.value;\n    }\n\n    var check = function check(value, data, type) {\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return Promise.resolve({\n          hasError: true,\n          errorMessage: _this2.requiredMessage\n        });\n      }\n\n      var validator = createValidatorAsync(data, fieldName);\n      return new Promise(function (resolve) {\n        if (type.objectTypeSchemaSpec && typeof value === 'object') {\n          var checkResult = {};\n          var checkAll = [];\n          var keys = [];\n          Object.entries(type.objectTypeSchemaSpec).forEach(function (_ref2) {\n            var k = _ref2[0],\n                v = _ref2[1];\n            checkAll.push(check(value[k], value, v));\n            keys.push(k);\n          });\n          return Promise.all(checkAll).then(function (values) {\n            values.forEach(function (v, index) {\n              checkResult[keys[index]] = v;\n            });\n            resolve({\n              object: checkResult\n            });\n          });\n        }\n\n        return validator(value, type.priorityRules).then(function (checkStatus) {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n        }).then(function () {\n          if (!type.required && isEmpty(value)) {\n            resolve({\n              hasError: false\n            });\n          }\n        }).then(function () {\n          return validator(value, type.rules);\n        }).then(function (checkStatus) {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n\n          resolve({\n            hasError: false\n          });\n        });\n      });\n    };\n\n    return check(value, data, this);\n  }\n  /**\n   * @example\n   * ObjectType().shape({\n   *  name: StringType(),\n   *  age: NumberType()\n   * })\n   */\n  ;\n\n  _proto.shape = function shape(fields) {\n    this.objectTypeSchemaSpec = fields;\n    return this;\n  };\n\n  return ObjectType;\n}(MixedType);\nexport default function getObjectType(errorMessage) {\n  return new ObjectType(errorMessage);\n}","map":null,"metadata":{},"sourceType":"module"}