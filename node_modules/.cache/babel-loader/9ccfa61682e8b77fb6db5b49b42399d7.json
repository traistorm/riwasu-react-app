{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/nodelist\n */\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\n\nvar NodeList = /*#__PURE__*/function () {\n  /**\n   * Creates an empty node list.\n   *\n   * @protected\n   * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n   */\n  function NodeList(nodes) {\n    _classCallCheck(this, NodeList);\n\n    /**\n     * Nodes contained in this node list.\n     *\n     * @private\n     * @member {Array.<module:engine/model/node~Node>}\n     */\n    this._nodes = [];\n\n    if (nodes) {\n      this._insertNodes(0, nodes);\n    }\n  }\n  /**\n   * Iterable interface.\n   *\n   * Iterates over all nodes contained inside this node list.\n   *\n   * @returns {Iterable.<module:engine/model/node~Node>}\n   */\n\n\n  _createClass(NodeList, [{\n    key: Symbol.iterator,\n    value: function value() {\n      return this._nodes[Symbol.iterator]();\n    }\n    /**\n     * Number of nodes contained inside this node list.\n     *\n     * @readonly\n     * @type {Number}\n     */\n\n  }, {\n    key: \"getNode\",\n\n    /**\n     * Gets the node at the given index. Returns `null` if incorrect index was passed.\n     *\n     * @param {Number} index Index of node.\n     * @returns {module:engine/model/node~Node|null} Node at given index.\n     */\n    value: function getNode(index) {\n      return this._nodes[index] || null;\n    }\n    /**\n     * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n     *\n     * @param {module:engine/model/node~Node} node Child node to look for.\n     * @returns {Number|null} Child node's index.\n     */\n\n  }, {\n    key: \"getNodeIndex\",\n    value: function getNodeIndex(node) {\n      var index = this._nodes.indexOf(node);\n\n      return index == -1 ? null : index;\n    }\n    /**\n     * Returns the starting offset of given node. Starting offset is equal to the sum of\n     * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n     *\n     * @param {module:engine/model/node~Node} node Node to look for.\n     * @returns {Number|null} Node's starting offset.\n     */\n\n  }, {\n    key: \"getNodeStartOffset\",\n    value: function getNodeStartOffset(node) {\n      var index = this.getNodeIndex(node);\n      return index === null ? null : this._nodes.slice(0, index).reduce(function (sum, node) {\n        return sum + node.offsetSize;\n      }, 0);\n    }\n    /**\n     * Converts index to offset in node list.\n     *\n     * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n     *\n     * @param {Number} index Node's index.\n     * @returns {Number} Node's starting offset.\n     */\n\n  }, {\n    key: \"indexToOffset\",\n    value: function indexToOffset(index) {\n      if (index == this._nodes.length) {\n        return this.maxOffset;\n      }\n\n      var node = this._nodes[index];\n\n      if (!node) {\n        /**\n         * Given index cannot be found in the node list.\n         *\n         * @error model-nodelist-index-out-of-bounds\n         */\n        throw new CKEditorError('model-nodelist-index-out-of-bounds', this);\n      }\n\n      return this.getNodeStartOffset(node);\n    }\n    /**\n     * Converts offset in node list to index.\n     *\n     * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n     * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n     *\n     * @param {Number} offset Offset to look for.\n     * @returns {Number} Index of a node that occupies given offset.\n     */\n\n  }, {\n    key: \"offsetToIndex\",\n    value: function offsetToIndex(offset) {\n      var totalOffset = 0;\n\n      var _iterator = _createForOfIteratorHelper(this._nodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n\n          if (offset >= totalOffset && offset < totalOffset + node.offsetSize) {\n            return this.getNodeIndex(node);\n          }\n\n          totalOffset += node.offsetSize;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (totalOffset != offset) {\n        /**\n         * Given offset cannot be found in the node list.\n         *\n         * @error model-nodelist-offset-out-of-bounds\n         * @param {Number} offset\n         * @param {module:engine/model/nodelist~NodeList} nodeList Stringified node list.\n         */\n        throw new CKEditorError('model-nodelist-offset-out-of-bounds', this, {\n          offset: offset,\n          nodeList: this\n        });\n      }\n\n      return this.length;\n    }\n    /**\n     * Inserts given nodes at given index.\n     *\n     * @protected\n     * @param {Number} index Index at which nodes should be inserted.\n     * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n     */\n\n  }, {\n    key: \"_insertNodes\",\n    value: function _insertNodes(index, nodes) {\n      var _this$_nodes;\n\n      // Validation.\n      var _iterator2 = _createForOfIteratorHelper(nodes),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var node = _step2.value;\n\n          if (!(node instanceof Node)) {\n            /**\n             * Trying to insert an object which is not a Node instance.\n             *\n             * @error model-nodelist-insertnodes-not-node\n             */\n            throw new CKEditorError('model-nodelist-insertnodes-not-node', this);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      (_this$_nodes = this._nodes).splice.apply(_this$_nodes, [index, 0].concat(_toConsumableArray(nodes)));\n    }\n    /**\n     * Removes one or more nodes starting at the given index.\n     *\n     * @protected\n     * @param {Number} indexStart Index of the first node to remove.\n     * @param {Number} [howMany=1] Number of nodes to remove.\n     * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n     */\n\n  }, {\n    key: \"_removeNodes\",\n    value: function _removeNodes(indexStart) {\n      var howMany = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return this._nodes.splice(indexStart, howMany);\n    }\n    /**\n     * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n     * are also converted to their plain object representation.\n     *\n     * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this._nodes.map(function (node) {\n        return node.toJSON();\n      });\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._nodes.length;\n    }\n    /**\n     * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n     *\n     * @readonly\n     * @type {Number}\n     */\n\n  }, {\n    key: \"maxOffset\",\n    get: function get() {\n      return this._nodes.reduce(function (sum, node) {\n        return sum + node.offsetSize;\n      }, 0);\n    }\n  }]);\n\n  return NodeList;\n}();\n\nexport { NodeList as default };","map":null,"metadata":{},"sourceType":"module"}