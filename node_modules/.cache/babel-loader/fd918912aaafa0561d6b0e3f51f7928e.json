{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/textproxy\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\n *\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\n * on view nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is a readonly interface.\n *\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\n * inserted as a child of {@link module:engine/view/element~Element}.\n *\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\n * an instance of this class by your own.\n */\n\nvar TextProxy = /*#__PURE__*/function () {\n  /**\n   * Creates a text proxy.\n   *\n   * @protected\n   * @param {module:engine/view/text~Text} textNode Text node which part is represented by this text proxy.\n   * @param {Number} offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\n   * from which the text proxy starts.\n   * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n   * @constructor\n   */\n  function TextProxy(textNode, offsetInText, length) {\n    _classCallCheck(this, TextProxy);\n\n    /**\n     * Reference to the {@link module:engine/view/text~Text} element which TextProxy is a substring.\n     *\n     * @readonly\n     * @member {module:engine/view/text~Text} module:engine/view/textproxy~TextProxy#textNode\n     */\n    this.textNode = textNode;\n\n    if (offsetInText < 0 || offsetInText > textNode.data.length) {\n      /**\n       * Given offsetInText value is incorrect.\n       *\n       * @error view-textproxy-wrong-offsetintext\n       */\n      throw new CKEditorError('view-textproxy-wrong-offsetintext', this);\n    }\n\n    if (length < 0 || offsetInText + length > textNode.data.length) {\n      /**\n       * Given length value is incorrect.\n       *\n       * @error view-textproxy-wrong-length\n       */\n      throw new CKEditorError('view-textproxy-wrong-length', this);\n    }\n    /**\n     * Text data represented by this text proxy.\n     *\n     * @readonly\n     * @member {String} module:engine/view/textproxy~TextProxy#data\n     */\n\n\n    this.data = textNode.data.substring(offsetInText, offsetInText + length);\n    /**\n     * Offset in the `textNode` where this `TextProxy` instance starts.\n     *\n     * @readonly\n     * @member {Number} module:engine/view/textproxy~TextProxy#offsetInText\n     */\n\n    this.offsetInText = offsetInText;\n  }\n  /**\n   * Offset size of this node.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  _createClass(TextProxy, [{\n    key: \"is\",\n\n    /**\n     * Checks whether this object is of the given type.\n     *\n     *\t\ttextProxy.is( '$textProxy' ); // -> true\n     *\t\ttextProxy.is( 'view:$textProxy' ); // -> true\n     *\n     *\t\ttextProxy.is( 'model:$textProxy' ); // -> false\n     *\t\ttextProxy.is( 'element' ); // -> false\n     *\t\ttextProxy.is( 'range' ); // -> false\n     *\n     * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n     *\n     * **Note:** Until version 20.0.0 this method wasn't accepting `'$textProxy'` type. The legacy `'textProxy'` type is still\n     * accepted for backward compatibility.\n     *\n     * @param {String} type Type to check.\n     * @returns {Boolean}\n     */\n    value: function is(type) {\n      return type === '$textProxy' || type === 'view:$textProxy' || // This are legacy values kept for backward compatibility.\n      type === 'textProxy' || type === 'view:textProxy';\n    }\n    /**\n     * Returns ancestors array of this text proxy.\n     *\n     * @param {Object} options Options object.\n     * @param {Boolean} [options.includeSelf=false] When set to `true` {#textNode} will be also included in parent's array.\n     * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to\n     * root element, otherwise root element will be the first item in the array.\n     * @returns {Array} Array with ancestors.\n     */\n\n  }, {\n    key: \"getAncestors\",\n    value: function getAncestors() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        includeSelf: false,\n        parentFirst: false\n      };\n      var ancestors = [];\n      var parent = options.includeSelf ? this.textNode : this.parent;\n\n      while (parent !== null) {\n        ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n        parent = parent.parent;\n      }\n\n      return ancestors;\n    } // @if CK_DEBUG_ENGINE // toString() {\n    // @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n    // @if CK_DEBUG_ENGINE // }\n    // @if CK_DEBUG_ENGINE // log() {\n    // @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewTextProxy: ' + this );\n    // @if CK_DEBUG_ENGINE // }\n    // @if CK_DEBUG_ENGINE // logExtended() {\n    // @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewTextProxy: ' + this );\n    // @if CK_DEBUG_ENGINE // }\n\n  }, {\n    key: \"offsetSize\",\n    get: function get() {\n      return this.data.length;\n    }\n    /**\n     * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\n     * (`true`) or the whole text node (`false`).\n     *\n     * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\n     * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n     * text node size.\n     *\n     * @readonly\n     * @type {Boolean}\n     */\n\n  }, {\n    key: \"isPartial\",\n    get: function get() {\n      return this.data.length !== this.textNode.data.length;\n    }\n    /**\n     * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n     *\n     * @readonly\n     * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return this.textNode.parent;\n    }\n    /**\n     * Root of this text proxy, which is same as root of text node represented by this text proxy.\n     *\n     * @readonly\n     * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n     */\n\n  }, {\n    key: \"root\",\n    get: function get() {\n      return this.textNode.root;\n    }\n    /**\n     * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n     *\n     * @readonly\n     * @type {module:engine/view/document~Document|null}\n     */\n\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.textNode.document;\n    }\n  }]);\n\n  return TextProxy;\n}();\n\nexport { TextProxy as default };","map":null,"metadata":{},"sourceType":"module"}