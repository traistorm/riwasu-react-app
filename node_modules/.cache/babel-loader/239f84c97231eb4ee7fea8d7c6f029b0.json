{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, ReactChildren } from '../utils';\nimport StepItem from './StepItem';\nvar Steps = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'steps' : _props$classPrefix,\n      className = props.className,\n      children = props.children,\n      vertical = props.vertical,\n      small = props.small,\n      _props$current = props.current,\n      current = _props$current === void 0 ? 0 : _props$current,\n      _props$currentStatus = props.currentStatus,\n      currentStatus = _props$currentStatus === void 0 ? 'process' : _props$currentStatus,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"classPrefix\", \"className\", \"children\", \"vertical\", \"small\", \"current\", \"currentStatus\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix,\n      withClassPrefix = _useClassNames.withClassPrefix;\n\n  var horizontal = !vertical;\n  var classes = merge(className, withClassPrefix({\n    small: small,\n    vertical: vertical,\n    horizontal: !vertical\n  }));\n  var count = React.Children.count(children);\n  var items = ReactChildren.mapCloneElement(children, function (item, index) {\n    var itemStyles = {\n      flexBasis: index < count - 1 ? 100 / (count - 1) + \"%\" : undefined,\n      maxWidth: index === count - 1 ? 100 / count + \"%\" : undefined\n    };\n\n    var itemProps = _extends({\n      stepNumber: index + 1,\n      status: 'wait',\n      style: horizontal ? itemStyles : undefined\n    }, item.props); // fix tail color\n\n\n    if (currentStatus === 'error' && index === current - 1) {\n      itemProps.className = prefix('next-error');\n    }\n\n    if (!item.props.status) {\n      if (index === current) {\n        itemProps.status = currentStatus;\n        itemProps.className = merge(itemProps.className, prefix('item-active'));\n      } else if (index < current) {\n        itemProps.status = 'finish';\n      }\n    }\n\n    return itemProps;\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), items);\n});\nSteps.Item = StepItem;\nSteps.displayName = 'Steps';\nSteps.propTypes = {\n  classPrefix: PropTypes.string,\n  vertical: PropTypes.bool,\n  small: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  current: PropTypes.number,\n  currentStatus: PropTypes.oneOf(['finish', 'wait', 'process', 'error'])\n};\nexport default Steps;","map":null,"metadata":{},"sourceType":"module"}