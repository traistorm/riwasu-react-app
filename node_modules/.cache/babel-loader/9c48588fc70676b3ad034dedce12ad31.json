{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport mapValues from 'lodash/mapValues';\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport IconCalendar from '@rsuite/icons/legacy/Calendar';\nimport IconClockO from '@rsuite/icons/legacy/ClockO';\nimport { Calendar, CalendarState } from '../Calendar';\nimport useCalendarDate from '../Calendar/useCalendarDate';\nimport Toolbar from './Toolbar';\nimport { composeFunctions, createChainedFunction, DateUtils, mergeRefs, useClassNames, useControlled, useCustom } from '../utils';\nimport { PickerOverlay, pickerPropTypes, PickerToggle, PickerToggleTrigger, pickTriggerPropKeys, omitTriggerPropKeys, usePickerClassName, usePublicMethods, useToggleKeyDownEvent } from '../Picker';\nimport { useCalendarState } from './utils';\nvar DatePicker = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      className = props.className,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,\n      calendarDefaultDate = props.calendarDefaultDate,\n      _props$cleanable = props.cleanable,\n      cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      _props$format = props.format,\n      formatStr = _props$format === void 0 ? 'yyyy-MM-dd' : _props$format,\n      isoWeek = props.isoWeek,\n      _props$limitEndYear = props.limitEndYear,\n      limitEndYear = _props$limitEndYear === void 0 ? 1000 : _props$limitEndYear,\n      overrideLocale = props.locale,\n      menuClassName = props.menuClassName,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n      oneTap = props.oneTap,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      ranges = props.ranges,\n      valueProp = props.value,\n      showMeridian = props.showMeridian,\n      showWeekNumbers = props.showWeekNumbers,\n      style = props.style,\n      toggleAs = props.toggleAs,\n      caretAsProp = props.caretAs,\n      disabledDateProp = props.disabledDate,\n      renderValue = props.renderValue,\n      onChange = props.onChange,\n      onChangeCalendarDate = props.onChangeCalendarDate,\n      onClean = props.onClean,\n      onClose = props.onClose,\n      onEntered = props.onEntered,\n      onExited = props.onExited,\n      onNextMonth = props.onNextMonth,\n      onOk = props.onOk,\n      onOpen = props.onOpen,\n      onPrevMonth = props.onPrevMonth,\n      onSelect = props.onSelect,\n      onToggleMonthDropdown = props.onToggleMonthDropdown,\n      onToggleTimeDropdown = props.onToggleTimeDropdown,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"className\", \"classPrefix\", \"calendarDefaultDate\", \"cleanable\", \"defaultValue\", \"disabled\", \"format\", \"isoWeek\", \"limitEndYear\", \"locale\", \"menuClassName\", \"appearance\", \"placement\", \"oneTap\", \"placeholder\", \"ranges\", \"value\", \"showMeridian\", \"showWeekNumbers\", \"style\", \"toggleAs\", \"caretAs\", \"disabledDate\", \"renderValue\", \"onChange\", \"onChangeCalendarDate\", \"onClean\", \"onClose\", \"onEntered\", \"onExited\", \"onNextMonth\", \"onOk\", \"onOpen\", \"onPrevMonth\", \"onSelect\", \"onToggleMonthDropdown\", \"onToggleTimeDropdown\"]);\n\n  var _useCustom = useCustom('DatePicker', overrideLocale),\n      locale = _useCustom.locale,\n      formatDate = _useCustom.formatDate,\n      parseDate = _useCustom.parseDate;\n\n  var _useClassNames = useClassNames(classPrefix),\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix;\n\n  var _useControlled = useControlled(valueProp, defaultValue),\n      value = _useControlled[0],\n      setValue = _useControlled[1];\n\n  var _useCalendarDate = useCalendarDate(valueProp, calendarDefaultDate),\n      calendarDate = _useCalendarDate.calendarDate,\n      setCalendarDate = _useCalendarDate.setCalendarDate;\n\n  var _useState = useState(),\n      inputState = _useState[0],\n      setInputState = _useState[1];\n\n  var _useCalendarState = useCalendarState(),\n      calendarState = _useCalendarState.calendarState,\n      reset = _useCalendarState.reset,\n      openMonth = _useCalendarState.openMonth,\n      openTime = _useCalendarState.openTime;\n\n  var _useState2 = useState(false),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var triggerRef = useRef(null);\n  var rootRef = useRef(null);\n  var targetRef = useRef(null);\n  var overlayRef = useRef(null);\n  usePublicMethods(ref, {\n    rootRef: rootRef,\n    triggerRef: triggerRef,\n    overlayRef: overlayRef,\n    targetRef: targetRef\n  });\n  /**\n   * Switch to the callback triggered after the next month.\n   */\n\n  var handleMoveForward = useCallback(function (nextPageDate) {\n    setCalendarDate(nextPageDate);\n    onNextMonth === null || onNextMonth === void 0 ? void 0 : onNextMonth(nextPageDate);\n    onChangeCalendarDate === null || onChangeCalendarDate === void 0 ? void 0 : onChangeCalendarDate(nextPageDate);\n  }, [onChangeCalendarDate, onNextMonth, setCalendarDate]);\n  /**\n   * Switch to the callback triggered after the previous month.\n   */\n\n  var handleMoveBackward = useCallback(function (nextPageDate) {\n    setCalendarDate(nextPageDate);\n    onPrevMonth === null || onPrevMonth === void 0 ? void 0 : onPrevMonth(nextPageDate);\n    onChangeCalendarDate === null || onChangeCalendarDate === void 0 ? void 0 : onChangeCalendarDate(nextPageDate);\n  }, [onChangeCalendarDate, onPrevMonth, setCalendarDate]);\n  /**\n   * The callback triggered when the date changes.\n   */\n\n  var handleDateChange = useCallback(function (nextValue, event) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nextValue, event);\n    onChangeCalendarDate === null || onChangeCalendarDate === void 0 ? void 0 : onChangeCalendarDate(nextValue, event);\n  }, [onChangeCalendarDate, onSelect]);\n  /**\n   *  A callback triggered when the time on the calendar changes.\n   */\n\n  var handleChangePageTime = useCallback(function (nextPageTime) {\n    setCalendarDate(nextPageTime);\n    handleDateChange(nextPageTime);\n  }, [handleDateChange, setCalendarDate]);\n  var handleClose = useCallback(function () {\n    var _triggerRef$current, _triggerRef$current$c;\n\n    (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : (_triggerRef$current$c = _triggerRef$current.close) === null || _triggerRef$current$c === void 0 ? void 0 : _triggerRef$current$c.call(_triggerRef$current);\n  }, []);\n  /**\n   * The callback triggered when PM/AM is switched.\n   */\n\n  var handleToggleMeridian = useCallback(function () {\n    var hours = DateUtils.getHours(calendarDate);\n    var nextHours = hours >= 12 ? hours - 12 : hours + 12;\n    var nextDate = DateUtils.setHours(calendarDate, nextHours);\n    setCalendarDate(nextDate);\n  }, [calendarDate, setCalendarDate]);\n  var updateValue = useCallback(function (event, nextPageDate, closeOverlay) {\n    if (closeOverlay === void 0) {\n      closeOverlay = true;\n    }\n\n    var nextValue = typeof nextPageDate !== 'undefined' ? nextPageDate : calendarDate;\n    setCalendarDate(nextValue || new Date());\n    setValue(nextValue);\n\n    if (nextValue !== value) {\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    } // `closeOverlay` default value is `true`\n\n\n    if (closeOverlay !== false) {\n      handleClose();\n    }\n  }, [handleClose, onChange, calendarDate, setCalendarDate, setValue, value]);\n  /**\n   * The callback triggered after the date in the shortcut area is clicked.\n   */\n\n  var handleShortcutPageDate = useCallback(function (value, closeOverlay, event) {\n    updateValue(event, value, closeOverlay);\n    handleDateChange(value, event);\n  }, [handleDateChange, updateValue]);\n  /**\n   * The callback triggered after clicking the OK button.\n   */\n\n  var handleOK = useCallback(function (event) {\n    updateValue(event);\n    onOk === null || onOk === void 0 ? void 0 : onOk(calendarDate, event);\n  }, [updateValue, onOk, calendarDate]);\n  /**\n   * Toggle month selection panel\n   */\n\n  var handleMonthDropdown = useCallback(function () {\n    if (calendarState === CalendarState.DROP_MONTH) {\n      reset();\n    } else {\n      openMonth();\n    }\n\n    onToggleMonthDropdown === null || onToggleMonthDropdown === void 0 ? void 0 : onToggleMonthDropdown(calendarState !== CalendarState.DROP_MONTH);\n  }, [calendarState, onToggleMonthDropdown, openMonth, reset]);\n  /**\n   * Switch time selection panel\n   */\n\n  var handleTimeDropdown = useCallback(function () {\n    if (calendarState === CalendarState.DROP_TIME) {\n      reset();\n    } else {\n      openTime();\n    }\n\n    onToggleTimeDropdown === null || onToggleTimeDropdown === void 0 ? void 0 : onToggleTimeDropdown(calendarState !== CalendarState.DROP_TIME);\n  }, [calendarState, onToggleTimeDropdown, openTime, reset]);\n  /**\n   * Callback after clicking the clear button.\n   */\n\n  var handleClean = useCallback(function (event) {\n    setCalendarDate(new Date());\n    updateValue(event, null);\n  }, [setCalendarDate, updateValue]);\n  /**\n   * Handle keyboard events.\n   */\n\n  var onPickerKeyDown = useToggleKeyDownEvent(_extends({\n    triggerRef: triggerRef,\n    targetRef: targetRef,\n    active: active,\n    onExit: handleClean\n  }, rest));\n  /**\n   * Callback after the date is selected.\n   */\n\n  var handleSelect = useCallback(function (nextValue, event, updatableValue) {\n    if (updatableValue === void 0) {\n      updatableValue = true;\n    }\n\n    setCalendarDate( // Determine whether the current value contains time, if not, use calendarDate.\n    DateUtils.shouldTime(formatStr) ? nextValue : composeFunctions(function (d) {\n      return DateUtils.setHours(d, DateUtils.getHours(calendarDate));\n    }, function (d) {\n      return DateUtils.setMinutes(d, DateUtils.getMinutes(calendarDate));\n    }, function (d) {\n      return DateUtils.setSeconds(d, DateUtils.getSeconds(calendarDate));\n    })(nextValue));\n    handleDateChange(nextValue);\n\n    if (oneTap && updatableValue) {\n      updateValue(event, nextValue);\n    }\n  }, [formatStr, handleDateChange, oneTap, calendarDate, setCalendarDate, updateValue]);\n  /**\n   *  A callback triggered when the date on the calendar changes.\n   */\n\n  var handleChangePageDate = useCallback(function (nextPageDate, event) {\n    setCalendarDate(nextPageDate);\n    reset();\n    handleDateChange(nextPageDate); // Show only the calendar month panel. formatStr = 'yyyy-MM'\n\n    var onlyShowMonth = DateUtils.shouldMonth(formatStr) && !DateUtils.shouldDate(formatStr);\n\n    if (oneTap && onlyShowMonth) {\n      updateValue(event, nextPageDate);\n    }\n  }, [formatStr, handleDateChange, oneTap, reset, setCalendarDate, updateValue]);\n  var disabledDate = useCallback(function (date) {\n    var _disabledDateProp;\n\n    return (_disabledDateProp = disabledDateProp === null || disabledDateProp === void 0 ? void 0 : disabledDateProp(date)) !== null && _disabledDateProp !== void 0 ? _disabledDateProp : false;\n  }, [disabledDateProp]);\n  /**\n   * Callback after the input box value is changed.\n   */\n\n  var handleInputChange = useCallback(function (value, event) {\n    setInputState('Typing'); // isMatch('01/11/2020', 'MM/dd/yyyy') ==> true\n    // isMatch('2020-11-01', 'MM/dd/yyyy') ==> false\n\n    if (!DateUtils.isMatch(value, formatStr, {\n      locale: locale.dateLocale\n    })) {\n      setInputState('Error');\n      return;\n    }\n\n    var date = parseDate(value, formatStr); // If only the time is included in the characters, it will default to today.\n\n    if (DateUtils.shouldOnlyTime(formatStr)) {\n      date = new Date(DateUtils.format(new Date(), 'yyyy-MM-dd') + \" \" + value);\n    }\n\n    if (!DateUtils.isValid(date)) {\n      setInputState('Error');\n      return;\n    }\n\n    if (disabledDate(date)) {\n      setInputState('Error');\n      return;\n    }\n\n    handleSelect(date, event, false);\n  }, [formatStr, locale, parseDate, disabledDate, handleSelect]);\n  /**\n   * The callback after the enter key is triggered on the input\n   */\n\n  var handleInputPressEnd = useCallback(function (event) {\n    if (inputState === 'Typing') {\n      updateValue(event, calendarDate);\n    }\n\n    setInputState('Initial');\n  }, [inputState, calendarDate, updateValue]);\n  var handleEntered = useCallback(function () {\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n    setActive(true);\n  }, [onOpen]);\n  var handleExited = useCallback(function () {\n    onClose === null || onClose === void 0 ? void 0 : onClose();\n    reset();\n    setActive(false);\n  }, [onClose, reset]); // Check whether the time is within the time range of the shortcut option in the toolbar.\n\n  var disabledToolbarHandle = useCallback(function (date) {\n    var _disabledDateProp2;\n\n    var allowDate = (_disabledDateProp2 = disabledDateProp === null || disabledDateProp === void 0 ? void 0 : disabledDateProp(date)) !== null && _disabledDateProp2 !== void 0 ? _disabledDateProp2 : false;\n    var allowTime = DateUtils.disabledTime(props, date);\n    return allowDate || allowTime;\n  }, [disabledDateProp, props]);\n  var calendarProps = useMemo(function () {\n    return mapValues(pick(props, DateUtils.calendarOnlyProps), function (disabledOrHiddenTimeFunc) {\n      return function (next, date) {\n        var _disabledOrHiddenTime;\n\n        return (_disabledOrHiddenTime = disabledOrHiddenTimeFunc === null || disabledOrHiddenTimeFunc === void 0 ? void 0 : disabledOrHiddenTimeFunc(next, date)) !== null && _disabledOrHiddenTime !== void 0 ? _disabledOrHiddenTime : false;\n      };\n    });\n  }, [props]);\n  var inSameMonth = useCallback(function (date) {\n    return DateUtils.isSameMonth(date, calendarDate);\n  }, [calendarDate]);\n  var calendar = /*#__PURE__*/React.createElement(Calendar, _extends({}, calendarProps, {\n    locale: locale,\n    showWeekNumbers: showWeekNumbers,\n    showMeridian: showMeridian,\n    disabledDate: disabledDate,\n    limitEndYear: limitEndYear,\n    format: formatStr,\n    isoWeek: isoWeek,\n    inSameMonth: inSameMonth,\n    calendarState: calendarState,\n    calendarDate: calendarDate,\n    onMoveForward: handleMoveForward,\n    onMoveBackward: handleMoveBackward,\n    onSelect: handleSelect,\n    onToggleMonthDropdown: handleMonthDropdown,\n    onToggleTimeDropdown: handleTimeDropdown,\n    onChangePageDate: handleChangePageDate,\n    onChangePageTime: handleChangePageTime,\n    onToggleMeridian: handleToggleMeridian\n  }));\n\n  var renderDropdownMenu = function renderDropdownMenu(positionProps, speakerRef) {\n    var left = positionProps.left,\n        top = positionProps.top,\n        className = positionProps.className;\n    var classes = merge(menuClassName, className, prefix('date-menu'));\n    var styles = {\n      left: left,\n      top: top\n    };\n    return /*#__PURE__*/React.createElement(PickerOverlay, {\n      role: \"dialog\",\n      className: classes,\n      ref: mergeRefs(overlayRef, speakerRef),\n      style: styles,\n      target: triggerRef\n    }, calendar, /*#__PURE__*/React.createElement(Toolbar, {\n      locale: locale,\n      ranges: ranges,\n      calendarDate: calendarDate,\n      disabledOkBtn: disabledToolbarHandle,\n      disabledShortcut: disabledToolbarHandle,\n      onClickShortcut: handleShortcutPageDate,\n      onOk: handleOK,\n      hideOkBtn: oneTap\n    }));\n  };\n\n  var hasValue = !!value;\n\n  var _usePickerClassName = usePickerClassName(_extends({}, props, {\n    classPrefix: classPrefix,\n    name: 'date',\n    appearance: appearance,\n    hasValue: hasValue,\n    cleanable: cleanable\n  })),\n      classes = _usePickerClassName[0],\n      usedClassNamePropKeys = _usePickerClassName[1];\n\n  var renderDate = useCallback(function () {\n    var _renderValue;\n\n    if (!value) {\n      return placeholder || formatStr;\n    }\n\n    return (_renderValue = renderValue === null || renderValue === void 0 ? void 0 : renderValue(value, formatStr)) !== null && _renderValue !== void 0 ? _renderValue : formatDate(value, formatStr);\n  }, [formatStr, formatDate, placeholder, renderValue, value]);\n  var caretAs = useMemo(function () {\n    return caretAsProp || (DateUtils.shouldOnlyTime(formatStr) ? IconClockO : IconCalendar);\n  }, [caretAsProp, formatStr]);\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    trigger: \"active\",\n    pickerProps: pick(props, pickTriggerPropKeys),\n    ref: triggerRef,\n    placement: placement,\n    onEntered: createChainedFunction(handleEntered, onEntered),\n    onExited: createChainedFunction(handleExited, onExited),\n    speaker: renderDropdownMenu\n  }, /*#__PURE__*/React.createElement(Component, {\n    className: merge(className, classes),\n    style: style,\n    ref: rootRef\n  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys, DateUtils.calendarOnlyProps)), {\n    className: prefix({\n      error: inputState === 'Error'\n    }),\n    as: toggleAs,\n    ref: targetRef,\n    appearance: appearance,\n    input: true,\n    inputValue: value ? formatDate(value, formatStr) : '',\n    inputPlaceholder: typeof placeholder === 'string' && placeholder ? placeholder : formatStr,\n    inputMask: DateUtils.getDateMask(formatStr),\n    onInputChange: handleInputChange,\n    onInputBlur: handleInputPressEnd,\n    onInputPressEnter: handleInputPressEnd,\n    onKeyDown: onPickerKeyDown,\n    onClean: createChainedFunction(handleClean, onClean),\n    cleanable: cleanable && !disabled,\n    hasValue: hasValue,\n    active: active,\n    placement: placement,\n    disabled: disabled,\n    caretAs: caretAs,\n    \"aria-haspopup\": \"dialog\"\n  }), renderDate())));\n});\nDatePicker.displayName = 'DatePicker';\nDatePicker.propTypes = _extends({}, pickerPropTypes, {\n  calendarDefaultDate: PropTypes.instanceOf(Date),\n  defaultValue: PropTypes.instanceOf(Date),\n  disabledDate: PropTypes.func,\n  disabledHours: PropTypes.func,\n  disabledMinutes: PropTypes.func,\n  disabledSeconds: PropTypes.func,\n  format: PropTypes.string,\n  hideHours: PropTypes.func,\n  hideMinutes: PropTypes.func,\n  hideSeconds: PropTypes.func,\n  isoWeek: PropTypes.bool,\n  limitEndYear: PropTypes.number,\n  onChange: PropTypes.func,\n  onChangeCalendarDate: PropTypes.func,\n  onNextMonth: PropTypes.func,\n  onOk: PropTypes.func,\n  onPrevMonth: PropTypes.func,\n  onSelect: PropTypes.func,\n  onToggleMonthDropdown: PropTypes.func,\n  onToggleTimeDropdown: PropTypes.func,\n  oneTap: PropTypes.bool,\n  panelContainerRef: PropTypes.any,\n  ranges: PropTypes.array,\n  showMeridian: PropTypes.bool,\n  showWeekNumbers: PropTypes.bool,\n  value: PropTypes.instanceOf(Date)\n});\nexport default DatePicker;","map":null,"metadata":{},"sourceType":"module"}