{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\n(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error('SUNEDITOR_MODULES a window with a document');\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  }\n})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\n  var fileBrowser = {\n    name: 'fileBrowser',\n    _xmlHttp: null,\n    _loading: null,\n\n    /**\n     * @description Constructor\n     * @param {Object} core Core object \n     */\n    add: function add(core) {\n      var context = core.context;\n      context.fileBrowser = {\n        _closeSignal: false,\n        area: null,\n        header: null,\n        tagArea: null,\n        body: null,\n        list: null,\n        tagElements: null,\n        items: [],\n        selectedTags: [],\n        selectorHandler: null,\n        contextPlugin: '',\n        columnSize: 4\n      };\n      /** fileBrowser */\n\n      var browser_div = core.util.createElement('DIV');\n      browser_div.className = 'se-file-browser sun-editor-common';\n      var back = core.util.createElement('DIV');\n      back.className = 'se-file-browser-back';\n      var content = core.util.createElement('DIV');\n      content.className = 'se-file-browser-inner';\n      content.innerHTML = this.set_browser(core);\n      browser_div.appendChild(back);\n      browser_div.appendChild(content);\n      this._loading = browser_div.querySelector('.se-loading-box');\n      context.fileBrowser.area = browser_div;\n      context.fileBrowser.header = content.querySelector('.se-file-browser-header');\n      context.fileBrowser.titleArea = content.querySelector('.se-file-browser-title');\n      context.fileBrowser.tagArea = content.querySelector('.se-file-browser-tags');\n      context.fileBrowser.body = content.querySelector('.se-file-browser-body');\n      context.fileBrowser.list = content.querySelector('.se-file-browser-list');\n      /** add event listeners */\n\n      context.fileBrowser.tagArea.addEventListener('click', this.onClickTag.bind(core));\n      context.fileBrowser.list.addEventListener('click', this.onClickFile.bind(core));\n      content.addEventListener('mousedown', this._onMouseDown_browser.bind(core));\n      content.addEventListener('click', this._onClick_browser.bind(core));\n      /** append html */\n\n      context.element.relative.appendChild(browser_div);\n      /** empty memory */\n\n      browser_div = null, back = null, content = null;\n    },\n    set_browser: function set_browser(core) {\n      var lang = core.lang;\n      return '<div class=\"se-file-browser-content\">' + '<div class=\"se-file-browser-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-file-browser-close\" class=\"close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + core.icons.cancel + '</button>' + '<span class=\"se-file-browser-title\"></span>' + '<div class=\"se-file-browser-tags\"></div>' + '</div>' + '<div class=\"se-file-browser-body\">' + '<div class=\"se-loading-box sun-editor-common\"><div class=\"se-loading-effect\"></div></div>' + '<div class=\"se-file-browser-list\"></div>' + '</div>' + '</div>';\n    },\n\n    /**\n     * @description Event to control the behavior of closing the browser\n     * @param {MouseEvent} e Event object\n     * @private\n     */\n    _onMouseDown_browser: function _onMouseDown_browser(e) {\n      if (/se-file-browser-inner/.test(e.target.className)) {\n        this.context.fileBrowser._closeSignal = true;\n      } else {\n        this.context.fileBrowser._closeSignal = false;\n      }\n    },\n\n    /**\n     * @description Event to close the window when the outside area of the browser or close button is click\n     * @param {MouseEvent} e Event object\n     * @private\n     */\n    _onClick_browser: function _onClick_browser(e) {\n      e.stopPropagation();\n\n      if (/close/.test(e.target.getAttribute('data-command')) || this.context.fileBrowser._closeSignal) {\n        this.plugins.fileBrowser.close.call(this);\n      }\n    },\n\n    /**\n     * @description Open a file browser plugin\n     * @param {String} pluginName Plugin name using the file browser\n     * @param {Function|null} selectorHandler When the function comes as an argument value, it substitutes \"context.selectorHandler\".\n     */\n    open: function open(pluginName, selectorHandler) {\n      if (this.plugins.fileBrowser._bindClose) {\n        this._d.removeEventListener('keydown', this.plugins.fileBrowser._bindClose);\n\n        this.plugins.fileBrowser._bindClose = null;\n      }\n\n      this.plugins.fileBrowser._bindClose = function (e) {\n        if (!/27/.test(e.keyCode)) return;\n        this.plugins.fileBrowser.close.call(this);\n      }.bind(this);\n\n      this._d.addEventListener('keydown', this.plugins.fileBrowser._bindClose);\n\n      var fileBrowserContext = this.context.fileBrowser;\n      fileBrowserContext.contextPlugin = pluginName;\n      fileBrowserContext.selectorHandler = selectorHandler;\n      var pluginContext = this.context[pluginName];\n      var listClassName = pluginContext.listClass;\n\n      if (!this.util.hasClass(fileBrowserContext.list, listClassName)) {\n        fileBrowserContext.list.className = 'se-file-browser-list ' + listClassName;\n      }\n\n      if (this.options.popupDisplay === 'full') {\n        fileBrowserContext.area.style.position = 'fixed';\n      } else {\n        fileBrowserContext.area.style.position = 'absolute';\n      }\n\n      fileBrowserContext.titleArea.textContent = pluginContext.title;\n      fileBrowserContext.area.style.display = 'block';\n\n      this.plugins.fileBrowser._drawFileList.call(this, this.context[pluginName].url, this.context[pluginName].header);\n    },\n    _bindClose: null,\n\n    /**\n     * @description Close a fileBrowser plugin\n     * The plugin's \"init\" method is called.\n     */\n    close: function close() {\n      var fileBrowserPlugin = this.plugins.fileBrowser;\n\n      if (fileBrowserPlugin._xmlHttp) {\n        fileBrowserPlugin._xmlHttp.abort();\n      }\n\n      if (fileBrowserPlugin._bindClose) {\n        this._d.removeEventListener('keydown', fileBrowserPlugin._bindClose);\n\n        fileBrowserPlugin._bindClose = null;\n      }\n\n      var fileBrowserContext = this.context.fileBrowser;\n      fileBrowserContext.area.style.display = 'none';\n      fileBrowserContext.selectorHandler = null;\n      fileBrowserContext.selectedTags = [];\n      fileBrowserContext.items = [];\n      fileBrowserContext.list.innerHTML = fileBrowserContext.tagArea.innerHTML = fileBrowserContext.titleArea.textContent = '';\n      if (typeof this.plugins[fileBrowserContext.contextPlugin].init === 'function') this.plugins[fileBrowserContext.contextPlugin].init.call(this);\n      fileBrowserContext.contextPlugin = '';\n    },\n\n    /**\n     * @description Show file browser loading box\n     */\n    showBrowserLoading: function showBrowserLoading() {\n      this._loading.style.display = 'block';\n    },\n\n    /**\n     * @description Close file browser loading box\n     */\n    closeBrowserLoading: function closeBrowserLoading() {\n      this._loading.style.display = 'none';\n    },\n    _drawFileList: function _drawFileList(url, browserHeader) {\n      var fileBrowserPlugin = this.plugins.fileBrowser;\n      var xmlHttp = fileBrowserPlugin._xmlHttp = this.util.getXMLHttpRequest();\n      xmlHttp.onreadystatechange = fileBrowserPlugin._callBackGet.bind(this, xmlHttp);\n      xmlHttp.open('get', url, true);\n\n      if (browserHeader !== null && typeof browserHeader === 'object' && this._w.Object.keys(browserHeader).length > 0) {\n        for (var key in browserHeader) {\n          xmlHttp.setRequestHeader(key, browserHeader[key]);\n        }\n      }\n\n      xmlHttp.send(null);\n      this.plugins.fileBrowser.showBrowserLoading();\n    },\n    _callBackGet: function _callBackGet(xmlHttp) {\n      if (xmlHttp.readyState === 4) {\n        this.plugins.fileBrowser._xmlHttp = null;\n\n        if (xmlHttp.status === 200) {\n          try {\n            var res = JSON.parse(xmlHttp.responseText);\n\n            if (res.result.length > 0) {\n              this.plugins.fileBrowser._drawListItem.call(this, res.result, true);\n            } else if (res.nullMessage) {\n              this.context.fileBrowser.list.innerHTML = res.nullMessage;\n            }\n          } catch (e) {\n            throw Error('[SUNEDITOR.fileBrowser.drawList.fail] cause : \"' + e.message + '\"');\n          } finally {\n            this.plugins.fileBrowser.closeBrowserLoading();\n            this.context.fileBrowser.body.style.maxHeight = this._w.innerHeight - this.context.fileBrowser.header.offsetHeight - 50 + 'px';\n          }\n        } else {\n          // exception\n          this.plugins.fileBrowser.closeBrowserLoading();\n\n          if (xmlHttp.status !== 0) {\n            var _res = !xmlHttp.responseText ? xmlHttp : JSON.parse(xmlHttp.responseText);\n\n            var err = '[SUNEDITOR.fileBrowser.get.serverException] status: ' + xmlHttp.status + ', response: ' + (_res.errorMessage || xmlHttp.responseText);\n            throw Error(err);\n          }\n        }\n      }\n    },\n    _drawListItem: function _drawListItem(items, update) {\n      var fileBrowserContext = this.context.fileBrowser;\n      var pluginContext = this.context[fileBrowserContext.contextPlugin];\n      var _tags = [];\n      var len = items.length;\n      var columnSize = pluginContext.columnSize || fileBrowserContext.columnSize;\n      var splitSize = columnSize <= 1 ? 1 : Math.round(len / columnSize) || 1;\n      var drawItemHandler = pluginContext.itemTemplateHandler;\n      var tagsHTML = '';\n      var listHTML = '<div class=\"se-file-item-column\">';\n      var columns = 1;\n\n      for (var i = 0, item, tags; i < len; i++) {\n        item = items[i];\n        tags = !item.tag ? [] : typeof item.tag === 'string' ? item.tag.split(',') : item.tag;\n        tags = item.tag = tags.map(function (v) {\n          return v.trim();\n        });\n        listHTML += drawItemHandler(item);\n\n        if ((i + 1) % splitSize === 0 && columns < columnSize && i + 1 < len) {\n          columns++;\n          listHTML += '</div><div class=\"se-file-item-column\">';\n        }\n\n        if (update && tags.length > 0) {\n          for (var t = 0, tLen = tags.length, tag; t < tLen; t++) {\n            tag = tags[t];\n\n            if (tag && _tags.indexOf(tag) === -1) {\n              _tags.push(tag);\n\n              tagsHTML += '<a title=\"' + tag + '\" aria-label=\"' + tag + '\">' + tag + '</a>';\n            }\n          }\n        }\n      }\n\n      listHTML += '</div>';\n      fileBrowserContext.list.innerHTML = listHTML;\n\n      if (update) {\n        fileBrowserContext.items = items;\n        fileBrowserContext.tagArea.innerHTML = tagsHTML;\n        fileBrowserContext.tagElements = fileBrowserContext.tagArea.querySelectorAll('A');\n      }\n    },\n    onClickTag: function onClickTag(e) {\n      var target = e.target;\n      if (!this.util.isAnchor(target)) return;\n      var tagName = target.textContent;\n      var fileBrowserPlugin = this.plugins.fileBrowser;\n      var fileBrowserContext = this.context.fileBrowser;\n      var selectTag = fileBrowserContext.tagArea.querySelector('a[title=\"' + tagName + '\"]');\n      var selectedTags = fileBrowserContext.selectedTags;\n      var sTagIndex = selectedTags.indexOf(tagName);\n\n      if (sTagIndex > -1) {\n        selectedTags.splice(sTagIndex, 1);\n        this.util.removeClass(selectTag, 'on');\n      } else {\n        selectedTags.push(tagName);\n        this.util.addClass(selectTag, 'on');\n      }\n\n      fileBrowserPlugin._drawListItem.call(this, selectedTags.length === 0 ? fileBrowserContext.items : fileBrowserContext.items.filter(function (item) {\n        return item.tag.some(function (tag) {\n          return selectedTags.indexOf(tag) > -1;\n        });\n      }), false);\n    },\n    onClickFile: function onClickFile(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var fileBrowserContext = this.context.fileBrowser;\n      var listEl = fileBrowserContext.list;\n      var target = e.target;\n      var command = null;\n      if (target === listEl) return;\n\n      while (listEl !== target.parentNode) {\n        command = target.getAttribute('data-command');\n        if (command) break;\n        target = target.parentNode;\n      }\n\n      if (!command) return;\n      var handler = fileBrowserContext.selectorHandler || this.context[fileBrowserContext.contextPlugin].selectorHandler;\n      this.plugins.fileBrowser.close.call(this);\n      handler(target);\n    }\n  };\n\n  if (typeof noGlobal === typeof undefined) {\n    if (!window.SUNEDITOR_MODULES) {\n      Object.defineProperty(window, 'SUNEDITOR_MODULES', {\n        enumerable: true,\n        writable: false,\n        configurable: false,\n        value: {}\n      });\n    }\n\n    Object.defineProperty(window.SUNEDITOR_MODULES, 'fileBrowser', {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: fileBrowser\n    });\n  }\n\n  return fileBrowser;\n});","map":null,"metadata":{},"sourceType":"script"}