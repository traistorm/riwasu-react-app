{"ast":null,"code":"import _objectSpread from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/adapters/simpleuploadadapter\n */\n\n/* globals XMLHttpRequest, FormData */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '../filerepository';\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The Simple upload adapter allows uploading images to an application running on your server using\n * the [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) API with a\n * minimal {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig editor configuration}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\tuploadUrl: 'http://example.com',\n *\t\t\t\t\theaders: {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See the {@glink features/images/image-upload/simple-upload-adapter \"Simple upload adapter\"} guide to learn how to\n * learn more about the feature (configuration, serverâ€“side requirements, etc.).\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar SimpleUploadAdapter = /*#__PURE__*/function (_Plugin) {\n  _inherits(SimpleUploadAdapter, _Plugin);\n\n  function SimpleUploadAdapter() {\n    _classCallCheck(this, SimpleUploadAdapter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SimpleUploadAdapter).apply(this, arguments));\n  }\n\n  _createClass(SimpleUploadAdapter, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      var options = this.editor.config.get('simpleUpload');\n\n      if (!options) {\n        return;\n      }\n\n      if (!options.uploadUrl) {\n        /**\n         * The {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#uploadUrl `config.simpleUpload.uploadUrl`}\n         * configuration required by the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter `SimpleUploadAdapter`}\n         * is missing. Make sure the correct URL is specified for the image upload to work properly.\n         *\n         * @error simple-upload-adapter-missing-uploadurl\n         */\n        logWarning('simple-upload-adapter-missing-uploadurl');\n        return;\n      }\n\n      this.editor.plugins.get(FileRepository).createUploadAdapter = function (loader) {\n        return new Adapter(loader, options);\n      };\n    }\n  }], [{\n    key: \"requires\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return [FileRepository];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"pluginName\",\n    get: function get() {\n      return 'SimpleUploadAdapter';\n    }\n  }]);\n\n  return SimpleUploadAdapter;\n}(Plugin);\n/**\n * Upload adapter.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\n\n\nexport { SimpleUploadAdapter as default };\n\nvar Adapter = /*#__PURE__*/function () {\n  /**\n   * Creates a new adapter instance.\n   *\n   * @param {module:upload/filerepository~FileLoader} loader\n   * @param {module:upload/adapters/simpleuploadadapter~SimpleUploadConfig} options\n   */\n  function Adapter(loader, options) {\n    _classCallCheck(this, Adapter);\n\n    /**\n     * FileLoader instance to use during the upload.\n     *\n     * @member {module:upload/filerepository~FileLoader} #loader\n     */\n    this.loader = loader;\n    /**\n     * The configuration of the adapter.\n     *\n     * @member {module:upload/adapters/simpleuploadadapter~SimpleUploadConfig} #options\n     */\n\n    this.options = options;\n  }\n  /**\n   * Starts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#upload\n   * @returns {Promise}\n   */\n\n\n  _createClass(Adapter, [{\n    key: \"upload\",\n    value: function upload() {\n      var _this = this;\n\n      return this.loader.file.then(function (file) {\n        return new Promise(function (resolve, reject) {\n          _this._initRequest();\n\n          _this._initListeners(resolve, reject, file);\n\n          _this._sendRequest(file);\n        });\n      });\n    }\n    /**\n     * Aborts the upload process.\n     *\n     * @see module:upload/filerepository~UploadAdapter#abort\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      if (this.xhr) {\n        this.xhr.abort();\n      }\n    }\n    /**\n     * Initializes the `XMLHttpRequest` object using the URL specified as\n     * {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#uploadUrl `simpleUpload.uploadUrl`} in the editor's\n     * configuration.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_initRequest\",\n    value: function _initRequest() {\n      var xhr = this.xhr = new XMLHttpRequest();\n      xhr.open('POST', this.options.uploadUrl, true);\n      xhr.responseType = 'json';\n    }\n    /**\n     * Initializes XMLHttpRequest listeners\n     *\n     * @private\n     * @param {Function} resolve Callback function to be called when the request is successful.\n     * @param {Function} reject Callback function to be called when the request cannot be completed.\n     * @param {File} file Native File object.\n     */\n\n  }, {\n    key: \"_initListeners\",\n    value: function _initListeners(resolve, reject, file) {\n      var xhr = this.xhr;\n      var loader = this.loader;\n      var genericErrorText = \"Couldn't upload file: \".concat(file.name, \".\");\n      xhr.addEventListener('error', function () {\n        return reject(genericErrorText);\n      });\n      xhr.addEventListener('abort', function () {\n        return reject();\n      });\n      xhr.addEventListener('load', function () {\n        var response = xhr.response;\n\n        if (!response || response.error) {\n          return reject(response && response.error && response.error.message ? response.error.message : genericErrorText);\n        }\n\n        var urls = response.url ? {\n          default: response.url\n        } : response.urls; // Resolve with the normalized `urls` property and pass the rest of the response\n        // to allow customizing the behavior of features relying on the upload adapters.\n\n        resolve(_objectSpread({}, response, {\n          urls: urls\n        }));\n      }); // Upload progress when it is supported.\n\n      /* istanbul ignore else */\n\n      if (xhr.upload) {\n        xhr.upload.addEventListener('progress', function (evt) {\n          if (evt.lengthComputable) {\n            loader.uploadTotal = evt.total;\n            loader.uploaded = evt.loaded;\n          }\n        });\n      }\n    }\n    /**\n     * Prepares the data and sends the request.\n     *\n     * @private\n     * @param {File} file File instance to be uploaded.\n     */\n\n  }, {\n    key: \"_sendRequest\",\n    value: function _sendRequest(file) {\n      // Set headers if specified.\n      var headers = this.options.headers || {}; // Use the withCredentials flag if specified.\n\n      var withCredentials = this.options.withCredentials || false;\n\n      for (var _i = 0, _Object$keys = Object.keys(headers); _i < _Object$keys.length; _i++) {\n        var headerName = _Object$keys[_i];\n        this.xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n\n      this.xhr.withCredentials = withCredentials; // Prepare the form data.\n\n      var data = new FormData();\n      data.append('upload', file); // Send the request.\n\n      this.xhr.send(data);\n    }\n  }]);\n\n  return Adapter;\n}();\n/**\n * The configuration of the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter simple upload adapter}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\t// The URL the images are uploaded to.\n *\t\t\t\t\tuploadUrl: 'http://example.com',\n *\n *\t\t\t\t\t// Headers sent along with the XMLHttpRequest to the upload server.\n *\t\t\t\t\theaders: {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} );\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See the {@glink features/images/image-upload/simple-upload-adapter \"Simple upload adapter\"} guide to learn more.\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor configuration options}.\n *\n * @interface SimpleUploadConfig\n */\n\n/**\n * The configuration of the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter simple upload adapter}.\n *\n * Read more in {@link module:upload/adapters/simpleuploadadapter~SimpleUploadConfig}.\n *\n * @member {module:upload/adapters/simpleuploadadapter~SimpleUploadConfig} module:core/editor/editorconfig~EditorConfig#simpleUpload\n */\n\n/**\n * The path (URL) to the server (application) which handles the file upload. When specified, enables the automatic\n * upload of resources (images) inserted into the editor content.\n *\n * Learn more about the server application requirements in the\n * {@glink features/images/image-upload/simple-upload-adapter#server-side-configuration \"Server-side configuration\"} section\n * of the feature guide.\n *\n * @member {String} module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#uploadUrl\n */\n\n/**\n * An object that defines additional [headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) sent with\n * the request to the server during the upload. This is the right place to implement security mechanisms like\n * authentication and [CSRF](https://developer.mozilla.org/en-US/docs/Glossary/CSRF) protection.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\theaders: {\n *\t\t\t\t\t\t'X-CSRF-TOKEN': 'CSRF-Token',\n *\t\t\t\t\t\tAuthorization: 'Bearer <JSON Web Token>'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} );\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Learn more about the server application requirements in the\n * {@glink features/images/image-upload/simple-upload-adapter#server-side-configuration \"Server-side configuration\"} section\n * of the feature guide.\n *\n * @member {Object.<String, String>} module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#headers\n */\n\n/**\n * This flag enables the\n * [`withCredentials`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)\n * property of the request sent to the server during the upload. It affects cross-site requests only and, for instance,\n * allows credentials such as cookies to be sent along with the request.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tsimpleUpload: {\n *\t\t\t\t\twithCredentials: true\n *\t\t\t\t}\n *\t\t\t} );\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Learn more about the server application requirements in the\n * {@glink features/images/image-upload/simple-upload-adapter#server-side-configuration \"Server-side configuration\"} section\n * of the feature guide.\n *\n * @member {Boolean} [module:upload/adapters/simpleuploadadapter~SimpleUploadConfig#withCredentials=false]\n */","map":null,"metadata":{},"sourceType":"module"}