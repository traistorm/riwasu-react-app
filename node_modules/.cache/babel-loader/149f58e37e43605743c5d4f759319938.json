{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useState, useImperativeHandle, useCallback } from 'react';\nimport kebabCase from 'lodash/kebabCase';\nimport trim from 'lodash/trim';\nimport isNil from 'lodash/isNil';\nimport isFunction from 'lodash/isFunction';\nimport isUndefined from 'lodash/isUndefined';\nimport omit from 'lodash/omit';\nimport find from 'lodash/find';\nimport { findNodeOfTree, filterNodesOfTree } from '../utils/treeUtils';\nimport { KEY_VALUES, useClassNames, shallowEqual, reactToString, placementPolyfill } from '../utils';\nvar defaultNodeKeys = {\n  valueKey: 'value',\n  childrenKey: 'children'\n};\nexport function createConcatChildrenFunction(node, nodeValue, nodeKeys) {\n  if (nodeKeys === void 0) {\n    nodeKeys = defaultNodeKeys;\n  }\n\n  var _nodeKeys = nodeKeys,\n      valueKey = _nodeKeys.valueKey,\n      childrenKey = _nodeKeys.childrenKey;\n  return function (data, children) {\n    if (nodeValue) {\n      node = findNodeOfTree(data, function (item) {\n        return nodeValue === item[valueKey];\n      });\n    }\n\n    node[childrenKey] = children;\n    return data.concat([]);\n  };\n}\nexport function shouldDisplay(label, searchKeyword) {\n  if (!trim(searchKeyword)) {\n    return true;\n  }\n\n  var keyword = searchKeyword.toLocaleLowerCase();\n\n  if (typeof label === 'string' || typeof label === 'number') {\n    return (\"\" + label).toLocaleLowerCase().indexOf(keyword) >= 0;\n  } else if ( /*#__PURE__*/React.isValidElement(label)) {\n    var nodes = reactToString(label);\n    return nodes.join('').toLocaleLowerCase().indexOf(keyword) >= 0;\n  }\n\n  return false;\n}\n/**\n * The className of the assembled Toggle is on the Picker.\n */\n\nexport function usePickerClassName(props) {\n  var _withClassPrefix;\n\n  var name = props.name,\n      classPrefix = props.classPrefix,\n      className = props.className,\n      placement = props.placement,\n      appearance = props.appearance,\n      cleanable = props.cleanable,\n      block = props.block,\n      disabled = props.disabled,\n      countable = props.countable,\n      readOnly = props.readOnly,\n      plaintext = props.plaintext,\n      hasValue = props.hasValue,\n      rest = _objectWithoutPropertiesLoose(props, [\"name\", \"classPrefix\", \"className\", \"placement\", \"appearance\", \"cleanable\", \"block\", \"disabled\", \"countable\", \"readOnly\", \"plaintext\", \"hasValue\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge;\n\n  var classes = merge(className, withClassPrefix(name, appearance, 'toggle-wrapper', (_withClassPrefix = {}, _withClassPrefix[\"placement-\" + kebabCase(placementPolyfill(placement))] = placement, _withClassPrefix['read-only'] = readOnly, _withClassPrefix['has-value'] = hasValue, _withClassPrefix.cleanable = cleanable, _withClassPrefix.block = block, _withClassPrefix.disabled = disabled, _withClassPrefix.countable = countable, _withClassPrefix.plaintext = plaintext, _withClassPrefix)));\n  var usedClassNamePropKeys = Object.keys(omit(props, [].concat(Object.keys(rest || {}), ['disabled', 'readOnly', 'plaintext'])));\n  return [classes, usedClassNamePropKeys];\n}\n/**\n * Handling keyboard events...\n * @param event Keyboard event object\n * @param events Event callback functions\n */\n\nexport function onMenuKeyDown(event, events) {\n  var down = events.down,\n      up = events.up,\n      enter = events.enter,\n      del = events.del,\n      esc = events.esc,\n      right = events.right,\n      left = events.left;\n\n  switch (event.key) {\n    // down\n    case KEY_VALUES.DOWN:\n      down === null || down === void 0 ? void 0 : down(event);\n      event.preventDefault();\n      break;\n    // up\n\n    case KEY_VALUES.UP:\n      up === null || up === void 0 ? void 0 : up(event);\n      event.preventDefault();\n      break;\n    // enter\n\n    case KEY_VALUES.ENTER:\n      enter === null || enter === void 0 ? void 0 : enter(event);\n      event.preventDefault();\n      break;\n    // delete\n\n    case KEY_VALUES.BACKSPACE:\n      del === null || del === void 0 ? void 0 : del(event);\n      break;\n    // esc | tab\n\n    case KEY_VALUES.ESC:\n    case KEY_VALUES.TAB:\n      esc === null || esc === void 0 ? void 0 : esc(event);\n      break;\n    // left arrow\n\n    case KEY_VALUES.LEFT:\n      left === null || left === void 0 ? void 0 : left(event);\n      break;\n    // right arrow\n\n    case KEY_VALUES.RIGHT:\n      right === null || right === void 0 ? void 0 : right(event);\n      break;\n\n    default:\n  }\n}\n/**\n * A hook that manages the focus state of the option.\n * @param defaultFocusItemValue\n * @param props\n */\n\nexport var useFocusItemValue = function useFocusItemValue(defaultFocusItemValue, props) {\n  var _props$valueKey = props.valueKey,\n      valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n      _props$focusableQuery = props.focusableQueryKey,\n      focusableQueryKey = _props$focusableQuery === void 0 ? '[data-key][aria-disabled=\"false\"]' : _props$focusableQuery,\n      _props$defaultLayer = props.defaultLayer,\n      defaultLayer = _props$defaultLayer === void 0 ? 0 : _props$defaultLayer,\n      data = props.data,\n      target = props.target,\n      rtl = props.rtl,\n      callback = props.callback;\n\n  var _useState = useState(defaultFocusItemValue),\n      focusItemValue = _useState[0],\n      setFocusItemValue = _useState[1];\n\n  var _useState2 = useState(defaultLayer),\n      layer = _useState2[0],\n      setLayer = _useState2[1];\n\n  var _useState3 = useState([]),\n      keys = _useState3[0],\n      setKeys = _useState3[1];\n  /**\n   * Get the elements visible in all options.\n   */\n\n\n  var getFocusableMenuItems = useCallback(function () {\n    if (!target) {\n      return [];\n    }\n\n    var menu = isFunction(target) ? target() : target;\n    var currentKeys = keys;\n\n    if (currentKeys.length === 0 && !isNil(menu)) {\n      currentKeys = Array.from(menu.querySelectorAll(focusableQueryKey)).map(function (item) {\n        var _item$dataset;\n\n        return (_item$dataset = item.dataset) === null || _item$dataset === void 0 ? void 0 : _item$dataset.key;\n      });\n      setKeys(currentKeys);\n    }\n\n    if (currentKeys.length === 0) {\n      return [];\n    } // 1. It is necessary to traverse the `keys` instead of `data` here to preserve the order of the array.\n    // 2. The values ​​in `keys` are all string, so the corresponding value of `data` should also be converted to string\n\n\n    return currentKeys.map(function (key) {\n      return find(data, function (i) {\n        return \"\" + i[valueKey] === key;\n      });\n    });\n  }, [data, focusableQueryKey, keys, target, valueKey]);\n  /**\n   * Get the index of the focus item.\n   */\n\n  var findFocusItemIndex = useCallback(function (callback) {\n    var items = getFocusableMenuItems();\n\n    for (var i = 0; i < items.length; i += 1) {\n      var _items$i;\n\n      if (shallowEqual(focusItemValue, (_items$i = items[i]) === null || _items$i === void 0 ? void 0 : _items$i[valueKey])) {\n        callback(items, i);\n        return;\n      }\n    }\n\n    callback(items, -1);\n  }, [focusItemValue, getFocusableMenuItems, valueKey]);\n  var focusNextMenuItem = useCallback(function (event) {\n    findFocusItemIndex(function (items, index) {\n      var nextIndex = index + 2 > items.length ? 0 : index + 1;\n      var focusItem = items[nextIndex];\n\n      if (!isUndefined(focusItem)) {\n        setFocusItemValue(focusItem[valueKey]);\n        callback === null || callback === void 0 ? void 0 : callback(focusItem[valueKey], event);\n      }\n    });\n  }, [callback, findFocusItemIndex, valueKey]);\n  var focusPrevMenuItem = useCallback(function (event) {\n    findFocusItemIndex(function (items, index) {\n      var nextIndex = index === 0 ? items.length - 1 : index - 1;\n      var focusItem = items[nextIndex];\n\n      if (!isUndefined(focusItem)) {\n        setFocusItemValue(focusItem[valueKey]);\n        callback === null || callback === void 0 ? void 0 : callback(focusItem[valueKey], event);\n      }\n    });\n  }, [callback, findFocusItemIndex, valueKey]);\n  var getSubMenuKeys = useCallback(function (nextLayer) {\n    var menu = isFunction(target) ? target() : target;\n    var subMenu = menu === null || menu === void 0 ? void 0 : menu.querySelector(\"[data-layer=\\\"\" + nextLayer + \"\\\"]\");\n\n    if (subMenu) {\n      var _Array$from;\n\n      return (_Array$from = Array.from(subMenu.querySelectorAll(focusableQueryKey))) === null || _Array$from === void 0 ? void 0 : _Array$from.map(function (item) {\n        var _item$dataset2;\n\n        return (_item$dataset2 = item.dataset) === null || _item$dataset2 === void 0 ? void 0 : _item$dataset2.key;\n      });\n    }\n\n    return null;\n  }, [focusableQueryKey, target]);\n  var focusNextLevelMenu = useCallback(function (event) {\n    var nextLayer = layer + 1;\n    var nextKeys = getSubMenuKeys(nextLayer);\n\n    if (nextKeys) {\n      setKeys(nextKeys);\n      setLayer(nextLayer);\n      setFocusItemValue(nextKeys[0]);\n      callback === null || callback === void 0 ? void 0 : callback(nextKeys[0], event);\n    }\n  }, [callback, getSubMenuKeys, layer]);\n  var focusPrevLevelMenu = useCallback(function (event) {\n    var nextLayer = layer - 1;\n    var nextKeys = getSubMenuKeys(nextLayer);\n\n    if (nextKeys) {\n      var _focusItem$parent;\n\n      setKeys(nextKeys);\n      setLayer(nextLayer);\n      var focusItem = findNodeOfTree(data, function (item) {\n        return item[valueKey] === focusItemValue;\n      });\n      var parentItemValue = focusItem === null || focusItem === void 0 ? void 0 : (_focusItem$parent = focusItem.parent) === null || _focusItem$parent === void 0 ? void 0 : _focusItem$parent[valueKey];\n\n      if (parentItemValue) {\n        setFocusItemValue(parentItemValue);\n        callback === null || callback === void 0 ? void 0 : callback(parentItemValue, event);\n      }\n    }\n  }, [callback, data, focusItemValue, getSubMenuKeys, layer, valueKey]);\n  var handleKeyDown = useCallback(function (event) {\n    var _onMenuKeyDown;\n\n    onMenuKeyDown(event, (_onMenuKeyDown = {\n      down: focusNextMenuItem,\n      up: focusPrevMenuItem\n    }, _onMenuKeyDown[rtl ? 'left' : 'right'] = focusNextLevelMenu, _onMenuKeyDown[rtl ? 'right' : 'left'] = focusPrevLevelMenu, _onMenuKeyDown));\n  }, [focusNextLevelMenu, focusNextMenuItem, focusPrevLevelMenu, focusPrevMenuItem, rtl]);\n  return {\n    focusItemValue: focusItemValue,\n    setFocusItemValue: setFocusItemValue,\n    layer: layer,\n    setLayer: setLayer,\n    keys: keys,\n    setKeys: setKeys,\n    onKeyDown: handleKeyDown\n  };\n};\n/**\n * A hook to control the toggle keyboard operation\n * @param props\n */\n\nexport var useToggleKeyDownEvent = function useToggleKeyDownEvent(props) {\n  var _props$toggle = props.toggle,\n      toggle = _props$toggle === void 0 ? true : _props$toggle,\n      triggerRef = props.triggerRef,\n      targetRef = props.targetRef,\n      overlayRef = props.overlayRef,\n      searchInputRef = props.searchInputRef,\n      active = props.active,\n      onExit = props.onExit,\n      onOpen = props.onOpen,\n      onClose = props.onClose,\n      onKeyDown = props.onKeyDown,\n      onMenuKeyDown = props.onMenuKeyDown,\n      onMenuPressEnter = props.onMenuPressEnter,\n      onMenuPressBackspace = props.onMenuPressBackspace;\n  var handleClose = useCallback(function () {\n    var _triggerRef$current, _triggerRef$current$c;\n\n    (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : (_triggerRef$current$c = _triggerRef$current.close) === null || _triggerRef$current$c === void 0 ? void 0 : _triggerRef$current$c.call(_triggerRef$current);\n    onClose === null || onClose === void 0 ? void 0 : onClose();\n  }, [onClose, triggerRef]);\n  var handleOpen = useCallback(function () {\n    var _triggerRef$current2, _triggerRef$current2$;\n\n    (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : (_triggerRef$current2$ = _triggerRef$current2.open) === null || _triggerRef$current2$ === void 0 ? void 0 : _triggerRef$current2$.call(_triggerRef$current2);\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n  }, [onOpen, triggerRef]);\n  var handleToggleDropdown = useCallback(function () {\n    if (active) {\n      handleClose();\n      return;\n    }\n\n    handleOpen();\n  }, [active, handleOpen, handleClose]);\n  var onToggle = useCallback(function (event) {\n    if (event.target === (targetRef === null || targetRef === void 0 ? void 0 : targetRef.current)) {\n      // enter\n      if (toggle && event.key === KEY_VALUES.ENTER) {\n        handleToggleDropdown();\n      } // delete\n\n\n      if (event.key === KEY_VALUES.BACKSPACE) {\n        onExit === null || onExit === void 0 ? void 0 : onExit(event);\n      }\n    }\n\n    if (overlayRef !== null && overlayRef !== void 0 && overlayRef.current) {\n      // The keyboard operation callback on the menu.\n      onMenuKeyDown === null || onMenuKeyDown === void 0 ? void 0 : onMenuKeyDown(event);\n\n      if (event.key === KEY_VALUES.ENTER) {\n        onMenuPressEnter === null || onMenuPressEnter === void 0 ? void 0 : onMenuPressEnter(event);\n      }\n      /**\n       * There is no callback when typing the Backspace key in the search box.\n       * The default is to remove search keywords\n       */\n\n\n      if (event.key === KEY_VALUES.BACKSPACE && event.target !== (searchInputRef === null || searchInputRef === void 0 ? void 0 : searchInputRef.current)) {\n        onMenuPressBackspace === null || onMenuPressBackspace === void 0 ? void 0 : onMenuPressBackspace(event);\n      } // The search box gets focus when typing characters and numbers.\n\n\n      if (event.key.length === 1 && /\\w/.test(event.key)) {\n        var _event$target; // Exclude Input\n        // eg: <SelectPicker renderExtraFooter={() => <Input />} />\n\n\n        if (((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.tagName) !== 'INPUT') {\n          var _searchInputRef$curre;\n\n          searchInputRef === null || searchInputRef === void 0 ? void 0 : (_searchInputRef$curre = searchInputRef.current) === null || _searchInputRef$curre === void 0 ? void 0 : _searchInputRef$curre.focus();\n        }\n      }\n    }\n\n    if (event.key === KEY_VALUES.ESC || event.key === KEY_VALUES.TAB) {\n      handleClose();\n    } // Native event callback\n\n\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  }, [handleClose, handleToggleDropdown, overlayRef, onExit, onKeyDown, onMenuKeyDown, onMenuPressBackspace, onMenuPressEnter, toggle, targetRef, searchInputRef]);\n  return onToggle;\n};\n/**\n * A hook that handles search filter options\n * @param props\n */\n\nexport function useSearch(props) {\n  var labelKey = props.labelKey,\n      data = props.data,\n      searchBy = props.searchBy,\n      callback = props.callback; // Use search keywords to filter options.\n\n  var _useState4 = useState(''),\n      searchKeyword = _useState4[0],\n      setSearchKeyword = _useState4[1];\n  /**\n   * Index of keyword  in `label`\n   * @param {node} label\n   */\n\n\n  var checkShouldDisplay = useCallback(function (item, keyword) {\n    var label = item === null || item === void 0 ? void 0 : item[labelKey];\n\n    var _keyword = isUndefined(keyword) ? searchKeyword : keyword;\n\n    if (typeof searchBy === 'function') {\n      return searchBy(_keyword, label, item);\n    }\n\n    return shouldDisplay(label, _keyword);\n  }, [labelKey, searchBy, searchKeyword]);\n  var updateFilteredData = useCallback(function (nextData) {\n    setFilteredData(filterNodesOfTree(nextData, function (item) {\n      return checkShouldDisplay(item);\n    }));\n  }, [checkShouldDisplay]);\n\n  var _useState5 = useState(filterNodesOfTree(data, function (item) {\n    return checkShouldDisplay(item);\n  })),\n      filteredData = _useState5[0],\n      setFilteredData = _useState5[1];\n\n  var handleSearch = function handleSearch(searchKeyword, event) {\n    var filteredData = filterNodesOfTree(data, function (item) {\n      return checkShouldDisplay(item, searchKeyword);\n    });\n    setFilteredData(filteredData);\n    setSearchKeyword(searchKeyword);\n    callback === null || callback === void 0 ? void 0 : callback(searchKeyword, filteredData, event);\n  };\n\n  return {\n    searchKeyword: searchKeyword,\n    filteredData: filteredData,\n    updateFilteredData: updateFilteredData,\n    setSearchKeyword: setSearchKeyword,\n    checkShouldDisplay: checkShouldDisplay,\n    handleSearch: handleSearch\n  };\n}\n/**\n * A hook of the exposed method of Picker\n */\n\nexport function usePublicMethods(ref, parmas) {\n  var triggerRef = parmas.triggerRef,\n      overlayRef = parmas.overlayRef,\n      targetRef = parmas.targetRef,\n      rootRef = parmas.rootRef,\n      listRef = parmas.listRef,\n      inline = parmas.inline;\n  var handleOpen = useCallback(function () {\n    var _triggerRef$current3;\n\n    triggerRef === null || triggerRef === void 0 ? void 0 : (_triggerRef$current3 = triggerRef.current) === null || _triggerRef$current3 === void 0 ? void 0 : _triggerRef$current3.open();\n  }, [triggerRef]);\n  var handleClose = useCallback(function () {\n    var _triggerRef$current4;\n\n    triggerRef === null || triggerRef === void 0 ? void 0 : (_triggerRef$current4 = triggerRef.current) === null || _triggerRef$current4 === void 0 ? void 0 : _triggerRef$current4.close();\n  }, [triggerRef]);\n  var handleUpdatePosition = useCallback(function () {\n    var _triggerRef$current5;\n\n    triggerRef === null || triggerRef === void 0 ? void 0 : (_triggerRef$current5 = triggerRef.current) === null || _triggerRef$current5 === void 0 ? void 0 : _triggerRef$current5.updatePosition();\n  }, [triggerRef]);\n  useImperativeHandle(ref, function () {\n    // Tree and CheckTree\n    if (inline) {\n      return {\n        get root() {\n          var _triggerRef$current$r, _triggerRef$current6;\n\n          return rootRef !== null && rootRef !== void 0 && rootRef.current ? rootRef === null || rootRef === void 0 ? void 0 : rootRef.current : (_triggerRef$current$r = triggerRef === null || triggerRef === void 0 ? void 0 : (_triggerRef$current6 = triggerRef.current) === null || _triggerRef$current6 === void 0 ? void 0 : _triggerRef$current6.root) !== null && _triggerRef$current$r !== void 0 ? _triggerRef$current$r : null;\n        },\n\n        get list() {\n          if (!(listRef !== null && listRef !== void 0 && listRef.current)) {\n            throw new Error('The list is not found, please set `virtualized` for the component.');\n          }\n\n          return listRef === null || listRef === void 0 ? void 0 : listRef.current;\n        }\n\n      };\n    }\n\n    return {\n      get root() {\n        var _ref, _triggerRef$current7;\n\n        return (_ref = (rootRef === null || rootRef === void 0 ? void 0 : rootRef.current) || (triggerRef === null || triggerRef === void 0 ? void 0 : (_triggerRef$current7 = triggerRef.current) === null || _triggerRef$current7 === void 0 ? void 0 : _triggerRef$current7.root)) !== null && _ref !== void 0 ? _ref : null;\n      },\n\n      get overlay() {\n        var _overlayRef$current;\n\n        return (_overlayRef$current = overlayRef === null || overlayRef === void 0 ? void 0 : overlayRef.current) !== null && _overlayRef$current !== void 0 ? _overlayRef$current : null;\n      },\n\n      get target() {\n        var _targetRef$current;\n\n        return (_targetRef$current = targetRef === null || targetRef === void 0 ? void 0 : targetRef.current) !== null && _targetRef$current !== void 0 ? _targetRef$current : null;\n      },\n\n      get list() {\n        if (!(listRef !== null && listRef !== void 0 && listRef.current)) {\n          throw new Error(\"\\n            The list is not found.\\n            1.Please set virtualized for the component.\\n            2.Please confirm whether the picker is open.\\n          \");\n        }\n\n        return listRef === null || listRef === void 0 ? void 0 : listRef.current;\n      },\n\n      updatePosition: handleUpdatePosition,\n      open: handleOpen,\n      close: handleClose\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"module"}