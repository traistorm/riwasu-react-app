{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, useCustom } from '../utils';\nexport var AvatarGroupContext = /*#__PURE__*/React.createContext({});\nvar AvatarGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'avatar-group' : _props$classPrefix,\n      spacing = props.spacing,\n      className = props.className,\n      children = props.children,\n      stack = props.stack,\n      size = props.size,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"classPrefix\", \"spacing\", \"className\", \"children\", \"stack\", \"size\"]);\n\n  var _useCustom = useCustom('AvatarGroup'),\n      rtl = _useCustom.rtl;\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge;\n\n  var classes = merge(className, withClassPrefix({\n    stack: stack\n  }));\n  var contextValue = useMemo(function () {\n    return {\n      size: size\n    };\n  }, [size]);\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), /*#__PURE__*/React.createElement(AvatarGroupContext.Provider, {\n    value: contextValue\n  }, spacing ? React.Children.map(children, function (child) {\n    var _extends2;\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      style: _extends((_extends2 = {}, _extends2[rtl ? 'marginLeft' : 'marginRight'] = spacing, _extends2), child.props.style)\n    });\n  }) : children));\n});\nAvatarGroup.displayName = 'AvatarGroup';\nAvatarGroup.propTypes = {\n  as: PropTypes.elementType,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  stack: PropTypes.bool,\n  spacing: PropTypes.number,\n  size: PropTypes.oneOf(['lg', 'md', 'sm', 'xs'])\n};\nexport default AvatarGroup;","map":null,"metadata":{},"sourceType":"module"}