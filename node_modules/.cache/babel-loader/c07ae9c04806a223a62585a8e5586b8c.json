{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/contextplugin\n */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * The base class for {@link module:core/context~Context} plugin classes.\n *\n * A context plugin can either be initialized for an {@link module:core/editor/editor~Editor editor} or for\n * a {@link module:core/context~Context context}. In other words, it can either\n * work within one editor instance or with one or more editor instances that use a single context.\n * It is the context plugin's role to implement handling for both modes.\n *\n * There are a few rules for interaction between the editor plugins and context plugins:\n *\n * * A context plugin can require another context plugin.\n * * An {@link module:core/plugin~Plugin editor plugin} can require a context plugin.\n * * A context plugin MUST NOT require an {@link module:core/plugin~Plugin editor plugin}.\n *\n * @implements module:core/plugin~PluginInterface\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nvar ContextPlugin = /*#__PURE__*/function () {\n  /**\n   * Creates a new plugin instance.\n   *\n   * @param {module:core/context~Context|module:core/editor/editor~Editor} context\n   */\n  function ContextPlugin(context) {\n    _classCallCheck(this, ContextPlugin);\n\n    /**\n     * The context instance.\n     *\n     * @readonly\n     * @type {module:core/context~Context|module:core/editor/editor~Editor}\n     */\n    this.context = context;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(ContextPlugin, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.stopListening();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }], [{\n    key: \"isContextPlugin\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return ContextPlugin;\n}();\n\nexport { ContextPlugin as default };\nmix(ContextPlugin, ObservableMixin);","map":null,"metadata":{},"sourceType":"module"}