{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport NavItem from './NavItem';\nimport Dropdown from '../Dropdown';\nimport { useClassNames } from '../utils';\nimport { NavbarContext } from '../Navbar/Navbar';\nimport { SidenavContext } from '../Sidenav/Sidenav';\nimport NavContext from './NavContext';\nimport useEnsuredRef from '../utils/useEnsuredRef';\nimport Menubar from '../Menu/Menubar';\nvar Nav = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'nav' : _props$classPrefix,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      vertical = props.vertical,\n      justified = props.justified,\n      reversed = props.reversed,\n      pullRight = props.pullRight,\n      className = props.className,\n      children = props.children,\n      activeKeyProp = props.activeKey,\n      onSelectProp = props.onSelect,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"classPrefix\", \"appearance\", \"vertical\", \"justified\", \"reversed\", \"pullRight\", \"className\", \"children\", \"activeKey\", \"onSelect\"]);\n\n  var sidenav = useContext(SidenavContext); // Whether inside a <Navbar>\n\n  var navbar = useContext(NavbarContext);\n  var menubarRef = useEnsuredRef(ref);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge,\n      rootPrefix = _useClassNames.rootPrefix,\n      prefix = _useClassNames.prefix;\n\n  var classes = merge(className, rootPrefix({\n    'navbar-nav': navbar,\n    'navbar-right': pullRight,\n    'sidenav-nav': sidenav\n  }), withClassPrefix(appearance, {\n    horizontal: navbar || !vertical && !sidenav,\n    vertical: vertical || sidenav,\n    justified: justified,\n    reversed: reversed\n  }));\n\n  var _ref = sidenav || {},\n      activeKeyFromSidenav = _ref.activeKey,\n      _ref$onSelect = _ref.onSelect,\n      onSelectFromSidenav = _ref$onSelect === void 0 ? onSelectProp : _ref$onSelect;\n\n  var activeKey = activeKeyProp !== null && activeKeyProp !== void 0 ? activeKeyProp : activeKeyFromSidenav;\n  var contextValue = useMemo(function () {\n    return {\n      withinNav: true,\n      activeKey: activeKey,\n      onSelect: onSelectProp !== null && onSelectProp !== void 0 ? onSelectProp : onSelectFromSidenav\n    };\n  }, [activeKey, onSelectFromSidenav, onSelectProp]);\n\n  if (sidenav !== null && sidenav !== void 0 && sidenav.expanded) {\n    return /*#__PURE__*/React.createElement(NavContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(\"ul\", _extends({\n      ref: ref,\n      className: classes\n    }, rest), children));\n  }\n\n  var hasWaterline = appearance !== 'default'; // If inside a collapsed <Sidenav>, render an ARIA `menubar` (vertical)\n\n  if (sidenav) {\n    return /*#__PURE__*/React.createElement(NavContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Menubar, {\n      vertical: !!sidenav\n    }, function (menubar, ref) {\n      return /*#__PURE__*/React.createElement(Component, _extends({\n        ref: ref\n      }, rest, {\n        className: classes\n      }, menubar), children);\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(NavContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: menubarRef,\n    className: classes\n  }), children, hasWaterline && /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('bar')\n  })));\n});\nNav.Dropdown = Dropdown;\nNav.Item = NavItem;\nNav.displayName = 'Nav';\nNav.propTypes = {\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  appearance: PropTypes.oneOf(['default', 'subtle', 'tabs']),\n  // Reverse Direction of tabs/subtle\n  reversed: PropTypes.bool,\n  justified: PropTypes.bool,\n  vertical: PropTypes.bool,\n  pullRight: PropTypes.bool,\n  activeKey: PropTypes.any,\n  onSelect: PropTypes.func\n};\nexport default Nav;","map":null,"metadata":{},"sourceType":"module"}