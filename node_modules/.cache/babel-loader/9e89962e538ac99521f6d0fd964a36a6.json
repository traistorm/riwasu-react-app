{"ast":null,"code":"import { useState, useCallback, useRef } from 'react';\nimport getHeight from 'dom-lib/getHeight';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport useMount from './useMount';\nimport isEmpty from 'lodash/isEmpty';\n/**\n * The row information of the table, get the DOM of all rows, and summarize the row height.\n * @param props\n * @returns\n */\n\nvar useTableRows = function useTableRows(props) {\n  var prefix = props.prefix,\n      wordWrap = props.wordWrap,\n      data = props.data,\n      expandedRowKeys = props.expandedRowKeys;\n\n  var _useState = useState([]),\n      tableRowsMaxHeight = _useState[0],\n      setTableRowsMaxHeight = _useState[1];\n\n  var tableRows = useRef({});\n\n  var bindTableRowsRef = function bindTableRowsRef(index, rowData) {\n    return function (ref) {\n      if (ref) {\n        tableRows.current[index] = [ref, rowData];\n      }\n    };\n  };\n\n  var calculateRowMaxHeight = useCallback(function () {\n    if (wordWrap) {\n      var nextTableRowsMaxHeight = [];\n      var curTableRows = Object.values(tableRows.current);\n\n      for (var i = 0; i < curTableRows.length; i++) {\n        var _curTableRows$i = curTableRows[i],\n            row = _curTableRows$i[0];\n\n        if (row) {\n          var cells = row.querySelectorAll(\".\" + prefix('cell-wrap')) || [];\n          var cellArray = Array.from(cells);\n          var maxHeight = 0;\n\n          for (var j = 0; j < cellArray.length; j++) {\n            var cell = cellArray[j];\n            var h = getHeight(cell);\n            maxHeight = Math.max(maxHeight, h);\n          }\n\n          nextTableRowsMaxHeight.push(maxHeight);\n        }\n      } // Can't perform a React state update on an unmounted component\n\n\n      if (!isEmpty(tableRows.current)) {\n        setTableRowsMaxHeight(nextTableRowsMaxHeight);\n      }\n    }\n  }, [prefix, wordWrap]);\n  useMount(function () {\n    setTimeout(calculateRowMaxHeight, 1);\n  });\n  useUpdateLayoutEffect(function () {\n    /**\n     * After the data is updated, the height of the cell DOM needs to be re-acquired,\n     * and what is often obtained is not the latest DOM that has been rendered.\n     * So use `setTimeout` to delay obtaining the height of the cell DOM.\n     * TODO: To be improved\n     */\n    setTimeout(calculateRowMaxHeight, 1);\n  }, [data, expandedRowKeys]);\n  return {\n    bindTableRowsRef: bindTableRowsRef,\n    tableRowsMaxHeight: tableRowsMaxHeight,\n    tableRows: tableRows\n  };\n};\n\nexport default useTableRows;","map":null,"metadata":{},"sourceType":"module"}