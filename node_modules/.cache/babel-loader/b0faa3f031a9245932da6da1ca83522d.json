{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nimport dialog from '../modules/dialog';\nimport anchor from '../modules/_anchor';\nimport component from '../modules/component';\nimport resizing from '../modules/resizing';\nimport fileManager from '../modules/fileManager';\nexport default {\n  name: 'image',\n  display: 'dialog',\n  add: function add(core) {\n    core.addModule([dialog, anchor, component, resizing, fileManager]);\n    var options = core.options;\n    var context = core.context;\n    var contextImage = context.image = {\n      _infoList: [],\n      // @Override fileManager\n      _infoIndex: 0,\n      // @Override fileManager\n      _uploadFileLength: 0,\n      // @Override fileManager\n      focusElement: null,\n      // @Override dialog // This element has focus when the dialog is opened.\n      sizeUnit: options._imageSizeUnit,\n      _linkElement: '',\n      _altText: '',\n      _align: 'none',\n      _floatClassRegExp: '__se__float\\\\-[a-z]+',\n      _v_src: {\n        _linkValue: ''\n      },\n      svgDefaultSize: '30%',\n      base64RenderIndex: 0,\n      // @require @Override component\n      _element: null,\n      _cover: null,\n      _container: null,\n      // @Override resizing properties\n      inputX: null,\n      inputY: null,\n      _element_w: 1,\n      _element_h: 1,\n      _element_l: 0,\n      _element_t: 0,\n      _defaultSizeX: 'auto',\n      _defaultSizeY: 'auto',\n      _origin_w: options.imageWidth === 'auto' ? '' : options.imageWidth,\n      _origin_h: options.imageHeight === 'auto' ? '' : options.imageHeight,\n      _proportionChecked: true,\n      _resizing: options.imageResizing,\n      _resizeDotHide: !options.imageHeightShow,\n      _rotation: options.imageRotation,\n      _alignHide: !options.imageAlignShow,\n      _onlyPercentage: options.imageSizeOnlyPercentage,\n      _ratio: false,\n      _ratioX: 1,\n      _ratioY: 1,\n      _captionShow: true,\n      _captionChecked: false,\n      _caption: null,\n      captionCheckEl: null\n    };\n    /** image dialog */\n\n    var image_dialog = this.setDialog(core);\n    contextImage.modal = image_dialog;\n    contextImage.imgInputFile = image_dialog.querySelector('._se_image_file');\n    contextImage.imgUrlFile = image_dialog.querySelector('._se_image_url');\n    contextImage.focusElement = contextImage.imgInputFile || contextImage.imgUrlFile;\n    contextImage.altText = image_dialog.querySelector('._se_image_alt');\n    contextImage.captionCheckEl = image_dialog.querySelector('._se_image_check_caption');\n    contextImage.previewSrc = image_dialog.querySelector('._se_tab_content_image .se-link-preview');\n    /** add event listeners */\n\n    image_dialog.querySelector('.se-dialog-tabs').addEventListener('click', this.openTab.bind(core));\n    image_dialog.querySelector('form').addEventListener('submit', this.submit.bind(core));\n    if (contextImage.imgInputFile) image_dialog.querySelector('.se-file-remove').addEventListener('click', this._removeSelectedFiles.bind(contextImage.imgInputFile, contextImage.imgUrlFile, contextImage.previewSrc));\n    if (contextImage.imgUrlFile) contextImage.imgUrlFile.addEventListener('input', this._onLinkPreview.bind(contextImage.previewSrc, contextImage._v_src, options.linkProtocol));\n    if (contextImage.imgInputFile && contextImage.imgUrlFile) contextImage.imgInputFile.addEventListener('change', this._fileInputChange.bind(contextImage));\n    var imageGalleryButton = image_dialog.querySelector('.__se__gallery');\n    if (imageGalleryButton) imageGalleryButton.addEventListener('click', this._openGallery.bind(core));\n    contextImage.proportion = {};\n    contextImage.inputX = {};\n    contextImage.inputY = {};\n\n    if (options.imageResizing) {\n      contextImage.proportion = image_dialog.querySelector('._se_image_check_proportion');\n      contextImage.inputX = image_dialog.querySelector('._se_image_size_x');\n      contextImage.inputY = image_dialog.querySelector('._se_image_size_y');\n      contextImage.inputX.value = options.imageWidth;\n      contextImage.inputY.value = options.imageHeight;\n      contextImage.inputX.addEventListener('keyup', this.setInputSize.bind(core, 'x'));\n      contextImage.inputY.addEventListener('keyup', this.setInputSize.bind(core, 'y'));\n      contextImage.inputX.addEventListener('change', this.setRatio.bind(core));\n      contextImage.inputY.addEventListener('change', this.setRatio.bind(core));\n      contextImage.proportion.addEventListener('change', this.setRatio.bind(core));\n      image_dialog.querySelector('.se-dialog-btn-revert').addEventListener('click', this.sizeRevert.bind(core));\n    }\n    /** append html */\n\n\n    context.dialog.modal.appendChild(image_dialog);\n    /** link event */\n\n    core.plugins.anchor.initEvent.call(core, 'image', image_dialog.querySelector('._se_tab_content_url'));\n    contextImage.anchorCtx = core.context.anchor.caller.image;\n    /** empty memory */\n\n    image_dialog = null;\n  },\n\n  /** dialog */\n  setDialog: function setDialog(core) {\n    var option = core.options;\n    var lang = core.lang;\n    var dialog = core.util.createElement('DIV');\n    dialog.className = 'se-dialog-content se-dialog-image';\n    dialog.style.display = 'none';\n    var html = '' + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" class=\"close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + core.icons.cancel + '</button>' + '<span class=\"se-modal-title\">' + lang.dialogBox.imageBox.title + '</span>' + '</div>' + '<div class=\"se-dialog-tabs\">' + '<button type=\"button\" class=\"_se_tab_link active\" data-tab-link=\"image\">' + lang.toolbar.image + '</button>' + '<button type=\"button\" class=\"_se_tab_link\" data-tab-link=\"url\">' + lang.toolbar.link + '</button>' + '</div>' + '<form method=\"post\" enctype=\"multipart/form-data\">' + '<div class=\"_se_tab_content _se_tab_content_image\">' + '<div class=\"se-dialog-body\"><div style=\"border-bottom: 1px dashed #ccc;\">';\n\n    if (option.imageFileInput) {\n      html += '' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.imageBox.file + '</label>' + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form _se_image_file\" type=\"file\" accept=\"' + option.imageAccept + '\"' + (option.imageMultipleFile ? ' multiple=\"multiple\"' : '') + '/>' + '<button type=\"button\" class=\"se-btn se-dialog-files-edge-button se-file-remove\" title=\"' + lang.controller.remove + '\" aria-label=\"' + lang.controller.remove + '\">' + core.icons.cancel + '</button>' + '</div>' + '</div>';\n    }\n\n    if (option.imageUrlInput) {\n      html += '' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.imageBox.url + '</label>' + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form se-input-url _se_image_url\" type=\"text\" />' + (option.imageGalleryUrl && core.plugins.imageGallery ? '<button type=\"button\" class=\"se-btn se-dialog-files-edge-button __se__gallery\" title=\"' + lang.toolbar.imageGallery + '\" aria-label=\"' + lang.toolbar.imageGallery + '\">' + core.icons.image_gallery + '</button>' : '') + '</div>' + '<pre class=\"se-link-preview\"></pre>' + '</div>';\n    }\n\n    html += '</div>' + '<div class=\"se-dialog-form\">' + '<label>' + lang.dialogBox.imageBox.altText + '</label><input class=\"se-input-form _se_image_alt\" type=\"text\" />' + '</div>';\n\n    if (option.imageResizing) {\n      var onlyPercentage = option.imageSizeOnlyPercentage;\n      var onlyPercentDisplay = onlyPercentage ? ' style=\"display: none !important;\"' : '';\n      var heightDisplay = !option.imageHeightShow ? ' style=\"display: none !important;\"' : '';\n      html += '<div class=\"se-dialog-form\">';\n\n      if (onlyPercentage || !option.imageHeightShow) {\n        html += '' + '<div class=\"se-dialog-size-text\">' + '<label class=\"size-w\">' + lang.dialogBox.size + '</label>' + '</div>';\n      } else {\n        html += '' + '<div class=\"se-dialog-size-text\">' + '<label class=\"size-w\">' + lang.dialogBox.width + '</label>' + '<label class=\"se-dialog-size-x\">&nbsp;</label>' + '<label class=\"size-h\">' + lang.dialogBox.height + '</label>' + '</div>';\n      }\n\n      html += '' + '<input class=\"se-input-control _se_image_size_x\" placeholder=\"auto\"' + (onlyPercentage ? ' type=\"number\" min=\"1\"' : 'type=\"text\"') + (onlyPercentage ? ' max=\"100\"' : '') + ' />' + '<label class=\"se-dialog-size-x\"' + heightDisplay + '>' + (onlyPercentage ? '%' : 'x') + '</label>' + '<input type=\"text\" class=\"se-input-control _se_image_size_y\" placeholder=\"auto\"' + onlyPercentDisplay + (onlyPercentage ? ' max=\"100\"' : '') + heightDisplay + '/>' + '<label' + onlyPercentDisplay + heightDisplay + '><input type=\"checkbox\" class=\"se-dialog-btn-check _se_image_check_proportion\" checked/>&nbsp;' + lang.dialogBox.proportion + '</label>' + '<button type=\"button\" title=\"' + lang.dialogBox.revertButton + '\" aria-label=\"' + lang.dialogBox.revertButton + '\" class=\"se-btn se-dialog-btn-revert\" style=\"float: right;\">' + core.icons.revert + '</button>' + '</div>';\n    }\n\n    html += '' + '<div class=\"se-dialog-form se-dialog-form-footer\">' + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_image_check_caption\" />&nbsp;' + lang.dialogBox.caption + '</label>' + '</div>' + '</div>' + '</div>' + '<div class=\"_se_tab_content _se_tab_content_url\" style=\"display: none\">' + core.context.anchor.forms.innerHTML + '</div>' + '<div class=\"se-dialog-footer\">' + '<div' + (option.imageAlignShow ? '' : ' style=\"display: none\"') + '>' + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"none\" checked>' + lang.dialogBox.basic + '</label>' + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"left\">' + lang.dialogBox.left + '</label>' + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"center\">' + lang.dialogBox.center + '</label>' + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"right\">' + lang.dialogBox.right + '</label>' + '</div>' + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + '</span></button>' + '</div>' + '</form>';\n    dialog.innerHTML = html;\n    return dialog;\n  },\n  _fileInputChange: function _fileInputChange() {\n    if (!this.imgInputFile.value) {\n      this.imgUrlFile.removeAttribute('disabled');\n      this.previewSrc.style.textDecoration = '';\n    } else {\n      this.imgUrlFile.setAttribute('disabled', true);\n      this.previewSrc.style.textDecoration = 'line-through';\n    }\n  },\n  _removeSelectedFiles: function _removeSelectedFiles(urlInput, previewSrc) {\n    this.value = '';\n\n    if (urlInput) {\n      urlInput.removeAttribute('disabled');\n      previewSrc.style.textDecoration = '';\n    }\n  },\n  _openGallery: function _openGallery() {\n    this.callPlugin('imageGallery', this.plugins.imageGallery.open.bind(this, this.plugins.image._setUrlInput.bind(this.context.image)), null);\n  },\n  _setUrlInput: function _setUrlInput(target) {\n    this.altText.value = target.alt;\n    this._v_src._linkValue = this.previewSrc.textContent = this.imgUrlFile.value = target.src;\n    this.imgUrlFile.focus();\n  },\n  _onLinkPreview: function _onLinkPreview(context, protocol, e) {\n    var value = e.target.value.trim();\n    context._linkValue = this.textContent = !value ? '' : protocol && value.indexOf('://') === -1 && value.indexOf('#') !== 0 ? protocol + value : value.indexOf('://') === -1 ? '/' + value : value;\n  },\n\n  /**\n   * @Override @Required fileManager\n   */\n  fileTags: ['img'],\n\n  /**\n   * @Override core, fileManager, resizing\n   * @description It is called from core.selectComponent.\n   * @param {Element} element Target element\n   */\n  select: function select(element) {\n    this.plugins.image.onModifyMode.call(this, element, this.plugins.resizing.call_controller_resize.call(this, element, 'image'));\n  },\n\n  /**\n   * @Override fileManager, resizing\n   */\n  destroy: function destroy(element) {\n    var imageEl = element || this.context.image._element;\n    var imageContainer = this.util.getParentElement(imageEl, this.util.isMediaComponent) || imageEl;\n    var dataIndex = imageEl.getAttribute('data-index') * 1;\n    var focusEl = imageContainer.previousElementSibling || imageContainer.nextElementSibling;\n    var emptyDiv = imageContainer.parentNode;\n    this.util.removeItem(imageContainer);\n    this.plugins.image.init.call(this);\n    this.controllersOff();\n    if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function (current) {\n      return current.childNodes.length === 0;\n    }, null); // focus\n\n    this.focusEdge(focusEl); // event\n\n    this.plugins.fileManager.deleteInfo.call(this, 'image', dataIndex, this.functions.onImageUpload); // history stack\n\n    this.history.push(false);\n  },\n\n  /**\n   * @Required @Override dialog\n   */\n  on: function on(update) {\n    var contextImage = this.context.image;\n\n    if (!update) {\n      contextImage.inputX.value = contextImage._origin_w = this.options.imageWidth === contextImage._defaultSizeX ? '' : this.options.imageWidth;\n      contextImage.inputY.value = contextImage._origin_h = this.options.imageHeight === contextImage._defaultSizeY ? '' : this.options.imageHeight;\n      if (contextImage.imgInputFile && this.options.imageMultipleFile) contextImage.imgInputFile.setAttribute('multiple', 'multiple');\n    } else {\n      if (contextImage.imgInputFile && this.options.imageMultipleFile) contextImage.imgInputFile.removeAttribute('multiple');\n    }\n\n    this.plugins.anchor.on.call(this, contextImage.anchorCtx, update);\n  },\n\n  /**\n   * @Required @Override dialog\n   */\n  open: function open() {\n    this.plugins.dialog.open.call(this, 'image', 'image' === this.currentControllerName);\n  },\n  openTab: function openTab(e) {\n    var modal = this.context.image.modal;\n    var targetElement = e === 'init' ? modal.querySelector('._se_tab_link') : e.target;\n\n    if (!/^BUTTON$/i.test(targetElement.tagName)) {\n      return false;\n    } // Declare all variables\n\n\n    var tabName = targetElement.getAttribute('data-tab-link');\n    var contentClassName = '_se_tab_content';\n    var i, tabContent, tabLinks; // Get all elements with class=\"tabcontent\" and hide them\n\n    tabContent = modal.getElementsByClassName(contentClassName);\n\n    for (i = 0; i < tabContent.length; i++) {\n      tabContent[i].style.display = 'none';\n    } // Get all elements with class=\"tablinks\" and remove the class \"active\"\n\n\n    tabLinks = modal.getElementsByClassName('_se_tab_link');\n\n    for (i = 0; i < tabLinks.length; i++) {\n      this.util.removeClass(tabLinks[i], 'active');\n    } // Show the current tab, and add an \"active\" class to the button that opened the tab\n\n\n    modal.querySelector('.' + contentClassName + '_' + tabName).style.display = 'block';\n    this.util.addClass(targetElement, 'active'); // focus\n\n    if (tabName === 'image' && this.context.image.focusElement) {\n      this.context.image.focusElement.focus();\n    } else if (tabName === 'url') {\n      this.context.anchor.caller.image.urlInput.focus();\n    }\n\n    return false;\n  },\n  submit: function submit(e) {\n    var contextImage = this.context.image;\n    var imagePlugin = this.plugins.image;\n    e.preventDefault();\n    e.stopPropagation();\n    contextImage._altText = contextImage.altText.value;\n    contextImage._align = contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"]:checked').value;\n    contextImage._captionChecked = contextImage.captionCheckEl.checked;\n    if (contextImage._resizing) contextImage._proportionChecked = contextImage.proportion.checked;\n\n    try {\n      if (this.context.dialog.updateModal) {\n        imagePlugin.update_image.call(this, false, true, false);\n      }\n\n      if (contextImage.imgInputFile && contextImage.imgInputFile.files.length > 0) {\n        this.showLoading();\n        imagePlugin.submitAction.call(this, this.context.image.imgInputFile.files);\n      } else if (contextImage.imgUrlFile && contextImage._v_src._linkValue.length > 0) {\n        this.showLoading();\n        imagePlugin.onRender_imgUrl.call(this, contextImage._v_src._linkValue);\n      }\n    } catch (error) {\n      this.closeLoading();\n      throw Error('[SUNEDITOR.image.submit.fail] cause : \"' + error.message + '\"');\n    } finally {\n      this.plugins.dialog.close.call(this);\n    }\n\n    return false;\n  },\n  submitAction: function submitAction(fileList) {\n    if (fileList.length === 0) return;\n    var fileSize = 0;\n    var files = [];\n\n    for (var i = 0, len = fileList.length; i < len; i++) {\n      if (/image/i.test(fileList[i].type)) {\n        files.push(fileList[i]);\n        fileSize += fileList[i].size;\n      }\n    }\n\n    var limitSize = this.options.imageUploadSizeLimit;\n\n    if (limitSize > 0) {\n      var infoSize = 0;\n      var imagesInfo = this.context.image._infoList;\n\n      for (var _i = 0, _len = imagesInfo.length; _i < _len; _i++) {\n        infoSize += imagesInfo[_i].size * 1;\n      }\n\n      if (fileSize + infoSize > limitSize) {\n        this.closeLoading();\n        var err = '[SUNEDITOR.imageUpload.fail] Size of uploadable total images: ' + limitSize / 1000 + 'KB';\n\n        if (typeof this.functions.onImageUploadError !== 'function' || this.functions.onImageUploadError(err, {\n          'limitSize': limitSize,\n          'currentSize': infoSize,\n          'uploadSize': fileSize\n        }, this)) {\n          this.functions.noticeOpen(err);\n        }\n\n        return;\n      }\n    }\n\n    var contextImage = this.context.image;\n    contextImage._uploadFileLength = files.length;\n    var anchor = this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true);\n    var info = {\n      anchor: anchor,\n      inputWidth: contextImage.inputX.value,\n      inputHeight: contextImage.inputY.value,\n      align: contextImage._align,\n      isUpdate: this.context.dialog.updateModal,\n      alt: contextImage._altText,\n      element: contextImage._element\n    };\n\n    if (typeof this.functions.onImageUploadBefore === 'function') {\n      var result = this.functions.onImageUploadBefore(files, info, this, function (data) {\n        if (data && this._w.Array.isArray(data.result)) {\n          this.plugins.image.register.call(this, info, data);\n        } else {\n          this.plugins.image.upload.call(this, info, data);\n        }\n      }.bind(this));\n      if (typeof result === 'undefined') return;\n\n      if (!result) {\n        this.closeLoading();\n        return;\n      }\n\n      if (this._w.Array.isArray(result) && result.length > 0) files = result;\n    }\n\n    this.plugins.image.upload.call(this, info, files);\n  },\n  error: function error(message, response) {\n    this.closeLoading();\n\n    if (typeof this.functions.onImageUploadError !== 'function' || this.functions.onImageUploadError(message, response, this)) {\n      this.functions.noticeOpen(message);\n      throw Error('[SUNEDITOR.plugin.image.error] response: ' + message);\n    }\n  },\n  upload: function upload(info, files) {\n    if (!files) {\n      this.closeLoading();\n      return;\n    }\n\n    if (typeof files === 'string') {\n      this.plugins.image.error.call(this, files, null);\n      return;\n    }\n\n    var imageUploadUrl = this.options.imageUploadUrl;\n    var filesLen = this.context.dialog.updateModal ? 1 : files.length; // server upload\n\n    if (typeof imageUploadUrl === 'string' && imageUploadUrl.length > 0) {\n      var formData = new FormData();\n\n      for (var i = 0; i < filesLen; i++) {\n        formData.append('file-' + i, files[i]);\n      }\n\n      this.plugins.fileManager.upload.call(this, imageUploadUrl, this.options.imageUploadHeader, formData, this.plugins.image.callBack_imgUpload.bind(this, info), this.functions.onImageUploadError);\n    } else {\n      // base64\n      this.plugins.image.setup_reader.call(this, files, info.anchor, info.inputWidth, info.inputHeight, info.align, info.alt, filesLen, info.isUpdate);\n    }\n  },\n  callBack_imgUpload: function callBack_imgUpload(info, xmlHttp) {\n    if (typeof this.functions.imageUploadHandler === 'function') {\n      this.functions.imageUploadHandler(xmlHttp, info, this);\n    } else {\n      var response = JSON.parse(xmlHttp.responseText);\n\n      if (response.errorMessage) {\n        this.plugins.image.error.call(this, response.errorMessage, response);\n      } else {\n        this.plugins.image.register.call(this, info, response);\n      }\n    }\n  },\n  register: function register(info, response) {\n    var fileList = response.result;\n\n    for (var i = 0, len = fileList.length, file; i < len; i++) {\n      file = {\n        name: fileList[i].name,\n        size: fileList[i].size\n      };\n\n      if (info.isUpdate) {\n        this.plugins.image.update_src.call(this, fileList[i].url, info.element, file);\n        break;\n      } else {\n        this.plugins.image.create_image.call(this, fileList[i].url, info.anchor, info.inputWidth, info.inputHeight, info.align, file, info.alt);\n      }\n    }\n\n    this.closeLoading();\n  },\n  setup_reader: function setup_reader(files, anchor, width, height, align, alt, filesLen, isUpdate) {\n    var _this = this;\n\n    try {\n      (function () {\n        _this.context.image.base64RenderIndex = filesLen;\n        var wFileReader = _this._w.FileReader;\n        var filesStack = [filesLen];\n        _this.context.image.inputX.value = width;\n        _this.context.image.inputY.value = height;\n\n        for (var i = 0, reader, file; i < filesLen; i++) {\n          reader = new wFileReader();\n          file = files[i];\n\n          reader.onload = function (reader, update, updateElement, file, index) {\n            filesStack[index] = {\n              result: reader.result,\n              file: file\n            };\n\n            if (--this.context.image.base64RenderIndex === 0) {\n              this.plugins.image.onRender_imgBase64.call(this, update, filesStack, updateElement, anchor, width, height, align, alt);\n              this.closeLoading();\n            }\n          }.bind(_this, reader, isUpdate, _this.context.image._element, file, i);\n\n          reader.readAsDataURL(file);\n        }\n      })();\n    } catch (e) {\n      this.closeLoading();\n      throw Error('[SUNEDITOR.image.setup_reader.fail] cause : \"' + e.message + '\"');\n    }\n  },\n  onRender_imgBase64: function onRender_imgBase64(update, filesStack, updateElement, anchor, width, height, align, alt) {\n    var updateMethod = this.plugins.image.update_src;\n    var createMethod = this.plugins.image.create_image;\n\n    for (var i = 0, len = filesStack.length; i < len; i++) {\n      if (update) {\n        this.context.image._element.setAttribute('data-file-name', filesStack[i].file.name);\n\n        this.context.image._element.setAttribute('data-file-size', filesStack[i].file.size);\n\n        updateMethod.call(this, filesStack[i].result, updateElement, filesStack[i].file);\n      } else {\n        createMethod.call(this, filesStack[i].result, anchor, width, height, align, filesStack[i].file, alt);\n      }\n    }\n  },\n  onRender_imgUrl: function onRender_imgUrl(url) {\n    if (!url) url = this.context.image._v_src._linkValue;\n    if (!url) return false;\n    var contextImage = this.context.image;\n\n    try {\n      var file = {\n        name: url.split('/').pop(),\n        size: 0\n      };\n      if (this.context.dialog.updateModal) this.plugins.image.update_src.call(this, url, contextImage._element, file);else this.plugins.image.create_image.call(this, url, this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true), contextImage.inputX.value, contextImage.inputY.value, contextImage._align, file, contextImage._altText);\n    } catch (e) {\n      throw Error('[SUNEDITOR.image.URLRendering.fail] cause : \"' + e.message + '\"');\n    } finally {\n      this.closeLoading();\n    }\n  },\n  onRender_link: function onRender_link(imgTag, anchor) {\n    if (anchor) {\n      anchor.setAttribute('data-image-link', 'image');\n      imgTag.setAttribute('data-image-link', anchor.href);\n      anchor.appendChild(imgTag);\n      return anchor;\n    }\n\n    return imgTag;\n  },\n\n  /**\n   * @Override resizing\n   * @param {String} xy 'x': width, 'y': height\n   * @param {KeyboardEvent} e Event object\n   */\n  setInputSize: function setInputSize(xy, e) {\n    if (e && e.keyCode === 32) {\n      e.preventDefault();\n      return;\n    }\n\n    this.plugins.resizing._module_setInputSize.call(this, this.context.image, xy);\n  },\n\n  /**\n   * @Override resizing\n   */\n  setRatio: function setRatio() {\n    this.plugins.resizing._module_setRatio.call(this, this.context.image);\n  },\n\n  /**\n   * @Override fileManager\n   */\n  checkFileInfo: function checkFileInfo() {\n    var imagePlugin = this.plugins.image;\n    var contextImage = this.context.image;\n\n    var modifyHandler = function (tag) {\n      imagePlugin.onModifyMode.call(this, tag, null);\n      imagePlugin.openModify.call(this, true); // get size\n\n      contextImage.inputX.value = contextImage._origin_w;\n      contextImage.inputY.value = contextImage._origin_h; // get align\n\n      var format = this.util.getFormatElement(tag);\n      if (format) contextImage._align = format.style.textAlign || format.style.float; // link\n\n      var link = this.util.getParentElement(tag, this.util.isAnchor);\n      if (link && !contextImage.anchorCtx.linkValue) contextImage.anchorCtx.linkValue = ' ';\n      imagePlugin.update_image.call(this, true, false, true);\n      imagePlugin.init.call(this);\n    }.bind(this);\n\n    this.plugins.fileManager.checkInfo.call(this, 'image', ['img'], this.functions.onImageUpload, modifyHandler, true);\n  },\n\n  /**\n   * @Override fileManager\n   */\n  resetFileInfo: function resetFileInfo() {\n    this.plugins.fileManager.resetInfo.call(this, 'image', this.functions.onImageUpload);\n  },\n  create_image: function create_image(src, anchor, width, height, align, file, alt) {\n    var imagePlugin = this.plugins.image;\n    var contextImage = this.context.image;\n    this.context.resizing._resize_plugin = 'image';\n    var oImg = this.util.createElement('IMG');\n    oImg.src = src;\n    oImg.alt = alt;\n    oImg.setAttribute('data-rotate', '0');\n    anchor = imagePlugin.onRender_link.call(this, oImg, anchor);\n\n    if (contextImage._resizing) {\n      oImg.setAttribute('data-proportion', contextImage._proportionChecked);\n    }\n\n    var cover = this.plugins.component.set_cover.call(this, anchor);\n    var container = this.plugins.component.set_container.call(this, cover, 'se-image-container'); // caption\n\n    if (contextImage._captionChecked) {\n      contextImage._caption = this.plugins.component.create_caption.call(this);\n\n      contextImage._caption.setAttribute('contenteditable', false);\n\n      cover.appendChild(contextImage._caption);\n    }\n\n    contextImage._element = oImg;\n    contextImage._cover = cover;\n    contextImage._container = container; // set size\n\n    imagePlugin.applySize.call(this, width, height); // align\n\n    imagePlugin.setAlign.call(this, align, oImg, cover, container);\n    oImg.onload = imagePlugin._image_create_onload.bind(this, oImg, contextImage.svgDefaultSize, container);\n    if (this.insertComponent(container, true, true, true)) this.plugins.fileManager.setInfo.call(this, 'image', oImg, this.functions.onImageUpload, file, true);\n    this.context.resizing._resize_plugin = '';\n  },\n  _image_create_onload: function _image_create_onload(oImg, svgDefaultSize, container) {\n    // svg exception handling\n    if (oImg.offsetWidth === 0) this.plugins.image.applySize.call(this, svgDefaultSize, '');\n\n    if (this.options.mediaAutoSelect) {\n      this.selectComponent(oImg, 'image');\n    } else {\n      var line = this.appendFormatTag(container, null);\n      if (line) this.setRange(line, 0, line, 0);\n    }\n  },\n  update_image: function update_image(init, openController, notHistoryPush) {\n    var contextImage = this.context.image;\n    var imageEl = contextImage._element;\n    var cover = contextImage._cover;\n    var container = contextImage._container;\n    var isNewContainer = false;\n\n    if (cover === null) {\n      isNewContainer = true;\n      imageEl = contextImage._element.cloneNode(true);\n      cover = this.plugins.component.set_cover.call(this, imageEl);\n    }\n\n    if (container === null) {\n      cover = cover.cloneNode(true);\n      imageEl = cover.querySelector('img');\n      isNewContainer = true;\n      container = this.plugins.component.set_container.call(this, cover, 'se-image-container');\n    } else if (isNewContainer) {\n      container.innerHTML = '';\n      container.appendChild(cover);\n      contextImage._cover = cover;\n      contextImage._element = imageEl;\n      isNewContainer = false;\n    } // check size\n\n\n    var changeSize;\n    var x = this.util.isNumber(contextImage.inputX.value) ? contextImage.inputX.value + contextImage.sizeUnit : contextImage.inputX.value;\n    var y = this.util.isNumber(contextImage.inputY.value) ? contextImage.inputY.value + contextImage.sizeUnit : contextImage.inputY.value;\n\n    if (/%$/.test(imageEl.style.width)) {\n      changeSize = x !== container.style.width || y !== container.style.height;\n    } else {\n      changeSize = x !== imageEl.style.width || y !== imageEl.style.height;\n    } // alt\n\n\n    imageEl.alt = contextImage._altText; // caption\n\n    var modifiedCaption = false;\n\n    if (contextImage._captionChecked) {\n      if (!contextImage._caption) {\n        contextImage._caption = this.plugins.component.create_caption.call(this);\n        cover.appendChild(contextImage._caption);\n        modifiedCaption = true;\n      }\n    } else {\n      if (contextImage._caption) {\n        this.util.removeItem(contextImage._caption);\n        contextImage._caption = null;\n        modifiedCaption = true;\n      }\n    } // link\n\n\n    var anchor = this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true);\n\n    if (anchor) {\n      if (contextImage._linkElement !== anchor) {\n        contextImage._linkElement = anchor.cloneNode(false);\n        cover.insertBefore(this.plugins.image.onRender_link.call(this, imageEl, contextImage._linkElement), contextImage._caption);\n        this.util.removeItem(anchor);\n      } else {\n        contextImage._linkElement.setAttribute('data-image-link', 'image');\n      }\n    } else if (contextImage._linkElement !== null) {\n      var imageElement = imageEl;\n      imageElement.setAttribute('data-image-link', '');\n\n      if (cover.contains(contextImage._linkElement)) {\n        var newEl = imageElement.cloneNode(true);\n        cover.removeChild(contextImage._linkElement);\n        cover.insertBefore(newEl, contextImage._caption);\n        contextImage._element = imageEl = newEl;\n      }\n    }\n\n    if (isNewContainer) {\n      var existElement = this.util.isRangeFormatElement(contextImage._element.parentNode) || this.util.isWysiwygDiv(contextImage._element.parentNode) ? contextImage._element : /^A$/i.test(contextImage._element.parentNode.nodeName) ? contextImage._element.parentNode : this.util.getFormatElement(contextImage._element) || contextImage._element;\n\n      if (this.util.isListCell(existElement) || this.util.isFormatElement(existElement)) {\n        contextImage._element.parentNode.replaceChild(container, contextImage._element);\n      } else if (this.util.isFormatElement(existElement) && existElement.childNodes.length > 0) {\n        existElement.parentNode.insertBefore(container, existElement);\n        this.util.removeItem(contextImage._element); // clean format tag\n\n        this.util.removeEmptyNode(existElement, null);\n        if (existElement.children.length === 0) existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);\n      } else {\n        if (this.util.isFormatElement(existElement.parentNode)) {\n          var formats = existElement.parentNode;\n          formats.parentNode.insertBefore(container, existElement.previousSibling ? formats.nextElementSibling : formats);\n          this.util.removeItem(existElement);\n        } else {\n          existElement.parentNode.replaceChild(container, existElement);\n        }\n      }\n\n      imageEl = container.querySelector('img');\n      contextImage._element = imageEl;\n      contextImage._cover = cover;\n      contextImage._container = container;\n    } // transform\n\n\n    if (modifiedCaption || !contextImage._onlyPercentage && changeSize) {\n      if (!init && (/\\d+/.test(imageEl.style.height) || this.context.resizing._rotateVertical && contextImage._captionChecked)) {\n        if (/%$/.test(contextImage.inputX.value) || /%$/.test(contextImage.inputY.value)) {\n          this.plugins.resizing.resetTransform.call(this, imageEl);\n        } else {\n          this.plugins.resizing.setTransformSize.call(this, imageEl, this.util.getNumber(contextImage.inputX.value, 0), this.util.getNumber(contextImage.inputY.value, 0));\n        }\n      }\n    } // size\n\n\n    if (contextImage._resizing) {\n      imageEl.setAttribute('data-proportion', contextImage._proportionChecked);\n\n      if (changeSize) {\n        this.plugins.image.applySize.call(this);\n      }\n    } // align\n\n\n    this.plugins.image.setAlign.call(this, null, imageEl, null, null); // set imagesInfo\n\n    if (init) {\n      this.plugins.fileManager.setInfo.call(this, 'image', imageEl, this.functions.onImageUpload, null, true);\n    }\n\n    if (openController) {\n      this.selectComponent(imageEl, 'image');\n    } // history stack\n\n\n    if (!notHistoryPush) this.history.push(false);\n  },\n  update_src: function update_src(src, element, file) {\n    element.src = src;\n\n    this._w.setTimeout(this.plugins.fileManager.setInfo.bind(this, 'image', element, this.functions.onImageUpload, file, true));\n\n    this.selectComponent(element, 'image');\n  },\n\n  /**\n   * @Required @Override fileManager, resizing\n   */\n  onModifyMode: function onModifyMode(element, size) {\n    if (!element) return;\n    var contextImage = this.context.image;\n    contextImage._linkElement = contextImage.anchorCtx.linkAnchor = /^A$/i.test(element.parentNode.nodeName) ? element.parentNode : null;\n    contextImage._element = element;\n    contextImage._cover = this.util.getParentElement(element, 'FIGURE');\n    contextImage._container = this.util.getParentElement(element, this.util.isMediaComponent);\n    contextImage._caption = this.util.getChildElement(contextImage._cover, 'FIGCAPTION');\n    contextImage._align = element.style.float || element.getAttribute('data-align') || 'none';\n    element.style.float = '';\n    this.plugins.anchor.setCtx(contextImage._linkElement, contextImage.anchorCtx);\n\n    if (size) {\n      contextImage._element_w = size.w;\n      contextImage._element_h = size.h;\n      contextImage._element_t = size.t;\n      contextImage._element_l = size.l;\n    }\n\n    var userSize = contextImage._element.getAttribute('data-size') || contextImage._element.getAttribute('data-origin');\n\n    var w, h;\n\n    if (userSize) {\n      userSize = userSize.split(',');\n      w = userSize[0];\n      h = userSize[1];\n    } else if (size) {\n      w = size.w;\n      h = size.h;\n    }\n\n    contextImage._origin_w = w || element.style.width || element.width || '';\n    contextImage._origin_h = h || element.style.height || element.height || '';\n  },\n\n  /**\n   * @Required @Override fileManager, resizing\n   */\n  openModify: function openModify(notOpen) {\n    var contextImage = this.context.image;\n\n    if (contextImage.imgUrlFile) {\n      contextImage._v_src._linkValue = contextImage.previewSrc.textContent = contextImage.imgUrlFile.value = contextImage._element.src;\n    }\n\n    contextImage._altText = contextImage.altText.value = contextImage._element.alt;\n    (contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"][value=\"' + contextImage._align + '\"]') || contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"][value=\"none\"]')).checked = true;\n    contextImage._align = contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"]:checked').value;\n    contextImage._captionChecked = contextImage.captionCheckEl.checked = !!contextImage._caption;\n\n    if (contextImage._resizing) {\n      this.plugins.resizing._module_setModifyInputSize.call(this, contextImage, this.plugins.image);\n    }\n\n    if (!notOpen) this.plugins.dialog.open.call(this, 'image', true);\n  },\n\n  /**\n   * @Override fileManager\n   */\n  applySize: function applySize(w, h) {\n    var contextImage = this.context.image;\n    if (!w) w = contextImage.inputX.value || this.options.imageWidth;\n    if (!h) h = contextImage.inputY.value || this.options.imageHeight;\n\n    if (contextImage._onlyPercentage && !!w || /%$/.test(w)) {\n      this.plugins.image.setPercentSize.call(this, w, h);\n      return true;\n    } else if ((!w || w === 'auto') && (!h || h === 'auto')) {\n      this.plugins.image.setAutoSize.call(this);\n    } else {\n      this.plugins.image.setSize.call(this, w, h, false);\n    }\n\n    return false;\n  },\n\n  /**\n   * @Override resizing\n   */\n  sizeRevert: function sizeRevert() {\n    this.plugins.resizing._module_sizeRevert.call(this, this.context.image);\n  },\n\n  /**\n   * @Override resizing\n   */\n  setSize: function setSize(w, h, notResetPercentage, direction) {\n    var contextImage = this.context.image;\n    var onlyW = /^(rw|lw)$/.test(direction);\n    var onlyH = /^(th|bh)$/.test(direction);\n\n    if (!onlyH) {\n      contextImage._element.style.width = this.util.isNumber(w) ? w + contextImage.sizeUnit : w;\n      this.plugins.image.cancelPercentAttr.call(this);\n    }\n\n    if (!onlyW) {\n      contextImage._element.style.height = this.util.isNumber(h) ? h + contextImage.sizeUnit : /%$/.test(h) ? '' : h;\n    }\n\n    if (contextImage._align === 'center') this.plugins.image.setAlign.call(this, null, null, null, null);\n    if (!notResetPercentage) contextImage._element.removeAttribute('data-percentage'); // save current size\n\n    this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n  },\n\n  /**\n   * @Override resizing\n   */\n  setAutoSize: function setAutoSize() {\n    var contextImage = this.context.image;\n    this.plugins.resizing.resetTransform.call(this, contextImage._element);\n    this.plugins.image.cancelPercentAttr.call(this);\n    contextImage._element.style.maxWidth = '';\n    contextImage._element.style.width = '';\n    contextImage._element.style.height = '';\n    contextImage._cover.style.width = '';\n    contextImage._cover.style.height = '';\n    this.plugins.image.setAlign.call(this, null, null, null, null);\n\n    contextImage._element.setAttribute('data-percentage', 'auto,auto'); // save current size\n\n\n    this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n  },\n\n  /**\n   * @Override resizing\n   */\n  setOriginSize: function setOriginSize() {\n    var contextImage = this.context.image;\n\n    contextImage._element.removeAttribute('data-percentage');\n\n    this.plugins.resizing.resetTransform.call(this, contextImage._element);\n    this.plugins.image.cancelPercentAttr.call(this);\n    var originSize = (contextImage._element.getAttribute('data-origin') || '').split(',');\n    var w = originSize[0];\n    var h = originSize[1];\n\n    if (originSize) {\n      if (contextImage._onlyPercentage || /%$/.test(w) && (/%$/.test(h) || !/\\d/.test(h))) {\n        this.plugins.image.setPercentSize.call(this, w, h);\n      } else {\n        this.plugins.image.setSize.call(this, w, h);\n      } // save current size\n\n\n      this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n    }\n  },\n\n  /**\n   * @Override resizing\n   */\n  setPercentSize: function setPercentSize(w, h) {\n    var contextImage = this.context.image;\n    h = !!h && !/%$/.test(h) && !this.util.getNumber(h, 0) ? this.util.isNumber(h) ? h + '%' : h : this.util.isNumber(h) ? h + contextImage.sizeUnit : h || '';\n    var heightPercentage = /%$/.test(h);\n    contextImage._container.style.width = this.util.isNumber(w) ? w + '%' : w;\n    contextImage._container.style.height = '';\n    contextImage._cover.style.width = '100%';\n    contextImage._cover.style.height = !heightPercentage ? '' : h;\n    contextImage._element.style.width = '100%';\n    contextImage._element.style.height = heightPercentage ? '' : h;\n    contextImage._element.style.maxWidth = '';\n    if (contextImage._align === 'center') this.plugins.image.setAlign.call(this, null, null, null, null);\n\n    contextImage._element.setAttribute('data-percentage', w + ',' + h);\n\n    this.plugins.resizing.setCaptionPosition.call(this, contextImage._element); // save current size\n\n    this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n  },\n\n  /**\n   * @Override resizing\n   */\n  cancelPercentAttr: function cancelPercentAttr() {\n    var contextImage = this.context.image;\n    contextImage._cover.style.width = '';\n    contextImage._cover.style.height = '';\n    contextImage._container.style.width = '';\n    contextImage._container.style.height = '';\n    this.util.removeClass(contextImage._container, this.context.image._floatClassRegExp);\n    this.util.addClass(contextImage._container, '__se__float-' + contextImage._align);\n    if (contextImage._align === 'center') this.plugins.image.setAlign.call(this, null, null, null, null);\n  },\n\n  /**\n   * @Override resizing\n   */\n  setAlign: function setAlign(align, element, cover, container) {\n    var contextImage = this.context.image;\n    if (!align) align = contextImage._align;\n    if (!element) element = contextImage._element;\n    if (!cover) cover = contextImage._cover;\n    if (!container) container = contextImage._container;\n\n    if (align && align !== 'none') {\n      cover.style.margin = 'auto';\n    } else {\n      cover.style.margin = '0';\n    }\n\n    if (/%$/.test(element.style.width) && align === 'center') {\n      container.style.minWidth = '100%';\n      cover.style.width = container.style.width;\n    } else {\n      container.style.minWidth = '';\n      cover.style.width = this.context.resizing._rotateVertical ? element.style.height || element.offsetHeight : !element.style.width || element.style.width === 'auto' ? '' : element.style.width || '100%';\n    }\n\n    if (!this.util.hasClass(container, '__se__float-' + align)) {\n      this.util.removeClass(container, contextImage._floatClassRegExp);\n      this.util.addClass(container, '__se__float-' + align);\n    }\n\n    element.setAttribute('data-align', align);\n  },\n\n  /**\n   * @Override dialog\n   */\n  init: function init() {\n    var contextImage = this.context.image;\n    if (contextImage.imgInputFile) contextImage.imgInputFile.value = '';\n    if (contextImage.imgUrlFile) contextImage._v_src._linkValue = contextImage.previewSrc.textContent = contextImage.imgUrlFile.value = '';\n\n    if (contextImage.imgInputFile && contextImage.imgUrlFile) {\n      contextImage.imgUrlFile.removeAttribute('disabled');\n      contextImage.previewSrc.style.textDecoration = '';\n    }\n\n    contextImage.altText.value = '';\n    contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"][value=\"none\"]').checked = true;\n    contextImage.captionCheckEl.checked = false;\n    contextImage._element = null;\n    this.plugins.image.openTab.call(this, 'init');\n\n    if (contextImage._resizing) {\n      contextImage.inputX.value = this.options.imageWidth === contextImage._defaultSizeX ? '' : this.options.imageWidth;\n      contextImage.inputY.value = this.options.imageHeight === contextImage._defaultSizeY ? '' : this.options.imageHeight;\n      contextImage.proportion.checked = true;\n      contextImage._ratio = false;\n      contextImage._ratioX = 1;\n      contextImage._ratioY = 1;\n    }\n\n    this.plugins.anchor.init.call(this, contextImage.anchorCtx);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}