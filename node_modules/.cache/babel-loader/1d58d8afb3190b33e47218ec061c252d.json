{"ast":null,"code":"import _classCallCheck from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Project\\\\React\\\\riwasu-react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/imageuploadui\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { FileDialogButtonView } from 'ckeditor5/src/upload';\nimport { createImageTypeRegExp } from './utils';\n/**\n * The image upload button plugin.\n *\n * For a detailed overview, check the {@glink features/images/image-upload/image-upload Image upload feature} documentation.\n *\n * Adds the `'uploadImage'` button to the {@link module:ui/componentfactory~ComponentFactory UI component factory}\n * and also the `imageUpload` button as an alias for backward compatibility.\n *\n * @extends module:core/plugin~Plugin\n */\n\nvar ImageUploadUI = /*#__PURE__*/function (_Plugin) {\n  _inherits(ImageUploadUI, _Plugin);\n\n  function ImageUploadUI() {\n    _classCallCheck(this, ImageUploadUI);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ImageUploadUI).apply(this, arguments));\n  }\n\n  _createClass(ImageUploadUI, [{\n    key: \"init\",\n\n    /**\n     * @inheritDoc\n     */\n    value: function init() {\n      var editor = this.editor;\n      var t = editor.t;\n\n      var componentCreator = function componentCreator(locale) {\n        var view = new FileDialogButtonView(locale);\n        var command = editor.commands.get('uploadImage');\n        var imageTypes = editor.config.get('image.upload.types');\n        var imageTypesRegExp = createImageTypeRegExp(imageTypes);\n        view.set({\n          acceptedType: imageTypes.map(function (type) {\n            return \"image/\".concat(type);\n          }).join(','),\n          allowMultipleFiles: true\n        });\n        view.buttonView.set({\n          label: t('Insert image'),\n          icon: icons.image,\n          tooltip: true\n        });\n        view.buttonView.bind('isEnabled').to(command);\n        view.on('done', function (evt, files) {\n          var imagesToUpload = Array.from(files).filter(function (file) {\n            return imageTypesRegExp.test(file.type);\n          });\n\n          if (imagesToUpload.length) {\n            editor.execute('uploadImage', {\n              file: imagesToUpload\n            });\n          }\n        });\n        return view;\n      }; // Setup `uploadImage` button and add `imageUpload` button as an alias for backward compatibility.\n\n\n      editor.ui.componentFactory.add('uploadImage', componentCreator);\n      editor.ui.componentFactory.add('imageUpload', componentCreator);\n    }\n  }], [{\n    key: \"pluginName\",\n\n    /**\n     * @inheritDoc\n     */\n    get: function get() {\n      return 'ImageUploadUI';\n    }\n  }]);\n\n  return ImageUploadUI;\n}(Plugin);\n\nexport { ImageUploadUI as default };","map":null,"metadata":{},"sourceType":"module"}